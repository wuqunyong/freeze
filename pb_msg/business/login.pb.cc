// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace login {
class Base_CmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Base_Cmd> _instance;
} _Base_Cmd_default_instance_;
class LoginKeepAliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginKeepAlive> _instance;
} _LoginKeepAlive_default_instance_;
class KickPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickPlayer> _instance;
} _KickPlayer_default_instance_;
class UserLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLogin> _instance;
} _UserLogin_default_instance_;
class LoginC2LSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginC2LS> _instance;
} _LoginC2LS_default_instance_;
class LoginLS_RespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginLS_Resp> _instance;
} _LoginLS_Resp_default_instance_;
class LoginC2GSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginC2GS> _instance;
} _LoginC2GS_default_instance_;
class LoginGS2MSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginGS2MS> _instance;
} _LoginGS2MS_default_instance_;
class LoginMS2GSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginMS2GS> _instance;
} _LoginMS2GS_default_instance_;
}  // namespace login
}  // namespace pb
static void InitDefaultsscc_info_Base_Cmd_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_Base_Cmd_default_instance_;
    new (ptr) ::pb::login::Base_Cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::Base_Cmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Base_Cmd_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Base_Cmd_login_2eproto}, {}};

static void InitDefaultsscc_info_KickPlayer_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_KickPlayer_default_instance_;
    new (ptr) ::pb::login::KickPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::KickPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickPlayer_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KickPlayer_login_2eproto}, {}};

static void InitDefaultsscc_info_LoginC2GS_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_LoginC2GS_default_instance_;
    new (ptr) ::pb::login::LoginC2GS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::LoginC2GS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginC2GS_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginC2GS_login_2eproto}, {}};

static void InitDefaultsscc_info_LoginC2LS_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_LoginC2LS_default_instance_;
    new (ptr) ::pb::login::LoginC2LS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::LoginC2LS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginC2LS_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginC2LS_login_2eproto}, {}};

static void InitDefaultsscc_info_LoginGS2MS_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_LoginGS2MS_default_instance_;
    new (ptr) ::pb::login::LoginGS2MS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::LoginGS2MS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginGS2MS_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginGS2MS_login_2eproto}, {}};

static void InitDefaultsscc_info_LoginKeepAlive_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_LoginKeepAlive_default_instance_;
    new (ptr) ::pb::login::LoginKeepAlive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::LoginKeepAlive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginKeepAlive_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginKeepAlive_login_2eproto}, {}};

static void InitDefaultsscc_info_LoginLS_Resp_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_LoginLS_Resp_default_instance_;
    new (ptr) ::pb::login::LoginLS_Resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::LoginLS_Resp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginLS_Resp_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginLS_Resp_login_2eproto}, {}};

static void InitDefaultsscc_info_LoginMS2GS_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_LoginMS2GS_default_instance_;
    new (ptr) ::pb::login::LoginMS2GS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::LoginMS2GS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginMS2GS_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginMS2GS_login_2eproto}, {}};

static void InitDefaultsscc_info_UserLogin_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::login::_UserLogin_default_instance_;
    new (ptr) ::pb::login::UserLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::login::UserLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserLogin_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserLogin_login_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_login_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_login_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_login_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_login_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::Base_Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::Base_Cmd, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginKeepAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginKeepAlive, server_time_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginKeepAlive, s_seqid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::KickPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::KickPlayer, reason_),
  PROTOBUF_FIELD_OFFSET(::pb::login::KickPlayer, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::UserLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::UserLogin, game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::UserLogin, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::UserLogin, session_key_),
  PROTOBUF_FIELD_OFFSET(::pb::login::UserLogin, result_),
  PROTOBUF_FIELD_OFFSET(::pb::login::UserLogin, s_seqid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2LS, game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2LS, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2LS, session_key_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2LS, version_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2LS, ud_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2LS, sdk_game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, result_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, dns_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, check_out_text_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, ip_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, port_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginLS_Resp, sdk_gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, operator__),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, check_out_text_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, session_key_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, version_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, client_sign_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, client_sign2_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginC2GS, web_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, name_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, gateserver_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, global_mail_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, register_time_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, igg_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, sdk_gameid_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginGS2MS, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginMS2GS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginMS2GS, igg_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginMS2GS, game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginMS2GS, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginMS2GS, db_server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::login::LoginMS2GS, sdk_gameid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::login::Base_Cmd)},
  { 6, -1, sizeof(::pb::login::LoginKeepAlive)},
  { 13, -1, sizeof(::pb::login::KickPlayer)},
  { 20, -1, sizeof(::pb::login::UserLogin)},
  { 30, -1, sizeof(::pb::login::LoginC2LS)},
  { 41, -1, sizeof(::pb::login::LoginLS_Resp)},
  { 53, -1, sizeof(::pb::login::LoginC2GS)},
  { 67, -1, sizeof(::pb::login::LoginGS2MS)},
  { 81, -1, sizeof(::pb::login::LoginMS2GS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_Base_Cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_LoginKeepAlive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_KickPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_UserLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_LoginC2LS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_LoginLS_Resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_LoginC2GS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_LoginGS2MS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::login::_LoginMS2GS_default_instance_),
};

const char descriptor_table_protodef_login_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013login.proto\022\010pb.login\".\n\010Base_Cmd\022\"\n\003c"
  "md\030\001 \001(\0162\025.pb.login.E_Login_CMD\"6\n\016Login"
  "KeepAlive\022\023\n\013server_time\030\001 \001(\003\022\017\n\007s_seqi"
  "d\030\002 \001(\r\"F\n\nKickPlayer\022\'\n\006reason\030\001 \001(\0162\027."
  "pb.login.E_Kick_Reason\022\017\n\007user_id\030\002 \001(\003\""
  "}\n\tUserLogin\022\017\n\007game_id\030\001 \001(\r\022\017\n\007user_id"
  "\030\002 \001(\003\022\023\n\013session_key\030\003 \001(\t\022(\n\006result\030\004 "
  "\001(\0162\030.pb.login.E_Login_Result\022\017\n\007s_seqid"
  "\030\005 \001(\r\"w\n\tLoginC2LS\022\017\n\007game_id\030\001 \001(\r\022\017\n\007"
  "user_id\030\002 \001(\003\022\023\n\013session_key\030\003 \001(\t\022\017\n\007ve"
  "rsion\030\004 \001(\r\022\r\n\005ud_id\030\005 \001(\t\022\023\n\013sdk_game_i"
  "d\030\006 \001(\t\"\202\001\n\014LoginLS_Resp\022\016\n\006result\030\001 \001(\r"
  "\022\013\n\003dns\030\002 \001(\t\022\026\n\016check_out_text\030\003 \001(\t\022\n\n"
  "\002ip\030\004 \001(\t\022\014\n\004port\030\005 \001(\r\022\017\n\007user_id\030\006 \001(\003"
  "\022\022\n\nsdk_gameid\030\007 \001(\003\"\272\001\n\tLoginC2GS\022\020\n\010op"
  "erator\030\001 \001(\r\022\017\n\007user_id\030\002 \001(\003\022\026\n\016check_o"
  "ut_text\030\003 \001(\t\022\023\n\013session_key\030\004 \001(\t\022\017\n\007ve"
  "rsion\030\005 \001(\r\022\017\n\007game_id\030\006 \001(\r\022\023\n\013client_s"
  "ign\030\007 \001(\r\022\024\n\014client_sign2\030\010 \001(\r\022\020\n\010web_f"
  "lag\030\t \001(\r\"\265\001\n\nLoginGS2MS\022\014\n\004name\030\001 \001(\t\022\025"
  "\n\rgateserver_id\030\002 \001(\r\022\026\n\016global_mail_id\030"
  "\003 \001(\r\022\025\n\rregister_time\030\004 \001(\003\022\017\n\007user_id\030"
  "\005 \001(\003\022\016\n\006igg_id\030\006 \001(\003\022\017\n\007game_id\030\007 \001(\r\022\022"
  "\n\nsdk_gameid\030\010 \001(\003\022\r\n\005state\030\t \001(\t\"h\n\nLog"
  "inMS2GS\022\016\n\006igg_id\030\001 \001(\003\022\017\n\007game_id\030\002 \001(\r"
  "\022\017\n\007user_id\030\003 \001(\003\022\024\n\014db_server_id\030\004 \001(\005\022"
  "\022\n\nsdk_gameid\030\005 \001(\003*\217\002\n\016E_Login_Result\022\010"
  "\n\004Succ\020\000\022\021\n\rError_Version\020\001\022\r\n\tNot_Allow"
  "\020\002\022\024\n\020Error_UserIdData\020\003\022\021\n\rNo_GateServe"
  "r\020\004\022\023\n\017GateServer_Full\020\005\022\022\n\016Http_AuthErr"
  "or\020\006\022\016\n\nResult_Ban\020\007\022\026\n\022NotFoundReloginK"
  "ey\020\010\022\026\n\022Invalid_ReloginKey\020\t\022\026\n\022ReloginK"
  "ey_Timeout\020\n\022\021\n\rNo_GameServer\020\013\022\024\n\020Serve"
  "r_Maintance\020\014*<\n\rE_Kick_Reason\022\020\n\014Repeat"
  "_Login\020\000\022\007\n\003Ban\020\001\022\020\n\014Seq_Mismatch\020\002*l\n\013E"
  "_Login_CMD\022\t\n\005Login\020\000\022\n\n\006Logout\020\001\022\r\n\tKee"
  "pAlive\020\002\022\020\n\014LoginResp_MS\020\003\022\010\n\004Kick\020\004\022\013\n\007"
  "ReLogin\020\005\022\016\n\nReLoginKey\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_login_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_login_2eproto_sccs[9] = {
  &scc_info_Base_Cmd_login_2eproto.base,
  &scc_info_KickPlayer_login_2eproto.base,
  &scc_info_LoginC2GS_login_2eproto.base,
  &scc_info_LoginC2LS_login_2eproto.base,
  &scc_info_LoginGS2MS_login_2eproto.base,
  &scc_info_LoginKeepAlive_login_2eproto.base,
  &scc_info_LoginLS_Resp_login_2eproto.base,
  &scc_info_LoginMS2GS_login_2eproto.base,
  &scc_info_UserLogin_login_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_login_2eproto_once;
static bool descriptor_table_login_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto = {
  &descriptor_table_login_2eproto_initialized, descriptor_table_protodef_login_2eproto, "login.proto", 1513,
  &descriptor_table_login_2eproto_once, descriptor_table_login_2eproto_sccs, descriptor_table_login_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_login_2eproto::offsets,
  file_level_metadata_login_2eproto, 9, file_level_enum_descriptors_login_2eproto, file_level_service_descriptors_login_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_login_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_login_2eproto), true);
namespace pb {
namespace login {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Login_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_login_2eproto);
  return file_level_enum_descriptors_login_2eproto[0];
}
bool E_Login_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Kick_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_login_2eproto);
  return file_level_enum_descriptors_login_2eproto[1];
}
bool E_Kick_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Login_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_login_2eproto);
  return file_level_enum_descriptors_login_2eproto[2];
}
bool E_Login_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Base_Cmd::InitAsDefaultInstance() {
}
class Base_Cmd::_Internal {
 public:
};

Base_Cmd::Base_Cmd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.Base_Cmd)
}
Base_Cmd::Base_Cmd(const Base_Cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.login.Base_Cmd)
}

void Base_Cmd::SharedCtor() {
  cmd_ = 0;
}

Base_Cmd::~Base_Cmd() {
  // @@protoc_insertion_point(destructor:pb.login.Base_Cmd)
  SharedDtor();
}

void Base_Cmd::SharedDtor() {
}

void Base_Cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Base_Cmd& Base_Cmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Base_Cmd_login_2eproto.base);
  return *internal_default_instance();
}


void Base_Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.Base_Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 0;
  _internal_metadata_.Clear();
}

const char* Base_Cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.login.E_Login_CMD cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::login::E_Login_CMD>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Base_Cmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.Base_Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.login.E_Login_CMD cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.Base_Cmd)
  return target;
}

size_t Base_Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.Base_Cmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.login.E_Login_CMD cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Base_Cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.Base_Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const Base_Cmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Base_Cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.Base_Cmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.Base_Cmd)
    MergeFrom(*source);
  }
}

void Base_Cmd::MergeFrom(const Base_Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.Base_Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void Base_Cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.Base_Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base_Cmd::CopyFrom(const Base_Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.Base_Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base_Cmd::IsInitialized() const {
  return true;
}

void Base_Cmd::InternalSwap(Base_Cmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Base_Cmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginKeepAlive::InitAsDefaultInstance() {
}
class LoginKeepAlive::_Internal {
 public:
};

LoginKeepAlive::LoginKeepAlive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.LoginKeepAlive)
}
LoginKeepAlive::LoginKeepAlive(const LoginKeepAlive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_seqid_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(s_seqid_));
  // @@protoc_insertion_point(copy_constructor:pb.login.LoginKeepAlive)
}

void LoginKeepAlive::SharedCtor() {
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_seqid_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(s_seqid_));
}

LoginKeepAlive::~LoginKeepAlive() {
  // @@protoc_insertion_point(destructor:pb.login.LoginKeepAlive)
  SharedDtor();
}

void LoginKeepAlive::SharedDtor() {
}

void LoginKeepAlive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginKeepAlive& LoginKeepAlive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginKeepAlive_login_2eproto.base);
  return *internal_default_instance();
}


void LoginKeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.LoginKeepAlive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_seqid_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(s_seqid_));
  _internal_metadata_.Clear();
}

const char* LoginKeepAlive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s_seqid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s_seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginKeepAlive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.LoginKeepAlive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_time = 1;
  if (this->server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_server_time(), target);
  }

  // uint32 s_seqid = 2;
  if (this->s_seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s_seqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.LoginKeepAlive)
  return target;
}

size_t LoginKeepAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.LoginKeepAlive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 server_time = 1;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_time());
  }

  // uint32 s_seqid = 2;
  if (this->s_seqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s_seqid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginKeepAlive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.LoginKeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginKeepAlive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginKeepAlive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.LoginKeepAlive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.LoginKeepAlive)
    MergeFrom(*source);
  }
}

void LoginKeepAlive::MergeFrom(const LoginKeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.LoginKeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  if (from.s_seqid() != 0) {
    _internal_set_s_seqid(from._internal_s_seqid());
  }
}

void LoginKeepAlive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.LoginKeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginKeepAlive::CopyFrom(const LoginKeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.LoginKeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginKeepAlive::IsInitialized() const {
  return true;
}

void LoginKeepAlive::InternalSwap(LoginKeepAlive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_time_, other->server_time_);
  swap(s_seqid_, other->s_seqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginKeepAlive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickPlayer::InitAsDefaultInstance() {
}
class KickPlayer::_Internal {
 public:
};

KickPlayer::KickPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.KickPlayer)
}
KickPlayer::KickPlayer(const KickPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:pb.login.KickPlayer)
}

void KickPlayer::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
}

KickPlayer::~KickPlayer() {
  // @@protoc_insertion_point(destructor:pb.login.KickPlayer)
  SharedDtor();
}

void KickPlayer::SharedDtor() {
}

void KickPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickPlayer& KickPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickPlayer_login_2eproto.base);
  return *internal_default_instance();
}


void KickPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.KickPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

const char* KickPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.login.E_Kick_Reason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::pb::login::E_Kick_Reason>(val));
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.KickPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.login.E_Kick_Reason reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.KickPlayer)
  return target;
}

size_t KickPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.KickPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // .pb.login.E_Kick_Reason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.KickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const KickPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.KickPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.KickPlayer)
    MergeFrom(*source);
  }
}

void KickPlayer::MergeFrom(const KickPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.KickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void KickPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.KickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayer::CopyFrom(const KickPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.KickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayer::IsInitialized() const {
  return true;
}

void KickPlayer::InternalSwap(KickPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserLogin::InitAsDefaultInstance() {
}
class UserLogin::_Internal {
 public:
};

UserLogin::UserLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.UserLogin)
}
UserLogin::UserLogin(const UserLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key().empty()) {
    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_seqid_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(s_seqid_));
  // @@protoc_insertion_point(copy_constructor:pb.login.UserLogin)
}

void UserLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserLogin_login_2eproto.base);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_seqid_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(s_seqid_));
}

UserLogin::~UserLogin() {
  // @@protoc_insertion_point(destructor:pb.login.UserLogin)
  SharedDtor();
}

void UserLogin::SharedDtor() {
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLogin& UserLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLogin_login_2eproto.base);
  return *internal_default_instance();
}


void UserLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.UserLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_seqid_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(s_seqid_));
  _internal_metadata_.Clear();
}

const char* UserLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.UserLogin.session_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.login.E_Login_Result result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pb::login::E_Login_Result>(val));
        } else goto handle_unusual;
        continue;
      // uint32 s_seqid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s_seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.UserLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_id(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string session_key = 3;
  if (this->session_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.UserLogin.session_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_key(), target);
  }

  // .pb.login.E_Login_Result result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // uint32 s_seqid = 5;
  if (this->s_seqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s_seqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.UserLogin)
  return target;
}

size_t UserLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.UserLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_key = 3;
  if (this->session_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_id());
  }

  // .pb.login.E_Login_Result result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // uint32 s_seqid = 5;
  if (this->s_seqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s_seqid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.UserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.UserLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.UserLogin)
    MergeFrom(*source);
  }
}

void UserLogin::MergeFrom(const UserLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.UserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_key().size() > 0) {

    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.s_seqid() != 0) {
    _internal_set_s_seqid(from._internal_s_seqid());
  }
}

void UserLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.UserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin::CopyFrom(const UserLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.UserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin::IsInitialized() const {
  return true;
}

void UserLogin::InternalSwap(UserLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_key_.Swap(&other->session_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(game_id_, other->game_id_);
  swap(result_, other->result_);
  swap(s_seqid_, other->s_seqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginC2LS::InitAsDefaultInstance() {
}
class LoginC2LS::_Internal {
 public:
};

LoginC2LS::LoginC2LS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.LoginC2LS)
}
LoginC2LS::LoginC2LS(const LoginC2LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key().empty()) {
    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  ud_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ud_id().empty()) {
    ud_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ud_id_);
  }
  sdk_game_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_game_id().empty()) {
    sdk_game_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdk_game_id_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:pb.login.LoginC2LS)
}

void LoginC2LS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginC2LS_login_2eproto.base);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ud_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_game_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(version_));
}

LoginC2LS::~LoginC2LS() {
  // @@protoc_insertion_point(destructor:pb.login.LoginC2LS)
  SharedDtor();
}

void LoginC2LS::SharedDtor() {
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ud_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_game_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginC2LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginC2LS& LoginC2LS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginC2LS_login_2eproto.base);
  return *internal_default_instance();
}


void LoginC2LS::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.LoginC2LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ud_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_game_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

const char* LoginC2LS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginC2LS.session_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ud_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ud_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginC2LS.ud_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdk_game_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sdk_game_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginC2LS.sdk_game_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginC2LS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.LoginC2LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_id(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string session_key = 3;
  if (this->session_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginC2LS.session_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_key(), target);
  }

  // uint32 version = 4;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // string ud_id = 5;
  if (this->ud_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ud_id().data(), static_cast<int>(this->_internal_ud_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginC2LS.ud_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ud_id(), target);
  }

  // string sdk_game_id = 6;
  if (this->sdk_game_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_game_id().data(), static_cast<int>(this->_internal_sdk_game_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginC2LS.sdk_game_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sdk_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.LoginC2LS)
  return target;
}

size_t LoginC2LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.LoginC2LS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_key = 3;
  if (this->session_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  // string ud_id = 5;
  if (this->ud_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ud_id());
  }

  // string sdk_game_id = 6;
  if (this->sdk_game_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_game_id());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_id());
  }

  // uint32 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginC2LS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.LoginC2LS)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginC2LS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginC2LS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.LoginC2LS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.LoginC2LS)
    MergeFrom(*source);
  }
}

void LoginC2LS::MergeFrom(const LoginC2LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.LoginC2LS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_key().size() > 0) {

    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  if (from.ud_id().size() > 0) {

    ud_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ud_id_);
  }
  if (from.sdk_game_id().size() > 0) {

    sdk_game_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdk_game_id_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void LoginC2LS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.LoginC2LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginC2LS::CopyFrom(const LoginC2LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.LoginC2LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginC2LS::IsInitialized() const {
  return true;
}

void LoginC2LS::InternalSwap(LoginC2LS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_key_.Swap(&other->session_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ud_id_.Swap(&other->ud_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sdk_game_id_.Swap(&other->sdk_game_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(game_id_, other->game_id_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginC2LS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginLS_Resp::InitAsDefaultInstance() {
}
class LoginLS_Resp::_Internal {
 public:
};

LoginLS_Resp::LoginLS_Resp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.LoginLS_Resp)
}
LoginLS_Resp::LoginLS_Resp(const LoginLS_Resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dns().empty()) {
    dns_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dns_);
  }
  check_out_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_check_out_text().empty()) {
    check_out_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.check_out_text_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&sdk_gameid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(sdk_gameid_));
  // @@protoc_insertion_point(copy_constructor:pb.login.LoginLS_Resp)
}

void LoginLS_Resp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginLS_Resp_login_2eproto.base);
  dns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_out_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdk_gameid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sdk_gameid_));
}

LoginLS_Resp::~LoginLS_Resp() {
  // @@protoc_insertion_point(destructor:pb.login.LoginLS_Resp)
  SharedDtor();
}

void LoginLS_Resp::SharedDtor() {
  dns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_out_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginLS_Resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginLS_Resp& LoginLS_Resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginLS_Resp_login_2eproto.base);
  return *internal_default_instance();
}


void LoginLS_Resp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.LoginLS_Resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dns_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_out_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdk_gameid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sdk_gameid_));
  _internal_metadata_.Clear();
}

const char* LoginLS_Resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginLS_Resp.dns"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string check_out_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_check_out_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginLS_Resp.check_out_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginLS_Resp.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sdk_gameid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sdk_gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginLS_Resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.LoginLS_Resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // string dns = 2;
  if (this->dns().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dns().data(), static_cast<int>(this->_internal_dns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginLS_Resp.dns");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dns(), target);
  }

  // string check_out_text = 3;
  if (this->check_out_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_out_text().data(), static_cast<int>(this->_internal_check_out_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginLS_Resp.check_out_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_check_out_text(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginLS_Resp.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port(), target);
  }

  // int64 user_id = 6;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_user_id(), target);
  }

  // int64 sdk_gameid = 7;
  if (this->sdk_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_sdk_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.LoginLS_Resp)
  return target;
}

size_t LoginLS_Resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.LoginLS_Resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dns = 2;
  if (this->dns().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dns());
  }

  // string check_out_text = 3;
  if (this->check_out_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_out_text());
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // int64 user_id = 6;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int64 sdk_gameid = 7;
  if (this->sdk_gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sdk_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginLS_Resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.LoginLS_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginLS_Resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginLS_Resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.LoginLS_Resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.LoginLS_Resp)
    MergeFrom(*source);
  }
}

void LoginLS_Resp::MergeFrom(const LoginLS_Resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.LoginLS_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dns().size() > 0) {

    dns_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dns_);
  }
  if (from.check_out_text().size() > 0) {

    check_out_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.check_out_text_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.sdk_gameid() != 0) {
    _internal_set_sdk_gameid(from._internal_sdk_gameid());
  }
}

void LoginLS_Resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.LoginLS_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginLS_Resp::CopyFrom(const LoginLS_Resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.LoginLS_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLS_Resp::IsInitialized() const {
  return true;
}

void LoginLS_Resp::InternalSwap(LoginLS_Resp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dns_.Swap(&other->dns_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  check_out_text_.Swap(&other->check_out_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(port_, other->port_);
  swap(user_id_, other->user_id_);
  swap(sdk_gameid_, other->sdk_gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginLS_Resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginC2GS::InitAsDefaultInstance() {
}
class LoginC2GS::_Internal {
 public:
};

LoginC2GS::LoginC2GS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.LoginC2GS)
}
LoginC2GS::LoginC2GS(const LoginC2GS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  check_out_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_check_out_text().empty()) {
    check_out_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.check_out_text_);
  }
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key().empty()) {
    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&web_flag_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(web_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.login.LoginC2GS)
}

void LoginC2GS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginC2GS_login_2eproto.base);
  check_out_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&web_flag_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(web_flag_));
}

LoginC2GS::~LoginC2GS() {
  // @@protoc_insertion_point(destructor:pb.login.LoginC2GS)
  SharedDtor();
}

void LoginC2GS::SharedDtor() {
  check_out_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginC2GS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginC2GS& LoginC2GS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginC2GS_login_2eproto.base);
  return *internal_default_instance();
}


void LoginC2GS::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.LoginC2GS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_out_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&web_flag_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(web_flag_));
  _internal_metadata_.Clear();
}

const char* LoginC2GS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 operator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string check_out_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_check_out_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginC2GS.check_out_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginC2GS.session_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 client_sign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          client_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 client_sign2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          client_sign2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 web_flag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          web_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginC2GS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.LoginC2GS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 operator = 1;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_operator_(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string check_out_text = 3;
  if (this->check_out_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_out_text().data(), static_cast<int>(this->_internal_check_out_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginC2GS.check_out_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_check_out_text(), target);
  }

  // string session_key = 4;
  if (this->session_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginC2GS.session_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_key(), target);
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_version(), target);
  }

  // uint32 game_id = 6;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_game_id(), target);
  }

  // uint32 client_sign = 7;
  if (this->client_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_sign(), target);
  }

  // uint32 client_sign2 = 8;
  if (this->client_sign2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_client_sign2(), target);
  }

  // uint32 web_flag = 9;
  if (this->web_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_web_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.LoginC2GS)
  return target;
}

size_t LoginC2GS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.LoginC2GS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string check_out_text = 3;
  if (this->check_out_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_out_text());
  }

  // string session_key = 4;
  if (this->session_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // uint32 operator = 1;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operator_());
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 game_id = 6;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_id());
  }

  // uint32 client_sign = 7;
  if (this->client_sign() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_sign());
  }

  // uint32 client_sign2 = 8;
  if (this->client_sign2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_sign2());
  }

  // uint32 web_flag = 9;
  if (this->web_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_web_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginC2GS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.LoginC2GS)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginC2GS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginC2GS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.LoginC2GS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.LoginC2GS)
    MergeFrom(*source);
  }
}

void LoginC2GS::MergeFrom(const LoginC2GS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.LoginC2GS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.check_out_text().size() > 0) {

    check_out_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.check_out_text_);
  }
  if (from.session_key().size() > 0) {

    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.client_sign() != 0) {
    _internal_set_client_sign(from._internal_client_sign());
  }
  if (from.client_sign2() != 0) {
    _internal_set_client_sign2(from._internal_client_sign2());
  }
  if (from.web_flag() != 0) {
    _internal_set_web_flag(from._internal_web_flag());
  }
}

void LoginC2GS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.LoginC2GS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginC2GS::CopyFrom(const LoginC2GS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.LoginC2GS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginC2GS::IsInitialized() const {
  return true;
}

void LoginC2GS::InternalSwap(LoginC2GS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  check_out_text_.Swap(&other->check_out_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_key_.Swap(&other->session_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(operator__, other->operator__);
  swap(version_, other->version_);
  swap(game_id_, other->game_id_);
  swap(client_sign_, other->client_sign_);
  swap(client_sign2_, other->client_sign2_);
  swap(web_flag_, other->web_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginC2GS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginGS2MS::InitAsDefaultInstance() {
}
class LoginGS2MS::_Internal {
 public:
};

LoginGS2MS::LoginGS2MS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.LoginGS2MS)
}
LoginGS2MS::LoginGS2MS(const LoginGS2MS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  ::memcpy(&gateserver_id_, &from.gateserver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&gateserver_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:pb.login.LoginGS2MS)
}

void LoginGS2MS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginGS2MS_login_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gateserver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&gateserver_id_)) + sizeof(game_id_));
}

LoginGS2MS::~LoginGS2MS() {
  // @@protoc_insertion_point(destructor:pb.login.LoginGS2MS)
  SharedDtor();
}

void LoginGS2MS::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginGS2MS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginGS2MS& LoginGS2MS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginGS2MS_login_2eproto.base);
  return *internal_default_instance();
}


void LoginGS2MS::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.LoginGS2MS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gateserver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&gateserver_id_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

const char* LoginGS2MS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginGS2MS.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gateserver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gateserver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 global_mail_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          global_mail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 register_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          register_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 igg_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          igg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sdk_gameid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          sdk_gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.login.LoginGS2MS.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginGS2MS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.LoginGS2MS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginGS2MS.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 gateserver_id = 2;
  if (this->gateserver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gateserver_id(), target);
  }

  // uint32 global_mail_id = 3;
  if (this->global_mail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_global_mail_id(), target);
  }

  // int64 register_time = 4;
  if (this->register_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_register_time(), target);
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_id(), target);
  }

  // int64 igg_id = 6;
  if (this->igg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_igg_id(), target);
  }

  // uint32 game_id = 7;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_game_id(), target);
  }

  // int64 sdk_gameid = 8;
  if (this->sdk_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_sdk_gameid(), target);
  }

  // string state = 9;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.login.LoginGS2MS.state");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.LoginGS2MS)
  return target;
}

size_t LoginGS2MS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.LoginGS2MS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string state = 9;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // uint32 gateserver_id = 2;
  if (this->gateserver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gateserver_id());
  }

  // uint32 global_mail_id = 3;
  if (this->global_mail_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_global_mail_id());
  }

  // int64 register_time = 4;
  if (this->register_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_register_time());
  }

  // int64 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int64 igg_id = 6;
  if (this->igg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_igg_id());
  }

  // int64 sdk_gameid = 8;
  if (this->sdk_gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sdk_gameid());
  }

  // uint32 game_id = 7;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginGS2MS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.LoginGS2MS)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginGS2MS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginGS2MS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.LoginGS2MS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.LoginGS2MS)
    MergeFrom(*source);
  }
}

void LoginGS2MS::MergeFrom(const LoginGS2MS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.LoginGS2MS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.gateserver_id() != 0) {
    _internal_set_gateserver_id(from._internal_gateserver_id());
  }
  if (from.global_mail_id() != 0) {
    _internal_set_global_mail_id(from._internal_global_mail_id());
  }
  if (from.register_time() != 0) {
    _internal_set_register_time(from._internal_register_time());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.igg_id() != 0) {
    _internal_set_igg_id(from._internal_igg_id());
  }
  if (from.sdk_gameid() != 0) {
    _internal_set_sdk_gameid(from._internal_sdk_gameid());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void LoginGS2MS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.LoginGS2MS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginGS2MS::CopyFrom(const LoginGS2MS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.LoginGS2MS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginGS2MS::IsInitialized() const {
  return true;
}

void LoginGS2MS::InternalSwap(LoginGS2MS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gateserver_id_, other->gateserver_id_);
  swap(global_mail_id_, other->global_mail_id_);
  swap(register_time_, other->register_time_);
  swap(user_id_, other->user_id_);
  swap(igg_id_, other->igg_id_);
  swap(sdk_gameid_, other->sdk_gameid_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginGS2MS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginMS2GS::InitAsDefaultInstance() {
}
class LoginMS2GS::_Internal {
 public:
};

LoginMS2GS::LoginMS2GS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.login.LoginMS2GS)
}
LoginMS2GS::LoginMS2GS(const LoginMS2GS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&igg_id_, &from.igg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sdk_gameid_) -
    reinterpret_cast<char*>(&igg_id_)) + sizeof(sdk_gameid_));
  // @@protoc_insertion_point(copy_constructor:pb.login.LoginMS2GS)
}

void LoginMS2GS::SharedCtor() {
  ::memset(&igg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdk_gameid_) -
      reinterpret_cast<char*>(&igg_id_)) + sizeof(sdk_gameid_));
}

LoginMS2GS::~LoginMS2GS() {
  // @@protoc_insertion_point(destructor:pb.login.LoginMS2GS)
  SharedDtor();
}

void LoginMS2GS::SharedDtor() {
}

void LoginMS2GS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginMS2GS& LoginMS2GS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginMS2GS_login_2eproto.base);
  return *internal_default_instance();
}


void LoginMS2GS::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.login.LoginMS2GS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&igg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdk_gameid_) -
      reinterpret_cast<char*>(&igg_id_)) + sizeof(sdk_gameid_));
  _internal_metadata_.Clear();
}

const char* LoginMS2GS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 igg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          igg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 db_server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          db_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sdk_gameid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sdk_gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginMS2GS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.login.LoginMS2GS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 igg_id = 1;
  if (this->igg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_igg_id(), target);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_id(), target);
  }

  // int64 user_id = 3;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_user_id(), target);
  }

  // int32 db_server_id = 4;
  if (this->db_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_db_server_id(), target);
  }

  // int64 sdk_gameid = 5;
  if (this->sdk_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_sdk_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.login.LoginMS2GS)
  return target;
}

size_t LoginMS2GS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.login.LoginMS2GS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 igg_id = 1;
  if (this->igg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_igg_id());
  }

  // int64 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_id());
  }

  // int32 db_server_id = 4;
  if (this->db_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_db_server_id());
  }

  // int64 sdk_gameid = 5;
  if (this->sdk_gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sdk_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginMS2GS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.login.LoginMS2GS)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginMS2GS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginMS2GS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.login.LoginMS2GS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.login.LoginMS2GS)
    MergeFrom(*source);
  }
}

void LoginMS2GS::MergeFrom(const LoginMS2GS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.login.LoginMS2GS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.igg_id() != 0) {
    _internal_set_igg_id(from._internal_igg_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.db_server_id() != 0) {
    _internal_set_db_server_id(from._internal_db_server_id());
  }
  if (from.sdk_gameid() != 0) {
    _internal_set_sdk_gameid(from._internal_sdk_gameid());
  }
}

void LoginMS2GS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.login.LoginMS2GS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginMS2GS::CopyFrom(const LoginMS2GS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.login.LoginMS2GS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginMS2GS::IsInitialized() const {
  return true;
}

void LoginMS2GS::InternalSwap(LoginMS2GS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(igg_id_, other->igg_id_);
  swap(user_id_, other->user_id_);
  swap(game_id_, other->game_id_);
  swap(db_server_id_, other->db_server_id_);
  swap(sdk_gameid_, other->sdk_gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginMS2GS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace login
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::login::Base_Cmd* Arena::CreateMaybeMessage< ::pb::login::Base_Cmd >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::Base_Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::LoginKeepAlive* Arena::CreateMaybeMessage< ::pb::login::LoginKeepAlive >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::LoginKeepAlive >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::KickPlayer* Arena::CreateMaybeMessage< ::pb::login::KickPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::KickPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::UserLogin* Arena::CreateMaybeMessage< ::pb::login::UserLogin >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::UserLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::LoginC2LS* Arena::CreateMaybeMessage< ::pb::login::LoginC2LS >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::LoginC2LS >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::LoginLS_Resp* Arena::CreateMaybeMessage< ::pb::login::LoginLS_Resp >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::LoginLS_Resp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::LoginC2GS* Arena::CreateMaybeMessage< ::pb::login::LoginC2GS >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::LoginC2GS >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::LoginGS2MS* Arena::CreateMaybeMessage< ::pb::login::LoginGS2MS >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::LoginGS2MS >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::login::LoginMS2GS* Arena::CreateMaybeMessage< ::pb::login::LoginMS2GS >(Arena* arena) {
  return Arena::CreateInternal< ::pb::login::LoginMS2GS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
