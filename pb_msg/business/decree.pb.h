// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_decree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_decree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_decree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_decree_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_decree_2eproto;
namespace pb {
namespace decree {
class decree_buy;
struct decree_buyDefaultTypeInternal;
extern decree_buyDefaultTypeInternal _decree_buy_default_instance_;
class decree_reflush;
struct decree_reflushDefaultTypeInternal;
extern decree_reflushDefaultTypeInternal _decree_reflush_default_instance_;
}  // namespace decree
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::decree::decree_buy* Arena::CreateMaybeMessage<::pb::decree::decree_buy>(Arena*);
template<> ::pb::decree::decree_reflush* Arena::CreateMaybeMessage<::pb::decree::decree_reflush>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace decree {

enum E_decree_cmd : int {
  E_decree_cmd_None = 0,
  E_decree_cmd_Buy = 1,
  E_decree_cmd_reflush_time = 2,
  E_decree_cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_decree_cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_decree_cmd_IsValid(int value);
constexpr E_decree_cmd E_decree_cmd_MIN = E_decree_cmd_None;
constexpr E_decree_cmd E_decree_cmd_MAX = E_decree_cmd_reflush_time;
constexpr int E_decree_cmd_ARRAYSIZE = E_decree_cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_decree_cmd_descriptor();
template<typename T>
inline const std::string& E_decree_cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_decree_cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_decree_cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_decree_cmd_descriptor(), enum_t_value);
}
inline bool E_decree_cmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_decree_cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_decree_cmd>(
    E_decree_cmd_descriptor(), name, value);
}
// ===================================================================

class decree_buy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.decree.decree_buy) */ {
 public:
  inline decree_buy() : decree_buy(nullptr) {}
  ~decree_buy() override;
  explicit PROTOBUF_CONSTEXPR decree_buy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decree_buy(const decree_buy& from);
  decree_buy(decree_buy&& from) noexcept
    : decree_buy() {
    *this = ::std::move(from);
  }

  inline decree_buy& operator=(const decree_buy& from) {
    CopyFrom(from);
    return *this;
  }
  inline decree_buy& operator=(decree_buy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decree_buy& default_instance() {
    return *internal_default_instance();
  }
  static inline const decree_buy* internal_default_instance() {
    return reinterpret_cast<const decree_buy*>(
               &_decree_buy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(decree_buy& a, decree_buy& b) {
    a.Swap(&b);
  }
  inline void Swap(decree_buy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decree_buy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  decree_buy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<decree_buy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decree_buy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const decree_buy& from) {
    decree_buy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decree_buy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.decree.decree_buy";
  }
  protected:
  explicit decree_buy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
    kGetCountFieldNumber = 2,
  };
  // uint32 error_code = 1;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // uint32 get_count = 2;
  void clear_get_count();
  uint32_t get_count() const;
  void set_get_count(uint32_t value);
  private:
  uint32_t _internal_get_count() const;
  void _internal_set_get_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.decree.decree_buy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t error_code_;
    uint32_t get_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decree_2eproto;
};
// -------------------------------------------------------------------

class decree_reflush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.decree.decree_reflush) */ {
 public:
  inline decree_reflush() : decree_reflush(nullptr) {}
  ~decree_reflush() override;
  explicit PROTOBUF_CONSTEXPR decree_reflush(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decree_reflush(const decree_reflush& from);
  decree_reflush(decree_reflush&& from) noexcept
    : decree_reflush() {
    *this = ::std::move(from);
  }

  inline decree_reflush& operator=(const decree_reflush& from) {
    CopyFrom(from);
    return *this;
  }
  inline decree_reflush& operator=(decree_reflush&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decree_reflush& default_instance() {
    return *internal_default_instance();
  }
  static inline const decree_reflush* internal_default_instance() {
    return reinterpret_cast<const decree_reflush*>(
               &_decree_reflush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(decree_reflush& a, decree_reflush& b) {
    a.Swap(&b);
  }
  inline void Swap(decree_reflush* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decree_reflush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  decree_reflush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<decree_reflush>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decree_reflush& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const decree_reflush& from) {
    decree_reflush::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decree_reflush* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.decree.decree_reflush";
  }
  protected:
  explicit decree_reflush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextTimeFieldNumber = 1,
    kCurCountFieldNumber = 2,
  };
  // uint64 next_time = 1;
  void clear_next_time();
  uint64_t next_time() const;
  void set_next_time(uint64_t value);
  private:
  uint64_t _internal_next_time() const;
  void _internal_set_next_time(uint64_t value);
  public:

  // uint32 cur_count = 2;
  void clear_cur_count();
  uint32_t cur_count() const;
  void set_cur_count(uint32_t value);
  private:
  uint32_t _internal_cur_count() const;
  void _internal_set_cur_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.decree.decree_reflush)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t next_time_;
    uint32_t cur_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// decree_buy

// uint32 error_code = 1;
inline void decree_buy::clear_error_code() {
  _impl_.error_code_ = 0u;
}
inline uint32_t decree_buy::_internal_error_code() const {
  return _impl_.error_code_;
}
inline uint32_t decree_buy::error_code() const {
  // @@protoc_insertion_point(field_get:pb.decree.decree_buy.error_code)
  return _internal_error_code();
}
inline void decree_buy::_internal_set_error_code(uint32_t value) {
  
  _impl_.error_code_ = value;
}
inline void decree_buy::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.decree.decree_buy.error_code)
}

// uint32 get_count = 2;
inline void decree_buy::clear_get_count() {
  _impl_.get_count_ = 0u;
}
inline uint32_t decree_buy::_internal_get_count() const {
  return _impl_.get_count_;
}
inline uint32_t decree_buy::get_count() const {
  // @@protoc_insertion_point(field_get:pb.decree.decree_buy.get_count)
  return _internal_get_count();
}
inline void decree_buy::_internal_set_get_count(uint32_t value) {
  
  _impl_.get_count_ = value;
}
inline void decree_buy::set_get_count(uint32_t value) {
  _internal_set_get_count(value);
  // @@protoc_insertion_point(field_set:pb.decree.decree_buy.get_count)
}

// -------------------------------------------------------------------

// decree_reflush

// uint64 next_time = 1;
inline void decree_reflush::clear_next_time() {
  _impl_.next_time_ = uint64_t{0u};
}
inline uint64_t decree_reflush::_internal_next_time() const {
  return _impl_.next_time_;
}
inline uint64_t decree_reflush::next_time() const {
  // @@protoc_insertion_point(field_get:pb.decree.decree_reflush.next_time)
  return _internal_next_time();
}
inline void decree_reflush::_internal_set_next_time(uint64_t value) {
  
  _impl_.next_time_ = value;
}
inline void decree_reflush::set_next_time(uint64_t value) {
  _internal_set_next_time(value);
  // @@protoc_insertion_point(field_set:pb.decree.decree_reflush.next_time)
}

// uint32 cur_count = 2;
inline void decree_reflush::clear_cur_count() {
  _impl_.cur_count_ = 0u;
}
inline uint32_t decree_reflush::_internal_cur_count() const {
  return _impl_.cur_count_;
}
inline uint32_t decree_reflush::cur_count() const {
  // @@protoc_insertion_point(field_get:pb.decree.decree_reflush.cur_count)
  return _internal_cur_count();
}
inline void decree_reflush::_internal_set_cur_count(uint32_t value) {
  
  _impl_.cur_count_ = value;
}
inline void decree_reflush::set_cur_count(uint32_t value) {
  _internal_set_cur_count(value);
  // @@protoc_insertion_point(field_set:pb.decree.decree_reflush.cur_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace decree
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::decree::E_decree_cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::decree::E_decree_cmd>() {
  return ::pb::decree::E_decree_cmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_decree_2eproto
