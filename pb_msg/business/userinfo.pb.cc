// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

#include "userinfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_userinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoviceField_userinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchInfo_userinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserData_userinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_userinfo_2eproto;
namespace pb {
namespace userinfo {
class UserDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserData> _instance;
} _UserData_default_instance_;
class AsyncUserDatasReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsyncUserDatasReq> _instance;
} _AsyncUserDatasReq_default_instance_;
class AsyncUserDatasRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsyncUserDatasResp> _instance;
} _AsyncUserDatasResp_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class UserInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoReq> _instance;
} _UserInfoReq_default_instance_;
class UserInfoRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoResp> _instance;
} _UserInfoResp_default_instance_;
class SearchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchInfo> _instance;
} _SearchInfo_default_instance_;
class SearchByIdReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchByIdReq> _instance;
} _SearchByIdReq_default_instance_;
class SearchByNameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchByNameReq> _instance;
} _SearchByNameReq_default_instance_;
class SearchRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResp> _instance;
} _SearchResp_default_instance_;
class NewUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewUser> _instance;
} _NewUser_default_instance_;
class NoviceFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoviceField> _instance;
} _NoviceField_default_instance_;
class RespNoviceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RespNoviceData> _instance;
} _RespNoviceData_default_instance_;
}  // namespace userinfo
}  // namespace pb
static void InitDefaultsscc_info_AsyncUserDatasReq_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_AsyncUserDatasReq_default_instance_;
    new (ptr) ::pb::userinfo::AsyncUserDatasReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::AsyncUserDatasReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsyncUserDatasReq_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsyncUserDatasReq_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_AsyncUserDatasResp_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_AsyncUserDatasResp_default_instance_;
    new (ptr) ::pb::userinfo::AsyncUserDatasResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::AsyncUserDatasResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AsyncUserDatasResp_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AsyncUserDatasResp_userinfo_2eproto}, {
      &scc_info_UserData_userinfo_2eproto.base,}};

static void InitDefaultsscc_info_NewUser_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_NewUser_default_instance_;
    new (ptr) ::pb::userinfo::NewUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::NewUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewUser_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewUser_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_NoviceField_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_NoviceField_default_instance_;
    new (ptr) ::pb::userinfo::NoviceField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::NoviceField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoviceField_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoviceField_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_RespNoviceData_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_RespNoviceData_default_instance_;
    new (ptr) ::pb::userinfo::RespNoviceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::RespNoviceData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RespNoviceData_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RespNoviceData_userinfo_2eproto}, {
      &scc_info_NoviceField_userinfo_2eproto.base,}};

static void InitDefaultsscc_info_SearchByIdReq_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_SearchByIdReq_default_instance_;
    new (ptr) ::pb::userinfo::SearchByIdReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::SearchByIdReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchByIdReq_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchByIdReq_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_SearchByNameReq_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_SearchByNameReq_default_instance_;
    new (ptr) ::pb::userinfo::SearchByNameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::SearchByNameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchByNameReq_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchByNameReq_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_SearchInfo_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_SearchInfo_default_instance_;
    new (ptr) ::pb::userinfo::SearchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::SearchInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchInfo_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchInfo_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_SearchResp_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_SearchResp_default_instance_;
    new (ptr) ::pb::userinfo::SearchResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::SearchResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchResp_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchResp_userinfo_2eproto}, {
      &scc_info_SearchInfo_userinfo_2eproto.base,}};

static void InitDefaultsscc_info_UserData_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_UserData_default_instance_;
    new (ptr) ::pb::userinfo::UserData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::UserData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserData_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserData_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_UserInfo_default_instance_;
    new (ptr) ::pb::userinfo::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_UserInfoReq_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_UserInfoReq_default_instance_;
    new (ptr) ::pb::userinfo::UserInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::UserInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfoReq_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfoReq_userinfo_2eproto}, {}};

static void InitDefaultsscc_info_UserInfoResp_userinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::userinfo::_UserInfoResp_default_instance_;
    new (ptr) ::pb::userinfo::UserInfoResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::userinfo::UserInfoResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfoResp_userinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserInfoResp_userinfo_2eproto}, {
      &scc_info_UserInfo_userinfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userinfo_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_userinfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userinfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userinfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, power_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, presentation_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, guild_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, guild_group_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, officer_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, captive_guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, captive_guild_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasReq, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasResp, user_datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, map_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, head_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, power_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, presentation_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, guild_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, guild_group_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, officer_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, captive_guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, captive_guild_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoReq, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoResp, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoResp, user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, map_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, head_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, power_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByIdReq, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByNameReq, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchResp, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchResp, search_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, flag_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, head_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NoviceField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NoviceField, q_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NoviceField, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::RespNoviceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::RespNoviceData, fields_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::userinfo::UserData)},
  { 13, -1, sizeof(::pb::userinfo::AsyncUserDatasReq)},
  { 19, -1, sizeof(::pb::userinfo::AsyncUserDatasResp)},
  { 25, -1, sizeof(::pb::userinfo::UserInfo)},
  { 42, -1, sizeof(::pb::userinfo::UserInfoReq)},
  { 48, -1, sizeof(::pb::userinfo::UserInfoResp)},
  { 55, -1, sizeof(::pb::userinfo::SearchInfo)},
  { 66, -1, sizeof(::pb::userinfo::SearchByIdReq)},
  { 72, -1, sizeof(::pb::userinfo::SearchByNameReq)},
  { 78, -1, sizeof(::pb::userinfo::SearchResp)},
  { 85, -1, sizeof(::pb::userinfo::NewUser)},
  { 93, -1, sizeof(::pb::userinfo::NoviceField)},
  { 100, -1, sizeof(::pb::userinfo::RespNoviceData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_UserData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_AsyncUserDatasReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_AsyncUserDatasResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_UserInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_UserInfoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_SearchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_SearchByIdReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_SearchByNameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_SearchResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_NewUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_NoviceField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::userinfo::_RespNoviceData_default_instance_),
};

const char descriptor_table_protodef_userinfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016userinfo.proto\022\013pb.userinfo\"\266\001\n\010UserDa"
  "ta\022\r\n\005power\030\001 \001(\005\022\024\n\014presentation\030\002 \001(\t\022"
  "\020\n\010guild_id\030\003 \001(\005\022\022\n\nguild_name\030\004 \001(\t\022\030\n"
  "\020guild_group_name\030\005 \001(\t\022\017\n\007officer\030\006 \001(\005"
  "\022\030\n\020captive_guild_id\030\007 \001(\005\022\032\n\022captive_gu"
  "ild_name\030\010 \001(\t\"%\n\021AsyncUserDatasReq\022\020\n\010u"
  "ser_ids\030\001 \003(\003\"\?\n\022AsyncUserDatasResp\022)\n\nu"
  "ser_datas\030\001 \003(\0132\025.pb.userinfo.UserData\"\373"
  "\001\n\010UserInfo\022\016\n\006map_id\030\001 \001(\005\022\017\n\007user_id\030\002"
  " \001(\003\022\021\n\tuser_name\030\003 \001(\t\022\017\n\007head_id\030\004 \001(\005"
  "\022\r\n\005power\030\005 \001(\005\022\024\n\014presentation\030\006 \001(\t\022\020\n"
  "\010guild_id\030\007 \001(\005\022\022\n\nguild_name\030\010 \001(\t\022\030\n\020g"
  "uild_group_name\030\t \001(\t\022\017\n\007officer\030\n \001(\005\022\030"
  "\n\020captive_guild_id\030\013 \001(\005\022\032\n\022captive_guil"
  "d_name\030\014 \001(\t\"\036\n\013UserInfoReq\022\017\n\007user_id\030\001"
  " \001(\003\"L\n\014UserInfoResp\022\022\n\nerror_code\030\001 \001(\r"
  "\022(\n\tuser_info\030\002 \001(\0132\025.pb.userinfo.UserIn"
  "fo\"q\n\nSearchInfo\022\017\n\007user_id\030\001 \001(\003\022\016\n\006map"
  "_id\030\002 \001(\005\022\021\n\tuser_name\030\003 \001(\t\022\017\n\007head_id\030"
  "\004 \001(\005\022\r\n\005power\030\005 \001(\005\022\017\n\007game_id\030\006 \001(\005\" \n"
  "\rSearchByIdReq\022\017\n\007user_id\030\001 \001(\003\"$\n\017Searc"
  "hByNameReq\022\021\n\tuser_name\030\001 \001(\t\"O\n\nSearchR"
  "esp\022\022\n\nerror_code\030\001 \001(\r\022-\n\014search_infos\030"
  "\002 \003(\0132\027.pb.userinfo.SearchInfo\"O\n\007NewUse"
  "r\022%\n\004flag\030\001 \001(\0162\027.pb.userinfo.E_UserFlag"
  "\022\014\n\004name\030\002 \001(\t\022\017\n\007head_id\030\003 \001(\005\"#\n\013Novic"
  "eField\022\t\n\001q\030\001 \001(\005\022\t\n\001r\030\002 \001(\005\":\n\016RespNovi"
  "ceData\022(\n\006fields\030\001 \003(\0132\030.pb.userinfo.Nov"
  "iceField*\344\001\n\005E_Cmd\022\025\n\021E_Cmd_UserInfoReq\020"
  "\000\022\026\n\022E_Cmd_UserInfoResp\020\001\022\027\n\023E_Cmd_Searc"
  "hByIdReq\020\002\022\031\n\025E_Cmd_SearchByNameReq\020\003\022\024\n"
  "\020E_Cmd_SearchResp\020\004\022\021\n\rE_Cmd_NewUser\020\005\022\024"
  "\n\020E_Cmd_NoviceData\020\006\022\033\n\027E_Cmd_AsyncUserD"
  "atasReq\020\007\022\034\n\030E_Cmd_AsyncUserDatasResp\020\010*"
  "5\n\nE_UserFlag\022\022\n\016E_UserFlag_New\020\000\022\023\n\017E_U"
  "serFlag_Back\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userinfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userinfo_2eproto_sccs[13] = {
  &scc_info_AsyncUserDatasReq_userinfo_2eproto.base,
  &scc_info_AsyncUserDatasResp_userinfo_2eproto.base,
  &scc_info_NewUser_userinfo_2eproto.base,
  &scc_info_NoviceField_userinfo_2eproto.base,
  &scc_info_RespNoviceData_userinfo_2eproto.base,
  &scc_info_SearchByIdReq_userinfo_2eproto.base,
  &scc_info_SearchByNameReq_userinfo_2eproto.base,
  &scc_info_SearchInfo_userinfo_2eproto.base,
  &scc_info_SearchResp_userinfo_2eproto.base,
  &scc_info_UserData_userinfo_2eproto.base,
  &scc_info_UserInfo_userinfo_2eproto.base,
  &scc_info_UserInfoReq_userinfo_2eproto.base,
  &scc_info_UserInfoResp_userinfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userinfo_2eproto_once;
static bool descriptor_table_userinfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userinfo_2eproto = {
  &descriptor_table_userinfo_2eproto_initialized, descriptor_table_protodef_userinfo_2eproto, "userinfo.proto", 1422,
  &descriptor_table_userinfo_2eproto_once, descriptor_table_userinfo_2eproto_sccs, descriptor_table_userinfo_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_userinfo_2eproto::offsets,
  file_level_metadata_userinfo_2eproto, 13, file_level_enum_descriptors_userinfo_2eproto, file_level_service_descriptors_userinfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userinfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userinfo_2eproto), true);
namespace pb {
namespace userinfo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_userinfo_2eproto);
  return file_level_enum_descriptors_userinfo_2eproto[0];
}
bool E_Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_UserFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_userinfo_2eproto);
  return file_level_enum_descriptors_userinfo_2eproto[1];
}
bool E_UserFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UserData::InitAsDefaultInstance() {
}
class UserData::_Internal {
 public:
};

UserData::UserData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.UserData)
}
UserData::UserData(const UserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  presentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_presentation().empty()) {
    presentation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.presentation_);
  }
  guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guild_name().empty()) {
    guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  guild_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guild_group_name().empty()) {
    guild_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_group_name_);
  }
  captive_guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_captive_guild_name().empty()) {
    captive_guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.captive_guild_name_);
  }
  ::memcpy(&power_, &from.power_,
    static_cast<size_t>(reinterpret_cast<char*>(&captive_guild_id_) -
    reinterpret_cast<char*>(&power_)) + sizeof(captive_guild_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserData)
}

void UserData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserData_userinfo_2eproto.base);
  presentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captive_guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captive_guild_id_) -
      reinterpret_cast<char*>(&power_)) + sizeof(captive_guild_id_));
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserData)
  SharedDtor();
}

void UserData::SharedDtor() {
  presentation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captive_guild_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserData& UserData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserData_userinfo_2eproto.base);
  return *internal_default_instance();
}


void UserData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presentation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captive_guild_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captive_guild_id_) -
      reinterpret_cast<char*>(&power_)) + sizeof(captive_guild_id_));
  _internal_metadata_.Clear();
}

const char* UserData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string presentation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_presentation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserData.presentation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guild_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserData.guild_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guild_group_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_guild_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserData.guild_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 officer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          officer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 captive_guild_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          captive_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string captive_guild_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_captive_guild_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserData.captive_guild_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 power = 1;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_power(), target);
  }

  // string presentation = 2;
  if (this->presentation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_presentation().data(), static_cast<int>(this->_internal_presentation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.presentation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_presentation(), target);
  }

  // int32 guild_id = 3;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // string guild_name = 4;
  if (this->guild_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_name().data(), static_cast<int>(this->_internal_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.guild_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_guild_name(), target);
  }

  // string guild_group_name = 5;
  if (this->guild_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_group_name().data(), static_cast<int>(this->_internal_guild_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.guild_group_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_guild_group_name(), target);
  }

  // int32 officer = 6;
  if (this->officer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_officer(), target);
  }

  // int32 captive_guild_id = 7;
  if (this->captive_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_captive_guild_id(), target);
  }

  // string captive_guild_name = 8;
  if (this->captive_guild_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captive_guild_name().data(), static_cast<int>(this->_internal_captive_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.captive_guild_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_captive_guild_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserData)
  return target;
}

size_t UserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string presentation = 2;
  if (this->presentation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presentation());
  }

  // string guild_name = 4;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_name());
  }

  // string guild_group_name = 5;
  if (this->guild_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_group_name());
  }

  // string captive_guild_name = 8;
  if (this->captive_guild_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captive_guild_name());
  }

  // int32 power = 1;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // int32 guild_id = 3;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guild_id());
  }

  // int32 officer = 6;
  if (this->officer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_officer());
  }

  // int32 captive_guild_id = 7;
  if (this->captive_guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_captive_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.UserData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.UserData)
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.presentation().size() > 0) {

    presentation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.presentation_);
  }
  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.guild_group_name().size() > 0) {

    guild_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_group_name_);
  }
  if (from.captive_guild_name().size() > 0) {

    captive_guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.captive_guild_name_);
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.officer() != 0) {
    _internal_set_officer(from._internal_officer());
  }
  if (from.captive_guild_id() != 0) {
    _internal_set_captive_guild_id(from._internal_captive_guild_id());
  }
}

void UserData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  return true;
}

void UserData::InternalSwap(UserData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  presentation_.Swap(&other->presentation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_name_.Swap(&other->guild_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_group_name_.Swap(&other->guild_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  captive_guild_name_.Swap(&other->captive_guild_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(power_, other->power_);
  swap(guild_id_, other->guild_id_);
  swap(officer_, other->officer_);
  swap(captive_guild_id_, other->captive_guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsyncUserDatasReq::InitAsDefaultInstance() {
}
class AsyncUserDatasReq::_Internal {
 public:
};

AsyncUserDatasReq::AsyncUserDatasReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.AsyncUserDatasReq)
}
AsyncUserDatasReq::AsyncUserDatasReq(const AsyncUserDatasReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.AsyncUserDatasReq)
}

void AsyncUserDatasReq::SharedCtor() {
}

AsyncUserDatasReq::~AsyncUserDatasReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.AsyncUserDatasReq)
  SharedDtor();
}

void AsyncUserDatasReq::SharedDtor() {
}

void AsyncUserDatasReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsyncUserDatasReq& AsyncUserDatasReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsyncUserDatasReq_userinfo_2eproto.base);
  return *internal_default_instance();
}


void AsyncUserDatasReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.AsyncUserDatasReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* AsyncUserDatasReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 user_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_user_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_user_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsyncUserDatasReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.AsyncUserDatasReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 user_ids = 1;
  {
    int byte_size = _user_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_user_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.AsyncUserDatasReq)
  return target;
}

size_t AsyncUserDatasReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.AsyncUserDatasReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 user_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->user_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _user_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsyncUserDatasReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.AsyncUserDatasReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AsyncUserDatasReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsyncUserDatasReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.AsyncUserDatasReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.AsyncUserDatasReq)
    MergeFrom(*source);
  }
}

void AsyncUserDatasReq::MergeFrom(const AsyncUserDatasReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.AsyncUserDatasReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
}

void AsyncUserDatasReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.AsyncUserDatasReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsyncUserDatasReq::CopyFrom(const AsyncUserDatasReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.AsyncUserDatasReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncUserDatasReq::IsInitialized() const {
  return true;
}

void AsyncUserDatasReq::InternalSwap(AsyncUserDatasReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsyncUserDatasReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsyncUserDatasResp::InitAsDefaultInstance() {
}
class AsyncUserDatasResp::_Internal {
 public:
};

AsyncUserDatasResp::AsyncUserDatasResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.AsyncUserDatasResp)
}
AsyncUserDatasResp::AsyncUserDatasResp(const AsyncUserDatasResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_datas_(from.user_datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.AsyncUserDatasResp)
}

void AsyncUserDatasResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsyncUserDatasResp_userinfo_2eproto.base);
}

AsyncUserDatasResp::~AsyncUserDatasResp() {
  // @@protoc_insertion_point(destructor:pb.userinfo.AsyncUserDatasResp)
  SharedDtor();
}

void AsyncUserDatasResp::SharedDtor() {
}

void AsyncUserDatasResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsyncUserDatasResp& AsyncUserDatasResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsyncUserDatasResp_userinfo_2eproto.base);
  return *internal_default_instance();
}


void AsyncUserDatasResp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.AsyncUserDatasResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_datas_.Clear();
  _internal_metadata_.Clear();
}

const char* AsyncUserDatasResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.userinfo.UserData user_datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsyncUserDatasResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.AsyncUserDatasResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.userinfo.UserData user_datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.AsyncUserDatasResp)
  return target;
}

size_t AsyncUserDatasResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.AsyncUserDatasResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.userinfo.UserData user_datas = 1;
  total_size += 1UL * this->_internal_user_datas_size();
  for (const auto& msg : this->user_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsyncUserDatasResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.AsyncUserDatasResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AsyncUserDatasResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsyncUserDatasResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.AsyncUserDatasResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.AsyncUserDatasResp)
    MergeFrom(*source);
  }
}

void AsyncUserDatasResp::MergeFrom(const AsyncUserDatasResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.AsyncUserDatasResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_datas_.MergeFrom(from.user_datas_);
}

void AsyncUserDatasResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.AsyncUserDatasResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsyncUserDatasResp::CopyFrom(const AsyncUserDatasResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.AsyncUserDatasResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncUserDatasResp::IsInitialized() const {
  return true;
}

void AsyncUserDatasResp::InternalSwap(AsyncUserDatasResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_datas_.InternalSwap(&other->user_datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsyncUserDatasResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  presentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_presentation().empty()) {
    presentation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.presentation_);
  }
  guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guild_name().empty()) {
    guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  guild_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guild_group_name().empty()) {
    guild_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_group_name_);
  }
  captive_guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_captive_guild_name().empty()) {
    captive_guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.captive_guild_name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&captive_guild_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(captive_guild_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_userinfo_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captive_guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captive_guild_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(captive_guild_id_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presentation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captive_guild_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_userinfo_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presentation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captive_guild_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captive_guild_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(captive_guild_id_));
  _internal_metadata_.Clear();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserInfo.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 head_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string presentation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_presentation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserInfo.presentation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guild_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guild_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserInfo.guild_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guild_group_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_guild_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserInfo.guild_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 officer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          officer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 captive_guild_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          captive_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string captive_guild_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_captive_guild_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.UserInfo.captive_guild_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_id(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // int32 head_id = 4;
  if (this->head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_head_id(), target);
  }

  // int32 power = 5;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_power(), target);
  }

  // string presentation = 6;
  if (this->presentation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_presentation().data(), static_cast<int>(this->_internal_presentation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.presentation");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_presentation(), target);
  }

  // int32 guild_id = 7;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_guild_id(), target);
  }

  // string guild_name = 8;
  if (this->guild_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_name().data(), static_cast<int>(this->_internal_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.guild_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_guild_name(), target);
  }

  // string guild_group_name = 9;
  if (this->guild_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_group_name().data(), static_cast<int>(this->_internal_guild_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.guild_group_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_guild_group_name(), target);
  }

  // int32 officer = 10;
  if (this->officer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_officer(), target);
  }

  // int32 captive_guild_id = 11;
  if (this->captive_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_captive_guild_id(), target);
  }

  // string captive_guild_name = 12;
  if (this->captive_guild_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captive_guild_name().data(), static_cast<int>(this->_internal_captive_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.captive_guild_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_captive_guild_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string presentation = 6;
  if (this->presentation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presentation());
  }

  // string guild_name = 8;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_name());
  }

  // string guild_group_name = 9;
  if (this->guild_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_group_name());
  }

  // string captive_guild_name = 12;
  if (this->captive_guild_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captive_guild_name());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  // int32 head_id = 4;
  if (this->head_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_head_id());
  }

  // int32 power = 5;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // int32 guild_id = 7;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guild_id());
  }

  // int32 officer = 10;
  if (this->officer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_officer());
  }

  // int32 captive_guild_id = 11;
  if (this->captive_guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_captive_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.presentation().size() > 0) {

    presentation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.presentation_);
  }
  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.guild_group_name().size() > 0) {

    guild_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_group_name_);
  }
  if (from.captive_guild_name().size() > 0) {

    captive_guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.captive_guild_name_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
  if (from.head_id() != 0) {
    _internal_set_head_id(from._internal_head_id());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.officer() != 0) {
    _internal_set_officer(from._internal_officer());
  }
  if (from.captive_guild_id() != 0) {
    _internal_set_captive_guild_id(from._internal_captive_guild_id());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  presentation_.Swap(&other->presentation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_name_.Swap(&other->guild_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_group_name_.Swap(&other->guild_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  captive_guild_name_.Swap(&other->captive_guild_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(map_id_, other->map_id_);
  swap(head_id_, other->head_id_);
  swap(power_, other->power_);
  swap(guild_id_, other->guild_id_);
  swap(officer_, other->officer_);
  swap(captive_guild_id_, other->captive_guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfoReq::InitAsDefaultInstance() {
}
class UserInfoReq::_Internal {
 public:
};

UserInfoReq::UserInfoReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.UserInfoReq)
}
UserInfoReq::UserInfoReq(const UserInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserInfoReq)
}

void UserInfoReq::SharedCtor() {
  user_id_ = PROTOBUF_LONGLONG(0);
}

UserInfoReq::~UserInfoReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserInfoReq)
  SharedDtor();
}

void UserInfoReq::SharedDtor() {
}

void UserInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoReq& UserInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoReq_userinfo_2eproto.base);
  return *internal_default_instance();
}


void UserInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* UserInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserInfoReq)
  return target;
}

size_t UserInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.UserInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.UserInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.UserInfoReq)
    MergeFrom(*source);
  }
}

void UserInfoReq::MergeFrom(const UserInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void UserInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.UserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoReq::CopyFrom(const UserInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReq::IsInitialized() const {
  return true;
}

void UserInfoReq::InternalSwap(UserInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfoResp::InitAsDefaultInstance() {
  ::pb::userinfo::_UserInfoResp_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::pb::userinfo::UserInfo*>(
      ::pb::userinfo::UserInfo::internal_default_instance());
}
class UserInfoResp::_Internal {
 public:
  static const ::pb::userinfo::UserInfo& user_info(const UserInfoResp* msg);
};

const ::pb::userinfo::UserInfo&
UserInfoResp::_Internal::user_info(const UserInfoResp* msg) {
  return *msg->user_info_;
}
UserInfoResp::UserInfoResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.UserInfoResp)
}
UserInfoResp::UserInfoResp(const UserInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::pb::userinfo::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserInfoResp)
}

void UserInfoResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfoResp_userinfo_2eproto.base);
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(error_code_));
}

UserInfoResp::~UserInfoResp() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserInfoResp)
  SharedDtor();
}

void UserInfoResp::SharedDtor() {
  if (this != internal_default_instance()) delete user_info_;
}

void UserInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoResp& UserInfoResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoResp_userinfo_2eproto.base);
  return *internal_default_instance();
}


void UserInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  error_code_ = 0u;
  _internal_metadata_.Clear();
}

const char* UserInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.userinfo.UserInfo user_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // .pb.userinfo.UserInfo user_info = 2;
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserInfoResp)
  return target;
}

size_t UserInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserInfoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.userinfo.UserInfo user_info = 2;
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.UserInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.UserInfoResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.UserInfoResp)
    MergeFrom(*source);
  }
}

void UserInfoResp::MergeFrom(const UserInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_info()) {
    _internal_mutable_user_info()->::pb::userinfo::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void UserInfoResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.UserInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoResp::CopyFrom(const UserInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResp::IsInitialized() const {
  return true;
}

void UserInfoResp::InternalSwap(UserInfoResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_info_, other->user_info_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchInfo::InitAsDefaultInstance() {
}
class SearchInfo::_Internal {
 public:
};

SearchInfo::SearchInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.SearchInfo)
}
SearchInfo::SearchInfo(const SearchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchInfo)
}

void SearchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchInfo_userinfo_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(game_id_));
}

SearchInfo::~SearchInfo() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchInfo)
  SharedDtor();
}

void SearchInfo::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchInfo& SearchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchInfo_userinfo_2eproto.base);
  return *internal_default_instance();
}


void SearchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

const char* SearchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.SearchInfo.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 head_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int32 map_id = 2;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.SearchInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // int32 head_id = 4;
  if (this->head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_head_id(), target);
  }

  // int32 power = 5;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_power(), target);
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchInfo)
  return target;
}

size_t SearchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 map_id = 2;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  // int32 head_id = 4;
  if (this->head_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_head_id());
  }

  // int32 power = 5;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // int32 game_id = 6;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.SearchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.SearchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.SearchInfo)
    MergeFrom(*source);
  }
}

void SearchInfo::MergeFrom(const SearchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
  if (from.head_id() != 0) {
    _internal_set_head_id(from._internal_head_id());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void SearchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.SearchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchInfo::CopyFrom(const SearchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchInfo::IsInitialized() const {
  return true;
}

void SearchInfo::InternalSwap(SearchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(map_id_, other->map_id_);
  swap(head_id_, other->head_id_);
  swap(power_, other->power_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchByIdReq::InitAsDefaultInstance() {
}
class SearchByIdReq::_Internal {
 public:
};

SearchByIdReq::SearchByIdReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.SearchByIdReq)
}
SearchByIdReq::SearchByIdReq(const SearchByIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchByIdReq)
}

void SearchByIdReq::SharedCtor() {
  user_id_ = PROTOBUF_LONGLONG(0);
}

SearchByIdReq::~SearchByIdReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchByIdReq)
  SharedDtor();
}

void SearchByIdReq::SharedDtor() {
}

void SearchByIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchByIdReq& SearchByIdReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchByIdReq_userinfo_2eproto.base);
  return *internal_default_instance();
}


void SearchByIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchByIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SearchByIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchByIdReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchByIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchByIdReq)
  return target;
}

size_t SearchByIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchByIdReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchByIdReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.SearchByIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchByIdReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchByIdReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.SearchByIdReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.SearchByIdReq)
    MergeFrom(*source);
  }
}

void SearchByIdReq::MergeFrom(const SearchByIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchByIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void SearchByIdReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.SearchByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchByIdReq::CopyFrom(const SearchByIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchByIdReq::IsInitialized() const {
  return true;
}

void SearchByIdReq::InternalSwap(SearchByIdReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchByIdReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchByNameReq::InitAsDefaultInstance() {
}
class SearchByNameReq::_Internal {
 public:
};

SearchByNameReq::SearchByNameReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.SearchByNameReq)
}
SearchByNameReq::SearchByNameReq(const SearchByNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchByNameReq)
}

void SearchByNameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchByNameReq_userinfo_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SearchByNameReq::~SearchByNameReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchByNameReq)
  SharedDtor();
}

void SearchByNameReq::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchByNameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchByNameReq& SearchByNameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchByNameReq_userinfo_2eproto.base);
  return *internal_default_instance();
}


void SearchByNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchByNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SearchByNameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.SearchByNameReq.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchByNameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchByNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.SearchByNameReq.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchByNameReq)
  return target;
}

size_t SearchByNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchByNameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchByNameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.SearchByNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchByNameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchByNameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.SearchByNameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.SearchByNameReq)
    MergeFrom(*source);
  }
}

void SearchByNameReq::MergeFrom(const SearchByNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchByNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
}

void SearchByNameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.SearchByNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchByNameReq::CopyFrom(const SearchByNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchByNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchByNameReq::IsInitialized() const {
  return true;
}

void SearchByNameReq::InternalSwap(SearchByNameReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchByNameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchResp::InitAsDefaultInstance() {
}
class SearchResp::_Internal {
 public:
};

SearchResp::SearchResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.SearchResp)
}
SearchResp::SearchResp(const SearchResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      search_infos_(from.search_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchResp)
}

void SearchResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResp_userinfo_2eproto.base);
  error_code_ = 0u;
}

SearchResp::~SearchResp() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchResp)
  SharedDtor();
}

void SearchResp::SharedDtor() {
}

void SearchResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResp& SearchResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResp_userinfo_2eproto.base);
  return *internal_default_instance();
}


void SearchResp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_infos_.Clear();
  error_code_ = 0u;
  _internal_metadata_.Clear();
}

const char* SearchResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.userinfo.SearchInfo search_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // repeated .pb.userinfo.SearchInfo search_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_search_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchResp)
  return target;
}

size_t SearchResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.userinfo.SearchInfo search_infos = 2;
  total_size += 1UL * this->_internal_search_infos_size();
  for (const auto& msg : this->search_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.SearchResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.SearchResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.SearchResp)
    MergeFrom(*source);
  }
}

void SearchResp::MergeFrom(const SearchResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  search_infos_.MergeFrom(from.search_infos_);
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void SearchResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.SearchResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResp::CopyFrom(const SearchResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResp::IsInitialized() const {
  return true;
}

void SearchResp::InternalSwap(SearchResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  search_infos_.InternalSwap(&other->search_infos_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewUser::InitAsDefaultInstance() {
}
class NewUser::_Internal {
 public:
};

NewUser::NewUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.NewUser)
}
NewUser::NewUser(const NewUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_id_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(head_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.NewUser)
}

void NewUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewUser_userinfo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_id_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(head_id_));
}

NewUser::~NewUser() {
  // @@protoc_insertion_point(destructor:pb.userinfo.NewUser)
  SharedDtor();
}

void NewUser::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewUser& NewUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewUser_userinfo_2eproto.base);
  return *internal_default_instance();
}


void NewUser::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.NewUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_id_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(head_id_));
  _internal_metadata_.Clear();
}

const char* NewUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.userinfo.E_UserFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::pb::userinfo::E_UserFlag>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.userinfo.NewUser.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 head_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.NewUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.userinfo.E_UserFlag flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.NewUser.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 head_id = 3;
  if (this->head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_head_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.NewUser)
  return target;
}

size_t NewUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.NewUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.userinfo.E_UserFlag flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // int32 head_id = 3;
  if (this->head_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_head_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.NewUser)
  GOOGLE_DCHECK_NE(&from, this);
  const NewUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.NewUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.NewUser)
    MergeFrom(*source);
  }
}

void NewUser::MergeFrom(const NewUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.NewUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.head_id() != 0) {
    _internal_set_head_id(from._internal_head_id());
  }
}

void NewUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.NewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewUser::CopyFrom(const NewUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.NewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUser::IsInitialized() const {
  return true;
}

void NewUser::InternalSwap(NewUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
  swap(head_id_, other->head_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoviceField::InitAsDefaultInstance() {
}
class NoviceField::_Internal {
 public:
};

NoviceField::NoviceField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.NoviceField)
}
NoviceField::NoviceField(const NoviceField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&q_, &from.q_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&q_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.NoviceField)
}

void NoviceField::SharedCtor() {
  ::memset(&q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&q_)) + sizeof(r_));
}

NoviceField::~NoviceField() {
  // @@protoc_insertion_point(destructor:pb.userinfo.NoviceField)
  SharedDtor();
}

void NoviceField::SharedDtor() {
}

void NoviceField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoviceField& NoviceField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoviceField_userinfo_2eproto.base);
  return *internal_default_instance();
}


void NoviceField::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.NoviceField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&q_)) + sizeof(r_));
  _internal_metadata_.Clear();
}

const char* NoviceField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoviceField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.NoviceField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_q(), target);
  }

  // int32 r = 2;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.NoviceField)
  return target;
}

size_t NoviceField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.NoviceField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_q());
  }

  // int32 r = 2;
  if (this->r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoviceField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.NoviceField)
  GOOGLE_DCHECK_NE(&from, this);
  const NoviceField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoviceField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.NoviceField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.NoviceField)
    MergeFrom(*source);
  }
}

void NoviceField::MergeFrom(const NoviceField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.NoviceField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.q() != 0) {
    _internal_set_q(from._internal_q());
  }
  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
}

void NoviceField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.NoviceField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoviceField::CopyFrom(const NoviceField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.NoviceField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoviceField::IsInitialized() const {
  return true;
}

void NoviceField::InternalSwap(NoviceField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(q_, other->q_);
  swap(r_, other->r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoviceField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RespNoviceData::InitAsDefaultInstance() {
}
class RespNoviceData::_Internal {
 public:
};

RespNoviceData::RespNoviceData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.userinfo.RespNoviceData)
}
RespNoviceData::RespNoviceData(const RespNoviceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.RespNoviceData)
}

void RespNoviceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RespNoviceData_userinfo_2eproto.base);
}

RespNoviceData::~RespNoviceData() {
  // @@protoc_insertion_point(destructor:pb.userinfo.RespNoviceData)
  SharedDtor();
}

void RespNoviceData::SharedDtor() {
}

void RespNoviceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RespNoviceData& RespNoviceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RespNoviceData_userinfo_2eproto.base);
  return *internal_default_instance();
}


void RespNoviceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.RespNoviceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear();
}

const char* RespNoviceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.userinfo.NoviceField fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RespNoviceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.RespNoviceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.userinfo.NoviceField fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.RespNoviceData)
  return target;
}

size_t RespNoviceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.RespNoviceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.userinfo.NoviceField fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespNoviceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.userinfo.RespNoviceData)
  GOOGLE_DCHECK_NE(&from, this);
  const RespNoviceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RespNoviceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.userinfo.RespNoviceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.userinfo.RespNoviceData)
    MergeFrom(*source);
  }
}

void RespNoviceData::MergeFrom(const RespNoviceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.RespNoviceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void RespNoviceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.userinfo.RespNoviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespNoviceData::CopyFrom(const RespNoviceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.RespNoviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespNoviceData::IsInitialized() const {
  return true;
}

void RespNoviceData::InternalSwap(RespNoviceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RespNoviceData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userinfo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserData* Arena::CreateMaybeMessage< ::pb::userinfo::UserData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::UserData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::AsyncUserDatasReq* Arena::CreateMaybeMessage< ::pb::userinfo::AsyncUserDatasReq >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::AsyncUserDatasReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::AsyncUserDatasResp* Arena::CreateMaybeMessage< ::pb::userinfo::AsyncUserDatasResp >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::AsyncUserDatasResp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserInfo* Arena::CreateMaybeMessage< ::pb::userinfo::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserInfoReq* Arena::CreateMaybeMessage< ::pb::userinfo::UserInfoReq >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::UserInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserInfoResp* Arena::CreateMaybeMessage< ::pb::userinfo::UserInfoResp >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::UserInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchInfo* Arena::CreateMaybeMessage< ::pb::userinfo::SearchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::SearchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchByIdReq* Arena::CreateMaybeMessage< ::pb::userinfo::SearchByIdReq >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::SearchByIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchByNameReq* Arena::CreateMaybeMessage< ::pb::userinfo::SearchByNameReq >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::SearchByNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchResp* Arena::CreateMaybeMessage< ::pb::userinfo::SearchResp >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::SearchResp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::NewUser* Arena::CreateMaybeMessage< ::pb::userinfo::NewUser >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::NewUser >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::NoviceField* Arena::CreateMaybeMessage< ::pb::userinfo::NoviceField >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::NoviceField >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::RespNoviceData* Arena::CreateMaybeMessage< ::pb::userinfo::RespNoviceData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::userinfo::RespNoviceData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
