// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

#include "userinfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
namespace userinfo {
PROTOBUF_CONSTEXPR UserData::UserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.presentation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.captive_guild_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.power_)*/0
  , /*decltype(_impl_.guild_id_)*/0
  , /*decltype(_impl_.officer_)*/0
  , /*decltype(_impl_.captive_guild_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDataDefaultTypeInternal() {}
  union {
    UserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDataDefaultTypeInternal _UserData_default_instance_;
PROTOBUF_CONSTEXPR AsyncUserDatasReq::AsyncUserDatasReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_._user_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AsyncUserDatasReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AsyncUserDatasReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AsyncUserDatasReqDefaultTypeInternal() {}
  union {
    AsyncUserDatasReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AsyncUserDatasReqDefaultTypeInternal _AsyncUserDatasReq_default_instance_;
PROTOBUF_CONSTEXPR AsyncUserDatasResp::AsyncUserDatasResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AsyncUserDatasRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AsyncUserDatasRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AsyncUserDatasRespDefaultTypeInternal() {}
  union {
    AsyncUserDatasResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AsyncUserDatasRespDefaultTypeInternal _AsyncUserDatasResp_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.presentation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.captive_guild_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.head_id_)*/0
  , /*decltype(_impl_.power_)*/0
  , /*decltype(_impl_.guild_id_)*/0
  , /*decltype(_impl_.officer_)*/0
  , /*decltype(_impl_.captive_guild_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR UserInfoReq::UserInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoReqDefaultTypeInternal() {}
  union {
    UserInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoReqDefaultTypeInternal _UserInfoReq_default_instance_;
PROTOBUF_CONSTEXPR UserInfoResp::UserInfoResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_info_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoRespDefaultTypeInternal() {}
  union {
    UserInfoResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoRespDefaultTypeInternal _UserInfoResp_default_instance_;
PROTOBUF_CONSTEXPR SearchInfo::SearchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.head_id_)*/0
  , /*decltype(_impl_.power_)*/0
  , /*decltype(_impl_.game_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchInfoDefaultTypeInternal() {}
  union {
    SearchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchInfoDefaultTypeInternal _SearchInfo_default_instance_;
PROTOBUF_CONSTEXPR SearchByIdReq::SearchByIdReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchByIdReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchByIdReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchByIdReqDefaultTypeInternal() {}
  union {
    SearchByIdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchByIdReqDefaultTypeInternal _SearchByIdReq_default_instance_;
PROTOBUF_CONSTEXPR SearchByNameReq::SearchByNameReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchByNameReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchByNameReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchByNameReqDefaultTypeInternal() {}
  union {
    SearchByNameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchByNameReqDefaultTypeInternal _SearchByNameReq_default_instance_;
PROTOBUF_CONSTEXPR SearchResp::SearchResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.search_infos_)*/{}
  , /*decltype(_impl_.error_code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRespDefaultTypeInternal() {}
  union {
    SearchResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRespDefaultTypeInternal _SearchResp_default_instance_;
PROTOBUF_CONSTEXPR NewUser::NewUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.head_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewUserDefaultTypeInternal() {}
  union {
    NewUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewUserDefaultTypeInternal _NewUser_default_instance_;
PROTOBUF_CONSTEXPR NoviceField::NoviceField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.q_)*/0
  , /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoviceFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoviceFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoviceFieldDefaultTypeInternal() {}
  union {
    NoviceField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoviceFieldDefaultTypeInternal _NoviceField_default_instance_;
PROTOBUF_CONSTEXPR RespNoviceData::RespNoviceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RespNoviceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RespNoviceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RespNoviceDataDefaultTypeInternal() {}
  union {
    RespNoviceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RespNoviceDataDefaultTypeInternal _RespNoviceData_default_instance_;
}  // namespace userinfo
}  // namespace pb
static ::_pb::Metadata file_level_metadata_userinfo_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_userinfo_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_userinfo_2eproto = nullptr;

const uint32_t TableStruct_userinfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.presentation_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.guild_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.guild_group_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.officer_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.captive_guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserData, _impl_.captive_guild_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasReq, _impl_.user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::AsyncUserDatasResp, _impl_.user_datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.head_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.presentation_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.guild_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.guild_group_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.officer_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.captive_guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfo, _impl_.captive_guild_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoReq, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoResp, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::UserInfoResp, _impl_.user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _impl_.head_id_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchInfo, _impl_.game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByIdReq, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchByNameReq, _impl_.user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchResp, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::SearchResp, _impl_.search_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NewUser, _impl_.head_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NoviceField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NoviceField, _impl_.q_),
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::NoviceField, _impl_.r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::RespNoviceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::userinfo::RespNoviceData, _impl_.fields_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::userinfo::UserData)},
  { 14, -1, -1, sizeof(::pb::userinfo::AsyncUserDatasReq)},
  { 21, -1, -1, sizeof(::pb::userinfo::AsyncUserDatasResp)},
  { 28, -1, -1, sizeof(::pb::userinfo::UserInfo)},
  { 46, -1, -1, sizeof(::pb::userinfo::UserInfoReq)},
  { 53, -1, -1, sizeof(::pb::userinfo::UserInfoResp)},
  { 61, -1, -1, sizeof(::pb::userinfo::SearchInfo)},
  { 73, -1, -1, sizeof(::pb::userinfo::SearchByIdReq)},
  { 80, -1, -1, sizeof(::pb::userinfo::SearchByNameReq)},
  { 87, -1, -1, sizeof(::pb::userinfo::SearchResp)},
  { 95, -1, -1, sizeof(::pb::userinfo::NewUser)},
  { 104, -1, -1, sizeof(::pb::userinfo::NoviceField)},
  { 112, -1, -1, sizeof(::pb::userinfo::RespNoviceData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::userinfo::_UserData_default_instance_._instance,
  &::pb::userinfo::_AsyncUserDatasReq_default_instance_._instance,
  &::pb::userinfo::_AsyncUserDatasResp_default_instance_._instance,
  &::pb::userinfo::_UserInfo_default_instance_._instance,
  &::pb::userinfo::_UserInfoReq_default_instance_._instance,
  &::pb::userinfo::_UserInfoResp_default_instance_._instance,
  &::pb::userinfo::_SearchInfo_default_instance_._instance,
  &::pb::userinfo::_SearchByIdReq_default_instance_._instance,
  &::pb::userinfo::_SearchByNameReq_default_instance_._instance,
  &::pb::userinfo::_SearchResp_default_instance_._instance,
  &::pb::userinfo::_NewUser_default_instance_._instance,
  &::pb::userinfo::_NoviceField_default_instance_._instance,
  &::pb::userinfo::_RespNoviceData_default_instance_._instance,
};

const char descriptor_table_protodef_userinfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016userinfo.proto\022\013pb.userinfo\"\266\001\n\010UserDa"
  "ta\022\r\n\005power\030\001 \001(\005\022\024\n\014presentation\030\002 \001(\t\022"
  "\020\n\010guild_id\030\003 \001(\005\022\022\n\nguild_name\030\004 \001(\t\022\030\n"
  "\020guild_group_name\030\005 \001(\t\022\017\n\007officer\030\006 \001(\005"
  "\022\030\n\020captive_guild_id\030\007 \001(\005\022\032\n\022captive_gu"
  "ild_name\030\010 \001(\t\"%\n\021AsyncUserDatasReq\022\020\n\010u"
  "ser_ids\030\001 \003(\003\"\?\n\022AsyncUserDatasResp\022)\n\nu"
  "ser_datas\030\001 \003(\0132\025.pb.userinfo.UserData\"\373"
  "\001\n\010UserInfo\022\016\n\006map_id\030\001 \001(\005\022\017\n\007user_id\030\002"
  " \001(\003\022\021\n\tuser_name\030\003 \001(\t\022\017\n\007head_id\030\004 \001(\005"
  "\022\r\n\005power\030\005 \001(\005\022\024\n\014presentation\030\006 \001(\t\022\020\n"
  "\010guild_id\030\007 \001(\005\022\022\n\nguild_name\030\010 \001(\t\022\030\n\020g"
  "uild_group_name\030\t \001(\t\022\017\n\007officer\030\n \001(\005\022\030"
  "\n\020captive_guild_id\030\013 \001(\005\022\032\n\022captive_guil"
  "d_name\030\014 \001(\t\"\036\n\013UserInfoReq\022\017\n\007user_id\030\001"
  " \001(\003\"L\n\014UserInfoResp\022\022\n\nerror_code\030\001 \001(\r"
  "\022(\n\tuser_info\030\002 \001(\0132\025.pb.userinfo.UserIn"
  "fo\"q\n\nSearchInfo\022\017\n\007user_id\030\001 \001(\003\022\016\n\006map"
  "_id\030\002 \001(\005\022\021\n\tuser_name\030\003 \001(\t\022\017\n\007head_id\030"
  "\004 \001(\005\022\r\n\005power\030\005 \001(\005\022\017\n\007game_id\030\006 \001(\005\" \n"
  "\rSearchByIdReq\022\017\n\007user_id\030\001 \001(\003\"$\n\017Searc"
  "hByNameReq\022\021\n\tuser_name\030\001 \001(\t\"O\n\nSearchR"
  "esp\022\022\n\nerror_code\030\001 \001(\r\022-\n\014search_infos\030"
  "\002 \003(\0132\027.pb.userinfo.SearchInfo\"O\n\007NewUse"
  "r\022%\n\004flag\030\001 \001(\0162\027.pb.userinfo.E_UserFlag"
  "\022\014\n\004name\030\002 \001(\t\022\017\n\007head_id\030\003 \001(\005\"#\n\013Novic"
  "eField\022\t\n\001q\030\001 \001(\005\022\t\n\001r\030\002 \001(\005\":\n\016RespNovi"
  "ceData\022(\n\006fields\030\001 \003(\0132\030.pb.userinfo.Nov"
  "iceField*\344\001\n\005E_Cmd\022\025\n\021E_Cmd_UserInfoReq\020"
  "\000\022\026\n\022E_Cmd_UserInfoResp\020\001\022\027\n\023E_Cmd_Searc"
  "hByIdReq\020\002\022\031\n\025E_Cmd_SearchByNameReq\020\003\022\024\n"
  "\020E_Cmd_SearchResp\020\004\022\021\n\rE_Cmd_NewUser\020\005\022\024"
  "\n\020E_Cmd_NoviceData\020\006\022\033\n\027E_Cmd_AsyncUserD"
  "atasReq\020\007\022\034\n\030E_Cmd_AsyncUserDatasResp\020\010*"
  "5\n\nE_UserFlag\022\022\n\016E_UserFlag_New\020\000\022\023\n\017E_U"
  "serFlag_Back\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_userinfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_userinfo_2eproto = {
    false, false, 1422, descriptor_table_protodef_userinfo_2eproto,
    "userinfo.proto",
    &descriptor_table_userinfo_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_userinfo_2eproto::offsets,
    file_level_metadata_userinfo_2eproto, file_level_enum_descriptors_userinfo_2eproto,
    file_level_service_descriptors_userinfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_userinfo_2eproto_getter() {
  return &descriptor_table_userinfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_userinfo_2eproto(&descriptor_table_userinfo_2eproto);
namespace pb {
namespace userinfo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_userinfo_2eproto);
  return file_level_enum_descriptors_userinfo_2eproto[0];
}
bool E_Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_UserFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_userinfo_2eproto);
  return file_level_enum_descriptors_userinfo_2eproto[1];
}
bool E_UserFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UserData::_Internal {
 public:
};

UserData::UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.UserData)
}
UserData::UserData(const UserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.presentation_){}
    , decltype(_impl_.guild_name_){}
    , decltype(_impl_.guild_group_name_){}
    , decltype(_impl_.captive_guild_name_){}
    , decltype(_impl_.power_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.officer_){}
    , decltype(_impl_.captive_guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.presentation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.presentation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_presentation().empty()) {
    _this->_impl_.presentation_.Set(from._internal_presentation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_name().empty()) {
    _this->_impl_.guild_name_.Set(from._internal_guild_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guild_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_group_name().empty()) {
    _this->_impl_.guild_group_name_.Set(from._internal_guild_group_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.captive_guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captive_guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_captive_guild_name().empty()) {
    _this->_impl_.captive_guild_name_.Set(from._internal_captive_guild_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.power_, &from._impl_.power_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.captive_guild_id_) -
    reinterpret_cast<char*>(&_impl_.power_)) + sizeof(_impl_.captive_guild_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserData)
}

inline void UserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.presentation_){}
    , decltype(_impl_.guild_name_){}
    , decltype(_impl_.guild_group_name_){}
    , decltype(_impl_.captive_guild_name_){}
    , decltype(_impl_.power_){0}
    , decltype(_impl_.guild_id_){0}
    , decltype(_impl_.officer_){0}
    , decltype(_impl_.captive_guild_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.presentation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.presentation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guild_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.captive_guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captive_guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.presentation_.Destroy();
  _impl_.guild_name_.Destroy();
  _impl_.guild_group_name_.Destroy();
  _impl_.captive_guild_name_.Destroy();
}

void UserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.presentation_.ClearToEmpty();
  _impl_.guild_name_.ClearToEmpty();
  _impl_.guild_group_name_.ClearToEmpty();
  _impl_.captive_guild_name_.ClearToEmpty();
  ::memset(&_impl_.power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.captive_guild_id_) -
      reinterpret_cast<char*>(&_impl_.power_)) + sizeof(_impl_.captive_guild_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string presentation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_presentation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserData.presentation"));
        } else
          goto handle_unusual;
        continue;
      // int32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string guild_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserData.guild_name"));
        } else
          goto handle_unusual;
        continue;
      // string guild_group_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_guild_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserData.guild_group_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 officer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.officer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 captive_guild_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.captive_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string captive_guild_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_captive_guild_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserData.captive_guild_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 power = 1;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_power(), target);
  }

  // string presentation = 2;
  if (!this->_internal_presentation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_presentation().data(), static_cast<int>(this->_internal_presentation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.presentation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_presentation(), target);
  }

  // int32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // string guild_name = 4;
  if (!this->_internal_guild_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_name().data(), static_cast<int>(this->_internal_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.guild_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_guild_name(), target);
  }

  // string guild_group_name = 5;
  if (!this->_internal_guild_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_group_name().data(), static_cast<int>(this->_internal_guild_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.guild_group_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_guild_group_name(), target);
  }

  // int32 officer = 6;
  if (this->_internal_officer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_officer(), target);
  }

  // int32 captive_guild_id = 7;
  if (this->_internal_captive_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_captive_guild_id(), target);
  }

  // string captive_guild_name = 8;
  if (!this->_internal_captive_guild_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captive_guild_name().data(), static_cast<int>(this->_internal_captive_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserData.captive_guild_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_captive_guild_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserData)
  return target;
}

size_t UserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string presentation = 2;
  if (!this->_internal_presentation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presentation());
  }

  // string guild_name = 4;
  if (!this->_internal_guild_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_name());
  }

  // string guild_group_name = 5;
  if (!this->_internal_guild_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_group_name());
  }

  // string captive_guild_name = 8;
  if (!this->_internal_captive_guild_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captive_guild_name());
  }

  // int32 power = 1;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power());
  }

  // int32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_guild_id());
  }

  // int32 officer = 6;
  if (this->_internal_officer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_officer());
  }

  // int32 captive_guild_id = 7;
  if (this->_internal_captive_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_captive_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserData::GetClassData() const { return &_class_data_; }


void UserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserData*>(&to_msg);
  auto& from = static_cast<const UserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_presentation().empty()) {
    _this->_internal_set_presentation(from._internal_presentation());
  }
  if (!from._internal_guild_name().empty()) {
    _this->_internal_set_guild_name(from._internal_guild_name());
  }
  if (!from._internal_guild_group_name().empty()) {
    _this->_internal_set_guild_group_name(from._internal_guild_group_name());
  }
  if (!from._internal_captive_guild_name().empty()) {
    _this->_internal_set_captive_guild_name(from._internal_captive_guild_name());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_officer() != 0) {
    _this->_internal_set_officer(from._internal_officer());
  }
  if (from._internal_captive_guild_id() != 0) {
    _this->_internal_set_captive_guild_id(from._internal_captive_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserData::CopyFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  return true;
}

void UserData::InternalSwap(UserData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.presentation_, lhs_arena,
      &other->_impl_.presentation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_name_, lhs_arena,
      &other->_impl_.guild_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_group_name_, lhs_arena,
      &other->_impl_.guild_group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.captive_guild_name_, lhs_arena,
      &other->_impl_.captive_guild_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserData, _impl_.captive_guild_id_)
      + sizeof(UserData::_impl_.captive_guild_id_)
      - PROTOBUF_FIELD_OFFSET(UserData, _impl_.power_)>(
          reinterpret_cast<char*>(&_impl_.power_),
          reinterpret_cast<char*>(&other->_impl_.power_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[0]);
}

// ===================================================================

class AsyncUserDatasReq::_Internal {
 public:
};

AsyncUserDatasReq::AsyncUserDatasReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.AsyncUserDatasReq)
}
AsyncUserDatasReq::AsyncUserDatasReq(const AsyncUserDatasReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AsyncUserDatasReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , /*decltype(_impl_._user_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.AsyncUserDatasReq)
}

inline void AsyncUserDatasReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , /*decltype(_impl_._user_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AsyncUserDatasReq::~AsyncUserDatasReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.AsyncUserDatasReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AsyncUserDatasReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedField();
}

void AsyncUserDatasReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AsyncUserDatasReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.AsyncUserDatasReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsyncUserDatasReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 user_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_user_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_user_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AsyncUserDatasReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.AsyncUserDatasReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 user_ids = 1;
  {
    int byte_size = _impl_._user_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_user_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.AsyncUserDatasReq)
  return target;
}

size_t AsyncUserDatasReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.AsyncUserDatasReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 user_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.user_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._user_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AsyncUserDatasReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AsyncUserDatasReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AsyncUserDatasReq::GetClassData() const { return &_class_data_; }


void AsyncUserDatasReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AsyncUserDatasReq*>(&to_msg);
  auto& from = static_cast<const AsyncUserDatasReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.AsyncUserDatasReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AsyncUserDatasReq::CopyFrom(const AsyncUserDatasReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.AsyncUserDatasReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncUserDatasReq::IsInitialized() const {
  return true;
}

void AsyncUserDatasReq::InternalSwap(AsyncUserDatasReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsyncUserDatasReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[1]);
}

// ===================================================================

class AsyncUserDatasResp::_Internal {
 public:
};

AsyncUserDatasResp::AsyncUserDatasResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.AsyncUserDatasResp)
}
AsyncUserDatasResp::AsyncUserDatasResp(const AsyncUserDatasResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AsyncUserDatasResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_datas_){from._impl_.user_datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.AsyncUserDatasResp)
}

inline void AsyncUserDatasResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AsyncUserDatasResp::~AsyncUserDatasResp() {
  // @@protoc_insertion_point(destructor:pb.userinfo.AsyncUserDatasResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AsyncUserDatasResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_datas_.~RepeatedPtrField();
}

void AsyncUserDatasResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AsyncUserDatasResp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.AsyncUserDatasResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsyncUserDatasResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.userinfo.UserData user_datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AsyncUserDatasResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.AsyncUserDatasResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.userinfo.UserData user_datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.AsyncUserDatasResp)
  return target;
}

size_t AsyncUserDatasResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.AsyncUserDatasResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.userinfo.UserData user_datas = 1;
  total_size += 1UL * this->_internal_user_datas_size();
  for (const auto& msg : this->_impl_.user_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AsyncUserDatasResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AsyncUserDatasResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AsyncUserDatasResp::GetClassData() const { return &_class_data_; }


void AsyncUserDatasResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AsyncUserDatasResp*>(&to_msg);
  auto& from = static_cast<const AsyncUserDatasResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.AsyncUserDatasResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_datas_.MergeFrom(from._impl_.user_datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AsyncUserDatasResp::CopyFrom(const AsyncUserDatasResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.AsyncUserDatasResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncUserDatasResp::IsInitialized() const {
  return true;
}

void AsyncUserDatasResp::InternalSwap(AsyncUserDatasResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_datas_.InternalSwap(&other->_impl_.user_datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsyncUserDatasResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[2]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.presentation_){}
    , decltype(_impl_.guild_name_){}
    , decltype(_impl_.guild_group_name_){}
    , decltype(_impl_.captive_guild_name_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.head_id_){}
    , decltype(_impl_.power_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.officer_){}
    , decltype(_impl_.captive_guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.presentation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.presentation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_presentation().empty()) {
    _this->_impl_.presentation_.Set(from._internal_presentation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_name().empty()) {
    _this->_impl_.guild_name_.Set(from._internal_guild_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guild_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_group_name().empty()) {
    _this->_impl_.guild_group_name_.Set(from._internal_guild_group_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.captive_guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captive_guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_captive_guild_name().empty()) {
    _this->_impl_.captive_guild_name_.Set(from._internal_captive_guild_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.captive_guild_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.captive_guild_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.presentation_){}
    , decltype(_impl_.guild_name_){}
    , decltype(_impl_.guild_group_name_){}
    , decltype(_impl_.captive_guild_name_){}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.head_id_){0}
    , decltype(_impl_.power_){0}
    , decltype(_impl_.guild_id_){0}
    , decltype(_impl_.officer_){0}
    , decltype(_impl_.captive_guild_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.presentation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.presentation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guild_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.captive_guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captive_guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
  _impl_.presentation_.Destroy();
  _impl_.guild_name_.Destroy();
  _impl_.guild_group_name_.Destroy();
  _impl_.captive_guild_name_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.presentation_.ClearToEmpty();
  _impl_.guild_name_.ClearToEmpty();
  _impl_.guild_group_name_.ClearToEmpty();
  _impl_.captive_guild_name_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.captive_guild_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.captive_guild_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserInfo.user_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 head_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string presentation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_presentation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserInfo.presentation"));
        } else
          goto handle_unusual;
        continue;
      // int32 guild_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string guild_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserInfo.guild_name"));
        } else
          goto handle_unusual;
        continue;
      // string guild_group_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_guild_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserInfo.guild_group_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 officer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.officer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 captive_guild_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.captive_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string captive_guild_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_captive_guild_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.UserInfo.captive_guild_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_id(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // int32 head_id = 4;
  if (this->_internal_head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_head_id(), target);
  }

  // int32 power = 5;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_power(), target);
  }

  // string presentation = 6;
  if (!this->_internal_presentation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_presentation().data(), static_cast<int>(this->_internal_presentation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.presentation");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_presentation(), target);
  }

  // int32 guild_id = 7;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_guild_id(), target);
  }

  // string guild_name = 8;
  if (!this->_internal_guild_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_name().data(), static_cast<int>(this->_internal_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.guild_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_guild_name(), target);
  }

  // string guild_group_name = 9;
  if (!this->_internal_guild_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_group_name().data(), static_cast<int>(this->_internal_guild_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.guild_group_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_guild_group_name(), target);
  }

  // int32 officer = 10;
  if (this->_internal_officer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_officer(), target);
  }

  // int32 captive_guild_id = 11;
  if (this->_internal_captive_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_captive_guild_id(), target);
  }

  // string captive_guild_name = 12;
  if (!this->_internal_captive_guild_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captive_guild_name().data(), static_cast<int>(this->_internal_captive_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.UserInfo.captive_guild_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_captive_guild_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string presentation = 6;
  if (!this->_internal_presentation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presentation());
  }

  // string guild_name = 8;
  if (!this->_internal_guild_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_name());
  }

  // string guild_group_name = 9;
  if (!this->_internal_guild_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_group_name());
  }

  // string captive_guild_name = 12;
  if (!this->_internal_captive_guild_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captive_guild_name());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 map_id = 1;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 head_id = 4;
  if (this->_internal_head_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_head_id());
  }

  // int32 power = 5;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power());
  }

  // int32 guild_id = 7;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_guild_id());
  }

  // int32 officer = 10;
  if (this->_internal_officer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_officer());
  }

  // int32 captive_guild_id = 11;
  if (this->_internal_captive_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_captive_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_presentation().empty()) {
    _this->_internal_set_presentation(from._internal_presentation());
  }
  if (!from._internal_guild_name().empty()) {
    _this->_internal_set_guild_name(from._internal_guild_name());
  }
  if (!from._internal_guild_group_name().empty()) {
    _this->_internal_set_guild_group_name(from._internal_guild_group_name());
  }
  if (!from._internal_captive_guild_name().empty()) {
    _this->_internal_set_captive_guild_name(from._internal_captive_guild_name());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_head_id() != 0) {
    _this->_internal_set_head_id(from._internal_head_id());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_officer() != 0) {
    _this->_internal_set_officer(from._internal_officer());
  }
  if (from._internal_captive_guild_id() != 0) {
    _this->_internal_set_captive_guild_id(from._internal_captive_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.presentation_, lhs_arena,
      &other->_impl_.presentation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_name_, lhs_arena,
      &other->_impl_.guild_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_group_name_, lhs_arena,
      &other->_impl_.guild_group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.captive_guild_name_, lhs_arena,
      &other->_impl_.captive_guild_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.captive_guild_id_)
      + sizeof(UserInfo::_impl_.captive_guild_id_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[3]);
}

// ===================================================================

class UserInfoReq::_Internal {
 public:
};

UserInfoReq::UserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.UserInfoReq)
}
UserInfoReq::UserInfoReq(const UserInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserInfoReq)
}

inline void UserInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserInfoReq::~UserInfoReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserInfoReq)
  return target;
}

size_t UserInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoReq::GetClassData() const { return &_class_data_; }


void UserInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfoReq*>(&to_msg);
  auto& from = static_cast<const UserInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoReq::CopyFrom(const UserInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReq::IsInitialized() const {
  return true;
}

void UserInfoReq::InternalSwap(UserInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[4]);
}

// ===================================================================

class UserInfoResp::_Internal {
 public:
  static const ::pb::userinfo::UserInfo& user_info(const UserInfoResp* msg);
};

const ::pb::userinfo::UserInfo&
UserInfoResp::_Internal::user_info(const UserInfoResp* msg) {
  return *msg->_impl_.user_info_;
}
UserInfoResp::UserInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.UserInfoResp)
}
UserInfoResp::UserInfoResp(const UserInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfoResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    _this->_impl_.user_info_ = new ::pb::userinfo::UserInfo(*from._impl_.user_info_);
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.UserInfoResp)
}

inline void UserInfoResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.error_code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserInfoResp::~UserInfoResp() {
  // @@protoc_insertion_point(destructor:pb.userinfo.UserInfoResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_info_;
}

void UserInfoResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.UserInfoResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
  _impl_.error_code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.userinfo.UserInfo user_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.UserInfoResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // .pb.userinfo.UserInfo user_info = 2;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.UserInfoResp)
  return target;
}

size_t UserInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.UserInfoResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.userinfo.UserInfo user_info = 2;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_info_);
  }

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfoResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoResp::GetClassData() const { return &_class_data_; }


void UserInfoResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfoResp*>(&to_msg);
  auto& from = static_cast<const UserInfoResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.UserInfoResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_info()) {
    _this->_internal_mutable_user_info()->::pb::userinfo::UserInfo::MergeFrom(
        from._internal_user_info());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoResp::CopyFrom(const UserInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.UserInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResp::IsInitialized() const {
  return true;
}

void UserInfoResp::InternalSwap(UserInfoResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfoResp, _impl_.error_code_)
      + sizeof(UserInfoResp::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(UserInfoResp, _impl_.user_info_)>(
          reinterpret_cast<char*>(&_impl_.user_info_),
          reinterpret_cast<char*>(&other->_impl_.user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[5]);
}

// ===================================================================

class SearchInfo::_Internal {
 public:
};

SearchInfo::SearchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.SearchInfo)
}
SearchInfo::SearchInfo(const SearchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.head_id_){}
    , decltype(_impl_.power_){}
    , decltype(_impl_.game_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.game_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchInfo)
}

inline void SearchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.head_id_){0}
    , decltype(_impl_.power_){0}
    , decltype(_impl_.game_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchInfo::~SearchInfo() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void SearchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.game_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.game_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.SearchInfo.user_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 head_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 game_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.SearchInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // int32 head_id = 4;
  if (this->_internal_head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_head_id(), target);
  }

  // int32 power = 5;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_power(), target);
  }

  // int32 game_id = 6;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchInfo)
  return target;
}

size_t SearchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 head_id = 4;
  if (this->_internal_head_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_head_id());
  }

  // int32 power = 5;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power());
  }

  // int32 game_id = 6;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchInfo::GetClassData() const { return &_class_data_; }


void SearchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchInfo*>(&to_msg);
  auto& from = static_cast<const SearchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_head_id() != 0) {
    _this->_internal_set_head_id(from._internal_head_id());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchInfo::CopyFrom(const SearchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchInfo::IsInitialized() const {
  return true;
}

void SearchInfo::InternalSwap(SearchInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchInfo, _impl_.game_id_)
      + sizeof(SearchInfo::_impl_.game_id_)
      - PROTOBUF_FIELD_OFFSET(SearchInfo, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[6]);
}

// ===================================================================

class SearchByIdReq::_Internal {
 public:
};

SearchByIdReq::SearchByIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.SearchByIdReq)
}
SearchByIdReq::SearchByIdReq(const SearchByIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchByIdReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchByIdReq)
}

inline void SearchByIdReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchByIdReq::~SearchByIdReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchByIdReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchByIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SearchByIdReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchByIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchByIdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchByIdReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchByIdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchByIdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchByIdReq)
  return target;
}

size_t SearchByIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchByIdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchByIdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchByIdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchByIdReq::GetClassData() const { return &_class_data_; }


void SearchByIdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchByIdReq*>(&to_msg);
  auto& from = static_cast<const SearchByIdReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchByIdReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchByIdReq::CopyFrom(const SearchByIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchByIdReq::IsInitialized() const {
  return true;
}

void SearchByIdReq::InternalSwap(SearchByIdReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchByIdReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[7]);
}

// ===================================================================

class SearchByNameReq::_Internal {
 public:
};

SearchByNameReq::SearchByNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.SearchByNameReq)
}
SearchByNameReq::SearchByNameReq(const SearchByNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchByNameReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchByNameReq)
}

inline void SearchByNameReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchByNameReq::~SearchByNameReq() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchByNameReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchByNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void SearchByNameReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchByNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchByNameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchByNameReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.SearchByNameReq.user_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchByNameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchByNameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.SearchByNameReq.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchByNameReq)
  return target;
}

size_t SearchByNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchByNameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchByNameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchByNameReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchByNameReq::GetClassData() const { return &_class_data_; }


void SearchByNameReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchByNameReq*>(&to_msg);
  auto& from = static_cast<const SearchByNameReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchByNameReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchByNameReq::CopyFrom(const SearchByNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchByNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchByNameReq::IsInitialized() const {
  return true;
}

void SearchByNameReq::InternalSwap(SearchByNameReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchByNameReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[8]);
}

// ===================================================================

class SearchResp::_Internal {
 public:
};

SearchResp::SearchResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.SearchResp)
}
SearchResp::SearchResp(const SearchResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.search_infos_){from._impl_.search_infos_}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.SearchResp)
}

inline void SearchResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.search_infos_){arena}
    , decltype(_impl_.error_code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchResp::~SearchResp() {
  // @@protoc_insertion_point(destructor:pb.userinfo.SearchResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_infos_.~RepeatedPtrField();
}

void SearchResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.SearchResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.search_infos_.Clear();
  _impl_.error_code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.userinfo.SearchInfo search_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.SearchResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // repeated .pb.userinfo.SearchInfo search_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_search_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_search_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.SearchResp)
  return target;
}

size_t SearchResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.SearchResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.userinfo.SearchInfo search_infos = 2;
  total_size += 1UL * this->_internal_search_infos_size();
  for (const auto& msg : this->_impl_.search_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResp::GetClassData() const { return &_class_data_; }


void SearchResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResp*>(&to_msg);
  auto& from = static_cast<const SearchResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.SearchResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.search_infos_.MergeFrom(from._impl_.search_infos_);
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResp::CopyFrom(const SearchResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.SearchResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResp::IsInitialized() const {
  return true;
}

void SearchResp::InternalSwap(SearchResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.search_infos_.InternalSwap(&other->_impl_.search_infos_);
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[9]);
}

// ===================================================================

class NewUser::_Internal {
 public:
};

NewUser::NewUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.NewUser)
}
NewUser::NewUser(const NewUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.head_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.head_id_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.head_id_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.NewUser)
}

inline void NewUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.head_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewUser::~NewUser() {
  // @@protoc_insertion_point(destructor:pb.userinfo.NewUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void NewUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewUser::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.NewUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.head_id_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.head_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.userinfo.E_UserFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::pb::userinfo::E_UserFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.userinfo.NewUser.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 head_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.NewUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.userinfo.E_UserFlag flag = 1;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.userinfo.NewUser.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 head_id = 3;
  if (this->_internal_head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_head_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.NewUser)
  return target;
}

size_t NewUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.NewUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.userinfo.E_UserFlag flag = 1;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // int32 head_id = 3;
  if (this->_internal_head_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_head_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewUser::GetClassData() const { return &_class_data_; }


void NewUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewUser*>(&to_msg);
  auto& from = static_cast<const NewUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.NewUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_head_id() != 0) {
    _this->_internal_set_head_id(from._internal_head_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewUser::CopyFrom(const NewUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.NewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUser::IsInitialized() const {
  return true;
}

void NewUser::InternalSwap(NewUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewUser, _impl_.head_id_)
      + sizeof(NewUser::_impl_.head_id_)
      - PROTOBUF_FIELD_OFFSET(NewUser, _impl_.flag_)>(
          reinterpret_cast<char*>(&_impl_.flag_),
          reinterpret_cast<char*>(&other->_impl_.flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[10]);
}

// ===================================================================

class NoviceField::_Internal {
 public:
};

NoviceField::NoviceField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.NoviceField)
}
NoviceField::NoviceField(const NoviceField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoviceField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.q_){}
    , decltype(_impl_.r_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.q_, &from._impl_.q_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.r_) -
    reinterpret_cast<char*>(&_impl_.q_)) + sizeof(_impl_.r_));
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.NoviceField)
}

inline void NoviceField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.q_){0}
    , decltype(_impl_.r_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NoviceField::~NoviceField() {
  // @@protoc_insertion_point(destructor:pb.userinfo.NoviceField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoviceField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NoviceField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoviceField::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.NoviceField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.r_) -
      reinterpret_cast<char*>(&_impl_.q_)) + sizeof(_impl_.r_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoviceField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoviceField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.NoviceField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->_internal_q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_q(), target);
  }

  // int32 r = 2;
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.NoviceField)
  return target;
}

size_t NoviceField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.NoviceField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->_internal_q() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_q());
  }

  // int32 r = 2;
  if (this->_internal_r() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoviceField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoviceField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoviceField::GetClassData() const { return &_class_data_; }


void NoviceField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoviceField*>(&to_msg);
  auto& from = static_cast<const NoviceField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.NoviceField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_q() != 0) {
    _this->_internal_set_q(from._internal_q());
  }
  if (from._internal_r() != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoviceField::CopyFrom(const NoviceField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.NoviceField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoviceField::IsInitialized() const {
  return true;
}

void NoviceField::InternalSwap(NoviceField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoviceField, _impl_.r_)
      + sizeof(NoviceField::_impl_.r_)
      - PROTOBUF_FIELD_OFFSET(NoviceField, _impl_.q_)>(
          reinterpret_cast<char*>(&_impl_.q_),
          reinterpret_cast<char*>(&other->_impl_.q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoviceField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[11]);
}

// ===================================================================

class RespNoviceData::_Internal {
 public:
};

RespNoviceData::RespNoviceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.userinfo.RespNoviceData)
}
RespNoviceData::RespNoviceData(const RespNoviceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RespNoviceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.userinfo.RespNoviceData)
}

inline void RespNoviceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RespNoviceData::~RespNoviceData() {
  // @@protoc_insertion_point(destructor:pb.userinfo.RespNoviceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RespNoviceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
}

void RespNoviceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RespNoviceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.userinfo.RespNoviceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespNoviceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.userinfo.NoviceField fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespNoviceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.userinfo.RespNoviceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.userinfo.NoviceField fields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.userinfo.RespNoviceData)
  return target;
}

size_t RespNoviceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.userinfo.RespNoviceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.userinfo.NoviceField fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespNoviceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RespNoviceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespNoviceData::GetClassData() const { return &_class_data_; }


void RespNoviceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RespNoviceData*>(&to_msg);
  auto& from = static_cast<const RespNoviceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.userinfo.RespNoviceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespNoviceData::CopyFrom(const RespNoviceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.userinfo.RespNoviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespNoviceData::IsInitialized() const {
  return true;
}

void RespNoviceData::InternalSwap(RespNoviceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RespNoviceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_userinfo_2eproto_getter, &descriptor_table_userinfo_2eproto_once,
      file_level_metadata_userinfo_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace userinfo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserData*
Arena::CreateMaybeMessage< ::pb::userinfo::UserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::UserData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::AsyncUserDatasReq*
Arena::CreateMaybeMessage< ::pb::userinfo::AsyncUserDatasReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::AsyncUserDatasReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::AsyncUserDatasResp*
Arena::CreateMaybeMessage< ::pb::userinfo::AsyncUserDatasResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::AsyncUserDatasResp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserInfo*
Arena::CreateMaybeMessage< ::pb::userinfo::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserInfoReq*
Arena::CreateMaybeMessage< ::pb::userinfo::UserInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::UserInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::UserInfoResp*
Arena::CreateMaybeMessage< ::pb::userinfo::UserInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::UserInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchInfo*
Arena::CreateMaybeMessage< ::pb::userinfo::SearchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::SearchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchByIdReq*
Arena::CreateMaybeMessage< ::pb::userinfo::SearchByIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::SearchByIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchByNameReq*
Arena::CreateMaybeMessage< ::pb::userinfo::SearchByNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::SearchByNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::SearchResp*
Arena::CreateMaybeMessage< ::pb::userinfo::SearchResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::SearchResp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::NewUser*
Arena::CreateMaybeMessage< ::pb::userinfo::NewUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::NewUser >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::NoviceField*
Arena::CreateMaybeMessage< ::pb::userinfo::NoviceField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::NoviceField >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::userinfo::RespNoviceData*
Arena::CreateMaybeMessage< ::pb::userinfo::RespNoviceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::userinfo::RespNoviceData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
