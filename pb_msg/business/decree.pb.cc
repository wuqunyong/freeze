// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decree.proto

#include "decree.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
namespace decree {
PROTOBUF_CONSTEXPR decree_buy::decree_buy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_code_)*/0u
  , /*decltype(_impl_.get_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct decree_buyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR decree_buyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~decree_buyDefaultTypeInternal() {}
  union {
    decree_buy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 decree_buyDefaultTypeInternal _decree_buy_default_instance_;
PROTOBUF_CONSTEXPR decree_reflush::decree_reflush(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_time_)*/uint64_t{0u}
  , /*decltype(_impl_.cur_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct decree_reflushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR decree_reflushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~decree_reflushDefaultTypeInternal() {}
  union {
    decree_reflush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 decree_reflushDefaultTypeInternal _decree_reflush_default_instance_;
}  // namespace decree
}  // namespace pb
static ::_pb::Metadata file_level_metadata_decree_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_decree_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_decree_2eproto = nullptr;

const uint32_t TableStruct_decree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::decree::decree_buy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::decree::decree_buy, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::decree::decree_buy, _impl_.get_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::decree::decree_reflush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::decree::decree_reflush, _impl_.next_time_),
  PROTOBUF_FIELD_OFFSET(::pb::decree::decree_reflush, _impl_.cur_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::decree::decree_buy)},
  { 8, -1, -1, sizeof(::pb::decree::decree_reflush)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::decree::_decree_buy_default_instance_._instance,
  &::pb::decree::_decree_reflush_default_instance_._instance,
};

const char descriptor_table_protodef_decree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014decree.proto\022\tpb.decree\"3\n\ndecree_buy\022"
  "\022\n\nerror_code\030\001 \001(\r\022\021\n\tget_count\030\002 \001(\r\"6"
  "\n\016decree_reflush\022\021\n\tnext_time\030\001 \001(\004\022\021\n\tc"
  "ur_count\030\002 \001(\r*Z\n\014E_decree_cmd\022\025\n\021E_decr"
  "ee_cmd_None\020\000\022\024\n\020E_decree_cmd_Buy\020\001\022\035\n\031E"
  "_decree_cmd_reflush_time\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_decree_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_decree_2eproto = {
    false, false, 234, descriptor_table_protodef_decree_2eproto,
    "decree.proto",
    &descriptor_table_decree_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_decree_2eproto::offsets,
    file_level_metadata_decree_2eproto, file_level_enum_descriptors_decree_2eproto,
    file_level_service_descriptors_decree_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_decree_2eproto_getter() {
  return &descriptor_table_decree_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_decree_2eproto(&descriptor_table_decree_2eproto);
namespace pb {
namespace decree {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_decree_cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_decree_2eproto);
  return file_level_enum_descriptors_decree_2eproto[0];
}
bool E_decree_cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class decree_buy::_Internal {
 public:
};

decree_buy::decree_buy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.decree.decree_buy)
}
decree_buy::decree_buy(const decree_buy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  decree_buy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){}
    , decltype(_impl_.get_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.error_code_, &from._impl_.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.get_count_) -
    reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.get_count_));
  // @@protoc_insertion_point(copy_constructor:pb.decree.decree_buy)
}

inline void decree_buy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){0u}
    , decltype(_impl_.get_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

decree_buy::~decree_buy() {
  // @@protoc_insertion_point(destructor:pb.decree.decree_buy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void decree_buy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void decree_buy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void decree_buy::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.decree.decree_buy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.get_count_) -
      reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.get_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* decree_buy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 get_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.get_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* decree_buy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.decree.decree_buy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // uint32 get_count = 2;
  if (this->_internal_get_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_get_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.decree.decree_buy)
  return target;
}

size_t decree_buy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.decree.decree_buy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_error_code());
  }

  // uint32 get_count = 2;
  if (this->_internal_get_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_get_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData decree_buy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    decree_buy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*decree_buy::GetClassData() const { return &_class_data_; }


void decree_buy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<decree_buy*>(&to_msg);
  auto& from = static_cast<const decree_buy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.decree.decree_buy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (from._internal_get_count() != 0) {
    _this->_internal_set_get_count(from._internal_get_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void decree_buy::CopyFrom(const decree_buy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.decree.decree_buy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool decree_buy::IsInitialized() const {
  return true;
}

void decree_buy::InternalSwap(decree_buy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(decree_buy, _impl_.get_count_)
      + sizeof(decree_buy::_impl_.get_count_)
      - PROTOBUF_FIELD_OFFSET(decree_buy, _impl_.error_code_)>(
          reinterpret_cast<char*>(&_impl_.error_code_),
          reinterpret_cast<char*>(&other->_impl_.error_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata decree_buy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decree_2eproto_getter, &descriptor_table_decree_2eproto_once,
      file_level_metadata_decree_2eproto[0]);
}

// ===================================================================

class decree_reflush::_Internal {
 public:
};

decree_reflush::decree_reflush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.decree.decree_reflush)
}
decree_reflush::decree_reflush(const decree_reflush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  decree_reflush* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_time_){}
    , decltype(_impl_.cur_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_time_, &from._impl_.next_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cur_count_) -
    reinterpret_cast<char*>(&_impl_.next_time_)) + sizeof(_impl_.cur_count_));
  // @@protoc_insertion_point(copy_constructor:pb.decree.decree_reflush)
}

inline void decree_reflush::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_time_){uint64_t{0u}}
    , decltype(_impl_.cur_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

decree_reflush::~decree_reflush() {
  // @@protoc_insertion_point(destructor:pb.decree.decree_reflush)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void decree_reflush::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void decree_reflush::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void decree_reflush::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.decree.decree_reflush)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.next_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cur_count_) -
      reinterpret_cast<char*>(&_impl_.next_time_)) + sizeof(_impl_.cur_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* decree_reflush::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 next_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cur_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cur_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* decree_reflush::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.decree.decree_reflush)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_time = 1;
  if (this->_internal_next_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_next_time(), target);
  }

  // uint32 cur_count = 2;
  if (this->_internal_cur_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.decree.decree_reflush)
  return target;
}

size_t decree_reflush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.decree.decree_reflush)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 next_time = 1;
  if (this->_internal_next_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_next_time());
  }

  // uint32 cur_count = 2;
  if (this->_internal_cur_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cur_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData decree_reflush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    decree_reflush::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*decree_reflush::GetClassData() const { return &_class_data_; }


void decree_reflush::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<decree_reflush*>(&to_msg);
  auto& from = static_cast<const decree_reflush&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.decree.decree_reflush)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_next_time() != 0) {
    _this->_internal_set_next_time(from._internal_next_time());
  }
  if (from._internal_cur_count() != 0) {
    _this->_internal_set_cur_count(from._internal_cur_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void decree_reflush::CopyFrom(const decree_reflush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.decree.decree_reflush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool decree_reflush::IsInitialized() const {
  return true;
}

void decree_reflush::InternalSwap(decree_reflush* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(decree_reflush, _impl_.cur_count_)
      + sizeof(decree_reflush::_impl_.cur_count_)
      - PROTOBUF_FIELD_OFFSET(decree_reflush, _impl_.next_time_)>(
          reinterpret_cast<char*>(&_impl_.next_time_),
          reinterpret_cast<char*>(&other->_impl_.next_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata decree_reflush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decree_2eproto_getter, &descriptor_table_decree_2eproto_once,
      file_level_metadata_decree_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace decree
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::decree::decree_buy*
Arena::CreateMaybeMessage< ::pb::decree::decree_buy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::decree::decree_buy >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::decree::decree_reflush*
Arena::CreateMaybeMessage< ::pb::decree::decree_reflush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::decree::decree_reflush >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
