// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: talent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_talent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_talent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_talent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_talent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_talent_2eproto;
namespace pb {
namespace talent {
class TalentElem;
struct TalentElemDefaultTypeInternal;
extern TalentElemDefaultTypeInternal _TalentElem_default_instance_;
class TalentPanel;
struct TalentPanelDefaultTypeInternal;
extern TalentPanelDefaultTypeInternal _TalentPanel_default_instance_;
class TalentSlot;
struct TalentSlotDefaultTypeInternal;
extern TalentSlotDefaultTypeInternal _TalentSlot_default_instance_;
class Talent_Activate_Req;
struct Talent_Activate_ReqDefaultTypeInternal;
extern Talent_Activate_ReqDefaultTypeInternal _Talent_Activate_Req_default_instance_;
class Talent_Activate_Response;
struct Talent_Activate_ResponseDefaultTypeInternal;
extern Talent_Activate_ResponseDefaultTypeInternal _Talent_Activate_Response_default_instance_;
class Talent_BaseChange_Notice;
struct Talent_BaseChange_NoticeDefaultTypeInternal;
extern Talent_BaseChange_NoticeDefaultTypeInternal _Talent_BaseChange_Notice_default_instance_;
class Talent_Choose_Req;
struct Talent_Choose_ReqDefaultTypeInternal;
extern Talent_Choose_ReqDefaultTypeInternal _Talent_Choose_Req_default_instance_;
class Talent_Choose_Response;
struct Talent_Choose_ResponseDefaultTypeInternal;
extern Talent_Choose_ResponseDefaultTypeInternal _Talent_Choose_Response_default_instance_;
class Talent_ElemsChange_Notice;
struct Talent_ElemsChange_NoticeDefaultTypeInternal;
extern Talent_ElemsChange_NoticeDefaultTypeInternal _Talent_ElemsChange_Notice_default_instance_;
class Talent_Login_Notice;
struct Talent_Login_NoticeDefaultTypeInternal;
extern Talent_Login_NoticeDefaultTypeInternal _Talent_Login_Notice_default_instance_;
class Talent_Open_Req;
struct Talent_Open_ReqDefaultTypeInternal;
extern Talent_Open_ReqDefaultTypeInternal _Talent_Open_Req_default_instance_;
class Talent_Open_Response;
struct Talent_Open_ResponseDefaultTypeInternal;
extern Talent_Open_ResponseDefaultTypeInternal _Talent_Open_Response_default_instance_;
class Talent_Unload_Req;
struct Talent_Unload_ReqDefaultTypeInternal;
extern Talent_Unload_ReqDefaultTypeInternal _Talent_Unload_Req_default_instance_;
class Talent_Unload_Response;
struct Talent_Unload_ResponseDefaultTypeInternal;
extern Talent_Unload_ResponseDefaultTypeInternal _Talent_Unload_Response_default_instance_;
}  // namespace talent
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::talent::TalentElem* Arena::CreateMaybeMessage<::pb::talent::TalentElem>(Arena*);
template<> ::pb::talent::TalentPanel* Arena::CreateMaybeMessage<::pb::talent::TalentPanel>(Arena*);
template<> ::pb::talent::TalentSlot* Arena::CreateMaybeMessage<::pb::talent::TalentSlot>(Arena*);
template<> ::pb::talent::Talent_Activate_Req* Arena::CreateMaybeMessage<::pb::talent::Talent_Activate_Req>(Arena*);
template<> ::pb::talent::Talent_Activate_Response* Arena::CreateMaybeMessage<::pb::talent::Talent_Activate_Response>(Arena*);
template<> ::pb::talent::Talent_BaseChange_Notice* Arena::CreateMaybeMessage<::pb::talent::Talent_BaseChange_Notice>(Arena*);
template<> ::pb::talent::Talent_Choose_Req* Arena::CreateMaybeMessage<::pb::talent::Talent_Choose_Req>(Arena*);
template<> ::pb::talent::Talent_Choose_Response* Arena::CreateMaybeMessage<::pb::talent::Talent_Choose_Response>(Arena*);
template<> ::pb::talent::Talent_ElemsChange_Notice* Arena::CreateMaybeMessage<::pb::talent::Talent_ElemsChange_Notice>(Arena*);
template<> ::pb::talent::Talent_Login_Notice* Arena::CreateMaybeMessage<::pb::talent::Talent_Login_Notice>(Arena*);
template<> ::pb::talent::Talent_Open_Req* Arena::CreateMaybeMessage<::pb::talent::Talent_Open_Req>(Arena*);
template<> ::pb::talent::Talent_Open_Response* Arena::CreateMaybeMessage<::pb::talent::Talent_Open_Response>(Arena*);
template<> ::pb::talent::Talent_Unload_Req* Arena::CreateMaybeMessage<::pb::talent::Talent_Unload_Req>(Arena*);
template<> ::pb::talent::Talent_Unload_Response* Arena::CreateMaybeMessage<::pb::talent::Talent_Unload_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace talent {

enum E_Talent_Cmd : int {
  E_Talent_Cmd_None = 0,
  E_Talent_Cmd_Login_Notice = 1,
  E_Talent_Cmd_BaseChange_Notice = 2,
  E_Talent_Cmd_ElemsChange_Notice = 3,
  E_Talent_Cmd_Open_Req = 10,
  E_Talent_Cmd_Open_Response = 11,
  E_Talent_Cmd_Choose_Req = 12,
  E_Talent_Cmd_Choose_Response = 13,
  E_Talent_Cmd_Activate_Req = 14,
  E_Talent_Cmd_Activate_Response = 15,
  E_Talent_Cmd_Unload_Req = 16,
  E_Talent_Cmd_Unload_Response = 17,
  E_Talent_Cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_Talent_Cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_Talent_Cmd_IsValid(int value);
constexpr E_Talent_Cmd E_Talent_Cmd_MIN = E_Talent_Cmd_None;
constexpr E_Talent_Cmd E_Talent_Cmd_MAX = E_Talent_Cmd_Unload_Response;
constexpr int E_Talent_Cmd_ARRAYSIZE = E_Talent_Cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Talent_Cmd_descriptor();
template<typename T>
inline const std::string& E_Talent_Cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_Talent_Cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_Talent_Cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_Talent_Cmd_descriptor(), enum_t_value);
}
inline bool E_Talent_Cmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_Talent_Cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_Talent_Cmd>(
    E_Talent_Cmd_descriptor(), name, value);
}
enum E_Talent_Status : int {
  E_TE_None = 0,
  E_TE_Prepare = 1,
  E_TE_Ready = 2,
  E_Talent_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_Talent_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_Talent_Status_IsValid(int value);
constexpr E_Talent_Status E_Talent_Status_MIN = E_TE_None;
constexpr E_Talent_Status E_Talent_Status_MAX = E_TE_Ready;
constexpr int E_Talent_Status_ARRAYSIZE = E_Talent_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Talent_Status_descriptor();
template<typename T>
inline const std::string& E_Talent_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_Talent_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_Talent_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_Talent_Status_descriptor(), enum_t_value);
}
inline bool E_Talent_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_Talent_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_Talent_Status>(
    E_Talent_Status_descriptor(), name, value);
}
// ===================================================================

class TalentSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.TalentSlot) */ {
 public:
  inline TalentSlot() : TalentSlot(nullptr) {}
  ~TalentSlot() override;
  explicit PROTOBUF_CONSTEXPR TalentSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TalentSlot(const TalentSlot& from);
  TalentSlot(TalentSlot&& from) noexcept
    : TalentSlot() {
    *this = ::std::move(from);
  }

  inline TalentSlot& operator=(const TalentSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TalentSlot& operator=(TalentSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TalentSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const TalentSlot* internal_default_instance() {
    return reinterpret_cast<const TalentSlot*>(
               &_TalentSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TalentSlot& a, TalentSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(TalentSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TalentSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TalentSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TalentSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TalentSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TalentSlot& from) {
    TalentSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TalentSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.TalentSlot";
  }
  protected:
  explicit TalentSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUnlockFlagFieldNumber = 2,
    kTalentIdFieldNumber = 4,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // bool unlock_flag = 2;
  void clear_unlock_flag();
  bool unlock_flag() const;
  void set_unlock_flag(bool value);
  private:
  bool _internal_unlock_flag() const;
  void _internal_set_unlock_flag(bool value);
  public:

  // uint64 talent_id = 4;
  void clear_talent_id();
  uint64_t talent_id() const;
  void set_talent_id(uint64_t value);
  private:
  uint64_t _internal_talent_id() const;
  void _internal_set_talent_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.TalentSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    bool unlock_flag_;
    uint64_t talent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class TalentElem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.TalentElem) */ {
 public:
  inline TalentElem() : TalentElem(nullptr) {}
  ~TalentElem() override;
  explicit PROTOBUF_CONSTEXPR TalentElem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TalentElem(const TalentElem& from);
  TalentElem(TalentElem&& from) noexcept
    : TalentElem() {
    *this = ::std::move(from);
  }

  inline TalentElem& operator=(const TalentElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TalentElem& operator=(TalentElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TalentElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const TalentElem* internal_default_instance() {
    return reinterpret_cast<const TalentElem*>(
               &_TalentElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TalentElem& a, TalentElem& b) {
    a.Swap(&b);
  }
  inline void Swap(TalentElem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TalentElem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TalentElem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TalentElem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TalentElem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TalentElem& from) {
    TalentElem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TalentElem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.TalentElem";
  }
  protected:
  explicit TalentElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kExpFieldNumber = 3,
    kBeginTimeFieldNumber = 5,
    kStatusFieldNumber = 4,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 exp = 3;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // uint64 begin_time = 5;
  void clear_begin_time();
  uint64_t begin_time() const;
  void set_begin_time(uint64_t value);
  private:
  uint64_t _internal_begin_time() const;
  void _internal_set_begin_time(uint64_t value);
  public:

  // .pb.talent.E_Talent_Status status = 4;
  void clear_status();
  ::pb::talent::E_Talent_Status status() const;
  void set_status(::pb::talent::E_Talent_Status value);
  private:
  ::pb::talent::E_Talent_Status _internal_status() const;
  void _internal_set_status(::pb::talent::E_Talent_Status value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.TalentElem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    uint32_t level_;
    uint32_t exp_;
    uint64_t begin_time_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class TalentPanel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.TalentPanel) */ {
 public:
  inline TalentPanel() : TalentPanel(nullptr) {}
  ~TalentPanel() override;
  explicit PROTOBUF_CONSTEXPR TalentPanel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TalentPanel(const TalentPanel& from);
  TalentPanel(TalentPanel&& from) noexcept
    : TalentPanel() {
    *this = ::std::move(from);
  }

  inline TalentPanel& operator=(const TalentPanel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TalentPanel& operator=(TalentPanel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TalentPanel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TalentPanel* internal_default_instance() {
    return reinterpret_cast<const TalentPanel*>(
               &_TalentPanel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TalentPanel& a, TalentPanel& b) {
    a.Swap(&b);
  }
  inline void Swap(TalentPanel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TalentPanel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TalentPanel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TalentPanel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TalentPanel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TalentPanel& from) {
    TalentPanel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TalentPanel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.TalentPanel";
  }
  protected:
  explicit TalentPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 4,
    kElemsFieldNumber = 5,
    kOptionalListFieldNumber = 8,
    kLevelFieldNumber = 1,
    kExpFieldNumber = 2,
    kPointFieldNumber = 3,
    kHasPendingOpenFieldNumber = 6,
    kReserveNumFieldNumber = 7,
  };
  // repeated .pb.talent.TalentSlot slots = 4;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::pb::talent::TalentSlot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >*
      mutable_slots();
  private:
  const ::pb::talent::TalentSlot& _internal_slots(int index) const;
  ::pb::talent::TalentSlot* _internal_add_slots();
  public:
  const ::pb::talent::TalentSlot& slots(int index) const;
  ::pb::talent::TalentSlot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >&
      slots() const;

  // repeated .pb.talent.TalentElem elems = 5;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::pb::talent::TalentElem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >*
      mutable_elems();
  private:
  const ::pb::talent::TalentElem& _internal_elems(int index) const;
  ::pb::talent::TalentElem* _internal_add_elems();
  public:
  const ::pb::talent::TalentElem& elems(int index) const;
  ::pb::talent::TalentElem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >&
      elems() const;

  // repeated uint64 optional_list = 8;
  int optional_list_size() const;
  private:
  int _internal_optional_list_size() const;
  public:
  void clear_optional_list();
  private:
  uint64_t _internal_optional_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_optional_list() const;
  void _internal_add_optional_list(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_optional_list();
  public:
  uint64_t optional_list(int index) const;
  void set_optional_list(int index, uint64_t value);
  void add_optional_list(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      optional_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_optional_list();

  // uint32 level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 exp = 2;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // uint32 point = 3;
  void clear_point();
  uint32_t point() const;
  void set_point(uint32_t value);
  private:
  uint32_t _internal_point() const;
  void _internal_set_point(uint32_t value);
  public:

  // bool has_pending_open = 6;
  void clear_has_pending_open();
  bool has_pending_open() const;
  void set_has_pending_open(bool value);
  private:
  bool _internal_has_pending_open() const;
  void _internal_set_has_pending_open(bool value);
  public:

  // uint32 reserve_num = 7;
  void clear_reserve_num();
  uint32_t reserve_num() const;
  void set_reserve_num(uint32_t value);
  private:
  uint32_t _internal_reserve_num() const;
  void _internal_set_reserve_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.TalentPanel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot > slots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem > elems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > optional_list_;
    mutable std::atomic<int> _optional_list_cached_byte_size_;
    uint32_t level_;
    uint32_t exp_;
    uint32_t point_;
    bool has_pending_open_;
    uint32_t reserve_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Login_Notice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Login_Notice) */ {
 public:
  inline Talent_Login_Notice() : Talent_Login_Notice(nullptr) {}
  ~Talent_Login_Notice() override;
  explicit PROTOBUF_CONSTEXPR Talent_Login_Notice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Login_Notice(const Talent_Login_Notice& from);
  Talent_Login_Notice(Talent_Login_Notice&& from) noexcept
    : Talent_Login_Notice() {
    *this = ::std::move(from);
  }

  inline Talent_Login_Notice& operator=(const Talent_Login_Notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Login_Notice& operator=(Talent_Login_Notice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Login_Notice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Login_Notice* internal_default_instance() {
    return reinterpret_cast<const Talent_Login_Notice*>(
               &_Talent_Login_Notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Talent_Login_Notice& a, Talent_Login_Notice& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Login_Notice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Login_Notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Login_Notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Login_Notice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Login_Notice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Login_Notice& from) {
    Talent_Login_Notice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Login_Notice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Login_Notice";
  }
  protected:
  explicit Talent_Login_Notice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .pb.talent.TalentPanel data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::pb::talent::TalentPanel& data() const;
  PROTOBUF_NODISCARD ::pb::talent::TalentPanel* release_data();
  ::pb::talent::TalentPanel* mutable_data();
  void set_allocated_data(::pb::talent::TalentPanel* data);
  private:
  const ::pb::talent::TalentPanel& _internal_data() const;
  ::pb::talent::TalentPanel* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::pb::talent::TalentPanel* data);
  ::pb::talent::TalentPanel* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Login_Notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::pb::talent::TalentPanel* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_BaseChange_Notice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_BaseChange_Notice) */ {
 public:
  inline Talent_BaseChange_Notice() : Talent_BaseChange_Notice(nullptr) {}
  ~Talent_BaseChange_Notice() override;
  explicit PROTOBUF_CONSTEXPR Talent_BaseChange_Notice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_BaseChange_Notice(const Talent_BaseChange_Notice& from);
  Talent_BaseChange_Notice(Talent_BaseChange_Notice&& from) noexcept
    : Talent_BaseChange_Notice() {
    *this = ::std::move(from);
  }

  inline Talent_BaseChange_Notice& operator=(const Talent_BaseChange_Notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_BaseChange_Notice& operator=(Talent_BaseChange_Notice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_BaseChange_Notice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_BaseChange_Notice* internal_default_instance() {
    return reinterpret_cast<const Talent_BaseChange_Notice*>(
               &_Talent_BaseChange_Notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Talent_BaseChange_Notice& a, Talent_BaseChange_Notice& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_BaseChange_Notice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_BaseChange_Notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_BaseChange_Notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_BaseChange_Notice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_BaseChange_Notice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_BaseChange_Notice& from) {
    Talent_BaseChange_Notice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_BaseChange_Notice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_BaseChange_Notice";
  }
  protected:
  explicit Talent_BaseChange_Notice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kExpFieldNumber = 2,
    kPointFieldNumber = 3,
  };
  // uint32 level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 exp = 2;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // uint32 point = 3;
  void clear_point();
  uint32_t point() const;
  void set_point(uint32_t value);
  private:
  uint32_t _internal_point() const;
  void _internal_set_point(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_BaseChange_Notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t level_;
    uint32_t exp_;
    uint32_t point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_ElemsChange_Notice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_ElemsChange_Notice) */ {
 public:
  inline Talent_ElemsChange_Notice() : Talent_ElemsChange_Notice(nullptr) {}
  ~Talent_ElemsChange_Notice() override;
  explicit PROTOBUF_CONSTEXPR Talent_ElemsChange_Notice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_ElemsChange_Notice(const Talent_ElemsChange_Notice& from);
  Talent_ElemsChange_Notice(Talent_ElemsChange_Notice&& from) noexcept
    : Talent_ElemsChange_Notice() {
    *this = ::std::move(from);
  }

  inline Talent_ElemsChange_Notice& operator=(const Talent_ElemsChange_Notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_ElemsChange_Notice& operator=(Talent_ElemsChange_Notice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_ElemsChange_Notice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_ElemsChange_Notice* internal_default_instance() {
    return reinterpret_cast<const Talent_ElemsChange_Notice*>(
               &_Talent_ElemsChange_Notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Talent_ElemsChange_Notice& a, Talent_ElemsChange_Notice& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_ElemsChange_Notice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_ElemsChange_Notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_ElemsChange_Notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_ElemsChange_Notice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_ElemsChange_Notice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_ElemsChange_Notice& from) {
    Talent_ElemsChange_Notice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_ElemsChange_Notice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_ElemsChange_Notice";
  }
  protected:
  explicit Talent_ElemsChange_Notice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 1,
    kElemsFieldNumber = 2,
  };
  // repeated .pb.talent.TalentSlot slots = 1;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::pb::talent::TalentSlot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >*
      mutable_slots();
  private:
  const ::pb::talent::TalentSlot& _internal_slots(int index) const;
  ::pb::talent::TalentSlot* _internal_add_slots();
  public:
  const ::pb::talent::TalentSlot& slots(int index) const;
  ::pb::talent::TalentSlot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >&
      slots() const;

  // repeated .pb.talent.TalentElem elems = 2;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::pb::talent::TalentElem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >*
      mutable_elems();
  private:
  const ::pb::talent::TalentElem& _internal_elems(int index) const;
  ::pb::talent::TalentElem* _internal_add_elems();
  public:
  const ::pb::talent::TalentElem& elems(int index) const;
  ::pb::talent::TalentElem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >&
      elems() const;

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_ElemsChange_Notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot > slots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem > elems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Open_Req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Open_Req) */ {
 public:
  inline Talent_Open_Req() : Talent_Open_Req(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Talent_Open_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Open_Req(const Talent_Open_Req& from);
  Talent_Open_Req(Talent_Open_Req&& from) noexcept
    : Talent_Open_Req() {
    *this = ::std::move(from);
  }

  inline Talent_Open_Req& operator=(const Talent_Open_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Open_Req& operator=(Talent_Open_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Open_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Open_Req* internal_default_instance() {
    return reinterpret_cast<const Talent_Open_Req*>(
               &_Talent_Open_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Talent_Open_Req& a, Talent_Open_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Open_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Open_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Open_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Open_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Talent_Open_Req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Talent_Open_Req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Open_Req";
  }
  protected:
  explicit Talent_Open_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Open_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Open_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Open_Response) */ {
 public:
  inline Talent_Open_Response() : Talent_Open_Response(nullptr) {}
  ~Talent_Open_Response() override;
  explicit PROTOBUF_CONSTEXPR Talent_Open_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Open_Response(const Talent_Open_Response& from);
  Talent_Open_Response(Talent_Open_Response&& from) noexcept
    : Talent_Open_Response() {
    *this = ::std::move(from);
  }

  inline Talent_Open_Response& operator=(const Talent_Open_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Open_Response& operator=(Talent_Open_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Open_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Open_Response* internal_default_instance() {
    return reinterpret_cast<const Talent_Open_Response*>(
               &_Talent_Open_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Talent_Open_Response& a, Talent_Open_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Open_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Open_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Open_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Open_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Open_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Open_Response& from) {
    Talent_Open_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Open_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Open_Response";
  }
  protected:
  explicit Talent_Open_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
    kReserveNumFieldNumber = 2,
  };
  // repeated uint64 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  uint64_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_data() const;
  void _internal_add_data(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_data();
  public:
  uint64_t data(int index) const;
  void set_data(int index, uint64_t value);
  void add_data(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_data();

  // uint32 error_code = 1;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // uint32 reserve_num = 2;
  void clear_reserve_num();
  uint32_t reserve_num() const;
  void set_reserve_num(uint32_t value);
  private:
  uint32_t _internal_reserve_num() const;
  void _internal_set_reserve_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Open_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    uint32_t error_code_;
    uint32_t reserve_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Choose_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Choose_Req) */ {
 public:
  inline Talent_Choose_Req() : Talent_Choose_Req(nullptr) {}
  ~Talent_Choose_Req() override;
  explicit PROTOBUF_CONSTEXPR Talent_Choose_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Choose_Req(const Talent_Choose_Req& from);
  Talent_Choose_Req(Talent_Choose_Req&& from) noexcept
    : Talent_Choose_Req() {
    *this = ::std::move(from);
  }

  inline Talent_Choose_Req& operator=(const Talent_Choose_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Choose_Req& operator=(Talent_Choose_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Choose_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Choose_Req* internal_default_instance() {
    return reinterpret_cast<const Talent_Choose_Req*>(
               &_Talent_Choose_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Talent_Choose_Req& a, Talent_Choose_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Choose_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Choose_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Choose_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Choose_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Choose_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Choose_Req& from) {
    Talent_Choose_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Choose_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Choose_Req";
  }
  protected:
  explicit Talent_Choose_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated uint32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  uint32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_id() const;
  void _internal_add_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_id();
  public:
  uint32_t id(int index) const;
  void set_id(int index, uint32_t value);
  void add_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Choose_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > id_;
    mutable std::atomic<int> _id_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Choose_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Choose_Response) */ {
 public:
  inline Talent_Choose_Response() : Talent_Choose_Response(nullptr) {}
  ~Talent_Choose_Response() override;
  explicit PROTOBUF_CONSTEXPR Talent_Choose_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Choose_Response(const Talent_Choose_Response& from);
  Talent_Choose_Response(Talent_Choose_Response&& from) noexcept
    : Talent_Choose_Response() {
    *this = ::std::move(from);
  }

  inline Talent_Choose_Response& operator=(const Talent_Choose_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Choose_Response& operator=(Talent_Choose_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Choose_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Choose_Response* internal_default_instance() {
    return reinterpret_cast<const Talent_Choose_Response*>(
               &_Talent_Choose_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Talent_Choose_Response& a, Talent_Choose_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Choose_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Choose_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Choose_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Choose_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Choose_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Choose_Response& from) {
    Talent_Choose_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Choose_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Choose_Response";
  }
  protected:
  explicit Talent_Choose_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // uint32 error_code = 1;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Choose_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Activate_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Activate_Req) */ {
 public:
  inline Talent_Activate_Req() : Talent_Activate_Req(nullptr) {}
  ~Talent_Activate_Req() override;
  explicit PROTOBUF_CONSTEXPR Talent_Activate_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Activate_Req(const Talent_Activate_Req& from);
  Talent_Activate_Req(Talent_Activate_Req&& from) noexcept
    : Talent_Activate_Req() {
    *this = ::std::move(from);
  }

  inline Talent_Activate_Req& operator=(const Talent_Activate_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Activate_Req& operator=(Talent_Activate_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Activate_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Activate_Req* internal_default_instance() {
    return reinterpret_cast<const Talent_Activate_Req*>(
               &_Talent_Activate_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Talent_Activate_Req& a, Talent_Activate_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Activate_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Activate_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Activate_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Activate_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Activate_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Activate_Req& from) {
    Talent_Activate_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Activate_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Activate_Req";
  }
  protected:
  explicit Talent_Activate_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Activate_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Activate_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Activate_Response) */ {
 public:
  inline Talent_Activate_Response() : Talent_Activate_Response(nullptr) {}
  ~Talent_Activate_Response() override;
  explicit PROTOBUF_CONSTEXPR Talent_Activate_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Activate_Response(const Talent_Activate_Response& from);
  Talent_Activate_Response(Talent_Activate_Response&& from) noexcept
    : Talent_Activate_Response() {
    *this = ::std::move(from);
  }

  inline Talent_Activate_Response& operator=(const Talent_Activate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Activate_Response& operator=(Talent_Activate_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Activate_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Activate_Response* internal_default_instance() {
    return reinterpret_cast<const Talent_Activate_Response*>(
               &_Talent_Activate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Talent_Activate_Response& a, Talent_Activate_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Activate_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Activate_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Activate_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Activate_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Activate_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Activate_Response& from) {
    Talent_Activate_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Activate_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Activate_Response";
  }
  protected:
  explicit Talent_Activate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // uint32 error_code = 1;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Activate_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Unload_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Unload_Req) */ {
 public:
  inline Talent_Unload_Req() : Talent_Unload_Req(nullptr) {}
  ~Talent_Unload_Req() override;
  explicit PROTOBUF_CONSTEXPR Talent_Unload_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Unload_Req(const Talent_Unload_Req& from);
  Talent_Unload_Req(Talent_Unload_Req&& from) noexcept
    : Talent_Unload_Req() {
    *this = ::std::move(from);
  }

  inline Talent_Unload_Req& operator=(const Talent_Unload_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Unload_Req& operator=(Talent_Unload_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Unload_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Unload_Req* internal_default_instance() {
    return reinterpret_cast<const Talent_Unload_Req*>(
               &_Talent_Unload_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Talent_Unload_Req& a, Talent_Unload_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Unload_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Unload_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Unload_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Unload_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Unload_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Unload_Req& from) {
    Talent_Unload_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Unload_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Unload_Req";
  }
  protected:
  explicit Talent_Unload_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Unload_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// -------------------------------------------------------------------

class Talent_Unload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.talent.Talent_Unload_Response) */ {
 public:
  inline Talent_Unload_Response() : Talent_Unload_Response(nullptr) {}
  ~Talent_Unload_Response() override;
  explicit PROTOBUF_CONSTEXPR Talent_Unload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talent_Unload_Response(const Talent_Unload_Response& from);
  Talent_Unload_Response(Talent_Unload_Response&& from) noexcept
    : Talent_Unload_Response() {
    *this = ::std::move(from);
  }

  inline Talent_Unload_Response& operator=(const Talent_Unload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talent_Unload_Response& operator=(Talent_Unload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talent_Unload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talent_Unload_Response* internal_default_instance() {
    return reinterpret_cast<const Talent_Unload_Response*>(
               &_Talent_Unload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Talent_Unload_Response& a, Talent_Unload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Talent_Unload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talent_Unload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talent_Unload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talent_Unload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talent_Unload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talent_Unload_Response& from) {
    Talent_Unload_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talent_Unload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.talent.Talent_Unload_Response";
  }
  protected:
  explicit Talent_Unload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // uint32 error_code = 1;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.talent.Talent_Unload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_talent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TalentSlot

// uint32 id = 1;
inline void TalentSlot::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TalentSlot::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TalentSlot::id() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentSlot.id)
  return _internal_id();
}
inline void TalentSlot::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TalentSlot::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentSlot.id)
}

// bool unlock_flag = 2;
inline void TalentSlot::clear_unlock_flag() {
  _impl_.unlock_flag_ = false;
}
inline bool TalentSlot::_internal_unlock_flag() const {
  return _impl_.unlock_flag_;
}
inline bool TalentSlot::unlock_flag() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentSlot.unlock_flag)
  return _internal_unlock_flag();
}
inline void TalentSlot::_internal_set_unlock_flag(bool value) {
  
  _impl_.unlock_flag_ = value;
}
inline void TalentSlot::set_unlock_flag(bool value) {
  _internal_set_unlock_flag(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentSlot.unlock_flag)
}

// uint64 talent_id = 4;
inline void TalentSlot::clear_talent_id() {
  _impl_.talent_id_ = uint64_t{0u};
}
inline uint64_t TalentSlot::_internal_talent_id() const {
  return _impl_.talent_id_;
}
inline uint64_t TalentSlot::talent_id() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentSlot.talent_id)
  return _internal_talent_id();
}
inline void TalentSlot::_internal_set_talent_id(uint64_t value) {
  
  _impl_.talent_id_ = value;
}
inline void TalentSlot::set_talent_id(uint64_t value) {
  _internal_set_talent_id(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentSlot.talent_id)
}

// -------------------------------------------------------------------

// TalentElem

// uint64 id = 1;
inline void TalentElem::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t TalentElem::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t TalentElem::id() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentElem.id)
  return _internal_id();
}
inline void TalentElem::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void TalentElem::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentElem.id)
}

// uint32 level = 2;
inline void TalentElem::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TalentElem::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TalentElem::level() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentElem.level)
  return _internal_level();
}
inline void TalentElem::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TalentElem::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentElem.level)
}

// uint32 exp = 3;
inline void TalentElem::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t TalentElem::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t TalentElem::exp() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentElem.exp)
  return _internal_exp();
}
inline void TalentElem::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void TalentElem::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentElem.exp)
}

// .pb.talent.E_Talent_Status status = 4;
inline void TalentElem::clear_status() {
  _impl_.status_ = 0;
}
inline ::pb::talent::E_Talent_Status TalentElem::_internal_status() const {
  return static_cast< ::pb::talent::E_Talent_Status >(_impl_.status_);
}
inline ::pb::talent::E_Talent_Status TalentElem::status() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentElem.status)
  return _internal_status();
}
inline void TalentElem::_internal_set_status(::pb::talent::E_Talent_Status value) {
  
  _impl_.status_ = value;
}
inline void TalentElem::set_status(::pb::talent::E_Talent_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentElem.status)
}

// uint64 begin_time = 5;
inline void TalentElem::clear_begin_time() {
  _impl_.begin_time_ = uint64_t{0u};
}
inline uint64_t TalentElem::_internal_begin_time() const {
  return _impl_.begin_time_;
}
inline uint64_t TalentElem::begin_time() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentElem.begin_time)
  return _internal_begin_time();
}
inline void TalentElem::_internal_set_begin_time(uint64_t value) {
  
  _impl_.begin_time_ = value;
}
inline void TalentElem::set_begin_time(uint64_t value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentElem.begin_time)
}

// -------------------------------------------------------------------

// TalentPanel

// uint32 level = 1;
inline void TalentPanel::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t TalentPanel::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t TalentPanel::level() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.level)
  return _internal_level();
}
inline void TalentPanel::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void TalentPanel::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentPanel.level)
}

// uint32 exp = 2;
inline void TalentPanel::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t TalentPanel::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t TalentPanel::exp() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.exp)
  return _internal_exp();
}
inline void TalentPanel::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void TalentPanel::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentPanel.exp)
}

// uint32 point = 3;
inline void TalentPanel::clear_point() {
  _impl_.point_ = 0u;
}
inline uint32_t TalentPanel::_internal_point() const {
  return _impl_.point_;
}
inline uint32_t TalentPanel::point() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.point)
  return _internal_point();
}
inline void TalentPanel::_internal_set_point(uint32_t value) {
  
  _impl_.point_ = value;
}
inline void TalentPanel::set_point(uint32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentPanel.point)
}

// repeated .pb.talent.TalentSlot slots = 4;
inline int TalentPanel::_internal_slots_size() const {
  return _impl_.slots_.size();
}
inline int TalentPanel::slots_size() const {
  return _internal_slots_size();
}
inline void TalentPanel::clear_slots() {
  _impl_.slots_.Clear();
}
inline ::pb::talent::TalentSlot* TalentPanel::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:pb.talent.TalentPanel.slots)
  return _impl_.slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >*
TalentPanel::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:pb.talent.TalentPanel.slots)
  return &_impl_.slots_;
}
inline const ::pb::talent::TalentSlot& TalentPanel::_internal_slots(int index) const {
  return _impl_.slots_.Get(index);
}
inline const ::pb::talent::TalentSlot& TalentPanel::slots(int index) const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.slots)
  return _internal_slots(index);
}
inline ::pb::talent::TalentSlot* TalentPanel::_internal_add_slots() {
  return _impl_.slots_.Add();
}
inline ::pb::talent::TalentSlot* TalentPanel::add_slots() {
  ::pb::talent::TalentSlot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:pb.talent.TalentPanel.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >&
TalentPanel::slots() const {
  // @@protoc_insertion_point(field_list:pb.talent.TalentPanel.slots)
  return _impl_.slots_;
}

// repeated .pb.talent.TalentElem elems = 5;
inline int TalentPanel::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int TalentPanel::elems_size() const {
  return _internal_elems_size();
}
inline void TalentPanel::clear_elems() {
  _impl_.elems_.Clear();
}
inline ::pb::talent::TalentElem* TalentPanel::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:pb.talent.TalentPanel.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >*
TalentPanel::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:pb.talent.TalentPanel.elems)
  return &_impl_.elems_;
}
inline const ::pb::talent::TalentElem& TalentPanel::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::pb::talent::TalentElem& TalentPanel::elems(int index) const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.elems)
  return _internal_elems(index);
}
inline ::pb::talent::TalentElem* TalentPanel::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::pb::talent::TalentElem* TalentPanel::add_elems() {
  ::pb::talent::TalentElem* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:pb.talent.TalentPanel.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >&
TalentPanel::elems() const {
  // @@protoc_insertion_point(field_list:pb.talent.TalentPanel.elems)
  return _impl_.elems_;
}

// bool has_pending_open = 6;
inline void TalentPanel::clear_has_pending_open() {
  _impl_.has_pending_open_ = false;
}
inline bool TalentPanel::_internal_has_pending_open() const {
  return _impl_.has_pending_open_;
}
inline bool TalentPanel::has_pending_open() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.has_pending_open)
  return _internal_has_pending_open();
}
inline void TalentPanel::_internal_set_has_pending_open(bool value) {
  
  _impl_.has_pending_open_ = value;
}
inline void TalentPanel::set_has_pending_open(bool value) {
  _internal_set_has_pending_open(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentPanel.has_pending_open)
}

// uint32 reserve_num = 7;
inline void TalentPanel::clear_reserve_num() {
  _impl_.reserve_num_ = 0u;
}
inline uint32_t TalentPanel::_internal_reserve_num() const {
  return _impl_.reserve_num_;
}
inline uint32_t TalentPanel::reserve_num() const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.reserve_num)
  return _internal_reserve_num();
}
inline void TalentPanel::_internal_set_reserve_num(uint32_t value) {
  
  _impl_.reserve_num_ = value;
}
inline void TalentPanel::set_reserve_num(uint32_t value) {
  _internal_set_reserve_num(value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentPanel.reserve_num)
}

// repeated uint64 optional_list = 8;
inline int TalentPanel::_internal_optional_list_size() const {
  return _impl_.optional_list_.size();
}
inline int TalentPanel::optional_list_size() const {
  return _internal_optional_list_size();
}
inline void TalentPanel::clear_optional_list() {
  _impl_.optional_list_.Clear();
}
inline uint64_t TalentPanel::_internal_optional_list(int index) const {
  return _impl_.optional_list_.Get(index);
}
inline uint64_t TalentPanel::optional_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.talent.TalentPanel.optional_list)
  return _internal_optional_list(index);
}
inline void TalentPanel::set_optional_list(int index, uint64_t value) {
  _impl_.optional_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.talent.TalentPanel.optional_list)
}
inline void TalentPanel::_internal_add_optional_list(uint64_t value) {
  _impl_.optional_list_.Add(value);
}
inline void TalentPanel::add_optional_list(uint64_t value) {
  _internal_add_optional_list(value);
  // @@protoc_insertion_point(field_add:pb.talent.TalentPanel.optional_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TalentPanel::_internal_optional_list() const {
  return _impl_.optional_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TalentPanel::optional_list() const {
  // @@protoc_insertion_point(field_list:pb.talent.TalentPanel.optional_list)
  return _internal_optional_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TalentPanel::_internal_mutable_optional_list() {
  return &_impl_.optional_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TalentPanel::mutable_optional_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.talent.TalentPanel.optional_list)
  return _internal_mutable_optional_list();
}

// -------------------------------------------------------------------

// Talent_Login_Notice

// .pb.talent.TalentPanel data = 1;
inline bool Talent_Login_Notice::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool Talent_Login_Notice::has_data() const {
  return _internal_has_data();
}
inline void Talent_Login_Notice::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::pb::talent::TalentPanel& Talent_Login_Notice::_internal_data() const {
  const ::pb::talent::TalentPanel* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::talent::TalentPanel&>(
      ::pb::talent::_TalentPanel_default_instance_);
}
inline const ::pb::talent::TalentPanel& Talent_Login_Notice::data() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Login_Notice.data)
  return _internal_data();
}
inline void Talent_Login_Notice::unsafe_arena_set_allocated_data(
    ::pb::talent::TalentPanel* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.talent.Talent_Login_Notice.data)
}
inline ::pb::talent::TalentPanel* Talent_Login_Notice::release_data() {
  
  ::pb::talent::TalentPanel* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::talent::TalentPanel* Talent_Login_Notice::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:pb.talent.Talent_Login_Notice.data)
  
  ::pb::talent::TalentPanel* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::pb::talent::TalentPanel* Talent_Login_Notice::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::talent::TalentPanel>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::pb::talent::TalentPanel* Talent_Login_Notice::mutable_data() {
  ::pb::talent::TalentPanel* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:pb.talent.Talent_Login_Notice.data)
  return _msg;
}
inline void Talent_Login_Notice::set_allocated_data(::pb::talent::TalentPanel* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:pb.talent.Talent_Login_Notice.data)
}

// -------------------------------------------------------------------

// Talent_BaseChange_Notice

// uint32 level = 1;
inline void Talent_BaseChange_Notice::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t Talent_BaseChange_Notice::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t Talent_BaseChange_Notice::level() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_BaseChange_Notice.level)
  return _internal_level();
}
inline void Talent_BaseChange_Notice::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void Talent_BaseChange_Notice::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_BaseChange_Notice.level)
}

// uint32 exp = 2;
inline void Talent_BaseChange_Notice::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t Talent_BaseChange_Notice::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t Talent_BaseChange_Notice::exp() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_BaseChange_Notice.exp)
  return _internal_exp();
}
inline void Talent_BaseChange_Notice::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void Talent_BaseChange_Notice::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_BaseChange_Notice.exp)
}

// uint32 point = 3;
inline void Talent_BaseChange_Notice::clear_point() {
  _impl_.point_ = 0u;
}
inline uint32_t Talent_BaseChange_Notice::_internal_point() const {
  return _impl_.point_;
}
inline uint32_t Talent_BaseChange_Notice::point() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_BaseChange_Notice.point)
  return _internal_point();
}
inline void Talent_BaseChange_Notice::_internal_set_point(uint32_t value) {
  
  _impl_.point_ = value;
}
inline void Talent_BaseChange_Notice::set_point(uint32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_BaseChange_Notice.point)
}

// -------------------------------------------------------------------

// Talent_ElemsChange_Notice

// repeated .pb.talent.TalentSlot slots = 1;
inline int Talent_ElemsChange_Notice::_internal_slots_size() const {
  return _impl_.slots_.size();
}
inline int Talent_ElemsChange_Notice::slots_size() const {
  return _internal_slots_size();
}
inline void Talent_ElemsChange_Notice::clear_slots() {
  _impl_.slots_.Clear();
}
inline ::pb::talent::TalentSlot* Talent_ElemsChange_Notice::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:pb.talent.Talent_ElemsChange_Notice.slots)
  return _impl_.slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >*
Talent_ElemsChange_Notice::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:pb.talent.Talent_ElemsChange_Notice.slots)
  return &_impl_.slots_;
}
inline const ::pb::talent::TalentSlot& Talent_ElemsChange_Notice::_internal_slots(int index) const {
  return _impl_.slots_.Get(index);
}
inline const ::pb::talent::TalentSlot& Talent_ElemsChange_Notice::slots(int index) const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_ElemsChange_Notice.slots)
  return _internal_slots(index);
}
inline ::pb::talent::TalentSlot* Talent_ElemsChange_Notice::_internal_add_slots() {
  return _impl_.slots_.Add();
}
inline ::pb::talent::TalentSlot* Talent_ElemsChange_Notice::add_slots() {
  ::pb::talent::TalentSlot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:pb.talent.Talent_ElemsChange_Notice.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentSlot >&
Talent_ElemsChange_Notice::slots() const {
  // @@protoc_insertion_point(field_list:pb.talent.Talent_ElemsChange_Notice.slots)
  return _impl_.slots_;
}

// repeated .pb.talent.TalentElem elems = 2;
inline int Talent_ElemsChange_Notice::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int Talent_ElemsChange_Notice::elems_size() const {
  return _internal_elems_size();
}
inline void Talent_ElemsChange_Notice::clear_elems() {
  _impl_.elems_.Clear();
}
inline ::pb::talent::TalentElem* Talent_ElemsChange_Notice::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:pb.talent.Talent_ElemsChange_Notice.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >*
Talent_ElemsChange_Notice::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:pb.talent.Talent_ElemsChange_Notice.elems)
  return &_impl_.elems_;
}
inline const ::pb::talent::TalentElem& Talent_ElemsChange_Notice::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::pb::talent::TalentElem& Talent_ElemsChange_Notice::elems(int index) const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_ElemsChange_Notice.elems)
  return _internal_elems(index);
}
inline ::pb::talent::TalentElem* Talent_ElemsChange_Notice::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::pb::talent::TalentElem* Talent_ElemsChange_Notice::add_elems() {
  ::pb::talent::TalentElem* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:pb.talent.Talent_ElemsChange_Notice.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::talent::TalentElem >&
Talent_ElemsChange_Notice::elems() const {
  // @@protoc_insertion_point(field_list:pb.talent.Talent_ElemsChange_Notice.elems)
  return _impl_.elems_;
}

// -------------------------------------------------------------------

// Talent_Open_Req

// -------------------------------------------------------------------

// Talent_Open_Response

// uint32 error_code = 1;
inline void Talent_Open_Response::clear_error_code() {
  _impl_.error_code_ = 0u;
}
inline uint32_t Talent_Open_Response::_internal_error_code() const {
  return _impl_.error_code_;
}
inline uint32_t Talent_Open_Response::error_code() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Open_Response.error_code)
  return _internal_error_code();
}
inline void Talent_Open_Response::_internal_set_error_code(uint32_t value) {
  
  _impl_.error_code_ = value;
}
inline void Talent_Open_Response::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Open_Response.error_code)
}

// uint32 reserve_num = 2;
inline void Talent_Open_Response::clear_reserve_num() {
  _impl_.reserve_num_ = 0u;
}
inline uint32_t Talent_Open_Response::_internal_reserve_num() const {
  return _impl_.reserve_num_;
}
inline uint32_t Talent_Open_Response::reserve_num() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Open_Response.reserve_num)
  return _internal_reserve_num();
}
inline void Talent_Open_Response::_internal_set_reserve_num(uint32_t value) {
  
  _impl_.reserve_num_ = value;
}
inline void Talent_Open_Response::set_reserve_num(uint32_t value) {
  _internal_set_reserve_num(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Open_Response.reserve_num)
}

// repeated uint64 data = 3;
inline int Talent_Open_Response::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Talent_Open_Response::data_size() const {
  return _internal_data_size();
}
inline void Talent_Open_Response::clear_data() {
  _impl_.data_.Clear();
}
inline uint64_t Talent_Open_Response::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline uint64_t Talent_Open_Response::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Open_Response.data)
  return _internal_data(index);
}
inline void Talent_Open_Response::set_data(int index, uint64_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Open_Response.data)
}
inline void Talent_Open_Response::_internal_add_data(uint64_t value) {
  _impl_.data_.Add(value);
}
inline void Talent_Open_Response::add_data(uint64_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:pb.talent.Talent_Open_Response.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Talent_Open_Response::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Talent_Open_Response::data() const {
  // @@protoc_insertion_point(field_list:pb.talent.Talent_Open_Response.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Talent_Open_Response::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Talent_Open_Response::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.talent.Talent_Open_Response.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Talent_Choose_Req

// repeated uint32 id = 1;
inline int Talent_Choose_Req::_internal_id_size() const {
  return _impl_.id_.size();
}
inline int Talent_Choose_Req::id_size() const {
  return _internal_id_size();
}
inline void Talent_Choose_Req::clear_id() {
  _impl_.id_.Clear();
}
inline uint32_t Talent_Choose_Req::_internal_id(int index) const {
  return _impl_.id_.Get(index);
}
inline uint32_t Talent_Choose_Req::id(int index) const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Choose_Req.id)
  return _internal_id(index);
}
inline void Talent_Choose_Req::set_id(int index, uint32_t value) {
  _impl_.id_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Choose_Req.id)
}
inline void Talent_Choose_Req::_internal_add_id(uint32_t value) {
  _impl_.id_.Add(value);
}
inline void Talent_Choose_Req::add_id(uint32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:pb.talent.Talent_Choose_Req.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Talent_Choose_Req::_internal_id() const {
  return _impl_.id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Talent_Choose_Req::id() const {
  // @@protoc_insertion_point(field_list:pb.talent.Talent_Choose_Req.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Talent_Choose_Req::_internal_mutable_id() {
  return &_impl_.id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Talent_Choose_Req::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:pb.talent.Talent_Choose_Req.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// Talent_Choose_Response

// uint32 error_code = 1;
inline void Talent_Choose_Response::clear_error_code() {
  _impl_.error_code_ = 0u;
}
inline uint32_t Talent_Choose_Response::_internal_error_code() const {
  return _impl_.error_code_;
}
inline uint32_t Talent_Choose_Response::error_code() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Choose_Response.error_code)
  return _internal_error_code();
}
inline void Talent_Choose_Response::_internal_set_error_code(uint32_t value) {
  
  _impl_.error_code_ = value;
}
inline void Talent_Choose_Response::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Choose_Response.error_code)
}

// -------------------------------------------------------------------

// Talent_Activate_Req

// uint64 id = 1;
inline void Talent_Activate_Req::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Talent_Activate_Req::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Talent_Activate_Req::id() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Activate_Req.id)
  return _internal_id();
}
inline void Talent_Activate_Req::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Talent_Activate_Req::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Activate_Req.id)
}

// -------------------------------------------------------------------

// Talent_Activate_Response

// uint32 error_code = 1;
inline void Talent_Activate_Response::clear_error_code() {
  _impl_.error_code_ = 0u;
}
inline uint32_t Talent_Activate_Response::_internal_error_code() const {
  return _impl_.error_code_;
}
inline uint32_t Talent_Activate_Response::error_code() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Activate_Response.error_code)
  return _internal_error_code();
}
inline void Talent_Activate_Response::_internal_set_error_code(uint32_t value) {
  
  _impl_.error_code_ = value;
}
inline void Talent_Activate_Response::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Activate_Response.error_code)
}

// -------------------------------------------------------------------

// Talent_Unload_Req

// uint64 id = 1;
inline void Talent_Unload_Req::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Talent_Unload_Req::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Talent_Unload_Req::id() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Unload_Req.id)
  return _internal_id();
}
inline void Talent_Unload_Req::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Talent_Unload_Req::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Unload_Req.id)
}

// -------------------------------------------------------------------

// Talent_Unload_Response

// uint32 error_code = 1;
inline void Talent_Unload_Response::clear_error_code() {
  _impl_.error_code_ = 0u;
}
inline uint32_t Talent_Unload_Response::_internal_error_code() const {
  return _impl_.error_code_;
}
inline uint32_t Talent_Unload_Response::error_code() const {
  // @@protoc_insertion_point(field_get:pb.talent.Talent_Unload_Response.error_code)
  return _internal_error_code();
}
inline void Talent_Unload_Response::_internal_set_error_code(uint32_t value) {
  
  _impl_.error_code_ = value;
}
inline void Talent_Unload_Response::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.talent.Talent_Unload_Response.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace talent
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::talent::E_Talent_Cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::talent::E_Talent_Cmd>() {
  return ::pb::talent::E_Talent_Cmd_descriptor();
}
template <> struct is_proto_enum< ::pb::talent::E_Talent_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::talent::E_Talent_Status>() {
  return ::pb::talent::E_Talent_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_talent_2eproto
