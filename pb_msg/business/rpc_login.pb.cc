// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_login.proto

#include "rpc_login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rpc_login {
class RPC_LoginPendingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_LoginPendingRequest> _instance;
} _RPC_LoginPendingRequest_default_instance_;
class RPC_LoginPendingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_LoginPendingResponse> _instance;
} _RPC_LoginPendingResponse_default_instance_;
}  // namespace rpc_login
static void InitDefaultsscc_info_RPC_LoginPendingRequest_rpc_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_login::_RPC_LoginPendingRequest_default_instance_;
    new (ptr) ::rpc_login::RPC_LoginPendingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_login::RPC_LoginPendingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPC_LoginPendingRequest_rpc_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPC_LoginPendingRequest_rpc_5flogin_2eproto}, {}};

static void InitDefaultsscc_info_RPC_LoginPendingResponse_rpc_5flogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_login::_RPC_LoginPendingResponse_default_instance_;
    new (ptr) ::rpc_login::RPC_LoginPendingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_login::RPC_LoginPendingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPC_LoginPendingResponse_rpc_5flogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPC_LoginPendingResponse_rpc_5flogin_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_5flogin_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rpc_5flogin_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_5flogin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingRequest, session_key_),
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingRequest, version_),
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingRequest, db_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::rpc_login::RPC_LoginPendingResponse, account_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rpc_login::RPC_LoginPendingRequest)},
  { 9, -1, sizeof(::rpc_login::RPC_LoginPendingResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_login::_RPC_LoginPendingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_login::_RPC_LoginPendingResponse_default_instance_),
};

const char descriptor_table_protodef_rpc_5flogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017rpc_login.proto\022\trpc_login\"b\n\027RPC_Logi"
  "nPendingRequest\022\022\n\naccount_id\030\001 \001(\004\022\023\n\013s"
  "ession_key\030\002 \001(\t\022\017\n\007version\030\003 \001(\005\022\r\n\005db_"
  "id\030\004 \001(\r\"C\n\030RPC_LoginPendingResponse\022\023\n\013"
  "status_code\030\001 \001(\005\022\022\n\naccount_id\030\002 \001(\004b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_5flogin_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_5flogin_2eproto_sccs[2] = {
  &scc_info_RPC_LoginPendingRequest_rpc_5flogin_2eproto.base,
  &scc_info_RPC_LoginPendingResponse_rpc_5flogin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_5flogin_2eproto_once;
static bool descriptor_table_rpc_5flogin_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5flogin_2eproto = {
  &descriptor_table_rpc_5flogin_2eproto_initialized, descriptor_table_protodef_rpc_5flogin_2eproto, "rpc_login.proto", 205,
  &descriptor_table_rpc_5flogin_2eproto_once, descriptor_table_rpc_5flogin_2eproto_sccs, descriptor_table_rpc_5flogin_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_rpc_5flogin_2eproto::offsets,
  file_level_metadata_rpc_5flogin_2eproto, 2, file_level_enum_descriptors_rpc_5flogin_2eproto, file_level_service_descriptors_rpc_5flogin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_5flogin_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_5flogin_2eproto), true);
namespace rpc_login {

// ===================================================================

void RPC_LoginPendingRequest::InitAsDefaultInstance() {
}
class RPC_LoginPendingRequest::_Internal {
 public:
};

RPC_LoginPendingRequest::RPC_LoginPendingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_login.RPC_LoginPendingRequest)
}
RPC_LoginPendingRequest::RPC_LoginPendingRequest(const RPC_LoginPendingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_key().empty()) {
    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&db_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(db_id_));
  // @@protoc_insertion_point(copy_constructor:rpc_login.RPC_LoginPendingRequest)
}

void RPC_LoginPendingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_LoginPendingRequest_rpc_5flogin_2eproto.base);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(db_id_));
}

RPC_LoginPendingRequest::~RPC_LoginPendingRequest() {
  // @@protoc_insertion_point(destructor:rpc_login.RPC_LoginPendingRequest)
  SharedDtor();
}

void RPC_LoginPendingRequest::SharedDtor() {
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPC_LoginPendingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_LoginPendingRequest& RPC_LoginPendingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_LoginPendingRequest_rpc_5flogin_2eproto.base);
  return *internal_default_instance();
}


void RPC_LoginPendingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_login.RPC_LoginPendingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(db_id_));
  _internal_metadata_.Clear();
}

const char* RPC_LoginPendingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc_login.RPC_LoginPendingRequest.session_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 db_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          db_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_LoginPendingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_login.RPC_LoginPendingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1;
  if (this->account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string session_key = 2;
  if (this->session_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc_login.RPC_LoginPendingRequest.session_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_key(), target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 db_id = 4;
  if (this->db_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_db_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_login.RPC_LoginPendingRequest)
  return target;
}

size_t RPC_LoginPendingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_login.RPC_LoginPendingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_key = 2;
  if (this->session_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  // uint64 account_id = 1;
  if (this->account_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_account_id());
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // uint32 db_id = 4;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_db_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_LoginPendingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_login.RPC_LoginPendingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_LoginPendingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_LoginPendingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_login.RPC_LoginPendingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_login.RPC_LoginPendingRequest)
    MergeFrom(*source);
  }
}

void RPC_LoginPendingRequest::MergeFrom(const RPC_LoginPendingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_login.RPC_LoginPendingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_key().size() > 0) {

    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  if (from.account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.db_id() != 0) {
    _internal_set_db_id(from._internal_db_id());
  }
}

void RPC_LoginPendingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_login.RPC_LoginPendingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_LoginPendingRequest::CopyFrom(const RPC_LoginPendingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_login.RPC_LoginPendingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_LoginPendingRequest::IsInitialized() const {
  return true;
}

void RPC_LoginPendingRequest::InternalSwap(RPC_LoginPendingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_key_.Swap(&other->session_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(version_, other->version_);
  swap(db_id_, other->db_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_LoginPendingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC_LoginPendingResponse::InitAsDefaultInstance() {
}
class RPC_LoginPendingResponse::_Internal {
 public:
};

RPC_LoginPendingResponse::RPC_LoginPendingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_login.RPC_LoginPendingResponse)
}
RPC_LoginPendingResponse::RPC_LoginPendingResponse(const RPC_LoginPendingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:rpc_login.RPC_LoginPendingResponse)
}

void RPC_LoginPendingResponse::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(status_code_));
}

RPC_LoginPendingResponse::~RPC_LoginPendingResponse() {
  // @@protoc_insertion_point(destructor:rpc_login.RPC_LoginPendingResponse)
  SharedDtor();
}

void RPC_LoginPendingResponse::SharedDtor() {
}

void RPC_LoginPendingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_LoginPendingResponse& RPC_LoginPendingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_LoginPendingResponse_rpc_5flogin_2eproto.base);
  return *internal_default_instance();
}


void RPC_LoginPendingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_login.RPC_LoginPendingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(status_code_));
  _internal_metadata_.Clear();
}

const char* RPC_LoginPendingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_LoginPendingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_login.RPC_LoginPendingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // uint64 account_id = 2;
  if (this->account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_login.RPC_LoginPendingResponse)
  return target;
}

size_t RPC_LoginPendingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_login.RPC_LoginPendingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 account_id = 2;
  if (this->account_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_account_id());
  }

  // int32 status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_LoginPendingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_login.RPC_LoginPendingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_LoginPendingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_LoginPendingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_login.RPC_LoginPendingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_login.RPC_LoginPendingResponse)
    MergeFrom(*source);
  }
}

void RPC_LoginPendingResponse::MergeFrom(const RPC_LoginPendingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_login.RPC_LoginPendingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void RPC_LoginPendingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_login.RPC_LoginPendingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_LoginPendingResponse::CopyFrom(const RPC_LoginPendingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_login.RPC_LoginPendingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_LoginPendingResponse::IsInitialized() const {
  return true;
}

void RPC_LoginPendingResponse::InternalSwap(RPC_LoginPendingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_LoginPendingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc_login
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc_login::RPC_LoginPendingRequest* Arena::CreateMaybeMessage< ::rpc_login::RPC_LoginPendingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_login::RPC_LoginPendingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_login::RPC_LoginPendingResponse* Arena::CreateMaybeMessage< ::rpc_login::RPC_LoginPendingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_login::RPC_LoginPendingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
