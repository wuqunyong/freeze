// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
namespace db {
PROTOBUF_CONSTEXPR DB_OP_Condition::DB_OP_Condition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idx_)*/0u
  , /*decltype(_impl_.op_)*/0u
  , /*decltype(_impl_.i64val_)*/int64_t{0}
  , /*decltype(_impl_.next_logic_op_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_OP_ConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_OP_ConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_OP_ConditionDefaultTypeInternal() {}
  union {
    DB_OP_Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_OP_ConditionDefaultTypeInternal _DB_OP_Condition_default_instance_;
PROTOBUF_CONSTEXPR DB_OP_User::DB_OP_User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fail_function_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/nullptr
  , /*decltype(_impl_.game_id_)*/nullptr
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.tbl_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_OP_UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_OP_UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_OP_UserDefaultTypeInternal() {}
  union {
    DB_OP_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_OP_UserDefaultTypeInternal _DB_OP_User_default_instance_;
PROTOBUF_CONSTEXPR Base_Cmd::Base_Cmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Base_CmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Base_CmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Base_CmdDefaultTypeInternal() {}
  union {
    Base_Cmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Base_CmdDefaultTypeInternal _Base_Cmd_default_instance_;
PROTOBUF_CONSTEXPR DB_Field::DB_Field(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.strval_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.i64val_)*/int64_t{0}
  , /*decltype(_impl_.idx_)*/0u
  , /*decltype(_impl_.field_type_)*/0
  , /*decltype(_impl_.dval_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_FieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_FieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_FieldDefaultTypeInternal() {}
  union {
    DB_Field _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_FieldDefaultTypeInternal _DB_Field_default_instance_;
PROTOBUF_CONSTEXPR DB_Record::DB_Record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_fields_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_RecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_RecordDefaultTypeInternal() {}
  union {
    DB_Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_RecordDefaultTypeInternal _DB_Record_default_instance_;
PROTOBUF_CONSTEXPR DB_Recordset::DB_Recordset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_records_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_table_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_RecordsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_RecordsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_RecordsetDefaultTypeInternal() {}
  union {
    DB_Recordset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_RecordsetDefaultTypeInternal _DB_Recordset_default_instance_;
PROTOBUF_CONSTEXPR DB_Record_OP::DB_Record_OP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.tbl_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_Record_OPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_Record_OPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_Record_OPDefaultTypeInternal() {}
  union {
    DB_Record_OP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_Record_OPDefaultTypeInternal _DB_Record_OP_default_instance_;
PROTOBUF_CONSTEXPR User_DB_Record_OPS::User_DB_Record_OPS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_ops_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct User_DB_Record_OPSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR User_DB_Record_OPSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~User_DB_Record_OPSDefaultTypeInternal() {}
  union {
    User_DB_Record_OPS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 User_DB_Record_OPSDefaultTypeInternal _User_DB_Record_OPS_default_instance_;
PROTOBUF_CONSTEXPR User_DB_Recordset::User_DB_Recordset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_set_)*/nullptr
  , /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.game_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct User_DB_RecordsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR User_DB_RecordsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~User_DB_RecordsetDefaultTypeInternal() {}
  union {
    User_DB_Recordset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 User_DB_RecordsetDefaultTypeInternal _User_DB_Recordset_default_instance_;
PROTOBUF_CONSTEXPR User_DB_Recordset_Ext::User_DB_Recordset_Ext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_set_)*/nullptr
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct User_DB_Recordset_ExtDefaultTypeInternal {
  PROTOBUF_CONSTEXPR User_DB_Recordset_ExtDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~User_DB_Recordset_ExtDefaultTypeInternal() {}
  union {
    User_DB_Recordset_Ext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 User_DB_Recordset_ExtDefaultTypeInternal _User_DB_Recordset_Ext_default_instance_;
PROTOBUF_CONSTEXPR DB_FieldMeta::DB_FieldMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.attr_)*/0u
  , /*decltype(_impl_.len_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_FieldMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_FieldMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_FieldMetaDefaultTypeInternal() {}
  union {
    DB_FieldMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_FieldMetaDefaultTypeInternal _DB_FieldMeta_default_instance_;
PROTOBUF_CONSTEXPR DB_TableMeta::DB_TableMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_fields_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tbl_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_TableMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_TableMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_TableMetaDefaultTypeInternal() {}
  union {
    DB_TableMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_TableMetaDefaultTypeInternal _DB_TableMeta_default_instance_;
PROTOBUF_CONSTEXPR DB_Metas::DB_Metas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_tables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_MetasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_MetasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_MetasDefaultTypeInternal() {}
  union {
    DB_Metas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_MetasDefaultTypeInternal _DB_Metas_default_instance_;
PROTOBUF_CONSTEXPR DB_Update::DB_Update(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_set_)*/nullptr
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_UpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_UpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_UpdateDefaultTypeInternal() {}
  union {
    DB_Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_UpdateDefaultTypeInternal _DB_Update_default_instance_;
PROTOBUF_CONSTEXPR DB_Delete::DB_Delete(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_ids_)*/{}
  , /*decltype(_impl_._vec_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_.tbl_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_DeleteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_DeleteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_DeleteDefaultTypeInternal() {}
  union {
    DB_Delete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_DeleteDefaultTypeInternal _DB_Delete_default_instance_;
PROTOBUF_CONSTEXPR Key_Value::Key_Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.key_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Key_ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Key_ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Key_ValueDefaultTypeInternal() {}
  union {
    Key_Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Key_ValueDefaultTypeInternal _Key_Value_default_instance_;
PROTOBUF_CONSTEXPR EffectProp::EffectProp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_effect_)*/{}
  , /*decltype(_impl_.range_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EffectPropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EffectPropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EffectPropDefaultTypeInternal() {}
  union {
    EffectProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EffectPropDefaultTypeInternal _EffectProp_default_instance_;
PROTOBUF_CONSTEXPR DB_EffectProp::DB_EffectProp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_prop_)*/{}
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_EffectPropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_EffectPropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_EffectPropDefaultTypeInternal() {}
  union {
    DB_EffectProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_EffectPropDefaultTypeInternal _DB_EffectProp_default_instance_;
PROTOBUF_CONSTEXPR DB_Add_Recordset::DB_Add_Recordset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.target_id_)*/int64_t{0}
  , /*decltype(_impl_.target_game_id_)*/0u
  , /*decltype(_impl_.id_table_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_Add_RecordsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_Add_RecordsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_Add_RecordsetDefaultTypeInternal() {}
  union {
    DB_Add_Recordset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_Add_RecordsetDefaultTypeInternal _DB_Add_Recordset_default_instance_;
PROTOBUF_CONSTEXPR DB_DataFlag::DB_DataFlag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/int64_t{0}
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DB_DataFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DB_DataFlagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DB_DataFlagDefaultTypeInternal() {}
  union {
    DB_DataFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DB_DataFlagDefaultTypeInternal _DB_DataFlag_default_instance_;
PROTOBUF_CONSTEXPR Query_Recordset::Query_Recordset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_list_)*/{}
  , /*decltype(_impl_._field_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.key_list_)*/{}
  , /*decltype(_impl_._key_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.vec_records_)*/{}
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_.id_table_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Query_RecordsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_RecordsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_RecordsetDefaultTypeInternal() {}
  union {
    Query_Recordset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_RecordsetDefaultTypeInternal _Query_Recordset_default_instance_;
}  // namespace db
}  // namespace pb
static ::_pb::Metadata file_level_metadata_db_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_db_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_db_2eproto = nullptr;

const uint32_t TableStruct_db_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, _impl_.i64val_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, _impl_.next_logic_op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, _impl_.tbl_type_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, _impl_.fail_function_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::Base_Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::Base_Cmd, _impl_.cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, _impl_.i64val_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, _impl_.strval_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, _impl_.dval_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, _impl_.field_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record, _impl_.vec_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, _impl_.id_table_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, _impl_.vec_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, _impl_.tbl_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, _impl_.record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Record_OPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Record_OPS, _impl_.record_ops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, _impl_.data_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset_Ext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset_Ext, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset_Ext, _impl_.data_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, _impl_.attr_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, _impl_.len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, _impl_.tbl_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, _impl_.vec_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Metas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Metas, _impl_.vec_tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Update, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Update, _impl_.data_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, _impl_.tbl_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, _impl_.vec_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::Key_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::Key_Value, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Key_Value, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::EffectProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::EffectProp, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::pb::db::EffectProp, _impl_.vec_effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_EffectProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_EffectProp, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_EffectProp, _impl_.vec_prop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, _impl_.target_game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, _impl_.id_table_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, _impl_.record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_DataFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_DataFlag, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_DataFlag, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, _impl_.id_table_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, _impl_.field_list_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, _impl_.key_list_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, _impl_.vec_records_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::db::DB_OP_Condition)},
  { 11, -1, -1, sizeof(::pb::db::DB_OP_User)},
  { 22, -1, -1, sizeof(::pb::db::Base_Cmd)},
  { 29, -1, -1, sizeof(::pb::db::DB_Field)},
  { 40, -1, -1, sizeof(::pb::db::DB_Record)},
  { 47, -1, -1, sizeof(::pb::db::DB_Recordset)},
  { 56, -1, -1, sizeof(::pb::db::DB_Record_OP)},
  { 66, -1, -1, sizeof(::pb::db::User_DB_Record_OPS)},
  { 73, -1, -1, sizeof(::pb::db::User_DB_Recordset)},
  { 82, -1, -1, sizeof(::pb::db::User_DB_Recordset_Ext)},
  { 90, -1, -1, sizeof(::pb::db::DB_FieldMeta)},
  { 100, -1, -1, sizeof(::pb::db::DB_TableMeta)},
  { 109, -1, -1, sizeof(::pb::db::DB_Metas)},
  { 116, -1, -1, sizeof(::pb::db::DB_Update)},
  { 124, -1, -1, sizeof(::pb::db::DB_Delete)},
  { 133, -1, -1, sizeof(::pb::db::Key_Value)},
  { 141, -1, -1, sizeof(::pb::db::EffectProp)},
  { 149, -1, -1, sizeof(::pb::db::DB_EffectProp)},
  { 157, -1, -1, sizeof(::pb::db::DB_Add_Recordset)},
  { 168, -1, -1, sizeof(::pb::db::DB_DataFlag)},
  { 176, -1, -1, sizeof(::pb::db::Query_Recordset)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::db::_DB_OP_Condition_default_instance_._instance,
  &::pb::db::_DB_OP_User_default_instance_._instance,
  &::pb::db::_Base_Cmd_default_instance_._instance,
  &::pb::db::_DB_Field_default_instance_._instance,
  &::pb::db::_DB_Record_default_instance_._instance,
  &::pb::db::_DB_Recordset_default_instance_._instance,
  &::pb::db::_DB_Record_OP_default_instance_._instance,
  &::pb::db::_User_DB_Record_OPS_default_instance_._instance,
  &::pb::db::_User_DB_Recordset_default_instance_._instance,
  &::pb::db::_User_DB_Recordset_Ext_default_instance_._instance,
  &::pb::db::_DB_FieldMeta_default_instance_._instance,
  &::pb::db::_DB_TableMeta_default_instance_._instance,
  &::pb::db::_DB_Metas_default_instance_._instance,
  &::pb::db::_DB_Update_default_instance_._instance,
  &::pb::db::_DB_Delete_default_instance_._instance,
  &::pb::db::_Key_Value_default_instance_._instance,
  &::pb::db::_EffectProp_default_instance_._instance,
  &::pb::db::_DB_EffectProp_default_instance_._instance,
  &::pb::db::_DB_Add_Recordset_default_instance_._instance,
  &::pb::db::_DB_DataFlag_default_instance_._instance,
  &::pb::db::_Query_Recordset_default_instance_._instance,
};

const char descriptor_table_protodef_db_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010db.proto\022\005pb.db\"`\n\017DB_OP_Condition\022\013\n\003"
  "idx\030\001 \001(\r\022\n\n\002op\030\002 \001(\r\022\r\n\005value\030\003 \001(\t\022\016\n\006"
  "i64val\030\004 \001(\003\022\025\n\rnext_logic_op\030\005 \001(\r\"\360\001\n\n"
  "DB_OP_User\022(\n\006action\030\001 \001(\0162\030.pb.db.DB_OP"
  "_User.Action\022\'\n\007user_id\030\002 \001(\0132\026.pb.db.DB"
  "_OP_Condition\022\'\n\007game_id\030\003 \001(\0132\026.pb.db.D"
  "B_OP_Condition\022\020\n\010tbl_type\030\004 \001(\r\022\032\n\022fail"
  "_function_name\030\005 \001(\t\"8\n\006Action\022\025\n\021QUERY_"
  "UserTblData\020\000\022\027\n\023QUERY_FriendTblData\020\001\"("
  "\n\010Base_Cmd\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd"
  "\"n\n\010DB_Field\022\013\n\003idx\030\001 \001(\r\022\016\n\006i64val\030\002 \001("
  "\003\022\016\n\006strval\030\003 \001(\014\022\014\n\004dval\030\004 \001(\001\022\'\n\nfield"
  "_type\030\005 \001(\0162\023.pb.db.E_Field_Type\"0\n\tDB_R"
  "ecord\022#\n\nvec_fields\030\001 \003(\0132\017.pb.db.DB_Fie"
  "ld\"U\n\014DB_Recordset\022\020\n\010id_table\030\001 \001(\r\022\014\n\004"
  "name\030\002 \001(\t\022%\n\013vec_records\030\003 \003(\0132\020.pb.db."
  "DB_Record\"\245\001\n\014DB_Record_OP\022*\n\006action\030\001 \001"
  "(\0162\032.pb.db.DB_Record_OP.Action\022\014\n\004name\030\002"
  " \001(\t\022\016\n\006tbl_id\030\003 \001(\r\022 \n\006record\030\004 \001(\0132\020.p"
  "b.db.DB_Record\")\n\006Action\022\n\n\006UPDATE\020\000\022\007\n\003"
  "NEW\020\001\022\n\n\006REMOVE\020\002\"=\n\022User_DB_Record_OPS\022"
  "\'\n\nrecord_ops\030\001 \003(\0132\023.pb.db.DB_Record_OP"
  "\"\\\n\021User_DB_Recordset\022\017\n\007user_id\030\001 \001(\003\022\017"
  "\n\007game_id\030\002 \001(\r\022%\n\010data_set\030\003 \001(\0132\023.pb.d"
  "b.DB_Recordset\"\\\n\025User_DB_Recordset_Ext\022"
  "\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd\022%\n\010data_se"
  "t\030\002 \001(\0132\023.pb.db.DB_Recordset\"E\n\014DB_Field"
  "Meta\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\r\022\014\n\004attr"
  "\030\003 \001(\r\022\013\n\003len\030\004 \001(\r\"U\n\014DB_TableMeta\022\014\n\004n"
  "ame\030\001 \001(\t\022\016\n\006tbl_id\030\002 \001(\r\022\'\n\nvec_fields\030"
  "\003 \003(\0132\023.pb.db.DB_FieldMeta\"3\n\010DB_Metas\022\'"
  "\n\nvec_tables\030\001 \003(\0132\023.pb.db.DB_TableMeta\""
  "P\n\tDB_Update\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_C"
  "md\022%\n\010data_set\030\002 \001(\0132\023.pb.db.DB_Recordse"
  "t\"J\n\tDB_Delete\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB"
  "_Cmd\022\016\n\006tbl_id\030\002 \001(\r\022\017\n\007vec_ids\030\003 \003(\004\"\'\n"
  "\tKey_Value\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\003\"A"
  "\n\nEffectProp\022\r\n\005range\030\001 \001(\r\022$\n\nvec_effec"
  "t\030\002 \003(\0132\020.pb.db.Key_Value\"R\n\rDB_EffectPr"
  "op\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd\022#\n\010vec_"
  "prop\030\002 \003(\0132\021.pb.db.EffectProp\"\177\n\020DB_Add_"
  "Recordset\022\021\n\ttarget_id\030\001 \001(\003\022\026\n\016target_g"
  "ame_id\030\002 \001(\r\022\020\n\010id_table\030\003 \001(\r\022\014\n\004name\030\004"
  " \001(\t\022 \n\006record\030\005 \001(\0132\020.pb.db.DB_Record\"<"
  "\n\013DB_DataFlag\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_"
  "Cmd\022\017\n\007user_id\030\002 \001(\003\"\216\001\n\017Query_Recordset"
  "\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd\022\020\n\010id_tab"
  "le\030\002 \001(\r\022\022\n\nfield_list\030\003 \003(\r\022\020\n\010key_list"
  "\030\004 \003(\r\022%\n\013vec_records\030\005 \003(\0132\020.pb.db.DB_R"
  "ecord*V\n\014E_Field_Type\022\024\n\020E_Field_Type_In"
  "t\020\000\022\027\n\023E_Field_Type_String\020\001\022\027\n\023E_Field_"
  "Type_Double\020\002*\316\001\n\010E_DB_Cmd\022\023\n\017E_DB_Cmd_U"
  "pdate\020\000\022\026\n\022E_DB_Cmd_SynFileDB\020\001\022\026\n\022E_DB_"
  "Cmd_DelFileDB\020\002\022\027\n\023E_DB_Cmd_SynEffProp\020\003"
  "\022\026\n\022E_DB_Cmd_DataStart\020\004\022\024\n\020E_DB_Cmd_Dat"
  "aEnd\020\005\022\026\n\022E_DB_Cmd_QueryData\020\006\022\036\n\032E_DB_C"
  "md_GuildBattleReport\020\007b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_db_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_db_2eproto = {
    false, false, 2270, descriptor_table_protodef_db_2eproto,
    "db.proto",
    &descriptor_table_db_2eproto_once, nullptr, 0, 21,
    schemas, file_default_instances, TableStruct_db_2eproto::offsets,
    file_level_metadata_db_2eproto, file_level_enum_descriptors_db_2eproto,
    file_level_service_descriptors_db_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_db_2eproto_getter() {
  return &descriptor_table_db_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_db_2eproto(&descriptor_table_db_2eproto);
namespace pb {
namespace db {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DB_OP_User_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[0];
}
bool DB_OP_User_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DB_OP_User_Action DB_OP_User::QUERY_UserTblData;
constexpr DB_OP_User_Action DB_OP_User::QUERY_FriendTblData;
constexpr DB_OP_User_Action DB_OP_User::Action_MIN;
constexpr DB_OP_User_Action DB_OP_User::Action_MAX;
constexpr int DB_OP_User::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DB_Record_OP_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[1];
}
bool DB_Record_OP_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DB_Record_OP_Action DB_Record_OP::UPDATE;
constexpr DB_Record_OP_Action DB_Record_OP::NEW;
constexpr DB_Record_OP_Action DB_Record_OP::REMOVE;
constexpr DB_Record_OP_Action DB_Record_OP::Action_MIN;
constexpr DB_Record_OP_Action DB_Record_OP::Action_MAX;
constexpr int DB_Record_OP::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Field_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[2];
}
bool E_Field_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_DB_Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[3];
}
bool E_DB_Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DB_OP_Condition::_Internal {
 public:
};

DB_OP_Condition::DB_OP_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_OP_Condition)
}
DB_OP_Condition::DB_OP_Condition(const DB_OP_Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_OP_Condition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.i64val_){}
    , decltype(_impl_.next_logic_op_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.idx_, &from._impl_.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_logic_op_) -
    reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.next_logic_op_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_OP_Condition)
}

inline void DB_OP_Condition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.idx_){0u}
    , decltype(_impl_.op_){0u}
    , decltype(_impl_.i64val_){int64_t{0}}
    , decltype(_impl_.next_logic_op_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_OP_Condition::~DB_OP_Condition() {
  // @@protoc_insertion_point(destructor:pb.db.DB_OP_Condition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_OP_Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void DB_OP_Condition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_OP_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_OP_Condition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  ::memset(&_impl_.idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.next_logic_op_) -
      reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.next_logic_op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_OP_Condition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.db.DB_OP_Condition.value"));
        } else
          goto handle_unusual;
        continue;
      // int64 i64val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.i64val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 next_logic_op = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.next_logic_op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_OP_Condition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_OP_Condition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idx = 1;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  // uint32 op = 2;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_op(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_OP_Condition.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // int64 i64val = 4;
  if (this->_internal_i64val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_i64val(), target);
  }

  // uint32 next_logic_op = 5;
  if (this->_internal_next_logic_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_next_logic_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_OP_Condition)
  return target;
}

size_t DB_OP_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_OP_Condition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint32 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_idx());
  }

  // uint32 op = 2;
  if (this->_internal_op() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_op());
  }

  // int64 i64val = 4;
  if (this->_internal_i64val() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_i64val());
  }

  // uint32 next_logic_op = 5;
  if (this->_internal_next_logic_op() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_next_logic_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_OP_Condition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_OP_Condition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_OP_Condition::GetClassData() const { return &_class_data_; }


void DB_OP_Condition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_OP_Condition*>(&to_msg);
  auto& from = static_cast<const DB_OP_Condition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_OP_Condition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_i64val() != 0) {
    _this->_internal_set_i64val(from._internal_i64val());
  }
  if (from._internal_next_logic_op() != 0) {
    _this->_internal_set_next_logic_op(from._internal_next_logic_op());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_OP_Condition::CopyFrom(const DB_OP_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_OP_Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_OP_Condition::IsInitialized() const {
  return true;
}

void DB_OP_Condition::InternalSwap(DB_OP_Condition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_OP_Condition, _impl_.next_logic_op_)
      + sizeof(DB_OP_Condition::_impl_.next_logic_op_)
      - PROTOBUF_FIELD_OFFSET(DB_OP_Condition, _impl_.idx_)>(
          reinterpret_cast<char*>(&_impl_.idx_),
          reinterpret_cast<char*>(&other->_impl_.idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_OP_Condition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[0]);
}

// ===================================================================

class DB_OP_User::_Internal {
 public:
  static const ::pb::db::DB_OP_Condition& user_id(const DB_OP_User* msg);
  static const ::pb::db::DB_OP_Condition& game_id(const DB_OP_User* msg);
};

const ::pb::db::DB_OP_Condition&
DB_OP_User::_Internal::user_id(const DB_OP_User* msg) {
  return *msg->_impl_.user_id_;
}
const ::pb::db::DB_OP_Condition&
DB_OP_User::_Internal::game_id(const DB_OP_User* msg) {
  return *msg->_impl_.game_id_;
}
DB_OP_User::DB_OP_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_OP_User)
}
DB_OP_User::DB_OP_User(const DB_OP_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_OP_User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_function_name_){}
    , decltype(_impl_.user_id_){nullptr}
    , decltype(_impl_.game_id_){nullptr}
    , decltype(_impl_.action_){}
    , decltype(_impl_.tbl_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fail_function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fail_function_name().empty()) {
    _this->_impl_.fail_function_name_.Set(from._internal_fail_function_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_ = new ::pb::db::DB_OP_Condition(*from._impl_.user_id_);
  }
  if (from._internal_has_game_id()) {
    _this->_impl_.game_id_ = new ::pb::db::DB_OP_Condition(*from._impl_.game_id_);
  }
  ::memcpy(&_impl_.action_, &from._impl_.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tbl_type_) -
    reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.tbl_type_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_OP_User)
}

inline void DB_OP_User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fail_function_name_){}
    , decltype(_impl_.user_id_){nullptr}
    , decltype(_impl_.game_id_){nullptr}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.tbl_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fail_function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_OP_User::~DB_OP_User() {
  // @@protoc_insertion_point(destructor:pb.db.DB_OP_User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_OP_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fail_function_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_id_;
  if (this != internal_default_instance()) delete _impl_.game_id_;
}

void DB_OP_User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_OP_User::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_OP_User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fail_function_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_id_ != nullptr) {
    delete _impl_.user_id_;
  }
  _impl_.user_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.game_id_ != nullptr) {
    delete _impl_.game_id_;
  }
  _impl_.game_id_ = nullptr;
  ::memset(&_impl_.action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tbl_type_) -
      reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.tbl_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_OP_User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.DB_OP_User.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::pb::db::DB_OP_User_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // .pb.db.DB_OP_Condition user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.db.DB_OP_Condition game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tbl_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tbl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fail_function_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fail_function_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.db.DB_OP_User.fail_function_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_OP_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_OP_User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.DB_OP_User.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // .pb.db.DB_OP_Condition user_id = 2;
  if (this->_internal_has_user_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_id(this),
        _Internal::user_id(this).GetCachedSize(), target, stream);
  }

  // .pb.db.DB_OP_Condition game_id = 3;
  if (this->_internal_has_game_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::game_id(this),
        _Internal::game_id(this).GetCachedSize(), target, stream);
  }

  // uint32 tbl_type = 4;
  if (this->_internal_tbl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tbl_type(), target);
  }

  // string fail_function_name = 5;
  if (!this->_internal_fail_function_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_function_name().data(), static_cast<int>(this->_internal_fail_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_OP_User.fail_function_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fail_function_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_OP_User)
  return target;
}

size_t DB_OP_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_OP_User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fail_function_name = 5;
  if (!this->_internal_fail_function_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_function_name());
  }

  // .pb.db.DB_OP_Condition user_id = 2;
  if (this->_internal_has_user_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_id_);
  }

  // .pb.db.DB_OP_Condition game_id = 3;
  if (this->_internal_has_game_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_id_);
  }

  // .pb.db.DB_OP_User.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 tbl_type = 4;
  if (this->_internal_tbl_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tbl_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_OP_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_OP_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_OP_User::GetClassData() const { return &_class_data_; }


void DB_OP_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_OP_User*>(&to_msg);
  auto& from = static_cast<const DB_OP_User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_OP_User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fail_function_name().empty()) {
    _this->_internal_set_fail_function_name(from._internal_fail_function_name());
  }
  if (from._internal_has_user_id()) {
    _this->_internal_mutable_user_id()->::pb::db::DB_OP_Condition::MergeFrom(
        from._internal_user_id());
  }
  if (from._internal_has_game_id()) {
    _this->_internal_mutable_game_id()->::pb::db::DB_OP_Condition::MergeFrom(
        from._internal_game_id());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_tbl_type() != 0) {
    _this->_internal_set_tbl_type(from._internal_tbl_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_OP_User::CopyFrom(const DB_OP_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_OP_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_OP_User::IsInitialized() const {
  return true;
}

void DB_OP_User::InternalSwap(DB_OP_User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fail_function_name_, lhs_arena,
      &other->_impl_.fail_function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_OP_User, _impl_.tbl_type_)
      + sizeof(DB_OP_User::_impl_.tbl_type_)
      - PROTOBUF_FIELD_OFFSET(DB_OP_User, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_OP_User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[1]);
}

// ===================================================================

class Base_Cmd::_Internal {
 public:
};

Base_Cmd::Base_Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.Base_Cmd)
}
Base_Cmd::Base_Cmd(const Base_Cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Base_Cmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.Base_Cmd)
}

inline void Base_Cmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Base_Cmd::~Base_Cmd() {
  // @@protoc_insertion_point(destructor:pb.db.Base_Cmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Base_Cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Base_Cmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Base_Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.Base_Cmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Base_Cmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Base_Cmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.Base_Cmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.Base_Cmd)
  return target;
}

size_t Base_Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.Base_Cmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Base_Cmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Base_Cmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Base_Cmd::GetClassData() const { return &_class_data_; }


void Base_Cmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Base_Cmd*>(&to_msg);
  auto& from = static_cast<const Base_Cmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.Base_Cmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Base_Cmd::CopyFrom(const Base_Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.Base_Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base_Cmd::IsInitialized() const {
  return true;
}

void Base_Cmd::InternalSwap(Base_Cmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Base_Cmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[2]);
}

// ===================================================================

class DB_Field::_Internal {
 public:
};

DB_Field::DB_Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Field)
}
DB_Field::DB_Field(const DB_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Field* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strval_){}
    , decltype(_impl_.i64val_){}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.field_type_){}
    , decltype(_impl_.dval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.strval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strval().empty()) {
    _this->_impl_.strval_.Set(from._internal_strval(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.i64val_, &from._impl_.i64val_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dval_) -
    reinterpret_cast<char*>(&_impl_.i64val_)) + sizeof(_impl_.dval_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Field)
}

inline void DB_Field::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.strval_){}
    , decltype(_impl_.i64val_){int64_t{0}}
    , decltype(_impl_.idx_){0u}
    , decltype(_impl_.field_type_){0}
    , decltype(_impl_.dval_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.strval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_Field::~DB_Field() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Field)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Field::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strval_.Destroy();
}

void DB_Field::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Field)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strval_.ClearToEmpty();
  ::memset(&_impl_.i64val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dval_) -
      reinterpret_cast<char*>(&_impl_.i64val_)) + sizeof(_impl_.dval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Field::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 i64val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.i64val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes strval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double dval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.dval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .pb.db.E_Field_Type field_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_field_type(static_cast<::pb::db::E_Field_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Field::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Field)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idx = 1;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  // int64 i64val = 2;
  if (this->_internal_i64val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_i64val(), target);
  }

  // bytes strval = 3;
  if (!this->_internal_strval().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_strval(), target);
  }

  // double dval = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dval = this->_internal_dval();
  uint64_t raw_dval;
  memcpy(&raw_dval, &tmp_dval, sizeof(tmp_dval));
  if (raw_dval != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_dval(), target);
  }

  // .pb.db.E_Field_Type field_type = 5;
  if (this->_internal_field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_field_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Field)
  return target;
}

size_t DB_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Field)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strval = 3;
  if (!this->_internal_strval().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strval());
  }

  // int64 i64val = 2;
  if (this->_internal_i64val() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_i64val());
  }

  // uint32 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_idx());
  }

  // .pb.db.E_Field_Type field_type = 5;
  if (this->_internal_field_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_field_type());
  }

  // double dval = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dval = this->_internal_dval();
  uint64_t raw_dval;
  memcpy(&raw_dval, &tmp_dval, sizeof(tmp_dval));
  if (raw_dval != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Field::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Field::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Field::GetClassData() const { return &_class_data_; }


void DB_Field::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Field*>(&to_msg);
  auto& from = static_cast<const DB_Field&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Field)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strval().empty()) {
    _this->_internal_set_strval(from._internal_strval());
  }
  if (from._internal_i64val() != 0) {
    _this->_internal_set_i64val(from._internal_i64val());
  }
  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  if (from._internal_field_type() != 0) {
    _this->_internal_set_field_type(from._internal_field_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dval = from._internal_dval();
  uint64_t raw_dval;
  memcpy(&raw_dval, &tmp_dval, sizeof(tmp_dval));
  if (raw_dval != 0) {
    _this->_internal_set_dval(from._internal_dval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Field::CopyFrom(const DB_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Field::IsInitialized() const {
  return true;
}

void DB_Field::InternalSwap(DB_Field* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strval_, lhs_arena,
      &other->_impl_.strval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_Field, _impl_.dval_)
      + sizeof(DB_Field::_impl_.dval_)
      - PROTOBUF_FIELD_OFFSET(DB_Field, _impl_.i64val_)>(
          reinterpret_cast<char*>(&_impl_.i64val_),
          reinterpret_cast<char*>(&other->_impl_.i64val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Field::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[3]);
}

// ===================================================================

class DB_Record::_Internal {
 public:
};

DB_Record::DB_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Record)
}
DB_Record::DB_Record(const DB_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_fields_){from._impl_.vec_fields_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Record)
}

inline void DB_Record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_fields_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DB_Record::~DB_Record() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_fields_.~RepeatedPtrField();
}

void DB_Record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.db.DB_Field vec_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.db.DB_Field vec_fields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Record)
  return target;
}

size_t DB_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_Field vec_fields = 1;
  total_size += 1UL * this->_internal_vec_fields_size();
  for (const auto& msg : this->_impl_.vec_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Record::GetClassData() const { return &_class_data_; }


void DB_Record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Record*>(&to_msg);
  auto& from = static_cast<const DB_Record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_fields_.MergeFrom(from._impl_.vec_fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Record::CopyFrom(const DB_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Record::IsInitialized() const {
  return true;
}

void DB_Record::InternalSwap(DB_Record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_fields_.InternalSwap(&other->_impl_.vec_fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[4]);
}

// ===================================================================

class DB_Recordset::_Internal {
 public:
};

DB_Recordset::DB_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Recordset)
}
DB_Recordset::DB_Recordset(const DB_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Recordset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_records_){from._impl_.vec_records_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_table_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_table_ = from._impl_.id_table_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Recordset)
}

inline void DB_Recordset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_records_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_table_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_Recordset::~DB_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Recordset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Recordset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_records_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void DB_Recordset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Recordset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_records_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.id_table_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Recordset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.db.DB_Recordset.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.db.DB_Record vec_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Recordset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Recordset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_table = 1;
  if (this->_internal_id_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_table(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_Recordset.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .pb.db.DB_Record vec_records = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Recordset)
  return target;
}

size_t DB_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Recordset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_Record vec_records = 3;
  total_size += 1UL * this->_internal_vec_records_size();
  for (const auto& msg : this->_impl_.vec_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id_table = 1;
  if (this->_internal_id_table() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Recordset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Recordset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Recordset::GetClassData() const { return &_class_data_; }


void DB_Recordset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Recordset*>(&to_msg);
  auto& from = static_cast<const DB_Recordset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Recordset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_records_.MergeFrom(from._impl_.vec_records_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id_table() != 0) {
    _this->_internal_set_id_table(from._internal_id_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Recordset::CopyFrom(const DB_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Recordset::IsInitialized() const {
  return true;
}

void DB_Recordset::InternalSwap(DB_Recordset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_records_.InternalSwap(&other->_impl_.vec_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_table_, other->_impl_.id_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Recordset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[5]);
}

// ===================================================================

class DB_Record_OP::_Internal {
 public:
  static const ::pb::db::DB_Record& record(const DB_Record_OP* msg);
};

const ::pb::db::DB_Record&
DB_Record_OP::_Internal::record(const DB_Record_OP* msg) {
  return *msg->_impl_.record_;
}
DB_Record_OP::DB_Record_OP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Record_OP)
}
DB_Record_OP::DB_Record_OP(const DB_Record_OP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Record_OP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.action_){}
    , decltype(_impl_.tbl_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::pb::db::DB_Record(*from._impl_.record_);
  }
  ::memcpy(&_impl_.action_, &from._impl_.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tbl_id_) -
    reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.tbl_id_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Record_OP)
}

inline void DB_Record_OP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.tbl_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_Record_OP::~DB_Record_OP() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Record_OP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Record_OP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.record_;
}

void DB_Record_OP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Record_OP::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Record_OP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tbl_id_) -
      reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.tbl_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Record_OP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.DB_Record_OP.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::pb::db::DB_Record_OP_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.db.DB_Record_OP.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 tbl_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tbl_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.db.DB_Record record = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Record_OP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Record_OP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.DB_Record_OP.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_Record_OP.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 tbl_id = 3;
  if (this->_internal_tbl_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tbl_id(), target);
  }

  // .pb.db.DB_Record record = 4;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Record_OP)
  return target;
}

size_t DB_Record_OP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Record_OP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.db.DB_Record record = 4;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // .pb.db.DB_Record_OP.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 tbl_id = 3;
  if (this->_internal_tbl_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tbl_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Record_OP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Record_OP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Record_OP::GetClassData() const { return &_class_data_; }


void DB_Record_OP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Record_OP*>(&to_msg);
  auto& from = static_cast<const DB_Record_OP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Record_OP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::pb::db::DB_Record::MergeFrom(
        from._internal_record());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_tbl_id() != 0) {
    _this->_internal_set_tbl_id(from._internal_tbl_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Record_OP::CopyFrom(const DB_Record_OP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Record_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Record_OP::IsInitialized() const {
  return true;
}

void DB_Record_OP::InternalSwap(DB_Record_OP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_Record_OP, _impl_.tbl_id_)
      + sizeof(DB_Record_OP::_impl_.tbl_id_)
      - PROTOBUF_FIELD_OFFSET(DB_Record_OP, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Record_OP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[6]);
}

// ===================================================================

class User_DB_Record_OPS::_Internal {
 public:
};

User_DB_Record_OPS::User_DB_Record_OPS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.User_DB_Record_OPS)
}
User_DB_Record_OPS::User_DB_Record_OPS(const User_DB_Record_OPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User_DB_Record_OPS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_ops_){from._impl_.record_ops_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.db.User_DB_Record_OPS)
}

inline void User_DB_Record_OPS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_ops_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

User_DB_Record_OPS::~User_DB_Record_OPS() {
  // @@protoc_insertion_point(destructor:pb.db.User_DB_Record_OPS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User_DB_Record_OPS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_ops_.~RepeatedPtrField();
}

void User_DB_Record_OPS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User_DB_Record_OPS::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.User_DB_Record_OPS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_ops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_DB_Record_OPS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.db.DB_Record_OP record_ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_DB_Record_OPS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.User_DB_Record_OPS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.db.DB_Record_OP record_ops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_ops_size()); i < n; i++) {
    const auto& repfield = this->_internal_record_ops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.User_DB_Record_OPS)
  return target;
}

size_t User_DB_Record_OPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.User_DB_Record_OPS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_Record_OP record_ops = 1;
  total_size += 1UL * this->_internal_record_ops_size();
  for (const auto& msg : this->_impl_.record_ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_DB_Record_OPS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User_DB_Record_OPS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_DB_Record_OPS::GetClassData() const { return &_class_data_; }


void User_DB_Record_OPS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User_DB_Record_OPS*>(&to_msg);
  auto& from = static_cast<const User_DB_Record_OPS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.User_DB_Record_OPS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_ops_.MergeFrom(from._impl_.record_ops_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_DB_Record_OPS::CopyFrom(const User_DB_Record_OPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.User_DB_Record_OPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_DB_Record_OPS::IsInitialized() const {
  return true;
}

void User_DB_Record_OPS::InternalSwap(User_DB_Record_OPS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.record_ops_.InternalSwap(&other->_impl_.record_ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_DB_Record_OPS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[7]);
}

// ===================================================================

class User_DB_Recordset::_Internal {
 public:
  static const ::pb::db::DB_Recordset& data_set(const User_DB_Recordset* msg);
};

const ::pb::db::DB_Recordset&
User_DB_Recordset::_Internal::data_set(const User_DB_Recordset* msg) {
  return *msg->_impl_.data_set_;
}
User_DB_Recordset::User_DB_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.User_DB_Recordset)
}
User_DB_Recordset::User_DB_Recordset(const User_DB_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User_DB_Recordset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_set_){nullptr}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.game_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_set()) {
    _this->_impl_.data_set_ = new ::pb::db::DB_Recordset(*from._impl_.data_set_);
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.game_id_));
  // @@protoc_insertion_point(copy_constructor:pb.db.User_DB_Recordset)
}

inline void User_DB_Recordset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_set_){nullptr}
    , decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.game_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

User_DB_Recordset::~User_DB_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.User_DB_Recordset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User_DB_Recordset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_set_;
}

void User_DB_Recordset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User_DB_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.User_DB_Recordset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_set_ != nullptr) {
    delete _impl_.data_set_;
  }
  _impl_.data_set_ = nullptr;
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.game_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.game_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_DB_Recordset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.db.DB_Recordset data_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_DB_Recordset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.User_DB_Recordset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 game_id = 2;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_id(), target);
  }

  // .pb.db.DB_Recordset data_set = 3;
  if (this->_internal_has_data_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data_set(this),
        _Internal::data_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.User_DB_Recordset)
  return target;
}

size_t User_DB_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.User_DB_Recordset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.DB_Recordset data_set = 3;
  if (this->_internal_has_data_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_set_);
  }

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // uint32 game_id = 2;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_DB_Recordset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User_DB_Recordset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_DB_Recordset::GetClassData() const { return &_class_data_; }


void User_DB_Recordset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User_DB_Recordset*>(&to_msg);
  auto& from = static_cast<const User_DB_Recordset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.User_DB_Recordset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_set()) {
    _this->_internal_mutable_data_set()->::pb::db::DB_Recordset::MergeFrom(
        from._internal_data_set());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_DB_Recordset::CopyFrom(const User_DB_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.User_DB_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_DB_Recordset::IsInitialized() const {
  return true;
}

void User_DB_Recordset::InternalSwap(User_DB_Recordset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_DB_Recordset, _impl_.game_id_)
      + sizeof(User_DB_Recordset::_impl_.game_id_)
      - PROTOBUF_FIELD_OFFSET(User_DB_Recordset, _impl_.data_set_)>(
          reinterpret_cast<char*>(&_impl_.data_set_),
          reinterpret_cast<char*>(&other->_impl_.data_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_DB_Recordset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[8]);
}

// ===================================================================

class User_DB_Recordset_Ext::_Internal {
 public:
  static const ::pb::db::DB_Recordset& data_set(const User_DB_Recordset_Ext* msg);
};

const ::pb::db::DB_Recordset&
User_DB_Recordset_Ext::_Internal::data_set(const User_DB_Recordset_Ext* msg) {
  return *msg->_impl_.data_set_;
}
User_DB_Recordset_Ext::User_DB_Recordset_Ext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.User_DB_Recordset_Ext)
}
User_DB_Recordset_Ext::User_DB_Recordset_Ext(const User_DB_Recordset_Ext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User_DB_Recordset_Ext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_set_){nullptr}
    , decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_set()) {
    _this->_impl_.data_set_ = new ::pb::db::DB_Recordset(*from._impl_.data_set_);
  }
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.User_DB_Recordset_Ext)
}

inline void User_DB_Recordset_Ext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_set_){nullptr}
    , decltype(_impl_.cmd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

User_DB_Recordset_Ext::~User_DB_Recordset_Ext() {
  // @@protoc_insertion_point(destructor:pb.db.User_DB_Recordset_Ext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User_DB_Recordset_Ext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_set_;
}

void User_DB_Recordset_Ext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User_DB_Recordset_Ext::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.User_DB_Recordset_Ext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_set_ != nullptr) {
    delete _impl_.data_set_;
  }
  _impl_.data_set_ = nullptr;
  _impl_.cmd_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_DB_Recordset_Ext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else
          goto handle_unusual;
        continue;
      // .pb.db.DB_Recordset data_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_DB_Recordset_Ext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.User_DB_Recordset_Ext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // .pb.db.DB_Recordset data_set = 2;
  if (this->_internal_has_data_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data_set(this),
        _Internal::data_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.User_DB_Recordset_Ext)
  return target;
}

size_t User_DB_Recordset_Ext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.User_DB_Recordset_Ext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.DB_Recordset data_set = 2;
  if (this->_internal_has_data_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_set_);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_DB_Recordset_Ext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User_DB_Recordset_Ext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_DB_Recordset_Ext::GetClassData() const { return &_class_data_; }


void User_DB_Recordset_Ext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User_DB_Recordset_Ext*>(&to_msg);
  auto& from = static_cast<const User_DB_Recordset_Ext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.User_DB_Recordset_Ext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_set()) {
    _this->_internal_mutable_data_set()->::pb::db::DB_Recordset::MergeFrom(
        from._internal_data_set());
  }
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_DB_Recordset_Ext::CopyFrom(const User_DB_Recordset_Ext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.User_DB_Recordset_Ext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_DB_Recordset_Ext::IsInitialized() const {
  return true;
}

void User_DB_Recordset_Ext::InternalSwap(User_DB_Recordset_Ext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_DB_Recordset_Ext, _impl_.cmd_)
      + sizeof(User_DB_Recordset_Ext::_impl_.cmd_)
      - PROTOBUF_FIELD_OFFSET(User_DB_Recordset_Ext, _impl_.data_set_)>(
          reinterpret_cast<char*>(&_impl_.data_set_),
          reinterpret_cast<char*>(&other->_impl_.data_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_DB_Recordset_Ext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[9]);
}

// ===================================================================

class DB_FieldMeta::_Internal {
 public:
};

DB_FieldMeta::DB_FieldMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_FieldMeta)
}
DB_FieldMeta::DB_FieldMeta(const DB_FieldMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_FieldMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.attr_){}
    , decltype(_impl_.len_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.len_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.len_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_FieldMeta)
}

inline void DB_FieldMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.attr_){0u}
    , decltype(_impl_.len_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_FieldMeta::~DB_FieldMeta() {
  // @@protoc_insertion_point(destructor:pb.db.DB_FieldMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_FieldMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DB_FieldMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_FieldMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_FieldMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.len_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_FieldMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.db.DB_FieldMeta.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_FieldMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_FieldMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_FieldMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 attr = 3;
  if (this->_internal_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_attr(), target);
  }

  // uint32 len = 4;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_FieldMeta)
  return target;
}

size_t DB_FieldMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_FieldMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 attr = 3;
  if (this->_internal_attr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attr());
  }

  // uint32 len = 4;
  if (this->_internal_len() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_FieldMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_FieldMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_FieldMeta::GetClassData() const { return &_class_data_; }


void DB_FieldMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_FieldMeta*>(&to_msg);
  auto& from = static_cast<const DB_FieldMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_FieldMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_attr() != 0) {
    _this->_internal_set_attr(from._internal_attr());
  }
  if (from._internal_len() != 0) {
    _this->_internal_set_len(from._internal_len());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_FieldMeta::CopyFrom(const DB_FieldMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_FieldMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FieldMeta::IsInitialized() const {
  return true;
}

void DB_FieldMeta::InternalSwap(DB_FieldMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_FieldMeta, _impl_.len_)
      + sizeof(DB_FieldMeta::_impl_.len_)
      - PROTOBUF_FIELD_OFFSET(DB_FieldMeta, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_FieldMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[10]);
}

// ===================================================================

class DB_TableMeta::_Internal {
 public:
};

DB_TableMeta::DB_TableMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_TableMeta)
}
DB_TableMeta::DB_TableMeta(const DB_TableMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_TableMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_fields_){from._impl_.vec_fields_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tbl_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.tbl_id_ = from._impl_.tbl_id_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_TableMeta)
}

inline void DB_TableMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_fields_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tbl_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_TableMeta::~DB_TableMeta() {
  // @@protoc_insertion_point(destructor:pb.db.DB_TableMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_TableMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_fields_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void DB_TableMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_TableMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_TableMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_fields_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.tbl_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_TableMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.db.DB_TableMeta.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 tbl_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tbl_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.db.DB_FieldMeta vec_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_TableMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_TableMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_TableMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 tbl_id = 2;
  if (this->_internal_tbl_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tbl_id(), target);
  }

  // repeated .pb.db.DB_FieldMeta vec_fields = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_TableMeta)
  return target;
}

size_t DB_TableMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_TableMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_FieldMeta vec_fields = 3;
  total_size += 1UL * this->_internal_vec_fields_size();
  for (const auto& msg : this->_impl_.vec_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 tbl_id = 2;
  if (this->_internal_tbl_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tbl_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_TableMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_TableMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_TableMeta::GetClassData() const { return &_class_data_; }


void DB_TableMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_TableMeta*>(&to_msg);
  auto& from = static_cast<const DB_TableMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_TableMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_fields_.MergeFrom(from._impl_.vec_fields_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_tbl_id() != 0) {
    _this->_internal_set_tbl_id(from._internal_tbl_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_TableMeta::CopyFrom(const DB_TableMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_TableMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TableMeta::IsInitialized() const {
  return true;
}

void DB_TableMeta::InternalSwap(DB_TableMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_fields_.InternalSwap(&other->_impl_.vec_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.tbl_id_, other->_impl_.tbl_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_TableMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[11]);
}

// ===================================================================

class DB_Metas::_Internal {
 public:
};

DB_Metas::DB_Metas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Metas)
}
DB_Metas::DB_Metas(const DB_Metas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Metas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_tables_){from._impl_.vec_tables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Metas)
}

inline void DB_Metas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_tables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DB_Metas::~DB_Metas() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Metas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Metas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_tables_.~RepeatedPtrField();
}

void DB_Metas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Metas::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Metas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_tables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Metas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.db.DB_TableMeta vec_tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Metas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Metas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.db.DB_TableMeta vec_tables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_tables_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_tables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Metas)
  return target;
}

size_t DB_Metas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Metas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_TableMeta vec_tables = 1;
  total_size += 1UL * this->_internal_vec_tables_size();
  for (const auto& msg : this->_impl_.vec_tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Metas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Metas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Metas::GetClassData() const { return &_class_data_; }


void DB_Metas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Metas*>(&to_msg);
  auto& from = static_cast<const DB_Metas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Metas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_tables_.MergeFrom(from._impl_.vec_tables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Metas::CopyFrom(const DB_Metas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Metas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Metas::IsInitialized() const {
  return true;
}

void DB_Metas::InternalSwap(DB_Metas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_tables_.InternalSwap(&other->_impl_.vec_tables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Metas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[12]);
}

// ===================================================================

class DB_Update::_Internal {
 public:
  static const ::pb::db::DB_Recordset& data_set(const DB_Update* msg);
};

const ::pb::db::DB_Recordset&
DB_Update::_Internal::data_set(const DB_Update* msg) {
  return *msg->_impl_.data_set_;
}
DB_Update::DB_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Update)
}
DB_Update::DB_Update(const DB_Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Update* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_set_){nullptr}
    , decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_set()) {
    _this->_impl_.data_set_ = new ::pb::db::DB_Recordset(*from._impl_.data_set_);
  }
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Update)
}

inline void DB_Update::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_set_){nullptr}
    , decltype(_impl_.cmd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DB_Update::~DB_Update() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Update)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_set_;
}

void DB_Update::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Update)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_set_ != nullptr) {
    delete _impl_.data_set_;
  }
  _impl_.data_set_ = nullptr;
  _impl_.cmd_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Update::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else
          goto handle_unusual;
        continue;
      // .pb.db.DB_Recordset data_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Update::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Update)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // .pb.db.DB_Recordset data_set = 2;
  if (this->_internal_has_data_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data_set(this),
        _Internal::data_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Update)
  return target;
}

size_t DB_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Update)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.DB_Recordset data_set = 2;
  if (this->_internal_has_data_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_set_);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Update::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Update::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Update::GetClassData() const { return &_class_data_; }


void DB_Update::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Update*>(&to_msg);
  auto& from = static_cast<const DB_Update&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Update)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_set()) {
    _this->_internal_mutable_data_set()->::pb::db::DB_Recordset::MergeFrom(
        from._internal_data_set());
  }
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Update::CopyFrom(const DB_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Update::IsInitialized() const {
  return true;
}

void DB_Update::InternalSwap(DB_Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_Update, _impl_.cmd_)
      + sizeof(DB_Update::_impl_.cmd_)
      - PROTOBUF_FIELD_OFFSET(DB_Update, _impl_.data_set_)>(
          reinterpret_cast<char*>(&_impl_.data_set_),
          reinterpret_cast<char*>(&other->_impl_.data_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Update::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[13]);
}

// ===================================================================

class DB_Delete::_Internal {
 public:
};

DB_Delete::DB_Delete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Delete)
}
DB_Delete::DB_Delete(const DB_Delete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Delete* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_ids_){from._impl_.vec_ids_}
    , /*decltype(_impl_._vec_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.tbl_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cmd_, &from._impl_.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tbl_id_) -
    reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.tbl_id_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Delete)
}

inline void DB_Delete::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_ids_){arena}
    , /*decltype(_impl_._vec_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.cmd_){0}
    , decltype(_impl_.tbl_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DB_Delete::~DB_Delete() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Delete)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Delete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_ids_.~RepeatedField();
}

void DB_Delete::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Delete::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Delete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_ids_.Clear();
  ::memset(&_impl_.cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tbl_id_) -
      reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.tbl_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Delete::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 tbl_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tbl_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 vec_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vec_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_vec_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Delete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Delete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // uint32 tbl_id = 2;
  if (this->_internal_tbl_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tbl_id(), target);
  }

  // repeated uint64 vec_ids = 3;
  {
    int byte_size = _impl_._vec_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_vec_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Delete)
  return target;
}

size_t DB_Delete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Delete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vec_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.vec_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._vec_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  // uint32 tbl_id = 2;
  if (this->_internal_tbl_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tbl_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Delete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Delete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Delete::GetClassData() const { return &_class_data_; }


void DB_Delete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Delete*>(&to_msg);
  auto& from = static_cast<const DB_Delete&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Delete)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_ids_.MergeFrom(from._impl_.vec_ids_);
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  if (from._internal_tbl_id() != 0) {
    _this->_internal_set_tbl_id(from._internal_tbl_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Delete::CopyFrom(const DB_Delete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Delete::IsInitialized() const {
  return true;
}

void DB_Delete::InternalSwap(DB_Delete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_ids_.InternalSwap(&other->_impl_.vec_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_Delete, _impl_.tbl_id_)
      + sizeof(DB_Delete::_impl_.tbl_id_)
      - PROTOBUF_FIELD_OFFSET(DB_Delete, _impl_.cmd_)>(
          reinterpret_cast<char*>(&_impl_.cmd_),
          reinterpret_cast<char*>(&other->_impl_.cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Delete::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[14]);
}

// ===================================================================

class Key_Value::_Internal {
 public:
};

Key_Value::Key_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.Key_Value)
}
Key_Value::Key_Value(const Key_Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Key_Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.key_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  // @@protoc_insertion_point(copy_constructor:pb.db.Key_Value)
}

inline void Key_Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.key_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Key_Value::~Key_Value() {
  // @@protoc_insertion_point(destructor:pb.db.Key_Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Key_Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Key_Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Key_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.Key_Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.key_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Key_Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Key_Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.Key_Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.Key_Value)
  return target;
}

size_t Key_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.Key_Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  // uint32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Key_Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Key_Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Key_Value::GetClassData() const { return &_class_data_; }


void Key_Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Key_Value*>(&to_msg);
  auto& from = static_cast<const Key_Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.Key_Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Key_Value::CopyFrom(const Key_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.Key_Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key_Value::IsInitialized() const {
  return true;
}

void Key_Value::InternalSwap(Key_Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Key_Value, _impl_.key_)
      + sizeof(Key_Value::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(Key_Value, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Key_Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[15]);
}

// ===================================================================

class EffectProp::_Internal {
 public:
};

EffectProp::EffectProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.EffectProp)
}
EffectProp::EffectProp(const EffectProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EffectProp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_effect_){from._impl_.vec_effect_}
    , decltype(_impl_.range_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:pb.db.EffectProp)
}

inline void EffectProp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_effect_){arena}
    , decltype(_impl_.range_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EffectProp::~EffectProp() {
  // @@protoc_insertion_point(destructor:pb.db.EffectProp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EffectProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_effect_.~RepeatedPtrField();
}

void EffectProp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EffectProp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.EffectProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_effect_.Clear();
  _impl_.range_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.db.Key_Value vec_effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_effect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EffectProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.EffectProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 range = 1;
  if (this->_internal_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_range(), target);
  }

  // repeated .pb.db.Key_Value vec_effect = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_effect_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_effect(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.EffectProp)
  return target;
}

size_t EffectProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.EffectProp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.Key_Value vec_effect = 2;
  total_size += 1UL * this->_internal_vec_effect_size();
  for (const auto& msg : this->_impl_.vec_effect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 range = 1;
  if (this->_internal_range() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EffectProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EffectProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EffectProp::GetClassData() const { return &_class_data_; }


void EffectProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EffectProp*>(&to_msg);
  auto& from = static_cast<const EffectProp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.EffectProp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_effect_.MergeFrom(from._impl_.vec_effect_);
  if (from._internal_range() != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EffectProp::CopyFrom(const EffectProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.EffectProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectProp::IsInitialized() const {
  return true;
}

void EffectProp::InternalSwap(EffectProp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_effect_.InternalSwap(&other->_impl_.vec_effect_);
  swap(_impl_.range_, other->_impl_.range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectProp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[16]);
}

// ===================================================================

class DB_EffectProp::_Internal {
 public:
};

DB_EffectProp::DB_EffectProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_EffectProp)
}
DB_EffectProp::DB_EffectProp(const DB_EffectProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_EffectProp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_prop_){from._impl_.vec_prop_}
    , decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_EffectProp)
}

inline void DB_EffectProp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_prop_){arena}
    , decltype(_impl_.cmd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DB_EffectProp::~DB_EffectProp() {
  // @@protoc_insertion_point(destructor:pb.db.DB_EffectProp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_EffectProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_prop_.~RepeatedPtrField();
}

void DB_EffectProp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_EffectProp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_EffectProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_prop_.Clear();
  _impl_.cmd_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_EffectProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.db.EffectProp vec_prop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_prop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_EffectProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_EffectProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // repeated .pb.db.EffectProp vec_prop = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_prop_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_prop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_EffectProp)
  return target;
}

size_t DB_EffectProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_EffectProp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.EffectProp vec_prop = 2;
  total_size += 1UL * this->_internal_vec_prop_size();
  for (const auto& msg : this->_impl_.vec_prop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_EffectProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_EffectProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_EffectProp::GetClassData() const { return &_class_data_; }


void DB_EffectProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_EffectProp*>(&to_msg);
  auto& from = static_cast<const DB_EffectProp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_EffectProp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_prop_.MergeFrom(from._impl_.vec_prop_);
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_EffectProp::CopyFrom(const DB_EffectProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_EffectProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EffectProp::IsInitialized() const {
  return true;
}

void DB_EffectProp::InternalSwap(DB_EffectProp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_prop_.InternalSwap(&other->_impl_.vec_prop_);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_EffectProp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[17]);
}

// ===================================================================

class DB_Add_Recordset::_Internal {
 public:
  static const ::pb::db::DB_Record& record(const DB_Add_Recordset* msg);
};

const ::pb::db::DB_Record&
DB_Add_Recordset::_Internal::record(const DB_Add_Recordset* msg) {
  return *msg->_impl_.record_;
}
DB_Add_Recordset::DB_Add_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_Add_Recordset)
}
DB_Add_Recordset::DB_Add_Recordset(const DB_Add_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_Add_Recordset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.target_game_id_){}
    , decltype(_impl_.id_table_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::pb::db::DB_Record(*from._impl_.record_);
  }
  ::memcpy(&_impl_.target_id_, &from._impl_.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_table_) -
    reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.id_table_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Add_Recordset)
}

inline void DB_Add_Recordset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.target_id_){int64_t{0}}
    , decltype(_impl_.target_game_id_){0u}
    , decltype(_impl_.id_table_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DB_Add_Recordset::~DB_Add_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Add_Recordset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_Add_Recordset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.record_;
}

void DB_Add_Recordset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_Add_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Add_Recordset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_table_) -
      reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.id_table_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_Add_Recordset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.db.DB_Add_Recordset.name"));
        } else
          goto handle_unusual;
        continue;
      // .pb.db.DB_Record record = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_Add_Recordset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Add_Recordset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  // uint32 target_game_id = 2;
  if (this->_internal_target_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_game_id(), target);
  }

  // uint32 id_table = 3;
  if (this->_internal_id_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id_table(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_Add_Recordset.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .pb.db.DB_Record record = 5;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Add_Recordset)
  return target;
}

size_t DB_Add_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Add_Recordset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.db.DB_Record record = 5;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // int64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_target_id());
  }

  // uint32 target_game_id = 2;
  if (this->_internal_target_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_game_id());
  }

  // uint32 id_table = 3;
  if (this->_internal_id_table() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_Add_Recordset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_Add_Recordset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_Add_Recordset::GetClassData() const { return &_class_data_; }


void DB_Add_Recordset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_Add_Recordset*>(&to_msg);
  auto& from = static_cast<const DB_Add_Recordset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Add_Recordset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::pb::db::DB_Record::MergeFrom(
        from._internal_record());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_target_game_id() != 0) {
    _this->_internal_set_target_game_id(from._internal_target_game_id());
  }
  if (from._internal_id_table() != 0) {
    _this->_internal_set_id_table(from._internal_id_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_Add_Recordset::CopyFrom(const DB_Add_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Add_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Add_Recordset::IsInitialized() const {
  return true;
}

void DB_Add_Recordset::InternalSwap(DB_Add_Recordset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_Add_Recordset, _impl_.id_table_)
      + sizeof(DB_Add_Recordset::_impl_.id_table_)
      - PROTOBUF_FIELD_OFFSET(DB_Add_Recordset, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Add_Recordset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[18]);
}

// ===================================================================

class DB_DataFlag::_Internal {
 public:
};

DB_DataFlag::DB_DataFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.DB_DataFlag)
}
DB_DataFlag::DB_DataFlag(const DB_DataFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DB_DataFlag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cmd_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.cmd_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_DataFlag)
}

inline void DB_DataFlag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){int64_t{0}}
    , decltype(_impl_.cmd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DB_DataFlag::~DB_DataFlag() {
  // @@protoc_insertion_point(destructor:pb.db.DB_DataFlag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DB_DataFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DB_DataFlag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DB_DataFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_DataFlag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cmd_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_DataFlag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DB_DataFlag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_DataFlag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_DataFlag)
  return target;
}

size_t DB_DataFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_DataFlag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DB_DataFlag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DB_DataFlag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DB_DataFlag::GetClassData() const { return &_class_data_; }


void DB_DataFlag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DB_DataFlag*>(&to_msg);
  auto& from = static_cast<const DB_DataFlag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_DataFlag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DB_DataFlag::CopyFrom(const DB_DataFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_DataFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DataFlag::IsInitialized() const {
  return true;
}

void DB_DataFlag::InternalSwap(DB_DataFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_DataFlag, _impl_.cmd_)
      + sizeof(DB_DataFlag::_impl_.cmd_)
      - PROTOBUF_FIELD_OFFSET(DB_DataFlag, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_DataFlag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[19]);
}

// ===================================================================

class Query_Recordset::_Internal {
 public:
};

Query_Recordset::Query_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.db.Query_Recordset)
}
Query_Recordset::Query_Recordset(const Query_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_Recordset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_list_){from._impl_.field_list_}
    , /*decltype(_impl_._field_list_cached_byte_size_)*/{0}
    , decltype(_impl_.key_list_){from._impl_.key_list_}
    , /*decltype(_impl_._key_list_cached_byte_size_)*/{0}
    , decltype(_impl_.vec_records_){from._impl_.vec_records_}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.id_table_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cmd_, &from._impl_.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_table_) -
    reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.id_table_));
  // @@protoc_insertion_point(copy_constructor:pb.db.Query_Recordset)
}

inline void Query_Recordset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_list_){arena}
    , /*decltype(_impl_._field_list_cached_byte_size_)*/{0}
    , decltype(_impl_.key_list_){arena}
    , /*decltype(_impl_._key_list_cached_byte_size_)*/{0}
    , decltype(_impl_.vec_records_){arena}
    , decltype(_impl_.cmd_){0}
    , decltype(_impl_.id_table_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Query_Recordset::~Query_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.Query_Recordset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_Recordset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_list_.~RepeatedField();
  _impl_.key_list_.~RepeatedField();
  _impl_.vec_records_.~RepeatedPtrField();
}

void Query_Recordset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.Query_Recordset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_list_.Clear();
  _impl_.key_list_.Clear();
  _impl_.vec_records_.Clear();
  ::memset(&_impl_.cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_table_) -
      reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.id_table_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_Recordset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 id_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 field_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_field_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_field_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 key_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_key_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_key_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.db.DB_Record vec_records = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query_Recordset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.Query_Recordset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // uint32 id_table = 2;
  if (this->_internal_id_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id_table(), target);
  }

  // repeated uint32 field_list = 3;
  {
    int byte_size = _impl_._field_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_field_list(), byte_size, target);
    }
  }

  // repeated uint32 key_list = 4;
  {
    int byte_size = _impl_._key_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_key_list(), byte_size, target);
    }
  }

  // repeated .pb.db.DB_Record vec_records = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.Query_Recordset)
  return target;
}

size_t Query_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.Query_Recordset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 field_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.field_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._field_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 key_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.key_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._key_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pb.db.DB_Record vec_records = 5;
  total_size += 1UL * this->_internal_vec_records_size();
  for (const auto& msg : this->_impl_.vec_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  // uint32 id_table = 2;
  if (this->_internal_id_table() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id_table());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_Recordset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_Recordset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_Recordset::GetClassData() const { return &_class_data_; }


void Query_Recordset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_Recordset*>(&to_msg);
  auto& from = static_cast<const Query_Recordset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.db.Query_Recordset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_list_.MergeFrom(from._impl_.field_list_);
  _this->_impl_.key_list_.MergeFrom(from._impl_.key_list_);
  _this->_impl_.vec_records_.MergeFrom(from._impl_.vec_records_);
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  if (from._internal_id_table() != 0) {
    _this->_internal_set_id_table(from._internal_id_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_Recordset::CopyFrom(const Query_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.Query_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Recordset::IsInitialized() const {
  return true;
}

void Query_Recordset::InternalSwap(Query_Recordset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field_list_.InternalSwap(&other->_impl_.field_list_);
  _impl_.key_list_.InternalSwap(&other->_impl_.key_list_);
  _impl_.vec_records_.InternalSwap(&other->_impl_.vec_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query_Recordset, _impl_.id_table_)
      + sizeof(Query_Recordset::_impl_.id_table_)
      - PROTOBUF_FIELD_OFFSET(Query_Recordset, _impl_.cmd_)>(
          reinterpret_cast<char*>(&_impl_.cmd_),
          reinterpret_cast<char*>(&other->_impl_.cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_Recordset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace db
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::db::DB_OP_Condition*
Arena::CreateMaybeMessage< ::pb::db::DB_OP_Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_OP_Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_OP_User*
Arena::CreateMaybeMessage< ::pb::db::DB_OP_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_OP_User >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::Base_Cmd*
Arena::CreateMaybeMessage< ::pb::db::Base_Cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::Base_Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Field*
Arena::CreateMaybeMessage< ::pb::db::DB_Field >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Record*
Arena::CreateMaybeMessage< ::pb::db::DB_Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Recordset*
Arena::CreateMaybeMessage< ::pb::db::DB_Recordset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Recordset >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Record_OP*
Arena::CreateMaybeMessage< ::pb::db::DB_Record_OP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Record_OP >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::User_DB_Record_OPS*
Arena::CreateMaybeMessage< ::pb::db::User_DB_Record_OPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::User_DB_Record_OPS >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::User_DB_Recordset*
Arena::CreateMaybeMessage< ::pb::db::User_DB_Recordset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::User_DB_Recordset >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::User_DB_Recordset_Ext*
Arena::CreateMaybeMessage< ::pb::db::User_DB_Recordset_Ext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::User_DB_Recordset_Ext >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_FieldMeta*
Arena::CreateMaybeMessage< ::pb::db::DB_FieldMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_FieldMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_TableMeta*
Arena::CreateMaybeMessage< ::pb::db::DB_TableMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_TableMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Metas*
Arena::CreateMaybeMessage< ::pb::db::DB_Metas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Metas >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Update*
Arena::CreateMaybeMessage< ::pb::db::DB_Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Update >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Delete*
Arena::CreateMaybeMessage< ::pb::db::DB_Delete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Delete >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::Key_Value*
Arena::CreateMaybeMessage< ::pb::db::Key_Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::Key_Value >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::EffectProp*
Arena::CreateMaybeMessage< ::pb::db::EffectProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::EffectProp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_EffectProp*
Arena::CreateMaybeMessage< ::pb::db::DB_EffectProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_EffectProp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Add_Recordset*
Arena::CreateMaybeMessage< ::pb::db::DB_Add_Recordset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_Add_Recordset >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_DataFlag*
Arena::CreateMaybeMessage< ::pb::db::DB_DataFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::DB_DataFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::Query_Recordset*
Arena::CreateMaybeMessage< ::pb::db::Query_Recordset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::db::Query_Recordset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
