// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_Field_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_FieldMeta_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_OP_Condition_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Record_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Record_OP_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Recordset_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_TableMeta_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EffectProp_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Key_Value_db_2eproto;
namespace pb {
namespace db {
class DB_OP_ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_OP_Condition> _instance;
} _DB_OP_Condition_default_instance_;
class DB_OP_UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_OP_User> _instance;
} _DB_OP_User_default_instance_;
class Base_CmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Base_Cmd> _instance;
} _Base_Cmd_default_instance_;
class DB_FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Field> _instance;
} _DB_Field_default_instance_;
class DB_RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Record> _instance;
} _DB_Record_default_instance_;
class DB_RecordsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Recordset> _instance;
} _DB_Recordset_default_instance_;
class DB_Record_OPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Record_OP> _instance;
} _DB_Record_OP_default_instance_;
class User_DB_Record_OPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User_DB_Record_OPS> _instance;
} _User_DB_Record_OPS_default_instance_;
class User_DB_RecordsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User_DB_Recordset> _instance;
} _User_DB_Recordset_default_instance_;
class User_DB_Recordset_ExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User_DB_Recordset_Ext> _instance;
} _User_DB_Recordset_Ext_default_instance_;
class DB_FieldMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_FieldMeta> _instance;
} _DB_FieldMeta_default_instance_;
class DB_TableMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_TableMeta> _instance;
} _DB_TableMeta_default_instance_;
class DB_MetasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Metas> _instance;
} _DB_Metas_default_instance_;
class DB_UpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Update> _instance;
} _DB_Update_default_instance_;
class DB_DeleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Delete> _instance;
} _DB_Delete_default_instance_;
class Key_ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Key_Value> _instance;
} _Key_Value_default_instance_;
class EffectPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectProp> _instance;
} _EffectProp_default_instance_;
class DB_EffectPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_EffectProp> _instance;
} _DB_EffectProp_default_instance_;
class DB_Add_RecordsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_Add_Recordset> _instance;
} _DB_Add_Recordset_default_instance_;
class DB_DataFlagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_DataFlag> _instance;
} _DB_DataFlag_default_instance_;
class Query_RecordsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Query_Recordset> _instance;
} _Query_Recordset_default_instance_;
}  // namespace db
}  // namespace pb
static void InitDefaultsscc_info_Base_Cmd_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_Base_Cmd_default_instance_;
    new (ptr) ::pb::db::Base_Cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::Base_Cmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Base_Cmd_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Base_Cmd_db_2eproto}, {}};

static void InitDefaultsscc_info_DB_Add_Recordset_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Add_Recordset_default_instance_;
    new (ptr) ::pb::db::DB_Add_Recordset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Add_Recordset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Add_Recordset_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_Add_Recordset_db_2eproto}, {
      &scc_info_DB_Record_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_DataFlag_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_DataFlag_default_instance_;
    new (ptr) ::pb::db::DB_DataFlag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_DataFlag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_DataFlag_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_DataFlag_db_2eproto}, {}};

static void InitDefaultsscc_info_DB_Delete_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Delete_default_instance_;
    new (ptr) ::pb::db::DB_Delete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Delete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_Delete_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_Delete_db_2eproto}, {}};

static void InitDefaultsscc_info_DB_EffectProp_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_EffectProp_default_instance_;
    new (ptr) ::pb::db::DB_EffectProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_EffectProp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_EffectProp_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_EffectProp_db_2eproto}, {
      &scc_info_EffectProp_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_Field_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Field_default_instance_;
    new (ptr) ::pb::db::DB_Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_Field_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_Field_db_2eproto}, {}};

static void InitDefaultsscc_info_DB_FieldMeta_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_FieldMeta_default_instance_;
    new (ptr) ::pb::db::DB_FieldMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_FieldMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_FieldMeta_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_FieldMeta_db_2eproto}, {}};

static void InitDefaultsscc_info_DB_Metas_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Metas_default_instance_;
    new (ptr) ::pb::db::DB_Metas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Metas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Metas_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_Metas_db_2eproto}, {
      &scc_info_DB_TableMeta_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_OP_Condition_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_OP_Condition_default_instance_;
    new (ptr) ::pb::db::DB_OP_Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_OP_Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_OP_Condition_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_OP_Condition_db_2eproto}, {}};

static void InitDefaultsscc_info_DB_OP_User_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_OP_User_default_instance_;
    new (ptr) ::pb::db::DB_OP_User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_OP_User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_OP_User_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_OP_User_db_2eproto}, {
      &scc_info_DB_OP_Condition_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_Record_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Record_default_instance_;
    new (ptr) ::pb::db::DB_Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Record::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Record_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_Record_db_2eproto}, {
      &scc_info_DB_Field_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_Record_OP_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Record_OP_default_instance_;
    new (ptr) ::pb::db::DB_Record_OP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Record_OP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Record_OP_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_Record_OP_db_2eproto}, {
      &scc_info_DB_Record_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_Recordset_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Recordset_default_instance_;
    new (ptr) ::pb::db::DB_Recordset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Recordset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Recordset_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_Recordset_db_2eproto}, {
      &scc_info_DB_Record_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_TableMeta_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_TableMeta_default_instance_;
    new (ptr) ::pb::db::DB_TableMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_TableMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_TableMeta_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_TableMeta_db_2eproto}, {
      &scc_info_DB_FieldMeta_db_2eproto.base,}};

static void InitDefaultsscc_info_DB_Update_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_DB_Update_default_instance_;
    new (ptr) ::pb::db::DB_Update();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::DB_Update::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_Update_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_Update_db_2eproto}, {
      &scc_info_DB_Recordset_db_2eproto.base,}};

static void InitDefaultsscc_info_EffectProp_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_EffectProp_default_instance_;
    new (ptr) ::pb::db::EffectProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::EffectProp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EffectProp_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EffectProp_db_2eproto}, {
      &scc_info_Key_Value_db_2eproto.base,}};

static void InitDefaultsscc_info_Key_Value_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_Key_Value_default_instance_;
    new (ptr) ::pb::db::Key_Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::Key_Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Key_Value_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Key_Value_db_2eproto}, {}};

static void InitDefaultsscc_info_Query_Recordset_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_Query_Recordset_default_instance_;
    new (ptr) ::pb::db::Query_Recordset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::Query_Recordset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Query_Recordset_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Query_Recordset_db_2eproto}, {
      &scc_info_DB_Record_db_2eproto.base,}};

static void InitDefaultsscc_info_User_DB_Record_OPS_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_User_DB_Record_OPS_default_instance_;
    new (ptr) ::pb::db::User_DB_Record_OPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::User_DB_Record_OPS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_User_DB_Record_OPS_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_User_DB_Record_OPS_db_2eproto}, {
      &scc_info_DB_Record_OP_db_2eproto.base,}};

static void InitDefaultsscc_info_User_DB_Recordset_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_User_DB_Recordset_default_instance_;
    new (ptr) ::pb::db::User_DB_Recordset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::User_DB_Recordset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_User_DB_Recordset_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_User_DB_Recordset_db_2eproto}, {
      &scc_info_DB_Recordset_db_2eproto.base,}};

static void InitDefaultsscc_info_User_DB_Recordset_Ext_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::db::_User_DB_Recordset_Ext_default_instance_;
    new (ptr) ::pb::db::User_DB_Recordset_Ext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::db::User_DB_Recordset_Ext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_User_DB_Recordset_Ext_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_User_DB_Recordset_Ext_db_2eproto}, {
      &scc_info_DB_Recordset_db_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_db_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_db_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_db_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_db_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, idx_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, op_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, value_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, i64val_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_Condition, next_logic_op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, action_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, tbl_type_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_OP_User, fail_function_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::Base_Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::Base_Cmd, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, idx_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, i64val_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, strval_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, dval_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Field, field_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record, vec_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, id_table_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Recordset, vec_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, action_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, tbl_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Record_OP, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Record_OPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Record_OPS, record_ops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset, data_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset_Ext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset_Ext, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::User_DB_Recordset_Ext, data_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, type_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, attr_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_FieldMeta, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, tbl_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_TableMeta, vec_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Metas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Metas, vec_tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Update, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Update, data_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, tbl_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Delete, vec_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::Key_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::Key_Value, key_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Key_Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::EffectProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::EffectProp, range_),
  PROTOBUF_FIELD_OFFSET(::pb::db::EffectProp, vec_effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_EffectProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_EffectProp, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_EffectProp, vec_prop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, target_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, target_game_id_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, id_table_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, name_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_Add_Recordset, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_DataFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_DataFlag, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::DB_DataFlag, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, id_table_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, field_list_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, key_list_),
  PROTOBUF_FIELD_OFFSET(::pb::db::Query_Recordset, vec_records_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::db::DB_OP_Condition)},
  { 10, -1, sizeof(::pb::db::DB_OP_User)},
  { 20, -1, sizeof(::pb::db::Base_Cmd)},
  { 26, -1, sizeof(::pb::db::DB_Field)},
  { 36, -1, sizeof(::pb::db::DB_Record)},
  { 42, -1, sizeof(::pb::db::DB_Recordset)},
  { 50, -1, sizeof(::pb::db::DB_Record_OP)},
  { 59, -1, sizeof(::pb::db::User_DB_Record_OPS)},
  { 65, -1, sizeof(::pb::db::User_DB_Recordset)},
  { 73, -1, sizeof(::pb::db::User_DB_Recordset_Ext)},
  { 80, -1, sizeof(::pb::db::DB_FieldMeta)},
  { 89, -1, sizeof(::pb::db::DB_TableMeta)},
  { 97, -1, sizeof(::pb::db::DB_Metas)},
  { 103, -1, sizeof(::pb::db::DB_Update)},
  { 110, -1, sizeof(::pb::db::DB_Delete)},
  { 118, -1, sizeof(::pb::db::Key_Value)},
  { 125, -1, sizeof(::pb::db::EffectProp)},
  { 132, -1, sizeof(::pb::db::DB_EffectProp)},
  { 139, -1, sizeof(::pb::db::DB_Add_Recordset)},
  { 149, -1, sizeof(::pb::db::DB_DataFlag)},
  { 156, -1, sizeof(::pb::db::Query_Recordset)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_OP_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_OP_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_Base_Cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Recordset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Record_OP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_User_DB_Record_OPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_User_DB_Recordset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_User_DB_Recordset_Ext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_FieldMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_TableMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Metas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Delete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_Key_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_EffectProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_EffectProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_Add_Recordset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_DB_DataFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::db::_Query_Recordset_default_instance_),
};

const char descriptor_table_protodef_db_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010db.proto\022\005pb.db\"`\n\017DB_OP_Condition\022\013\n\003"
  "idx\030\001 \001(\r\022\n\n\002op\030\002 \001(\r\022\r\n\005value\030\003 \001(\t\022\016\n\006"
  "i64val\030\004 \001(\003\022\025\n\rnext_logic_op\030\005 \001(\r\"\360\001\n\n"
  "DB_OP_User\022(\n\006action\030\001 \001(\0162\030.pb.db.DB_OP"
  "_User.Action\022\'\n\007user_id\030\002 \001(\0132\026.pb.db.DB"
  "_OP_Condition\022\'\n\007game_id\030\003 \001(\0132\026.pb.db.D"
  "B_OP_Condition\022\020\n\010tbl_type\030\004 \001(\r\022\032\n\022fail"
  "_function_name\030\005 \001(\t\"8\n\006Action\022\025\n\021QUERY_"
  "UserTblData\020\000\022\027\n\023QUERY_FriendTblData\020\001\"("
  "\n\010Base_Cmd\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd"
  "\"n\n\010DB_Field\022\013\n\003idx\030\001 \001(\r\022\016\n\006i64val\030\002 \001("
  "\003\022\016\n\006strval\030\003 \001(\014\022\014\n\004dval\030\004 \001(\001\022\'\n\nfield"
  "_type\030\005 \001(\0162\023.pb.db.E_Field_Type\"0\n\tDB_R"
  "ecord\022#\n\nvec_fields\030\001 \003(\0132\017.pb.db.DB_Fie"
  "ld\"U\n\014DB_Recordset\022\020\n\010id_table\030\001 \001(\r\022\014\n\004"
  "name\030\002 \001(\t\022%\n\013vec_records\030\003 \003(\0132\020.pb.db."
  "DB_Record\"\245\001\n\014DB_Record_OP\022*\n\006action\030\001 \001"
  "(\0162\032.pb.db.DB_Record_OP.Action\022\014\n\004name\030\002"
  " \001(\t\022\016\n\006tbl_id\030\003 \001(\r\022 \n\006record\030\004 \001(\0132\020.p"
  "b.db.DB_Record\")\n\006Action\022\n\n\006UPDATE\020\000\022\007\n\003"
  "NEW\020\001\022\n\n\006REMOVE\020\002\"=\n\022User_DB_Record_OPS\022"
  "\'\n\nrecord_ops\030\001 \003(\0132\023.pb.db.DB_Record_OP"
  "\"\\\n\021User_DB_Recordset\022\017\n\007user_id\030\001 \001(\003\022\017"
  "\n\007game_id\030\002 \001(\r\022%\n\010data_set\030\003 \001(\0132\023.pb.d"
  "b.DB_Recordset\"\\\n\025User_DB_Recordset_Ext\022"
  "\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd\022%\n\010data_se"
  "t\030\002 \001(\0132\023.pb.db.DB_Recordset\"E\n\014DB_Field"
  "Meta\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\r\022\014\n\004attr"
  "\030\003 \001(\r\022\013\n\003len\030\004 \001(\r\"U\n\014DB_TableMeta\022\014\n\004n"
  "ame\030\001 \001(\t\022\016\n\006tbl_id\030\002 \001(\r\022\'\n\nvec_fields\030"
  "\003 \003(\0132\023.pb.db.DB_FieldMeta\"3\n\010DB_Metas\022\'"
  "\n\nvec_tables\030\001 \003(\0132\023.pb.db.DB_TableMeta\""
  "P\n\tDB_Update\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_C"
  "md\022%\n\010data_set\030\002 \001(\0132\023.pb.db.DB_Recordse"
  "t\"J\n\tDB_Delete\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB"
  "_Cmd\022\016\n\006tbl_id\030\002 \001(\r\022\017\n\007vec_ids\030\003 \003(\004\"\'\n"
  "\tKey_Value\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\003\"A"
  "\n\nEffectProp\022\r\n\005range\030\001 \001(\r\022$\n\nvec_effec"
  "t\030\002 \003(\0132\020.pb.db.Key_Value\"R\n\rDB_EffectPr"
  "op\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd\022#\n\010vec_"
  "prop\030\002 \003(\0132\021.pb.db.EffectProp\"\177\n\020DB_Add_"
  "Recordset\022\021\n\ttarget_id\030\001 \001(\003\022\026\n\016target_g"
  "ame_id\030\002 \001(\r\022\020\n\010id_table\030\003 \001(\r\022\014\n\004name\030\004"
  " \001(\t\022 \n\006record\030\005 \001(\0132\020.pb.db.DB_Record\"<"
  "\n\013DB_DataFlag\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_"
  "Cmd\022\017\n\007user_id\030\002 \001(\003\"\216\001\n\017Query_Recordset"
  "\022\034\n\003cmd\030\001 \001(\0162\017.pb.db.E_DB_Cmd\022\020\n\010id_tab"
  "le\030\002 \001(\r\022\022\n\nfield_list\030\003 \003(\r\022\020\n\010key_list"
  "\030\004 \003(\r\022%\n\013vec_records\030\005 \003(\0132\020.pb.db.DB_R"
  "ecord*V\n\014E_Field_Type\022\024\n\020E_Field_Type_In"
  "t\020\000\022\027\n\023E_Field_Type_String\020\001\022\027\n\023E_Field_"
  "Type_Double\020\002*\316\001\n\010E_DB_Cmd\022\023\n\017E_DB_Cmd_U"
  "pdate\020\000\022\026\n\022E_DB_Cmd_SynFileDB\020\001\022\026\n\022E_DB_"
  "Cmd_DelFileDB\020\002\022\027\n\023E_DB_Cmd_SynEffProp\020\003"
  "\022\026\n\022E_DB_Cmd_DataStart\020\004\022\024\n\020E_DB_Cmd_Dat"
  "aEnd\020\005\022\026\n\022E_DB_Cmd_QueryData\020\006\022\036\n\032E_DB_C"
  "md_GuildBattleReport\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_db_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_db_2eproto_sccs[21] = {
  &scc_info_Base_Cmd_db_2eproto.base,
  &scc_info_DB_Add_Recordset_db_2eproto.base,
  &scc_info_DB_DataFlag_db_2eproto.base,
  &scc_info_DB_Delete_db_2eproto.base,
  &scc_info_DB_EffectProp_db_2eproto.base,
  &scc_info_DB_Field_db_2eproto.base,
  &scc_info_DB_FieldMeta_db_2eproto.base,
  &scc_info_DB_Metas_db_2eproto.base,
  &scc_info_DB_OP_Condition_db_2eproto.base,
  &scc_info_DB_OP_User_db_2eproto.base,
  &scc_info_DB_Record_db_2eproto.base,
  &scc_info_DB_Record_OP_db_2eproto.base,
  &scc_info_DB_Recordset_db_2eproto.base,
  &scc_info_DB_TableMeta_db_2eproto.base,
  &scc_info_DB_Update_db_2eproto.base,
  &scc_info_EffectProp_db_2eproto.base,
  &scc_info_Key_Value_db_2eproto.base,
  &scc_info_Query_Recordset_db_2eproto.base,
  &scc_info_User_DB_Record_OPS_db_2eproto.base,
  &scc_info_User_DB_Recordset_db_2eproto.base,
  &scc_info_User_DB_Recordset_Ext_db_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_db_2eproto_once;
static bool descriptor_table_db_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto = {
  &descriptor_table_db_2eproto_initialized, descriptor_table_protodef_db_2eproto, "db.proto", 2270,
  &descriptor_table_db_2eproto_once, descriptor_table_db_2eproto_sccs, descriptor_table_db_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_db_2eproto::offsets,
  file_level_metadata_db_2eproto, 21, file_level_enum_descriptors_db_2eproto, file_level_service_descriptors_db_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_db_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_db_2eproto), true);
namespace pb {
namespace db {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DB_OP_User_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[0];
}
bool DB_OP_User_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DB_OP_User_Action DB_OP_User::QUERY_UserTblData;
constexpr DB_OP_User_Action DB_OP_User::QUERY_FriendTblData;
constexpr DB_OP_User_Action DB_OP_User::Action_MIN;
constexpr DB_OP_User_Action DB_OP_User::Action_MAX;
constexpr int DB_OP_User::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DB_Record_OP_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[1];
}
bool DB_Record_OP_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DB_Record_OP_Action DB_Record_OP::UPDATE;
constexpr DB_Record_OP_Action DB_Record_OP::NEW;
constexpr DB_Record_OP_Action DB_Record_OP::REMOVE;
constexpr DB_Record_OP_Action DB_Record_OP::Action_MIN;
constexpr DB_Record_OP_Action DB_Record_OP::Action_MAX;
constexpr int DB_Record_OP::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Field_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[2];
}
bool E_Field_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_DB_Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[3];
}
bool E_DB_Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DB_OP_Condition::InitAsDefaultInstance() {
}
class DB_OP_Condition::_Internal {
 public:
};

DB_OP_Condition::DB_OP_Condition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_OP_Condition)
}
DB_OP_Condition::DB_OP_Condition(const DB_OP_Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_logic_op_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(next_logic_op_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_OP_Condition)
}

void DB_OP_Condition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_OP_Condition_db_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_logic_op_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(next_logic_op_));
}

DB_OP_Condition::~DB_OP_Condition() {
  // @@protoc_insertion_point(destructor:pb.db.DB_OP_Condition)
  SharedDtor();
}

void DB_OP_Condition::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DB_OP_Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_OP_Condition& DB_OP_Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_OP_Condition_db_2eproto.base);
  return *internal_default_instance();
}


void DB_OP_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_OP_Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_logic_op_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(next_logic_op_));
  _internal_metadata_.Clear();
}

const char* DB_OP_Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.db.DB_OP_Condition.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i64val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          i64val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 next_logic_op = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          next_logic_op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_OP_Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_OP_Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  // uint32 op = 2;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_op(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_OP_Condition.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // int64 i64val = 4;
  if (this->i64val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_i64val(), target);
  }

  // uint32 next_logic_op = 5;
  if (this->next_logic_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_next_logic_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_OP_Condition)
  return target;
}

size_t DB_OP_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_OP_Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint32 op = 2;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op());
  }

  // int64 i64val = 4;
  if (this->i64val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_i64val());
  }

  // uint32 next_logic_op = 5;
  if (this->next_logic_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_logic_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_OP_Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_OP_Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_OP_Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_OP_Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_OP_Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_OP_Condition)
    MergeFrom(*source);
  }
}

void DB_OP_Condition::MergeFrom(const DB_OP_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_OP_Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.i64val() != 0) {
    _internal_set_i64val(from._internal_i64val());
  }
  if (from.next_logic_op() != 0) {
    _internal_set_next_logic_op(from._internal_next_logic_op());
  }
}

void DB_OP_Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_OP_Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_OP_Condition::CopyFrom(const DB_OP_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_OP_Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_OP_Condition::IsInitialized() const {
  return true;
}

void DB_OP_Condition::InternalSwap(DB_OP_Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idx_, other->idx_);
  swap(op_, other->op_);
  swap(i64val_, other->i64val_);
  swap(next_logic_op_, other->next_logic_op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_OP_Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_OP_User::InitAsDefaultInstance() {
  ::pb::db::_DB_OP_User_default_instance_._instance.get_mutable()->user_id_ = const_cast< ::pb::db::DB_OP_Condition*>(
      ::pb::db::DB_OP_Condition::internal_default_instance());
  ::pb::db::_DB_OP_User_default_instance_._instance.get_mutable()->game_id_ = const_cast< ::pb::db::DB_OP_Condition*>(
      ::pb::db::DB_OP_Condition::internal_default_instance());
}
class DB_OP_User::_Internal {
 public:
  static const ::pb::db::DB_OP_Condition& user_id(const DB_OP_User* msg);
  static const ::pb::db::DB_OP_Condition& game_id(const DB_OP_User* msg);
};

const ::pb::db::DB_OP_Condition&
DB_OP_User::_Internal::user_id(const DB_OP_User* msg) {
  return *msg->user_id_;
}
const ::pb::db::DB_OP_Condition&
DB_OP_User::_Internal::game_id(const DB_OP_User* msg) {
  return *msg->game_id_;
}
DB_OP_User::DB_OP_User()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_OP_User)
}
DB_OP_User::DB_OP_User(const DB_OP_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fail_function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fail_function_name().empty()) {
    fail_function_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fail_function_name_);
  }
  if (from._internal_has_user_id()) {
    user_id_ = new ::pb::db::DB_OP_Condition(*from.user_id_);
  } else {
    user_id_ = nullptr;
  }
  if (from._internal_has_game_id()) {
    game_id_ = new ::pb::db::DB_OP_Condition(*from.game_id_);
  } else {
    game_id_ = nullptr;
  }
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&tbl_type_) -
    reinterpret_cast<char*>(&action_)) + sizeof(tbl_type_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_OP_User)
}

void DB_OP_User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_OP_User_db_2eproto.base);
  fail_function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbl_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(tbl_type_));
}

DB_OP_User::~DB_OP_User() {
  // @@protoc_insertion_point(destructor:pb.db.DB_OP_User)
  SharedDtor();
}

void DB_OP_User::SharedDtor() {
  fail_function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_id_;
  if (this != internal_default_instance()) delete game_id_;
}

void DB_OP_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_OP_User& DB_OP_User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_OP_User_db_2eproto.base);
  return *internal_default_instance();
}


void DB_OP_User::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_OP_User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fail_function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_id_ != nullptr) {
    delete user_id_;
  }
  user_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && game_id_ != nullptr) {
    delete game_id_;
  }
  game_id_ = nullptr;
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbl_type_) -
      reinterpret_cast<char*>(&action_)) + sizeof(tbl_type_));
  _internal_metadata_.Clear();
}

const char* DB_OP_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.DB_OP_User.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::pb::db::DB_OP_User_Action>(val));
        } else goto handle_unusual;
        continue;
      // .pb.db.DB_OP_Condition user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.db.DB_OP_Condition game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tbl_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tbl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fail_function_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_fail_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.db.DB_OP_User.fail_function_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_OP_User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_OP_User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.DB_OP_User.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // .pb.db.DB_OP_Condition user_id = 2;
  if (this->has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_id(this), target, stream);
  }

  // .pb.db.DB_OP_Condition game_id = 3;
  if (this->has_game_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::game_id(this), target, stream);
  }

  // uint32 tbl_type = 4;
  if (this->tbl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tbl_type(), target);
  }

  // string fail_function_name = 5;
  if (this->fail_function_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_function_name().data(), static_cast<int>(this->_internal_fail_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_OP_User.fail_function_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fail_function_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_OP_User)
  return target;
}

size_t DB_OP_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_OP_User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fail_function_name = 5;
  if (this->fail_function_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail_function_name());
  }

  // .pb.db.DB_OP_Condition user_id = 2;
  if (this->has_user_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_id_);
  }

  // .pb.db.DB_OP_Condition game_id = 3;
  if (this->has_game_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_id_);
  }

  // .pb.db.DB_OP_User.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 tbl_type = 4;
  if (this->tbl_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbl_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_OP_User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_OP_User)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_OP_User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_OP_User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_OP_User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_OP_User)
    MergeFrom(*source);
  }
}

void DB_OP_User::MergeFrom(const DB_OP_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_OP_User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fail_function_name().size() > 0) {

    fail_function_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fail_function_name_);
  }
  if (from.has_user_id()) {
    _internal_mutable_user_id()->::pb::db::DB_OP_Condition::MergeFrom(from._internal_user_id());
  }
  if (from.has_game_id()) {
    _internal_mutable_game_id()->::pb::db::DB_OP_Condition::MergeFrom(from._internal_game_id());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.tbl_type() != 0) {
    _internal_set_tbl_type(from._internal_tbl_type());
  }
}

void DB_OP_User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_OP_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_OP_User::CopyFrom(const DB_OP_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_OP_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_OP_User::IsInitialized() const {
  return true;
}

void DB_OP_User::InternalSwap(DB_OP_User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fail_function_name_.Swap(&other->fail_function_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(game_id_, other->game_id_);
  swap(action_, other->action_);
  swap(tbl_type_, other->tbl_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_OP_User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Base_Cmd::InitAsDefaultInstance() {
}
class Base_Cmd::_Internal {
 public:
};

Base_Cmd::Base_Cmd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.Base_Cmd)
}
Base_Cmd::Base_Cmd(const Base_Cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.Base_Cmd)
}

void Base_Cmd::SharedCtor() {
  cmd_ = 0;
}

Base_Cmd::~Base_Cmd() {
  // @@protoc_insertion_point(destructor:pb.db.Base_Cmd)
  SharedDtor();
}

void Base_Cmd::SharedDtor() {
}

void Base_Cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Base_Cmd& Base_Cmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Base_Cmd_db_2eproto.base);
  return *internal_default_instance();
}


void Base_Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.Base_Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 0;
  _internal_metadata_.Clear();
}

const char* Base_Cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Base_Cmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.Base_Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.Base_Cmd)
  return target;
}

size_t Base_Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.Base_Cmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Base_Cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.Base_Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const Base_Cmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Base_Cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.Base_Cmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.Base_Cmd)
    MergeFrom(*source);
  }
}

void Base_Cmd::MergeFrom(const Base_Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.Base_Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void Base_Cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.Base_Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base_Cmd::CopyFrom(const Base_Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.Base_Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base_Cmd::IsInitialized() const {
  return true;
}

void Base_Cmd::InternalSwap(Base_Cmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Base_Cmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Field::InitAsDefaultInstance() {
}
class DB_Field::_Internal {
 public:
};

DB_Field::DB_Field()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Field)
}
DB_Field::DB_Field(const DB_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strval().empty()) {
    strval_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strval_);
  }
  ::memcpy(&i64val_, &from.i64val_,
    static_cast<size_t>(reinterpret_cast<char*>(&dval_) -
    reinterpret_cast<char*>(&i64val_)) + sizeof(dval_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Field)
}

void DB_Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_Field_db_2eproto.base);
  strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&i64val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dval_) -
      reinterpret_cast<char*>(&i64val_)) + sizeof(dval_));
}

DB_Field::~DB_Field() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Field)
  SharedDtor();
}

void DB_Field::SharedDtor() {
  strval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DB_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Field& DB_Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Field_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strval_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&i64val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dval_) -
      reinterpret_cast<char*>(&i64val_)) + sizeof(dval_));
  _internal_metadata_.Clear();
}

const char* DB_Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i64val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          i64val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes strval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pb.db.E_Field_Type field_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_field_type(static_cast<::pb::db::E_Field_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Field::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  // int64 i64val = 2;
  if (this->i64val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_i64val(), target);
  }

  // bytes strval = 3;
  if (this->strval().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_strval(), target);
  }

  // double dval = 4;
  if (!(this->dval() <= 0 && this->dval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dval(), target);
  }

  // .pb.db.E_Field_Type field_type = 5;
  if (this->field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_field_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Field)
  return target;
}

size_t DB_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Field)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strval = 3;
  if (this->strval().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strval());
  }

  // int64 i64val = 2;
  if (this->i64val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_i64val());
  }

  // uint32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // .pb.db.E_Field_Type field_type = 5;
  if (this->field_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_field_type());
  }

  // double dval = 4;
  if (!(this->dval() <= 0 && this->dval() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Field::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Field)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Field* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Field)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Field)
    MergeFrom(*source);
  }
}

void DB_Field::MergeFrom(const DB_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strval().size() > 0) {

    strval_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strval_);
  }
  if (from.i64val() != 0) {
    _internal_set_i64val(from._internal_i64val());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.field_type() != 0) {
    _internal_set_field_type(from._internal_field_type());
  }
  if (!(from.dval() <= 0 && from.dval() >= 0)) {
    _internal_set_dval(from._internal_dval());
  }
}

void DB_Field::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Field::CopyFrom(const DB_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Field::IsInitialized() const {
  return true;
}

void DB_Field::InternalSwap(DB_Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  strval_.Swap(&other->strval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(i64val_, other->i64val_);
  swap(idx_, other->idx_);
  swap(field_type_, other->field_type_);
  swap(dval_, other->dval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Field::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Record::InitAsDefaultInstance() {
}
class DB_Record::_Internal {
 public:
};

DB_Record::DB_Record()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Record)
}
DB_Record::DB_Record(const DB_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_fields_(from.vec_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Record)
}

void DB_Record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_Record_db_2eproto.base);
}

DB_Record::~DB_Record() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Record)
  SharedDtor();
}

void DB_Record::SharedDtor() {
}

void DB_Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Record& DB_Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Record_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_fields_.Clear();
  _internal_metadata_.Clear();
}

const char* DB_Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.db.DB_Field vec_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.db.DB_Field vec_fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vec_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Record)
  return target;
}

size_t DB_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_Field vec_fields = 1;
  total_size += 1UL * this->_internal_vec_fields_size();
  for (const auto& msg : this->vec_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Record)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Record)
    MergeFrom(*source);
  }
}

void DB_Record::MergeFrom(const DB_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_fields_.MergeFrom(from.vec_fields_);
}

void DB_Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Record::CopyFrom(const DB_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Record::IsInitialized() const {
  return true;
}

void DB_Record::InternalSwap(DB_Record* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_fields_.InternalSwap(&other->vec_fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Recordset::InitAsDefaultInstance() {
}
class DB_Recordset::_Internal {
 public:
};

DB_Recordset::DB_Recordset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Recordset)
}
DB_Recordset::DB_Recordset(const DB_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_records_(from.vec_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_table_ = from.id_table_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Recordset)
}

void DB_Recordset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_Recordset_db_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_table_ = 0u;
}

DB_Recordset::~DB_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Recordset)
  SharedDtor();
}

void DB_Recordset::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DB_Recordset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Recordset& DB_Recordset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Recordset_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_records_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_table_ = 0u;
  _internal_metadata_.Clear();
}

const char* DB_Recordset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.db.DB_Recordset.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.db.DB_Record vec_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Recordset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_table = 1;
  if (this->id_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_table(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_Recordset.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .pb.db.DB_Record vec_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vec_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Recordset)
  return target;
}

size_t DB_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Recordset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_Record vec_records = 3;
  total_size += 1UL * this->_internal_vec_records_size();
  for (const auto& msg : this->vec_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id_table = 1;
  if (this->id_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_table());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Recordset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Recordset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Recordset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Recordset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Recordset)
    MergeFrom(*source);
  }
}

void DB_Recordset::MergeFrom(const DB_Recordset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_records_.MergeFrom(from.vec_records_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id_table() != 0) {
    _internal_set_id_table(from._internal_id_table());
  }
}

void DB_Recordset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Recordset::CopyFrom(const DB_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Recordset::IsInitialized() const {
  return true;
}

void DB_Recordset::InternalSwap(DB_Recordset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_records_.InternalSwap(&other->vec_records_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_table_, other->id_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Recordset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Record_OP::InitAsDefaultInstance() {
  ::pb::db::_DB_Record_OP_default_instance_._instance.get_mutable()->record_ = const_cast< ::pb::db::DB_Record*>(
      ::pb::db::DB_Record::internal_default_instance());
}
class DB_Record_OP::_Internal {
 public:
  static const ::pb::db::DB_Record& record(const DB_Record_OP* msg);
};

const ::pb::db::DB_Record&
DB_Record_OP::_Internal::record(const DB_Record_OP* msg) {
  return *msg->record_;
}
DB_Record_OP::DB_Record_OP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Record_OP)
}
DB_Record_OP::DB_Record_OP(const DB_Record_OP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_record()) {
    record_ = new ::pb::db::DB_Record(*from.record_);
  } else {
    record_ = nullptr;
  }
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&tbl_id_) -
    reinterpret_cast<char*>(&action_)) + sizeof(tbl_id_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Record_OP)
}

void DB_Record_OP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_Record_OP_db_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbl_id_) -
      reinterpret_cast<char*>(&record_)) + sizeof(tbl_id_));
}

DB_Record_OP::~DB_Record_OP() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Record_OP)
  SharedDtor();
}

void DB_Record_OP::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void DB_Record_OP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Record_OP& DB_Record_OP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Record_OP_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Record_OP::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Record_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbl_id_) -
      reinterpret_cast<char*>(&action_)) + sizeof(tbl_id_));
  _internal_metadata_.Clear();
}

const char* DB_Record_OP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.DB_Record_OP.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::pb::db::DB_Record_OP_Action>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.db.DB_Record_OP.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tbl_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tbl_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.db.DB_Record record = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Record_OP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Record_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.DB_Record_OP.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_Record_OP.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 tbl_id = 3;
  if (this->tbl_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tbl_id(), target);
  }

  // .pb.db.DB_Record record = 4;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Record_OP)
  return target;
}

size_t DB_Record_OP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Record_OP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.db.DB_Record record = 4;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  // .pb.db.DB_Record_OP.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 tbl_id = 3;
  if (this->tbl_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbl_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Record_OP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Record_OP)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Record_OP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Record_OP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Record_OP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Record_OP)
    MergeFrom(*source);
  }
}

void DB_Record_OP::MergeFrom(const DB_Record_OP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Record_OP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_record()) {
    _internal_mutable_record()->::pb::db::DB_Record::MergeFrom(from._internal_record());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.tbl_id() != 0) {
    _internal_set_tbl_id(from._internal_tbl_id());
  }
}

void DB_Record_OP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Record_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Record_OP::CopyFrom(const DB_Record_OP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Record_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Record_OP::IsInitialized() const {
  return true;
}

void DB_Record_OP::InternalSwap(DB_Record_OP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(record_, other->record_);
  swap(action_, other->action_);
  swap(tbl_id_, other->tbl_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Record_OP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User_DB_Record_OPS::InitAsDefaultInstance() {
}
class User_DB_Record_OPS::_Internal {
 public:
};

User_DB_Record_OPS::User_DB_Record_OPS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.User_DB_Record_OPS)
}
User_DB_Record_OPS::User_DB_Record_OPS(const User_DB_Record_OPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      record_ops_(from.record_ops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.db.User_DB_Record_OPS)
}

void User_DB_Record_OPS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_DB_Record_OPS_db_2eproto.base);
}

User_DB_Record_OPS::~User_DB_Record_OPS() {
  // @@protoc_insertion_point(destructor:pb.db.User_DB_Record_OPS)
  SharedDtor();
}

void User_DB_Record_OPS::SharedDtor() {
}

void User_DB_Record_OPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User_DB_Record_OPS& User_DB_Record_OPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_DB_Record_OPS_db_2eproto.base);
  return *internal_default_instance();
}


void User_DB_Record_OPS::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.User_DB_Record_OPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_ops_.Clear();
  _internal_metadata_.Clear();
}

const char* User_DB_Record_OPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.db.DB_Record_OP record_ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User_DB_Record_OPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.User_DB_Record_OPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.db.DB_Record_OP record_ops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_record_ops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.User_DB_Record_OPS)
  return target;
}

size_t User_DB_Record_OPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.User_DB_Record_OPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_Record_OP record_ops = 1;
  total_size += 1UL * this->_internal_record_ops_size();
  for (const auto& msg : this->record_ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User_DB_Record_OPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.User_DB_Record_OPS)
  GOOGLE_DCHECK_NE(&from, this);
  const User_DB_Record_OPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User_DB_Record_OPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.User_DB_Record_OPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.User_DB_Record_OPS)
    MergeFrom(*source);
  }
}

void User_DB_Record_OPS::MergeFrom(const User_DB_Record_OPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.User_DB_Record_OPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_ops_.MergeFrom(from.record_ops_);
}

void User_DB_Record_OPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.User_DB_Record_OPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_DB_Record_OPS::CopyFrom(const User_DB_Record_OPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.User_DB_Record_OPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_DB_Record_OPS::IsInitialized() const {
  return true;
}

void User_DB_Record_OPS::InternalSwap(User_DB_Record_OPS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  record_ops_.InternalSwap(&other->record_ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_DB_Record_OPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User_DB_Recordset::InitAsDefaultInstance() {
  ::pb::db::_User_DB_Recordset_default_instance_._instance.get_mutable()->data_set_ = const_cast< ::pb::db::DB_Recordset*>(
      ::pb::db::DB_Recordset::internal_default_instance());
}
class User_DB_Recordset::_Internal {
 public:
  static const ::pb::db::DB_Recordset& data_set(const User_DB_Recordset* msg);
};

const ::pb::db::DB_Recordset&
User_DB_Recordset::_Internal::data_set(const User_DB_Recordset* msg) {
  return *msg->data_set_;
}
User_DB_Recordset::User_DB_Recordset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.User_DB_Recordset)
}
User_DB_Recordset::User_DB_Recordset(const User_DB_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data_set()) {
    data_set_ = new ::pb::db::DB_Recordset(*from.data_set_);
  } else {
    data_set_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:pb.db.User_DB_Recordset)
}

void User_DB_Recordset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_DB_Recordset_db_2eproto.base);
  ::memset(&data_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&data_set_)) + sizeof(game_id_));
}

User_DB_Recordset::~User_DB_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.User_DB_Recordset)
  SharedDtor();
}

void User_DB_Recordset::SharedDtor() {
  if (this != internal_default_instance()) delete data_set_;
}

void User_DB_Recordset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User_DB_Recordset& User_DB_Recordset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_DB_Recordset_db_2eproto.base);
  return *internal_default_instance();
}


void User_DB_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.User_DB_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_set_ != nullptr) {
    delete data_set_;
  }
  data_set_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

const char* User_DB_Recordset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.db.DB_Recordset data_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User_DB_Recordset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.User_DB_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_id(), target);
  }

  // .pb.db.DB_Recordset data_set = 3;
  if (this->has_data_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.User_DB_Recordset)
  return target;
}

size_t User_DB_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.User_DB_Recordset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.DB_Recordset data_set = 3;
  if (this->has_data_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_set_);
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // uint32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User_DB_Recordset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.User_DB_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  const User_DB_Recordset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User_DB_Recordset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.User_DB_Recordset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.User_DB_Recordset)
    MergeFrom(*source);
  }
}

void User_DB_Recordset::MergeFrom(const User_DB_Recordset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.User_DB_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_set()) {
    _internal_mutable_data_set()->::pb::db::DB_Recordset::MergeFrom(from._internal_data_set());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void User_DB_Recordset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.User_DB_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_DB_Recordset::CopyFrom(const User_DB_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.User_DB_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_DB_Recordset::IsInitialized() const {
  return true;
}

void User_DB_Recordset::InternalSwap(User_DB_Recordset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_set_, other->data_set_);
  swap(user_id_, other->user_id_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_DB_Recordset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User_DB_Recordset_Ext::InitAsDefaultInstance() {
  ::pb::db::_User_DB_Recordset_Ext_default_instance_._instance.get_mutable()->data_set_ = const_cast< ::pb::db::DB_Recordset*>(
      ::pb::db::DB_Recordset::internal_default_instance());
}
class User_DB_Recordset_Ext::_Internal {
 public:
  static const ::pb::db::DB_Recordset& data_set(const User_DB_Recordset_Ext* msg);
};

const ::pb::db::DB_Recordset&
User_DB_Recordset_Ext::_Internal::data_set(const User_DB_Recordset_Ext* msg) {
  return *msg->data_set_;
}
User_DB_Recordset_Ext::User_DB_Recordset_Ext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.User_DB_Recordset_Ext)
}
User_DB_Recordset_Ext::User_DB_Recordset_Ext(const User_DB_Recordset_Ext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data_set()) {
    data_set_ = new ::pb::db::DB_Recordset(*from.data_set_);
  } else {
    data_set_ = nullptr;
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.User_DB_Recordset_Ext)
}

void User_DB_Recordset_Ext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_DB_Recordset_Ext_db_2eproto.base);
  ::memset(&data_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&data_set_)) + sizeof(cmd_));
}

User_DB_Recordset_Ext::~User_DB_Recordset_Ext() {
  // @@protoc_insertion_point(destructor:pb.db.User_DB_Recordset_Ext)
  SharedDtor();
}

void User_DB_Recordset_Ext::SharedDtor() {
  if (this != internal_default_instance()) delete data_set_;
}

void User_DB_Recordset_Ext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User_DB_Recordset_Ext& User_DB_Recordset_Ext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_DB_Recordset_Ext_db_2eproto.base);
  return *internal_default_instance();
}


void User_DB_Recordset_Ext::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.User_DB_Recordset_Ext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_set_ != nullptr) {
    delete data_set_;
  }
  data_set_ = nullptr;
  cmd_ = 0;
  _internal_metadata_.Clear();
}

const char* User_DB_Recordset_Ext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else goto handle_unusual;
        continue;
      // .pb.db.DB_Recordset data_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User_DB_Recordset_Ext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.User_DB_Recordset_Ext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // .pb.db.DB_Recordset data_set = 2;
  if (this->has_data_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.User_DB_Recordset_Ext)
  return target;
}

size_t User_DB_Recordset_Ext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.User_DB_Recordset_Ext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.DB_Recordset data_set = 2;
  if (this->has_data_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_set_);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User_DB_Recordset_Ext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.User_DB_Recordset_Ext)
  GOOGLE_DCHECK_NE(&from, this);
  const User_DB_Recordset_Ext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User_DB_Recordset_Ext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.User_DB_Recordset_Ext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.User_DB_Recordset_Ext)
    MergeFrom(*source);
  }
}

void User_DB_Recordset_Ext::MergeFrom(const User_DB_Recordset_Ext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.User_DB_Recordset_Ext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_set()) {
    _internal_mutable_data_set()->::pb::db::DB_Recordset::MergeFrom(from._internal_data_set());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void User_DB_Recordset_Ext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.User_DB_Recordset_Ext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_DB_Recordset_Ext::CopyFrom(const User_DB_Recordset_Ext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.User_DB_Recordset_Ext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_DB_Recordset_Ext::IsInitialized() const {
  return true;
}

void User_DB_Recordset_Ext::InternalSwap(User_DB_Recordset_Ext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_set_, other->data_set_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_DB_Recordset_Ext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_FieldMeta::InitAsDefaultInstance() {
}
class DB_FieldMeta::_Internal {
 public:
};

DB_FieldMeta::DB_FieldMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_FieldMeta)
}
DB_FieldMeta::DB_FieldMeta(const DB_FieldMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&type_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_FieldMeta)
}

void DB_FieldMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_FieldMeta_db_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&type_)) + sizeof(len_));
}

DB_FieldMeta::~DB_FieldMeta() {
  // @@protoc_insertion_point(destructor:pb.db.DB_FieldMeta)
  SharedDtor();
}

void DB_FieldMeta::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DB_FieldMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_FieldMeta& DB_FieldMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_FieldMeta_db_2eproto.base);
  return *internal_default_instance();
}


void DB_FieldMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_FieldMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&type_)) + sizeof(len_));
  _internal_metadata_.Clear();
}

const char* DB_FieldMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.db.DB_FieldMeta.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 attr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_FieldMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_FieldMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_FieldMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 attr = 3;
  if (this->attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_attr(), target);
  }

  // uint32 len = 4;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_FieldMeta)
  return target;
}

size_t DB_FieldMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_FieldMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 attr = 3;
  if (this->attr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attr());
  }

  // uint32 len = 4;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_FieldMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_FieldMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_FieldMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_FieldMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_FieldMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_FieldMeta)
    MergeFrom(*source);
  }
}

void DB_FieldMeta::MergeFrom(const DB_FieldMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_FieldMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.attr() != 0) {
    _internal_set_attr(from._internal_attr());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
}

void DB_FieldMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_FieldMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FieldMeta::CopyFrom(const DB_FieldMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_FieldMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FieldMeta::IsInitialized() const {
  return true;
}

void DB_FieldMeta::InternalSwap(DB_FieldMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(attr_, other->attr_);
  swap(len_, other->len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_FieldMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_TableMeta::InitAsDefaultInstance() {
}
class DB_TableMeta::_Internal {
 public:
};

DB_TableMeta::DB_TableMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_TableMeta)
}
DB_TableMeta::DB_TableMeta(const DB_TableMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_fields_(from.vec_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tbl_id_ = from.tbl_id_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_TableMeta)
}

void DB_TableMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_TableMeta_db_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tbl_id_ = 0u;
}

DB_TableMeta::~DB_TableMeta() {
  // @@protoc_insertion_point(destructor:pb.db.DB_TableMeta)
  SharedDtor();
}

void DB_TableMeta::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DB_TableMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_TableMeta& DB_TableMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_TableMeta_db_2eproto.base);
  return *internal_default_instance();
}


void DB_TableMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_TableMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_fields_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tbl_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* DB_TableMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.db.DB_TableMeta.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tbl_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tbl_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.db.DB_FieldMeta vec_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_TableMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_TableMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_TableMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 tbl_id = 2;
  if (this->tbl_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tbl_id(), target);
  }

  // repeated .pb.db.DB_FieldMeta vec_fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vec_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_TableMeta)
  return target;
}

size_t DB_TableMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_TableMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_FieldMeta vec_fields = 3;
  total_size += 1UL * this->_internal_vec_fields_size();
  for (const auto& msg : this->vec_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 tbl_id = 2;
  if (this->tbl_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbl_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_TableMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_TableMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_TableMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_TableMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_TableMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_TableMeta)
    MergeFrom(*source);
  }
}

void DB_TableMeta::MergeFrom(const DB_TableMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_TableMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_fields_.MergeFrom(from.vec_fields_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.tbl_id() != 0) {
    _internal_set_tbl_id(from._internal_tbl_id());
  }
}

void DB_TableMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_TableMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_TableMeta::CopyFrom(const DB_TableMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_TableMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_TableMeta::IsInitialized() const {
  return true;
}

void DB_TableMeta::InternalSwap(DB_TableMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_fields_.InternalSwap(&other->vec_fields_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbl_id_, other->tbl_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_TableMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Metas::InitAsDefaultInstance() {
}
class DB_Metas::_Internal {
 public:
};

DB_Metas::DB_Metas()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Metas)
}
DB_Metas::DB_Metas(const DB_Metas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_tables_(from.vec_tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Metas)
}

void DB_Metas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_Metas_db_2eproto.base);
}

DB_Metas::~DB_Metas() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Metas)
  SharedDtor();
}

void DB_Metas::SharedDtor() {
}

void DB_Metas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Metas& DB_Metas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Metas_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Metas::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Metas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_tables_.Clear();
  _internal_metadata_.Clear();
}

const char* DB_Metas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.db.DB_TableMeta vec_tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Metas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Metas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.db.DB_TableMeta vec_tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vec_tables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Metas)
  return target;
}

size_t DB_Metas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Metas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.DB_TableMeta vec_tables = 1;
  total_size += 1UL * this->_internal_vec_tables_size();
  for (const auto& msg : this->vec_tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Metas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Metas)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Metas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Metas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Metas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Metas)
    MergeFrom(*source);
  }
}

void DB_Metas::MergeFrom(const DB_Metas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Metas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_tables_.MergeFrom(from.vec_tables_);
}

void DB_Metas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Metas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Metas::CopyFrom(const DB_Metas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Metas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Metas::IsInitialized() const {
  return true;
}

void DB_Metas::InternalSwap(DB_Metas* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_tables_.InternalSwap(&other->vec_tables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Metas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Update::InitAsDefaultInstance() {
  ::pb::db::_DB_Update_default_instance_._instance.get_mutable()->data_set_ = const_cast< ::pb::db::DB_Recordset*>(
      ::pb::db::DB_Recordset::internal_default_instance());
}
class DB_Update::_Internal {
 public:
  static const ::pb::db::DB_Recordset& data_set(const DB_Update* msg);
};

const ::pb::db::DB_Recordset&
DB_Update::_Internal::data_set(const DB_Update* msg) {
  return *msg->data_set_;
}
DB_Update::DB_Update()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Update)
}
DB_Update::DB_Update(const DB_Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data_set()) {
    data_set_ = new ::pb::db::DB_Recordset(*from.data_set_);
  } else {
    data_set_ = nullptr;
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Update)
}

void DB_Update::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_Update_db_2eproto.base);
  ::memset(&data_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&data_set_)) + sizeof(cmd_));
}

DB_Update::~DB_Update() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Update)
  SharedDtor();
}

void DB_Update::SharedDtor() {
  if (this != internal_default_instance()) delete data_set_;
}

void DB_Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Update& DB_Update::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Update_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_set_ != nullptr) {
    delete data_set_;
  }
  data_set_ = nullptr;
  cmd_ = 0;
  _internal_metadata_.Clear();
}

const char* DB_Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else goto handle_unusual;
        continue;
      // .pb.db.DB_Recordset data_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Update::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // .pb.db.DB_Recordset data_set = 2;
  if (this->has_data_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Update)
  return target;
}

size_t DB_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Update)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.db.DB_Recordset data_set = 2;
  if (this->has_data_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_set_);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Update::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Update)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Update* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Update)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Update)
    MergeFrom(*source);
  }
}

void DB_Update::MergeFrom(const DB_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_set()) {
    _internal_mutable_data_set()->::pb::db::DB_Recordset::MergeFrom(from._internal_data_set());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void DB_Update::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Update::CopyFrom(const DB_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Update::IsInitialized() const {
  return true;
}

void DB_Update::InternalSwap(DB_Update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_set_, other->data_set_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Update::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Delete::InitAsDefaultInstance() {
}
class DB_Delete::_Internal {
 public:
};

DB_Delete::DB_Delete()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Delete)
}
DB_Delete::DB_Delete(const DB_Delete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_ids_(from.vec_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&tbl_id_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(tbl_id_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Delete)
}

void DB_Delete::SharedCtor() {
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbl_id_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(tbl_id_));
}

DB_Delete::~DB_Delete() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Delete)
  SharedDtor();
}

void DB_Delete::SharedDtor() {
}

void DB_Delete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Delete& DB_Delete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Delete_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Delete::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Delete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_ids_.Clear();
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tbl_id_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(tbl_id_));
  _internal_metadata_.Clear();
}

const char* DB_Delete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else goto handle_unusual;
        continue;
      // uint32 tbl_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tbl_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 vec_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vec_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_vec_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Delete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Delete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // uint32 tbl_id = 2;
  if (this->tbl_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tbl_id(), target);
  }

  // repeated uint64 vec_ids = 3;
  {
    int byte_size = _vec_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_vec_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Delete)
  return target;
}

size_t DB_Delete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Delete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vec_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->vec_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  // uint32 tbl_id = 2;
  if (this->tbl_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbl_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Delete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Delete)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Delete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Delete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Delete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Delete)
    MergeFrom(*source);
  }
}

void DB_Delete::MergeFrom(const DB_Delete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Delete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_ids_.MergeFrom(from.vec_ids_);
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.tbl_id() != 0) {
    _internal_set_tbl_id(from._internal_tbl_id());
  }
}

void DB_Delete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Delete::CopyFrom(const DB_Delete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Delete::IsInitialized() const {
  return true;
}

void DB_Delete::InternalSwap(DB_Delete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_ids_.InternalSwap(&other->vec_ids_);
  swap(cmd_, other->cmd_);
  swap(tbl_id_, other->tbl_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Delete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Key_Value::InitAsDefaultInstance() {
}
class Key_Value::_Internal {
 public:
};

Key_Value::Key_Value()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.Key_Value)
}
Key_Value::Key_Value(const Key_Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&value_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:pb.db.Key_Value)
}

void Key_Value::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
}

Key_Value::~Key_Value() {
  // @@protoc_insertion_point(destructor:pb.db.Key_Value)
  SharedDtor();
}

void Key_Value::SharedDtor() {
}

void Key_Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Key_Value& Key_Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Key_Value_db_2eproto.base);
  return *internal_default_instance();
}


void Key_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.Key_Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
  _internal_metadata_.Clear();
}

const char* Key_Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Key_Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.Key_Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.Key_Value)
  return target;
}

size_t Key_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.Key_Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Key_Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.Key_Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Key_Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Key_Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.Key_Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.Key_Value)
    MergeFrom(*source);
  }
}

void Key_Value::MergeFrom(const Key_Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.Key_Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void Key_Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.Key_Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key_Value::CopyFrom(const Key_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.Key_Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key_Value::IsInitialized() const {
  return true;
}

void Key_Value::InternalSwap(Key_Value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Key_Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EffectProp::InitAsDefaultInstance() {
}
class EffectProp::_Internal {
 public:
};

EffectProp::EffectProp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.EffectProp)
}
EffectProp::EffectProp(const EffectProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_effect_(from.vec_effect_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  range_ = from.range_;
  // @@protoc_insertion_point(copy_constructor:pb.db.EffectProp)
}

void EffectProp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EffectProp_db_2eproto.base);
  range_ = 0u;
}

EffectProp::~EffectProp() {
  // @@protoc_insertion_point(destructor:pb.db.EffectProp)
  SharedDtor();
}

void EffectProp::SharedDtor() {
}

void EffectProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectProp& EffectProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectProp_db_2eproto.base);
  return *internal_default_instance();
}


void EffectProp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.EffectProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_effect_.Clear();
  range_ = 0u;
  _internal_metadata_.Clear();
}

const char* EffectProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.db.Key_Value vec_effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_effect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.EffectProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 range = 1;
  if (this->range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_range(), target);
  }

  // repeated .pb.db.Key_Value vec_effect = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_effect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vec_effect(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.EffectProp)
  return target;
}

size_t EffectProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.EffectProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.Key_Value vec_effect = 2;
  total_size += 1UL * this->_internal_vec_effect_size();
  for (const auto& msg : this->vec_effect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 range = 1;
  if (this->range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.EffectProp)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.EffectProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.EffectProp)
    MergeFrom(*source);
  }
}

void EffectProp::MergeFrom(const EffectProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.EffectProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_effect_.MergeFrom(from.vec_effect_);
  if (from.range() != 0) {
    _internal_set_range(from._internal_range());
  }
}

void EffectProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.EffectProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectProp::CopyFrom(const EffectProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.EffectProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectProp::IsInitialized() const {
  return true;
}

void EffectProp::InternalSwap(EffectProp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_effect_.InternalSwap(&other->vec_effect_);
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_EffectProp::InitAsDefaultInstance() {
}
class DB_EffectProp::_Internal {
 public:
};

DB_EffectProp::DB_EffectProp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_EffectProp)
}
DB_EffectProp::DB_EffectProp(const DB_EffectProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_prop_(from.vec_prop_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_EffectProp)
}

void DB_EffectProp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_EffectProp_db_2eproto.base);
  cmd_ = 0;
}

DB_EffectProp::~DB_EffectProp() {
  // @@protoc_insertion_point(destructor:pb.db.DB_EffectProp)
  SharedDtor();
}

void DB_EffectProp::SharedDtor() {
}

void DB_EffectProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_EffectProp& DB_EffectProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_EffectProp_db_2eproto.base);
  return *internal_default_instance();
}


void DB_EffectProp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_EffectProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_prop_.Clear();
  cmd_ = 0;
  _internal_metadata_.Clear();
}

const char* DB_EffectProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pb.db.EffectProp vec_prop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_prop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_EffectProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_EffectProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // repeated .pb.db.EffectProp vec_prop = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_prop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vec_prop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_EffectProp)
  return target;
}

size_t DB_EffectProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_EffectProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.db.EffectProp vec_prop = 2;
  total_size += 1UL * this->_internal_vec_prop_size();
  for (const auto& msg : this->vec_prop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_EffectProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_EffectProp)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_EffectProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_EffectProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_EffectProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_EffectProp)
    MergeFrom(*source);
  }
}

void DB_EffectProp::MergeFrom(const DB_EffectProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_EffectProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_prop_.MergeFrom(from.vec_prop_);
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void DB_EffectProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_EffectProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EffectProp::CopyFrom(const DB_EffectProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_EffectProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EffectProp::IsInitialized() const {
  return true;
}

void DB_EffectProp::InternalSwap(DB_EffectProp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_prop_.InternalSwap(&other->vec_prop_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_EffectProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_Add_Recordset::InitAsDefaultInstance() {
  ::pb::db::_DB_Add_Recordset_default_instance_._instance.get_mutable()->record_ = const_cast< ::pb::db::DB_Record*>(
      ::pb::db::DB_Record::internal_default_instance());
}
class DB_Add_Recordset::_Internal {
 public:
  static const ::pb::db::DB_Record& record(const DB_Add_Recordset* msg);
};

const ::pb::db::DB_Record&
DB_Add_Recordset::_Internal::record(const DB_Add_Recordset* msg) {
  return *msg->record_;
}
DB_Add_Recordset::DB_Add_Recordset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_Add_Recordset)
}
DB_Add_Recordset::DB_Add_Recordset(const DB_Add_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_record()) {
    record_ = new ::pb::db::DB_Record(*from.record_);
  } else {
    record_ = nullptr;
  }
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_table_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(id_table_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_Add_Recordset)
}

void DB_Add_Recordset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_Add_Recordset_db_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_table_) -
      reinterpret_cast<char*>(&record_)) + sizeof(id_table_));
}

DB_Add_Recordset::~DB_Add_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.DB_Add_Recordset)
  SharedDtor();
}

void DB_Add_Recordset::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void DB_Add_Recordset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_Add_Recordset& DB_Add_Recordset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_Add_Recordset_db_2eproto.base);
  return *internal_default_instance();
}


void DB_Add_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_Add_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_table_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(id_table_));
  _internal_metadata_.Clear();
}

const char* DB_Add_Recordset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.db.DB_Add_Recordset.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.db.DB_Record record = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_Add_Recordset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_Add_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  // uint32 target_game_id = 2;
  if (this->target_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_game_id(), target);
  }

  // uint32 id_table = 3;
  if (this->id_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id_table(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.db.DB_Add_Recordset.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .pb.db.DB_Record record = 5;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_Add_Recordset)
  return target;
}

size_t DB_Add_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_Add_Recordset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.db.DB_Record record = 5;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_id());
  }

  // uint32 target_game_id = 2;
  if (this->target_game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target_game_id());
  }

  // uint32 id_table = 3;
  if (this->id_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_table());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_Add_Recordset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_Add_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_Add_Recordset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_Add_Recordset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_Add_Recordset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_Add_Recordset)
    MergeFrom(*source);
  }
}

void DB_Add_Recordset::MergeFrom(const DB_Add_Recordset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_Add_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_record()) {
    _internal_mutable_record()->::pb::db::DB_Record::MergeFrom(from._internal_record());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.target_game_id() != 0) {
    _internal_set_target_game_id(from._internal_target_game_id());
  }
  if (from.id_table() != 0) {
    _internal_set_id_table(from._internal_id_table());
  }
}

void DB_Add_Recordset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_Add_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Add_Recordset::CopyFrom(const DB_Add_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_Add_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Add_Recordset::IsInitialized() const {
  return true;
}

void DB_Add_Recordset::InternalSwap(DB_Add_Recordset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(record_, other->record_);
  swap(target_id_, other->target_id_);
  swap(target_game_id_, other->target_game_id_);
  swap(id_table_, other->id_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_Add_Recordset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_DataFlag::InitAsDefaultInstance() {
}
class DB_DataFlag::_Internal {
 public:
};

DB_DataFlag::DB_DataFlag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.DB_DataFlag)
}
DB_DataFlag::DB_DataFlag(const DB_DataFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:pb.db.DB_DataFlag)
}

void DB_DataFlag::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(cmd_));
}

DB_DataFlag::~DB_DataFlag() {
  // @@protoc_insertion_point(destructor:pb.db.DB_DataFlag)
  SharedDtor();
}

void DB_DataFlag::SharedDtor() {
}

void DB_DataFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_DataFlag& DB_DataFlag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_DataFlag_db_2eproto.base);
  return *internal_default_instance();
}


void DB_DataFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.DB_DataFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(cmd_));
  _internal_metadata_.Clear();
}

const char* DB_DataFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_DataFlag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.DB_DataFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.DB_DataFlag)
  return target;
}

size_t DB_DataFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.DB_DataFlag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_DataFlag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.DB_DataFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_DataFlag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_DataFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.DB_DataFlag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.DB_DataFlag)
    MergeFrom(*source);
  }
}

void DB_DataFlag::MergeFrom(const DB_DataFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.DB_DataFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void DB_DataFlag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.DB_DataFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_DataFlag::CopyFrom(const DB_DataFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.DB_DataFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_DataFlag::IsInitialized() const {
  return true;
}

void DB_DataFlag::InternalSwap(DB_DataFlag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_DataFlag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Query_Recordset::InitAsDefaultInstance() {
}
class Query_Recordset::_Internal {
 public:
};

Query_Recordset::Query_Recordset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.db.Query_Recordset)
}
Query_Recordset::Query_Recordset(const Query_Recordset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      field_list_(from.field_list_),
      key_list_(from.key_list_),
      vec_records_(from.vec_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_table_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(id_table_));
  // @@protoc_insertion_point(copy_constructor:pb.db.Query_Recordset)
}

void Query_Recordset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Query_Recordset_db_2eproto.base);
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_table_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(id_table_));
}

Query_Recordset::~Query_Recordset() {
  // @@protoc_insertion_point(destructor:pb.db.Query_Recordset)
  SharedDtor();
}

void Query_Recordset::SharedDtor() {
}

void Query_Recordset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Query_Recordset& Query_Recordset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Query_Recordset_db_2eproto.base);
  return *internal_default_instance();
}


void Query_Recordset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.db.Query_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_list_.Clear();
  key_list_.Clear();
  vec_records_.Clear();
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_table_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(id_table_));
  _internal_metadata_.Clear();
}

const char* Query_Recordset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.db.E_DB_Cmd cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::db::E_DB_Cmd>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 field_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_field_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_field_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 key_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_key_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_key_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.db.DB_Record vec_records = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Query_Recordset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.db.Query_Recordset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // uint32 id_table = 2;
  if (this->id_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id_table(), target);
  }

  // repeated uint32 field_list = 3;
  {
    int byte_size = _field_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_field_list(), byte_size, target);
    }
  }

  // repeated uint32 key_list = 4;
  {
    int byte_size = _key_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_key_list(), byte_size, target);
    }
  }

  // repeated .pb.db.DB_Record vec_records = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vec_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.db.Query_Recordset)
  return target;
}

size_t Query_Recordset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.db.Query_Recordset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 field_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->field_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _field_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 key_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->key_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _key_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pb.db.DB_Record vec_records = 5;
  total_size += 1UL * this->_internal_vec_records_size();
  for (const auto& msg : this->vec_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.db.E_DB_Cmd cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  // uint32 id_table = 2;
  if (this->id_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_table());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query_Recordset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.db.Query_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  const Query_Recordset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Query_Recordset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.db.Query_Recordset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.db.Query_Recordset)
    MergeFrom(*source);
  }
}

void Query_Recordset::MergeFrom(const Query_Recordset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.db.Query_Recordset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_list_.MergeFrom(from.field_list_);
  key_list_.MergeFrom(from.key_list_);
  vec_records_.MergeFrom(from.vec_records_);
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.id_table() != 0) {
    _internal_set_id_table(from._internal_id_table());
  }
}

void Query_Recordset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.db.Query_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query_Recordset::CopyFrom(const Query_Recordset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.db.Query_Recordset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Recordset::IsInitialized() const {
  return true;
}

void Query_Recordset::InternalSwap(Query_Recordset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_list_.InternalSwap(&other->field_list_);
  key_list_.InternalSwap(&other->key_list_);
  vec_records_.InternalSwap(&other->vec_records_);
  swap(cmd_, other->cmd_);
  swap(id_table_, other->id_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_Recordset::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::db::DB_OP_Condition* Arena::CreateMaybeMessage< ::pb::db::DB_OP_Condition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_OP_Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_OP_User* Arena::CreateMaybeMessage< ::pb::db::DB_OP_User >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_OP_User >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::Base_Cmd* Arena::CreateMaybeMessage< ::pb::db::Base_Cmd >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::Base_Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Field* Arena::CreateMaybeMessage< ::pb::db::DB_Field >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Record* Arena::CreateMaybeMessage< ::pb::db::DB_Record >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Recordset* Arena::CreateMaybeMessage< ::pb::db::DB_Recordset >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Recordset >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Record_OP* Arena::CreateMaybeMessage< ::pb::db::DB_Record_OP >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Record_OP >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::User_DB_Record_OPS* Arena::CreateMaybeMessage< ::pb::db::User_DB_Record_OPS >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::User_DB_Record_OPS >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::User_DB_Recordset* Arena::CreateMaybeMessage< ::pb::db::User_DB_Recordset >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::User_DB_Recordset >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::User_DB_Recordset_Ext* Arena::CreateMaybeMessage< ::pb::db::User_DB_Recordset_Ext >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::User_DB_Recordset_Ext >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_FieldMeta* Arena::CreateMaybeMessage< ::pb::db::DB_FieldMeta >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_FieldMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_TableMeta* Arena::CreateMaybeMessage< ::pb::db::DB_TableMeta >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_TableMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Metas* Arena::CreateMaybeMessage< ::pb::db::DB_Metas >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Metas >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Update* Arena::CreateMaybeMessage< ::pb::db::DB_Update >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Update >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Delete* Arena::CreateMaybeMessage< ::pb::db::DB_Delete >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Delete >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::Key_Value* Arena::CreateMaybeMessage< ::pb::db::Key_Value >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::Key_Value >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::EffectProp* Arena::CreateMaybeMessage< ::pb::db::EffectProp >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::EffectProp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_EffectProp* Arena::CreateMaybeMessage< ::pb::db::DB_EffectProp >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_EffectProp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_Add_Recordset* Arena::CreateMaybeMessage< ::pb::db::DB_Add_Recordset >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_Add_Recordset >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::DB_DataFlag* Arena::CreateMaybeMessage< ::pb::db::DB_DataFlag >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::DB_DataFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::db::Query_Recordset* Arena::CreateMaybeMessage< ::pb::db::Query_Recordset >(Arena* arena) {
  return Arena::CreateInternal< ::pb::db::Query_Recordset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
