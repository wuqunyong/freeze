// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CombatantUser_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Country_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FieldScout_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HEX_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapCampaign_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapUserData_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Map_Building_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_Field_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_RecoverField_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_Troop_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_WildBuilding_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_WildNpcTroop_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrivateNpc_Troop_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ranking_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerTask_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TroopScout_map_2eproto;
namespace pb {
namespace map {
class Base_OperateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Base_Operate> _instance;
} _Base_Operate_default_instance_;
class HEXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HEX> _instance;
} _HEX_default_instance_;
class Resp_MapOperateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resp_MapOperate> _instance;
} _Resp_MapOperate_default_instance_;
class BuildingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Building> _instance;
} _Building_default_instance_;
class Troop_Map_OPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Troop_Map_OP> _instance;
} _Troop_Map_OP_default_instance_;
class Robot_AI_ModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot_AI_Model> _instance;
} _Robot_AI_Model_default_instance_;
class Troop_Path_QueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Troop_Path_Query> _instance;
} _Troop_Path_Query_default_instance_;
class Obstacle_PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle_Path> _instance;
} _Obstacle_Path_default_instance_;
class March_PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<March_Path> _instance;
} _March_Path_default_instance_;
class RankingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ranking> _instance;
} _Ranking_default_instance_;
class Map_BuildingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_Building> _instance;
} _Map_Building_default_instance_;
class Map_TroopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_Troop> _instance;
} _Map_Troop_default_instance_;
class Map_FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_Field> _instance;
} _Map_Field_default_instance_;
class Map_RecoverFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_RecoverField> _instance;
} _Map_RecoverField_default_instance_;
class Map_WildNpcTroopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_WildNpcTroop> _instance;
} _Map_WildNpcTroop_default_instance_;
class Map_WildBuildingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_WildBuilding> _instance;
} _Map_WildBuilding_default_instance_;
class MapUserDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapUserData> _instance;
} _MapUserData_default_instance_;
class Map_ObjsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_Objs> _instance;
} _Map_Objs_default_instance_;
class PrivateNpc_TroopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivateNpc_Troop> _instance;
} _PrivateNpc_Troop_default_instance_;
class Private_Map_ObjsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Private_Map_Objs> _instance;
} _Private_Map_Objs_default_instance_;
class Collect_Map_OPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collect_Map_OP> _instance;
} _Collect_Map_OP_default_instance_;
class Move_CityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Move_City> _instance;
} _Move_City_default_instance_;
class ResurgenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resurgence> _instance;
} _Resurgence_default_instance_;
class MigrateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Migrate> _instance;
} _Migrate_default_instance_;
class Req_ScoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Req_Scout> _instance;
} _Req_Scout_default_instance_;
class TroopScoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TroopScout> _instance;
} _TroopScout_default_instance_;
class FieldScoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldScout> _instance;
} _FieldScout_default_instance_;
class Rep_ScoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rep_Scout> _instance;
} _Rep_Scout_default_instance_;
class Rep_DeleteScoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rep_DeleteScout> _instance;
} _Rep_DeleteScout_default_instance_;
class Rep_ClearScoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rep_ClearScout> _instance;
} _Rep_ClearScout_default_instance_;
class CombatantUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CombatantUser> _instance;
} _CombatantUser_default_instance_;
class MapCampaignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapCampaign> _instance;
} _MapCampaign_default_instance_;
class MapCampaignRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapCampaignResp> _instance;
} _MapCampaignResp_default_instance_;
class CountryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Country> _instance;
} _Country_default_instance_;
class Country_InfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Country_Info> _instance;
} _Country_Info_default_instance_;
class Choose_CountryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Choose_Country> _instance;
} _Choose_Country_default_instance_;
class CampaignScaleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CampaignScale> _instance;
} _CampaignScale_default_instance_;
class Req_SearchMapObjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Req_SearchMapObj> _instance;
} _Req_SearchMapObj_default_instance_;
class Rep_SearchMapObjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rep_SearchMapObj> _instance;
} _Rep_SearchMapObj_default_instance_;
class TimerTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimerTask> _instance;
} _TimerTask_default_instance_;
class Rep_Timer_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rep_Timer_list> _instance;
} _Rep_Timer_list_default_instance_;
class Req_ChgMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Req_ChgMap> _instance;
} _Req_ChgMap_default_instance_;
class Req_Map_Chk_ViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Req_Map_Chk_View> _instance;
} _Req_Map_Chk_View_default_instance_;
}  // namespace map
}  // namespace pb
static void InitDefaultsscc_info_Base_Operate_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Base_Operate_default_instance_;
    new (ptr) ::pb::map::Base_Operate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Base_Operate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Base_Operate_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Base_Operate_map_2eproto}, {}};

static void InitDefaultsscc_info_Building_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Building_default_instance_;
    new (ptr) ::pb::map::Building();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Building::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Building_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Building_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_CampaignScale_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_CampaignScale_default_instance_;
    new (ptr) ::pb::map::CampaignScale();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::CampaignScale::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CampaignScale_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CampaignScale_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Choose_Country_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Choose_Country_default_instance_;
    new (ptr) ::pb::map::Choose_Country();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Choose_Country::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Choose_Country_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Choose_Country_map_2eproto}, {}};

static void InitDefaultsscc_info_Collect_Map_OP_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Collect_Map_OP_default_instance_;
    new (ptr) ::pb::map::Collect_Map_OP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Collect_Map_OP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Collect_Map_OP_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Collect_Map_OP_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_CombatantUser_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_CombatantUser_default_instance_;
    new (ptr) ::pb::map::CombatantUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::CombatantUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CombatantUser_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CombatantUser_map_2eproto}, {}};

static void InitDefaultsscc_info_Country_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Country_default_instance_;
    new (ptr) ::pb::map::Country();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Country::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Country_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Country_map_2eproto}, {}};

static void InitDefaultsscc_info_Country_Info_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Country_Info_default_instance_;
    new (ptr) ::pb::map::Country_Info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Country_Info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Country_Info_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Country_Info_map_2eproto}, {
      &scc_info_Country_map_2eproto.base,}};

static void InitDefaultsscc_info_FieldScout_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_FieldScout_default_instance_;
    new (ptr) ::pb::map::FieldScout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::FieldScout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FieldScout_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FieldScout_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,
      &scc_info_TroopScout_map_2eproto.base,}};

static void InitDefaultsscc_info_HEX_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_HEX_default_instance_;
    new (ptr) ::pb::map::HEX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::HEX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HEX_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HEX_map_2eproto}, {}};

static void InitDefaultsscc_info_MapCampaign_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_MapCampaign_default_instance_;
    new (ptr) ::pb::map::MapCampaign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::MapCampaign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapCampaign_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapCampaign_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,
      &scc_info_CombatantUser_map_2eproto.base,}};

static void InitDefaultsscc_info_MapCampaignResp_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_MapCampaignResp_default_instance_;
    new (ptr) ::pb::map::MapCampaignResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::MapCampaignResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapCampaignResp_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapCampaignResp_map_2eproto}, {
      &scc_info_MapCampaign_map_2eproto.base,}};

static void InitDefaultsscc_info_MapUserData_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_MapUserData_default_instance_;
    new (ptr) ::pb::map::MapUserData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::MapUserData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapUserData_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapUserData_map_2eproto}, {}};

static void InitDefaultsscc_info_Map_Building_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Map_Building_default_instance_;
    new (ptr) ::pb::map::Map_Building();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Map_Building::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Map_Building_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Map_Building_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,
      &scc_info_Ranking_map_2eproto.base,}};

static void InitDefaultsscc_info_Map_Field_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Map_Field_default_instance_;
    new (ptr) ::pb::map::Map_Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Map_Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_Field_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_Field_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Map_Objs_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Map_Objs_default_instance_;
    new (ptr) ::pb::map::Map_Objs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Map_Objs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Map_Objs_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Map_Objs_map_2eproto}, {
      &scc_info_Map_Building_map_2eproto.base,
      &scc_info_Map_Troop_map_2eproto.base,
      &scc_info_Map_Field_map_2eproto.base,
      &scc_info_Map_RecoverField_map_2eproto.base,
      &scc_info_Map_WildNpcTroop_map_2eproto.base,
      &scc_info_Map_WildBuilding_map_2eproto.base,
      &scc_info_MapUserData_map_2eproto.base,}};

static void InitDefaultsscc_info_Map_RecoverField_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Map_RecoverField_default_instance_;
    new (ptr) ::pb::map::Map_RecoverField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Map_RecoverField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_RecoverField_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_RecoverField_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Map_Troop_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Map_Troop_default_instance_;
    new (ptr) ::pb::map::Map_Troop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Map_Troop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_Troop_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_Troop_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Map_WildBuilding_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Map_WildBuilding_default_instance_;
    new (ptr) ::pb::map::Map_WildBuilding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Map_WildBuilding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_WildBuilding_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_WildBuilding_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Map_WildNpcTroop_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Map_WildNpcTroop_default_instance_;
    new (ptr) ::pb::map::Map_WildNpcTroop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Map_WildNpcTroop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_WildNpcTroop_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_WildNpcTroop_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_March_Path_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_March_Path_default_instance_;
    new (ptr) ::pb::map::March_Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::March_Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_March_Path_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_March_Path_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Migrate_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Migrate_default_instance_;
    new (ptr) ::pb::map::Migrate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Migrate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Migrate_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Migrate_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Move_City_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Move_City_default_instance_;
    new (ptr) ::pb::map::Move_City();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Move_City::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Move_City_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Move_City_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Obstacle_Path_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Obstacle_Path_default_instance_;
    new (ptr) ::pb::map::Obstacle_Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Obstacle_Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacle_Path_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Obstacle_Path_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_PrivateNpc_Troop_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_PrivateNpc_Troop_default_instance_;
    new (ptr) ::pb::map::PrivateNpc_Troop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::PrivateNpc_Troop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrivateNpc_Troop_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrivateNpc_Troop_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Private_Map_Objs_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Private_Map_Objs_default_instance_;
    new (ptr) ::pb::map::Private_Map_Objs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Private_Map_Objs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Private_Map_Objs_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Private_Map_Objs_map_2eproto}, {
      &scc_info_PrivateNpc_Troop_map_2eproto.base,
      &scc_info_Map_WildNpcTroop_map_2eproto.base,}};

static void InitDefaultsscc_info_Ranking_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Ranking_default_instance_;
    new (ptr) ::pb::map::Ranking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Ranking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ranking_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ranking_map_2eproto}, {}};

static void InitDefaultsscc_info_Rep_ClearScout_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Rep_ClearScout_default_instance_;
    new (ptr) ::pb::map::Rep_ClearScout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Rep_ClearScout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rep_ClearScout_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rep_ClearScout_map_2eproto}, {}};

static void InitDefaultsscc_info_Rep_DeleteScout_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Rep_DeleteScout_default_instance_;
    new (ptr) ::pb::map::Rep_DeleteScout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Rep_DeleteScout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rep_DeleteScout_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rep_DeleteScout_map_2eproto}, {}};

static void InitDefaultsscc_info_Rep_Scout_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Rep_Scout_default_instance_;
    new (ptr) ::pb::map::Rep_Scout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Rep_Scout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rep_Scout_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rep_Scout_map_2eproto}, {
      &scc_info_FieldScout_map_2eproto.base,}};

static void InitDefaultsscc_info_Rep_SearchMapObj_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Rep_SearchMapObj_default_instance_;
    new (ptr) ::pb::map::Rep_SearchMapObj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Rep_SearchMapObj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rep_SearchMapObj_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rep_SearchMapObj_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Rep_Timer_list_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Rep_Timer_list_default_instance_;
    new (ptr) ::pb::map::Rep_Timer_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Rep_Timer_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rep_Timer_list_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rep_Timer_list_map_2eproto}, {
      &scc_info_TimerTask_map_2eproto.base,}};

static void InitDefaultsscc_info_Req_ChgMap_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Req_ChgMap_default_instance_;
    new (ptr) ::pb::map::Req_ChgMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Req_ChgMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Req_ChgMap_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Req_ChgMap_map_2eproto}, {}};

static void InitDefaultsscc_info_Req_Map_Chk_View_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Req_Map_Chk_View_default_instance_;
    new (ptr) ::pb::map::Req_Map_Chk_View();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Req_Map_Chk_View::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Req_Map_Chk_View_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Req_Map_Chk_View_map_2eproto}, {}};

static void InitDefaultsscc_info_Req_Scout_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Req_Scout_default_instance_;
    new (ptr) ::pb::map::Req_Scout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Req_Scout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Req_Scout_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Req_Scout_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Req_SearchMapObj_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Req_SearchMapObj_default_instance_;
    new (ptr) ::pb::map::Req_SearchMapObj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Req_SearchMapObj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Req_SearchMapObj_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Req_SearchMapObj_map_2eproto}, {}};

static void InitDefaultsscc_info_Resp_MapOperate_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Resp_MapOperate_default_instance_;
    new (ptr) ::pb::map::Resp_MapOperate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Resp_MapOperate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Resp_MapOperate_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Resp_MapOperate_map_2eproto}, {}};

static void InitDefaultsscc_info_Resurgence_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Resurgence_default_instance_;
    new (ptr) ::pb::map::Resurgence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Resurgence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Resurgence_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Resurgence_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Robot_AI_Model_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Robot_AI_Model_default_instance_;
    new (ptr) ::pb::map::Robot_AI_Model();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Robot_AI_Model::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Robot_AI_Model_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Robot_AI_Model_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_TimerTask_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_TimerTask_default_instance_;
    new (ptr) ::pb::map::TimerTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::TimerTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerTask_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimerTask_map_2eproto}, {}};

static void InitDefaultsscc_info_TroopScout_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_TroopScout_default_instance_;
    new (ptr) ::pb::map::TroopScout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::TroopScout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TroopScout_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TroopScout_map_2eproto}, {}};

static void InitDefaultsscc_info_Troop_Map_OP_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Troop_Map_OP_default_instance_;
    new (ptr) ::pb::map::Troop_Map_OP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Troop_Map_OP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Troop_Map_OP_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Troop_Map_OP_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static void InitDefaultsscc_info_Troop_Path_Query_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::map::_Troop_Path_Query_default_instance_;
    new (ptr) ::pb::map::Troop_Path_Query();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::map::Troop_Path_Query::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Troop_Path_Query_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Troop_Path_Query_map_2eproto}, {
      &scc_info_HEX_map_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_2eproto[43];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_map_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Base_Operate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Base_Operate, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Base_Operate, error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::HEX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::HEX, q_),
  PROTOBUF_FIELD_OFFSET(::pb::map::HEX, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Resp_MapOperate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Resp_MapOperate, troop_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Resp_MapOperate, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Building, idx_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Building, type_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Building, level_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Building, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Map_OP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Map_OP, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Map_OP, end_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Map_OP, idx_troop_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Map_OP, count_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Map_OP, is_autoreturn_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Map_OP, target_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, idx_troop_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, ai_type_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, center_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, start_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, end_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, alter_radius_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Robot_AI_Model, is_clockwise_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Path_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Path_Query, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Path_Query, end_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Path_Query, idx_troop_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Troop_Path_Query, sub_cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Obstacle_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Obstacle_Path, troop_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Obstacle_Path, obstacle_pt_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Obstacle_Path, vec_startobs_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Obstacle_Path, vec_endobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, troop_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, hero_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, soldier_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, name_),
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, idx_troop_),
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, speed_),
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, vec_path_),
  PROTOBUF_FIELD_OFFSET(::pb::map::March_Path, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Ranking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Ranking, user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Ranking, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, owner_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, skin_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, type_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, life_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, life_max_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, troop_num_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, reset_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, avoid_battle_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, close_city_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, first_kill_top_three_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, first_siege_top_three_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, guildid_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, level_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, name_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, buildingeye_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Building, protect_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, troop_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, owner_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, soldier_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, status_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, idx_curpath_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, speed_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, vec_path_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, end_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, morale_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, protect_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Troop, dst_troop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, owner_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, field_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, type_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, status_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, finishtime_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Field, protect_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_RecoverField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_RecoverField, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_RecoverField, atk_user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_RecoverField, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildNpcTroop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildNpcTroop, id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildNpcTroop, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildNpcTroop, wild_npc_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildNpcTroop, disappear_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildNpcTroop, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, type_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, level_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, troop_num_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, life_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, life_max_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_WildBuilding, disappear_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::MapUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::MapUserData, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapUserData, user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapUserData, guild_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapUserData, capture_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapUserData, guild_job_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapUserData, civilization_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, vec_buildings_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, vec_troops_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, vec_fields_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, vec_recoverfield_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, vec_wild_npc_troop_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, vec_wild_building_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Map_Objs, vec_users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::PrivateNpc_Troop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::PrivateNpc_Troop, id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::PrivateNpc_Troop, id_template_),
  PROTOBUF_FIELD_OFFSET(::pb::map::PrivateNpc_Troop, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Private_Map_Objs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Private_Map_Objs, vec_troop_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Private_Map_Objs, vec_wild_npc_troop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Collect_Map_OP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Collect_Map_OP, errcode_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Collect_Map_OP, end_pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Collect_Map_OP, name_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Collect_Map_OP, idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Move_City, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Move_City, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Move_City, idx_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Move_City, move_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Resurgence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Resurgence, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Resurgence, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Migrate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Migrate, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Migrate, country_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Migrate, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_Scout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_Scout, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_Scout, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::TroopScout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::TroopScout, seq_no_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TroopScout, troop_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TroopScout, force1_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TroopScout, force2_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TroopScout, force3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::FieldScout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::FieldScout, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::FieldScout, scout_info_),
  PROTOBUF_FIELD_OFFSET(::pb::map::FieldScout, scout_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::FieldScout, scout_end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_Scout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_Scout, field_scout_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_Scout, next_scout_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_DeleteScout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_DeleteScout, vec_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_ClearScout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_ClearScout, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::CombatantUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::CombatantUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::CombatantUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::map::CombatantUser, honor_),
  PROTOBUF_FIELD_OFFSET(::pb::map::CombatantUser, occupy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, building_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, count_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, scale_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, combatant_guilds_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, start_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, end_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, honor_top_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, occupy_top_),
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaign, self_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaignResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::MapCampaignResp, campaigns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Country, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Country, country_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Country, num_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Country, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Country_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Country_Info, countries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Choose_Country, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Choose_Country, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Choose_Country, country_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::CampaignScale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::CampaignScale, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::map::CampaignScale, scale_),
  PROTOBUF_FIELD_OFFSET(::pb::map::CampaignScale, finish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, q_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, r_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, exhale_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, obj_kind_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, obj_type_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, obj_level_min_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, obj_level_max_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_SearchMapObj, obj_belong_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_SearchMapObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_SearchMapObj, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_SearchMapObj, result_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_SearchMapObj, lst_hex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, type_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, end_time_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, id_link_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, param_),
  PROTOBUF_FIELD_OFFSET(::pb::map::TimerTask, pb_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_Timer_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Rep_Timer_list, lst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_ChgMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_ChgMap, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_ChgMap, maptype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_Map_Chk_View, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_Map_Chk_View, vec_chk_troop_lst_),
  PROTOBUF_FIELD_OFFSET(::pb::map::Req_Map_Chk_View, vec_chk_buildings_lst_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::map::Base_Operate)},
  { 7, -1, sizeof(::pb::map::HEX)},
  { 14, -1, sizeof(::pb::map::Resp_MapOperate)},
  { 21, -1, sizeof(::pb::map::Building)},
  { 30, -1, sizeof(::pb::map::Troop_Map_OP)},
  { 41, -1, sizeof(::pb::map::Robot_AI_Model)},
  { 54, -1, sizeof(::pb::map::Troop_Path_Query)},
  { 63, -1, sizeof(::pb::map::Obstacle_Path)},
  { 72, -1, sizeof(::pb::map::March_Path)},
  { 85, -1, sizeof(::pb::map::Ranking)},
  { 92, -1, sizeof(::pb::map::Map_Building)},
  { 115, -1, sizeof(::pb::map::Map_Troop)},
  { 133, -1, sizeof(::pb::map::Map_Field)},
  { 145, -1, sizeof(::pb::map::Map_RecoverField)},
  { 153, -1, sizeof(::pb::map::Map_WildNpcTroop)},
  { 163, -1, sizeof(::pb::map::Map_WildBuilding)},
  { 176, -1, sizeof(::pb::map::MapUserData)},
  { 187, -1, sizeof(::pb::map::Map_Objs)},
  { 199, -1, sizeof(::pb::map::PrivateNpc_Troop)},
  { 207, -1, sizeof(::pb::map::Private_Map_Objs)},
  { 214, -1, sizeof(::pb::map::Collect_Map_OP)},
  { 223, -1, sizeof(::pb::map::Move_City)},
  { 231, -1, sizeof(::pb::map::Resurgence)},
  { 238, -1, sizeof(::pb::map::Migrate)},
  { 246, -1, sizeof(::pb::map::Req_Scout)},
  { 253, -1, sizeof(::pb::map::TroopScout)},
  { 263, -1, sizeof(::pb::map::FieldScout)},
  { 272, -1, sizeof(::pb::map::Rep_Scout)},
  { 279, -1, sizeof(::pb::map::Rep_DeleteScout)},
  { 285, -1, sizeof(::pb::map::Rep_ClearScout)},
  { 291, -1, sizeof(::pb::map::CombatantUser)},
  { 300, -1, sizeof(::pb::map::MapCampaign)},
  { 315, -1, sizeof(::pb::map::MapCampaignResp)},
  { 321, -1, sizeof(::pb::map::Country)},
  { 329, -1, sizeof(::pb::map::Country_Info)},
  { 335, -1, sizeof(::pb::map::Choose_Country)},
  { 342, -1, sizeof(::pb::map::CampaignScale)},
  { 350, -1, sizeof(::pb::map::Req_SearchMapObj)},
  { 363, -1, sizeof(::pb::map::Rep_SearchMapObj)},
  { 371, -1, sizeof(::pb::map::TimerTask)},
  { 383, -1, sizeof(::pb::map::Rep_Timer_list)},
  { 389, -1, sizeof(::pb::map::Req_ChgMap)},
  { 396, -1, sizeof(::pb::map::Req_Map_Chk_View)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Base_Operate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_HEX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Resp_MapOperate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Building_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Troop_Map_OP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Robot_AI_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Troop_Path_Query_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Obstacle_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_March_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Ranking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Map_Building_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Map_Troop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Map_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Map_RecoverField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Map_WildNpcTroop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Map_WildBuilding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_MapUserData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Map_Objs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_PrivateNpc_Troop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Private_Map_Objs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Collect_Map_OP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Move_City_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Resurgence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Migrate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Req_Scout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_TroopScout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_FieldScout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Rep_Scout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Rep_DeleteScout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Rep_ClearScout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_CombatantUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_MapCampaign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_MapCampaignResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Country_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Country_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Choose_Country_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_CampaignScale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Req_SearchMapObj_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Rep_SearchMapObj_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_TimerTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Rep_Timer_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Req_ChgMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::map::_Req_Map_Chk_View_default_instance_),
};

const char descriptor_table_protodef_map_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmap.proto\022\006pb.map\"B\n\014Base_Operate\022\036\n\003c"
  "md\030\001 \001(\0162\021.pb.map.E_Map_CMD\022\022\n\nerror_cod"
  "e\030\002 \001(\r\"\033\n\003HEX\022\t\n\001q\030\001 \001(\005\022\t\n\001r\030\002 \001(\005\"B\n\017"
  "Resp_MapOperate\022\020\n\010troop_id\030\001 \001(\003\022\035\n\002op\030"
  "\002 \001(\0162\021.pb.map.E_Map_CMD\"N\n\010Building\022\013\n\003"
  "idx\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\030"
  "\n\003pos\030\004 \001(\0132\013.pb.map.HEX\"\216\001\n\014Troop_Map_O"
  "P\022\022\n\nerror_code\030\001 \001(\r\022\034\n\007end_pos\030\002 \001(\0132\013"
  ".pb.map.HEX\022\021\n\tidx_troop\030\003 \001(\r\022\r\n\005count\030"
  "\004 \001(\r\022\025\n\ris_autoreturn\030\005 \001(\r\022\023\n\013target_t"
  "ype\030\006 \001(\r\"\356\001\n\016Robot_AI_Model\022\022\n\nerror_co"
  "de\030\001 \001(\r\022\021\n\tidx_troop\030\002 \001(\r\022*\n\007ai_type\030\003"
  " \001(\0162\031.pb.map.E_AIBehavior_Type\022\037\n\ncente"
  "r_pos\030\004 \001(\0132\013.pb.map.HEX\022\036\n\tstart_pos\030\005 "
  "\001(\0132\013.pb.map.HEX\022\034\n\007end_pos\030\006 \001(\0132\013.pb.m"
  "ap.HEX\022\024\n\014alter_radius\030\007 \001(\005\022\024\n\014is_clock"
  "wise\030\010 \001(\010\"{\n\020Troop_Path_Query\022\022\n\nerror_"
  "code\030\001 \001(\r\022\034\n\007end_pos\030\002 \001(\0132\013.pb.map.HEX"
  "\022\021\n\tidx_troop\030\003 \001(\r\022\"\n\007sub_cmd\030\004 \001(\0162\021.p"
  "b.map.E_Map_CMD\"\207\001\n\rObstacle_Path\022\020\n\010tro"
  "op_id\030\001 \001(\005\022 \n\013obstacle_pt\030\002 \001(\0132\013.pb.ma"
  "p.HEX\022!\n\014vec_startobs\030\003 \003(\0132\013.pb.map.HEX"
  "\022\037\n\nvec_endobs\030\004 \003(\0132\013.pb.map.HEX\"\244\001\n\nMa"
  "rch_Path\022\020\n\010troop_id\030\001 \001(\005\022\017\n\007hero_id\030\002 "
  "\001(\r\022\022\n\nsoldier_id\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\021\n"
  "\tidx_troop\030\005 \001(\r\022\r\n\005speed\030\006 \001(\r\022\035\n\010vec_p"
  "ath\030\007 \003(\0132\013.pb.map.HEX\022\020\n\010end_time\030\010 \001(\003"
  "\"+\n\007Ranking\022\021\n\tuser_name\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\r\"\230\003\n\014Map_Building\022\020\n\010owner_id\030\001 \001(\003"
  "\022\017\n\007skin_id\030\002 \001(\r\022\030\n\003pos\030\003 \001(\0132\013.pb.map."
  "HEX\022\014\n\004type\030\004 \001(\r\022\n\n\002id\030\005 \001(\005\022\014\n\004life\030\006 "
  "\001(\r\022\020\n\010life_max\030\007 \001(\r\022\021\n\ttroop_num\030\010 \001(\r"
  "\022\022\n\nreset_time\030\t \001(\003\022\031\n\021avoid_battle_tim"
  "e\030\n \001(\003\022\027\n\017close_city_time\030\013 \001(\003\022-\n\024firs"
  "t_kill_top_three\030\014 \003(\0132\017.pb.map.Ranking\022"
  ".\n\025first_siege_top_three\030\r \003(\0132\017.pb.map."
  "Ranking\022\017\n\007guildid\030\016 \001(\r\022\r\n\005level\030\017 \001(\r\022"
  "\014\n\004name\030\020 \001(\t\022\023\n\013buildingeye\030\021 \001(\r\022\024\n\014pr"
  "otect_flag\030\022 \001(\r\"\214\002\n\tMap_Troop\022\020\n\010troop_"
  "id\030\001 \001(\005\022\020\n\010owner_id\030\002 \001(\003\022\022\n\nsoldier_id"
  "\030\003 \001(\r\022\030\n\003pos\030\004 \001(\0132\013.pb.map.HEX\022\016\n\006stat"
  "us\030\005 \001(\r\022\023\n\013idx_curpath\030\006 \001(\r\022\014\n\004time\030\007 "
  "\001(\r\022\r\n\005speed\030\010 \001(\r\022\035\n\010vec_path\030\t \003(\0132\013.p"
  "b.map.HEX\022\020\n\010end_time\030\n \001(\003\022\016\n\006morale\030\013 "
  "\001(\r\022\024\n\014protect_flag\030\014 \001(\r\022\024\n\014dst_troop_i"
  "d\030\r \001(\005\"\221\001\n\tMap_Field\022\020\n\010owner_id\030\001 \001(\003\022"
  "\030\n\003pos\030\002 \001(\0132\013.pb.map.HEX\022\020\n\010field_id\030\003 "
  "\001(\005\022\014\n\004type\030\004 \001(\r\022\016\n\006Status\030\005 \001(\r\022\022\n\nFin"
  "ishTime\030\006 \001(\r\022\024\n\014protect_flag\030\007 \001(\r\"S\n\020M"
  "ap_RecoverField\022\030\n\003pos\030\001 \001(\0132\013.pb.map.HE"
  "X\022\023\n\013atk_user_id\030\002 \001(\003\022\020\n\010end_time\030\003 \001(\003"
  "\"u\n\020Map_WildNpcTroop\022\n\n\002id\030\001 \001(\r\022\030\n\003pos\030"
  "\002 \001(\0132\013.pb.map.HEX\022\023\n\013wild_npc_id\030\003 \001(\005\022"
  "\026\n\016disappear_time\030\004 \001(\003\022\016\n\006status\030\005 \001(\005\""
  "\240\001\n\020Map_WildBuilding\022\n\n\002id\030\001 \001(\r\022\030\n\003pos\030"
  "\002 \001(\0132\013.pb.map.HEX\022\014\n\004type\030\003 \001(\r\022\r\n\005leve"
  "l\030\004 \001(\r\022\021\n\ttroop_num\030\005 \001(\r\022\014\n\004life\030\006 \001(\r"
  "\022\020\n\010life_max\030\007 \001(\r\022\026\n\016disappear_time\030\010 \001"
  "(\005\"\205\001\n\013MapUserData\022\017\n\007user_id\030\001 \001(\003\022\021\n\tu"
  "ser_name\030\002 \001(\t\022\020\n\010guild_id\030\003 \001(\005\022\022\n\ncapt"
  "ure_id\030\004 \001(\005\022\021\n\tguild_job\030\005 \001(\005\022\031\n\021civil"
  "ization_type\030\006 \001(\005\"\314\002\n\010Map_Objs\022+\n\rvec_b"
  "uildings\030\001 \003(\0132\024.pb.map.Map_Building\022%\n\n"
  "vec_troops\030\002 \003(\0132\021.pb.map.Map_Troop\022%\n\nv"
  "ec_fields\030\003 \003(\0132\021.pb.map.Map_Field\0222\n\020ve"
  "c_recoverfield\030\004 \003(\0132\030.pb.map.Map_Recove"
  "rField\0224\n\022vec_wild_npc_troop\030\005 \003(\0132\030.pb."
  "map.Map_WildNpcTroop\0223\n\021vec_wild_buildin"
  "g\030\006 \003(\0132\030.pb.map.Map_WildBuilding\022&\n\tvec"
  "_users\030\007 \003(\0132\023.pb.map.MapUserData\"M\n\020Pri"
  "vateNpc_Troop\022\n\n\002id\030\001 \001(\r\022\023\n\013id_template"
  "\030\002 \001(\r\022\030\n\003pos\030\003 \001(\0132\013.pb.map.HEX\"u\n\020Priv"
  "ate_Map_Objs\022+\n\tvec_troop\030\001 \003(\0132\030.pb.map"
  ".PrivateNpc_Troop\0224\n\022vec_wild_npc_troop\030"
  "\002 \003(\0132\030.pb.map.Map_WildNpcTroop\"Z\n\016Colle"
  "ct_Map_OP\022\017\n\007errCode\030\001 \001(\r\022\034\n\007end_pos\030\002 "
  "\001(\0132\013.pb.map.HEX\022\014\n\004name\030\003 \001(\t\022\013\n\003idx\030\004 "
  "\001(\003\"K\n\tMove_City\022\022\n\nerror_code\030\001 \001(\r\022\013\n\003"
  "idx\030\002 \001(\r\022\035\n\010move_pos\030\003 \001(\0132\013.pb.map.HEX"
  "\":\n\nResurgence\022\022\n\nerror_code\030\001 \001(\r\022\030\n\003po"
  "s\030\002 \001(\0132\013.pb.map.HEX\"K\n\007Migrate\022\022\n\nerror"
  "_code\030\001 \001(\r\022\022\n\ncountry_id\030\002 \001(\005\022\030\n\003pos\030\003"
  " \001(\0132\013.pb.map.HEX\"9\n\tReq_Scout\022\022\n\nerror_"
  "code\030\001 \001(\r\022\030\n\003pos\030\002 \001(\0132\013.pb.map.HEX\"^\n\n"
  "TroopScout\022\016\n\006seq_no\030\001 \001(\005\022\020\n\010troop_id\030\002"
  " \001(\005\022\016\n\006force1\030\003 \001(\005\022\016\n\006force2\030\004 \001(\005\022\016\n\006"
  "force3\030\005 \001(\005\"z\n\nFieldScout\022\030\n\003pos\030\001 \001(\0132"
  "\013.pb.map.HEX\022&\n\nscout_info\030\002 \003(\0132\022.pb.ma"
  "p.TroopScout\022\022\n\nscout_time\030\003 \001(\003\022\026\n\016scou"
  "t_end_time\030\004 \001(\003\"M\n\tRep_Scout\022\'\n\013field_s"
  "cout\030\001 \003(\0132\022.pb.map.FieldScout\022\027\n\017next_s"
  "cout_time\030\002 \001(\004\"\"\n\017Rep_DeleteScout\022\017\n\007ve"
  "c_pos\030\001 \003(\r\"0\n\016Rep_ClearScout\022\036\n\003cmd\030\001 \001"
  "(\0162\021.pb.map.E_Map_CMD\"R\n\rCombatantUser\022\017"
  "\n\007user_id\030\001 \001(\003\022\021\n\tuser_name\030\002 \001(\t\022\r\n\005ho"
  "nor\030\003 \001(\005\022\016\n\006occupy\030\004 \001(\005\"\260\002\n\013MapCampaig"
  "n\022\030\n\003pos\030\001 \001(\0132\013.pb.map.HEX\022\023\n\013building_"
  "id\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022)\n\005scale\030\004 \001(\0162\032"
  ".pb.map.E_MapCampaignScale\022\030\n\020combatant_"
  "guilds\030\005 \003(\005\022\022\n\nstart_time\030\006 \001(\003\022\020\n\010end_"
  "time\030\007 \001(\003\022(\n\thonor_top\030\010 \001(\0132\025.pb.map.C"
  "ombatantUser\022)\n\noccupy_top\030\t \001(\0132\025.pb.ma"
  "p.CombatantUser\022#\n\004self\030\n \001(\0132\025.pb.map.C"
  "ombatantUser\"9\n\017MapCampaignResp\022&\n\tcampa"
  "igns\030\001 \003(\0132\023.pb.map.MapCampaign\"8\n\007Count"
  "ry\022\022\n\ncountry_id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\014\n\004o"
  "pen\030\003 \001(\005\"2\n\014Country_Info\022\"\n\tcountries\030\001"
  " \003(\0132\017.pb.map.Country\"8\n\016Choose_Country\022"
  "\022\n\nerror_code\030\001 \001(\r\022\022\n\ncountry_id\030\002 \001(\005\""
  "H\n\rCampaignScale\022\030\n\003pos\030\001 \001(\0132\013.pb.map.H"
  "EX\022\r\n\005scale\030\002 \001(\005\022\016\n\006finish\030\003 \001(\010\"\236\001\n\020Re"
  "q_SearchMapObj\022\t\n\001q\030\001 \001(\005\022\t\n\001r\030\002 \001(\005\022\016\n\006"
  "exhale\030\003 \001(\005\022\020\n\010obj_kind\030\004 \001(\005\022\020\n\010obj_ty"
  "pe\030\005 \001(\005\022\025\n\robj_level_min\030\006 \001(\005\022\025\n\robj_l"
  "evel_max\030\007 \001(\005\022\022\n\nobj_belong\030\010 \001(\005\"T\n\020Re"
  "p_SearchMapObj\022\022\n\nerror_code\030\001 \001(\r\022\016\n\006re"
  "sult\030\002 \001(\005\022\034\n\007lst_hex\030\003 \003(\0132\013.pb.map.HEX"
  "\"z\n\tTimerTask\022\n\n\002id\030\001 \001(\003\022\017\n\007user_id\030\002 \001"
  "(\003\022\014\n\004type\030\003 \001(\r\022\020\n\010end_time\030\004 \001(\003\022\017\n\007id"
  "_link\030\005 \001(\003\022\r\n\005param\030\006 \001(\003\022\020\n\010pb_param\030\007"
  " \001(\014\"0\n\016Rep_Timer_list\022\036\n\003lst\030\001 \003(\0132\021.pb"
  ".map.TimerTask\"1\n\nReq_ChgMap\022\022\n\nerror_co"
  "de\030\001 \001(\r\022\017\n\007mapType\030\002 \001(\r\"L\n\020Req_Map_Chk"
  "_View\022\031\n\021vec_chk_troop_lst\030\001 \003(\003\022\035\n\025vec_"
  "chk_buildings_lst\030\002 \003(\003*\307\t\n\tE_Map_CMD\022\014\n"
  "\010SynTroop\020\000\022\t\n\005Scout\020\001\022\021\n\rAttack_Occupy\020"
  "\002\022\t\n\005March\020\003\022\014\n\010Transfer\020\004\022\014\n\010Garrison\020\005"
  "\022\013\n\007WipeOut\020\006\022\017\n\013Reclamation\020\007\022\017\n\013Attack"
  "_City\020\010\022\014\n\010Suppress\020\t\022\022\n\016CreateBuilding\020"
  "\n\022\013\n\007Crusade\020\013\022\020\n\014BuildingLvUp\020\014\022\r\n\tCall"
  "Redif\020\r\022\n\n\006Rescue\020\016\022\016\n\nAnnihilate\020\017\022\013\n\007B"
  "esiege\020\020\022\016\n\nQueryRoute\020\024\022\016\n\nReqViewPos\020\025"
  "\022\016\n\nMapObjList\020\026\022\022\n\016SynNewBuilding\020\027\022\017\n\013"
  "SynBuilding\020\030\022\020\n\014DiscardField\020\031\022\020\n\014Choos"
  "eNation\020\032\022\016\n\nAbortMarch\020\033\022\014\n\010BackCity\020\034\022"
  "\022\n\016SpecialDefense\020\035\022\020\n\014CollectField\020d\022\026\n"
  "\022CancelCollectField\020e\022\014\n\010MoveCity\020f\022\r\n\tC"
  "loseCity\020g\022\023\n\017CancelCloseCity\020h\022\021\n\rBackC"
  "ityQuick\020i\022\027\n\023EmergencyEvacuation\020j\022\017\n\013C"
  "MD_MIGRATE\020k\022\017\n\013Retracement\020l\022\026\n\022CancelD"
  "iscardField\020m\022\025\n\021PrivateMapObjList\020n\022\014\n\010"
  "RepScout\020o\022\022\n\016RepDeleteScout\020p\022\021\n\rRepCle"
  "arScout\020q\022\016\n\nReqMapInfo\020r\022\027\n\023RespMapBuil"
  "dingInfo\020s\022\023\n\017RespMapCampaign\020t\022\026\n\022Query"
  "ObstacleRoute\020u\022\017\n\013CountryInfo\020v\022\021\n\rChoo"
  "seCountry\020w\022\025\n\021RespCampaignScale\020x\022\031\n\025Re"
  "spNpcBuildingOccupy\020y\022\023\n\017ReqSearchMapObj"
  "\020z\022\017\n\013CmdEnterMap\020{\022\017\n\013RepTimerLst\020|\022\r\n\t"
  "ReqChgMap\020}\022\034\n\030RespDelPrivateMapObjList\020"
  "~\022\033\n\027RespDelMap_RecoverField\020\177\022\022\n\rReqMap"
  "ChkView\020\200\001\022\023\n\016SynMapUserInfo\020\201\001\022\017\n\nRobot"
  "March\020\264\001\022\024\n\017RobotQueryRoute\020\265\001\022\020\n\013RobotO"
  "ccupy\020\266\001\022\021\n\014RobotAtkCity\020\267\001\022\022\n\rRobotBack"
  "City\020\270\001\022\024\n\017RobotAbortMarch\020\271\001\022\022\n\rRobotGa"
  "rrison\020\272\001\022\021\n\014RobotAIModel\020\273\001\022\023\n\016RespMapO"
  "perate\020\307\001*\242\001\n\021E_AIBehavior_Type\022\025\n\021E_AIB"
  "ehavior_None\020\000\022\025\n\021E_AIBehavior_Line\020\001\022\026\n"
  "\022E_AIBehavior_Round\020\002\022\027\n\023E_AIBehavior_Se"
  "ctor\020\003\022\027\n\023E_AIBehavior_Propel\020\004\022\025\n\021E_AIB"
  "ehavior_Situ\020\005*m\n\022E_MapCampaignScale\022\034\n\030"
  "E_MapCampaignScale_Small\020\000\022\035\n\031E_MapCampa"
  "ignScale_Medium\020\001\022\032\n\026E_MapCampaignScale_"
  "Big\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_2eproto_sccs[43] = {
  &scc_info_Base_Operate_map_2eproto.base,
  &scc_info_Building_map_2eproto.base,
  &scc_info_CampaignScale_map_2eproto.base,
  &scc_info_Choose_Country_map_2eproto.base,
  &scc_info_Collect_Map_OP_map_2eproto.base,
  &scc_info_CombatantUser_map_2eproto.base,
  &scc_info_Country_map_2eproto.base,
  &scc_info_Country_Info_map_2eproto.base,
  &scc_info_FieldScout_map_2eproto.base,
  &scc_info_HEX_map_2eproto.base,
  &scc_info_MapCampaign_map_2eproto.base,
  &scc_info_MapCampaignResp_map_2eproto.base,
  &scc_info_MapUserData_map_2eproto.base,
  &scc_info_Map_Building_map_2eproto.base,
  &scc_info_Map_Field_map_2eproto.base,
  &scc_info_Map_Objs_map_2eproto.base,
  &scc_info_Map_RecoverField_map_2eproto.base,
  &scc_info_Map_Troop_map_2eproto.base,
  &scc_info_Map_WildBuilding_map_2eproto.base,
  &scc_info_Map_WildNpcTroop_map_2eproto.base,
  &scc_info_March_Path_map_2eproto.base,
  &scc_info_Migrate_map_2eproto.base,
  &scc_info_Move_City_map_2eproto.base,
  &scc_info_Obstacle_Path_map_2eproto.base,
  &scc_info_PrivateNpc_Troop_map_2eproto.base,
  &scc_info_Private_Map_Objs_map_2eproto.base,
  &scc_info_Ranking_map_2eproto.base,
  &scc_info_Rep_ClearScout_map_2eproto.base,
  &scc_info_Rep_DeleteScout_map_2eproto.base,
  &scc_info_Rep_Scout_map_2eproto.base,
  &scc_info_Rep_SearchMapObj_map_2eproto.base,
  &scc_info_Rep_Timer_list_map_2eproto.base,
  &scc_info_Req_ChgMap_map_2eproto.base,
  &scc_info_Req_Map_Chk_View_map_2eproto.base,
  &scc_info_Req_Scout_map_2eproto.base,
  &scc_info_Req_SearchMapObj_map_2eproto.base,
  &scc_info_Resp_MapOperate_map_2eproto.base,
  &scc_info_Resurgence_map_2eproto.base,
  &scc_info_Robot_AI_Model_map_2eproto.base,
  &scc_info_TimerTask_map_2eproto.base,
  &scc_info_TroopScout_map_2eproto.base,
  &scc_info_Troop_Map_OP_map_2eproto.base,
  &scc_info_Troop_Path_Query_map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_2eproto_once;
static bool descriptor_table_map_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto = {
  &descriptor_table_map_2eproto_initialized, descriptor_table_protodef_map_2eproto, "map.proto", 6493,
  &descriptor_table_map_2eproto_once, descriptor_table_map_2eproto_sccs, descriptor_table_map_2eproto_deps, 43, 0,
  schemas, file_default_instances, TableStruct_map_2eproto::offsets,
  file_level_metadata_map_2eproto, 43, file_level_enum_descriptors_map_2eproto, file_level_service_descriptors_map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_2eproto), true);
namespace pb {
namespace map {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Map_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_2eproto);
  return file_level_enum_descriptors_map_2eproto[0];
}
bool E_Map_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 199:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_AIBehavior_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_2eproto);
  return file_level_enum_descriptors_map_2eproto[1];
}
bool E_AIBehavior_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_MapCampaignScale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_2eproto);
  return file_level_enum_descriptors_map_2eproto[2];
}
bool E_MapCampaignScale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Base_Operate::InitAsDefaultInstance() {
}
class Base_Operate::_Internal {
 public:
};

Base_Operate::Base_Operate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Base_Operate)
}
Base_Operate::Base_Operate(const Base_Operate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Base_Operate)
}

void Base_Operate::SharedCtor() {
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(error_code_));
}

Base_Operate::~Base_Operate() {
  // @@protoc_insertion_point(destructor:pb.map.Base_Operate)
  SharedDtor();
}

void Base_Operate::SharedDtor() {
}

void Base_Operate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Base_Operate& Base_Operate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Base_Operate_map_2eproto.base);
  return *internal_default_instance();
}


void Base_Operate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Base_Operate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(error_code_));
  _internal_metadata_.Clear();
}

const char* Base_Operate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.map.E_Map_CMD cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::map::E_Map_CMD>(val));
        } else goto handle_unusual;
        continue;
      // uint32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Base_Operate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Base_Operate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.map.E_Map_CMD cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // uint32 error_code = 2;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Base_Operate)
  return target;
}

size_t Base_Operate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Base_Operate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.E_Map_CMD cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  // uint32 error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Base_Operate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Base_Operate)
  GOOGLE_DCHECK_NE(&from, this);
  const Base_Operate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Base_Operate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Base_Operate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Base_Operate)
    MergeFrom(*source);
  }
}

void Base_Operate::MergeFrom(const Base_Operate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Base_Operate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void Base_Operate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Base_Operate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base_Operate::CopyFrom(const Base_Operate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Base_Operate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base_Operate::IsInitialized() const {
  return true;
}

void Base_Operate::InternalSwap(Base_Operate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmd_, other->cmd_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Base_Operate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HEX::InitAsDefaultInstance() {
}
class HEX::_Internal {
 public:
};

HEX::HEX()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.HEX)
}
HEX::HEX(const HEX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&q_, &from.q_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&q_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:pb.map.HEX)
}

void HEX::SharedCtor() {
  ::memset(&q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&q_)) + sizeof(r_));
}

HEX::~HEX() {
  // @@protoc_insertion_point(destructor:pb.map.HEX)
  SharedDtor();
}

void HEX::SharedDtor() {
}

void HEX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HEX& HEX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HEX_map_2eproto.base);
  return *internal_default_instance();
}


void HEX::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.HEX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&q_)) + sizeof(r_));
  _internal_metadata_.Clear();
}

const char* HEX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HEX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.HEX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_q(), target);
  }

  // int32 r = 2;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.HEX)
  return target;
}

size_t HEX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.HEX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_q());
  }

  // int32 r = 2;
  if (this->r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HEX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.HEX)
  GOOGLE_DCHECK_NE(&from, this);
  const HEX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HEX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.HEX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.HEX)
    MergeFrom(*source);
  }
}

void HEX::MergeFrom(const HEX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.HEX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.q() != 0) {
    _internal_set_q(from._internal_q());
  }
  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
}

void HEX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.HEX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEX::CopyFrom(const HEX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.HEX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEX::IsInitialized() const {
  return true;
}

void HEX::InternalSwap(HEX* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(q_, other->q_);
  swap(r_, other->r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HEX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resp_MapOperate::InitAsDefaultInstance() {
}
class Resp_MapOperate::_Internal {
 public:
};

Resp_MapOperate::Resp_MapOperate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Resp_MapOperate)
}
Resp_MapOperate::Resp_MapOperate(const Resp_MapOperate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&troop_id_, &from.troop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&troop_id_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Resp_MapOperate)
}

void Resp_MapOperate::SharedCtor() {
  ::memset(&troop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&troop_id_)) + sizeof(op_));
}

Resp_MapOperate::~Resp_MapOperate() {
  // @@protoc_insertion_point(destructor:pb.map.Resp_MapOperate)
  SharedDtor();
}

void Resp_MapOperate::SharedDtor() {
}

void Resp_MapOperate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resp_MapOperate& Resp_MapOperate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resp_MapOperate_map_2eproto.base);
  return *internal_default_instance();
}


void Resp_MapOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Resp_MapOperate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&troop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&troop_id_)) + sizeof(op_));
  _internal_metadata_.Clear();
}

const char* Resp_MapOperate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 troop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          troop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.E_Map_CMD op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::pb::map::E_Map_CMD>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resp_MapOperate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Resp_MapOperate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 troop_id = 1;
  if (this->troop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_troop_id(), target);
  }

  // .pb.map.E_Map_CMD op = 2;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Resp_MapOperate)
  return target;
}

size_t Resp_MapOperate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Resp_MapOperate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 troop_id = 1;
  if (this->troop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_troop_id());
  }

  // .pb.map.E_Map_CMD op = 2;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resp_MapOperate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Resp_MapOperate)
  GOOGLE_DCHECK_NE(&from, this);
  const Resp_MapOperate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resp_MapOperate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Resp_MapOperate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Resp_MapOperate)
    MergeFrom(*source);
  }
}

void Resp_MapOperate::MergeFrom(const Resp_MapOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Resp_MapOperate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.troop_id() != 0) {
    _internal_set_troop_id(from._internal_troop_id());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void Resp_MapOperate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Resp_MapOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resp_MapOperate::CopyFrom(const Resp_MapOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Resp_MapOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resp_MapOperate::IsInitialized() const {
  return true;
}

void Resp_MapOperate::InternalSwap(Resp_MapOperate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(troop_id_, other->troop_id_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resp_MapOperate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Building::InitAsDefaultInstance() {
  ::pb::map::_Building_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Building::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Building* msg);
};

const ::pb::map::HEX&
Building::_Internal::pos(const Building* msg) {
  return *msg->pos_;
}
Building::Building()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Building)
}
Building::Building(const Building& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Building)
}

void Building::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Building_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(level_));
}

Building::~Building() {
  // @@protoc_insertion_point(destructor:pb.map.Building)
  SharedDtor();
}

void Building::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Building& Building::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Building_map_2eproto.base);
  return *internal_default_instance();
}


void Building::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* Building::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Building::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idx = 1;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // .pb.map.HEX pos = 4;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Building)
  return target;
}

size_t Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Building)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Building::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Building)
  GOOGLE_DCHECK_NE(&from, this);
  const Building* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Building>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Building)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Building)
    MergeFrom(*source);
  }
}

void Building::MergeFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void Building::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Building::CopyFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Building::IsInitialized() const {
  return true;
}

void Building::InternalSwap(Building* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(idx_, other->idx_);
  swap(type_, other->type_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Building::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Troop_Map_OP::InitAsDefaultInstance() {
  ::pb::map::_Troop_Map_OP_default_instance_._instance.get_mutable()->end_pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Troop_Map_OP::_Internal {
 public:
  static const ::pb::map::HEX& end_pos(const Troop_Map_OP* msg);
};

const ::pb::map::HEX&
Troop_Map_OP::_Internal::end_pos(const Troop_Map_OP* msg) {
  return *msg->end_pos_;
}
Troop_Map_OP::Troop_Map_OP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Troop_Map_OP)
}
Troop_Map_OP::Troop_Map_OP(const Troop_Map_OP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_end_pos()) {
    end_pos_ = new ::pb::map::HEX(*from.end_pos_);
  } else {
    end_pos_ = nullptr;
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_type_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(target_type_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Troop_Map_OP)
}

void Troop_Map_OP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Troop_Map_OP_map_2eproto.base);
  ::memset(&end_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_type_) -
      reinterpret_cast<char*>(&end_pos_)) + sizeof(target_type_));
}

Troop_Map_OP::~Troop_Map_OP() {
  // @@protoc_insertion_point(destructor:pb.map.Troop_Map_OP)
  SharedDtor();
}

void Troop_Map_OP::SharedDtor() {
  if (this != internal_default_instance()) delete end_pos_;
}

void Troop_Map_OP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Troop_Map_OP& Troop_Map_OP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Troop_Map_OP_map_2eproto.base);
  return *internal_default_instance();
}


void Troop_Map_OP::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Troop_Map_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_type_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(target_type_));
  _internal_metadata_.Clear();
}

const char* Troop_Map_OP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX end_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx_troop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_troop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_autoreturn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_autoreturn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          target_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Troop_Map_OP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Troop_Map_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // .pb.map.HEX end_pos = 2;
  if (this->has_end_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_pos(this), target, stream);
  }

  // uint32 idx_troop = 3;
  if (this->idx_troop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_idx_troop(), target);
  }

  // uint32 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  // uint32 is_autoreturn = 5;
  if (this->is_autoreturn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_is_autoreturn(), target);
  }

  // uint32 target_type = 6;
  if (this->target_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Troop_Map_OP)
  return target;
}

size_t Troop_Map_OP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Troop_Map_OP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX end_pos = 2;
  if (this->has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // uint32 idx_troop = 3;
  if (this->idx_troop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx_troop());
  }

  // uint32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 is_autoreturn = 5;
  if (this->is_autoreturn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_autoreturn());
  }

  // uint32 target_type = 6;
  if (this->target_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Troop_Map_OP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Troop_Map_OP)
  GOOGLE_DCHECK_NE(&from, this);
  const Troop_Map_OP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Troop_Map_OP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Troop_Map_OP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Troop_Map_OP)
    MergeFrom(*source);
  }
}

void Troop_Map_OP::MergeFrom(const Troop_Map_OP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Troop_Map_OP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end_pos()) {
    _internal_mutable_end_pos()->::pb::map::HEX::MergeFrom(from._internal_end_pos());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.idx_troop() != 0) {
    _internal_set_idx_troop(from._internal_idx_troop());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.is_autoreturn() != 0) {
    _internal_set_is_autoreturn(from._internal_is_autoreturn());
  }
  if (from.target_type() != 0) {
    _internal_set_target_type(from._internal_target_type());
  }
}

void Troop_Map_OP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Troop_Map_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Troop_Map_OP::CopyFrom(const Troop_Map_OP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Troop_Map_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Troop_Map_OP::IsInitialized() const {
  return true;
}

void Troop_Map_OP::InternalSwap(Troop_Map_OP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(end_pos_, other->end_pos_);
  swap(error_code_, other->error_code_);
  swap(idx_troop_, other->idx_troop_);
  swap(count_, other->count_);
  swap(is_autoreturn_, other->is_autoreturn_);
  swap(target_type_, other->target_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Troop_Map_OP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robot_AI_Model::InitAsDefaultInstance() {
  ::pb::map::_Robot_AI_Model_default_instance_._instance.get_mutable()->center_pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
  ::pb::map::_Robot_AI_Model_default_instance_._instance.get_mutable()->start_pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
  ::pb::map::_Robot_AI_Model_default_instance_._instance.get_mutable()->end_pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Robot_AI_Model::_Internal {
 public:
  static const ::pb::map::HEX& center_pos(const Robot_AI_Model* msg);
  static const ::pb::map::HEX& start_pos(const Robot_AI_Model* msg);
  static const ::pb::map::HEX& end_pos(const Robot_AI_Model* msg);
};

const ::pb::map::HEX&
Robot_AI_Model::_Internal::center_pos(const Robot_AI_Model* msg) {
  return *msg->center_pos_;
}
const ::pb::map::HEX&
Robot_AI_Model::_Internal::start_pos(const Robot_AI_Model* msg) {
  return *msg->start_pos_;
}
const ::pb::map::HEX&
Robot_AI_Model::_Internal::end_pos(const Robot_AI_Model* msg) {
  return *msg->end_pos_;
}
Robot_AI_Model::Robot_AI_Model()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Robot_AI_Model)
}
Robot_AI_Model::Robot_AI_Model(const Robot_AI_Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_center_pos()) {
    center_pos_ = new ::pb::map::HEX(*from.center_pos_);
  } else {
    center_pos_ = nullptr;
  }
  if (from._internal_has_start_pos()) {
    start_pos_ = new ::pb::map::HEX(*from.start_pos_);
  } else {
    start_pos_ = nullptr;
  }
  if (from._internal_has_end_pos()) {
    end_pos_ = new ::pb::map::HEX(*from.end_pos_);
  } else {
    end_pos_ = nullptr;
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_clockwise_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(is_clockwise_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Robot_AI_Model)
}

void Robot_AI_Model::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robot_AI_Model_map_2eproto.base);
  ::memset(&center_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_clockwise_) -
      reinterpret_cast<char*>(&center_pos_)) + sizeof(is_clockwise_));
}

Robot_AI_Model::~Robot_AI_Model() {
  // @@protoc_insertion_point(destructor:pb.map.Robot_AI_Model)
  SharedDtor();
}

void Robot_AI_Model::SharedDtor() {
  if (this != internal_default_instance()) delete center_pos_;
  if (this != internal_default_instance()) delete start_pos_;
  if (this != internal_default_instance()) delete end_pos_;
}

void Robot_AI_Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot_AI_Model& Robot_AI_Model::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_AI_Model_map_2eproto.base);
  return *internal_default_instance();
}


void Robot_AI_Model::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Robot_AI_Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && center_pos_ != nullptr) {
    delete center_pos_;
  }
  center_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_clockwise_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(is_clockwise_));
  _internal_metadata_.Clear();
}

const char* Robot_AI_Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx_troop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_troop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.E_AIBehavior_Type ai_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ai_type(static_cast<::pb::map::E_AIBehavior_Type>(val));
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX center_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX start_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX end_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 alter_radius = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          alter_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_clockwise = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_clockwise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot_AI_Model::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Robot_AI_Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // uint32 idx_troop = 2;
  if (this->idx_troop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idx_troop(), target);
  }

  // .pb.map.E_AIBehavior_Type ai_type = 3;
  if (this->ai_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ai_type(), target);
  }

  // .pb.map.HEX center_pos = 4;
  if (this->has_center_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::center_pos(this), target, stream);
  }

  // .pb.map.HEX start_pos = 5;
  if (this->has_start_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::start_pos(this), target, stream);
  }

  // .pb.map.HEX end_pos = 6;
  if (this->has_end_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::end_pos(this), target, stream);
  }

  // int32 alter_radius = 7;
  if (this->alter_radius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_alter_radius(), target);
  }

  // bool is_clockwise = 8;
  if (this->is_clockwise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_clockwise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Robot_AI_Model)
  return target;
}

size_t Robot_AI_Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Robot_AI_Model)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX center_pos = 4;
  if (this->has_center_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_pos_);
  }

  // .pb.map.HEX start_pos = 5;
  if (this->has_start_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_pos_);
  }

  // .pb.map.HEX end_pos = 6;
  if (this->has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // uint32 idx_troop = 2;
  if (this->idx_troop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx_troop());
  }

  // .pb.map.E_AIBehavior_Type ai_type = 3;
  if (this->ai_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ai_type());
  }

  // int32 alter_radius = 7;
  if (this->alter_radius() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_alter_radius());
  }

  // bool is_clockwise = 8;
  if (this->is_clockwise() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot_AI_Model::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Robot_AI_Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_AI_Model* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot_AI_Model>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Robot_AI_Model)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Robot_AI_Model)
    MergeFrom(*source);
  }
}

void Robot_AI_Model::MergeFrom(const Robot_AI_Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Robot_AI_Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center_pos()) {
    _internal_mutable_center_pos()->::pb::map::HEX::MergeFrom(from._internal_center_pos());
  }
  if (from.has_start_pos()) {
    _internal_mutable_start_pos()->::pb::map::HEX::MergeFrom(from._internal_start_pos());
  }
  if (from.has_end_pos()) {
    _internal_mutable_end_pos()->::pb::map::HEX::MergeFrom(from._internal_end_pos());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.idx_troop() != 0) {
    _internal_set_idx_troop(from._internal_idx_troop());
  }
  if (from.ai_type() != 0) {
    _internal_set_ai_type(from._internal_ai_type());
  }
  if (from.alter_radius() != 0) {
    _internal_set_alter_radius(from._internal_alter_radius());
  }
  if (from.is_clockwise() != 0) {
    _internal_set_is_clockwise(from._internal_is_clockwise());
  }
}

void Robot_AI_Model::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Robot_AI_Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_AI_Model::CopyFrom(const Robot_AI_Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Robot_AI_Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_AI_Model::IsInitialized() const {
  return true;
}

void Robot_AI_Model::InternalSwap(Robot_AI_Model* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(center_pos_, other->center_pos_);
  swap(start_pos_, other->start_pos_);
  swap(end_pos_, other->end_pos_);
  swap(error_code_, other->error_code_);
  swap(idx_troop_, other->idx_troop_);
  swap(ai_type_, other->ai_type_);
  swap(alter_radius_, other->alter_radius_);
  swap(is_clockwise_, other->is_clockwise_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_AI_Model::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Troop_Path_Query::InitAsDefaultInstance() {
  ::pb::map::_Troop_Path_Query_default_instance_._instance.get_mutable()->end_pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Troop_Path_Query::_Internal {
 public:
  static const ::pb::map::HEX& end_pos(const Troop_Path_Query* msg);
};

const ::pb::map::HEX&
Troop_Path_Query::_Internal::end_pos(const Troop_Path_Query* msg) {
  return *msg->end_pos_;
}
Troop_Path_Query::Troop_Path_Query()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Troop_Path_Query)
}
Troop_Path_Query::Troop_Path_Query(const Troop_Path_Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_end_pos()) {
    end_pos_ = new ::pb::map::HEX(*from.end_pos_);
  } else {
    end_pos_ = nullptr;
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_cmd_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(sub_cmd_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Troop_Path_Query)
}

void Troop_Path_Query::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Troop_Path_Query_map_2eproto.base);
  ::memset(&end_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_cmd_) -
      reinterpret_cast<char*>(&end_pos_)) + sizeof(sub_cmd_));
}

Troop_Path_Query::~Troop_Path_Query() {
  // @@protoc_insertion_point(destructor:pb.map.Troop_Path_Query)
  SharedDtor();
}

void Troop_Path_Query::SharedDtor() {
  if (this != internal_default_instance()) delete end_pos_;
}

void Troop_Path_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Troop_Path_Query& Troop_Path_Query::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Troop_Path_Query_map_2eproto.base);
  return *internal_default_instance();
}


void Troop_Path_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Troop_Path_Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_cmd_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(sub_cmd_));
  _internal_metadata_.Clear();
}

const char* Troop_Path_Query::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX end_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx_troop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_troop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.E_Map_CMD sub_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sub_cmd(static_cast<::pb::map::E_Map_CMD>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Troop_Path_Query::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Troop_Path_Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // .pb.map.HEX end_pos = 2;
  if (this->has_end_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_pos(this), target, stream);
  }

  // uint32 idx_troop = 3;
  if (this->idx_troop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_idx_troop(), target);
  }

  // .pb.map.E_Map_CMD sub_cmd = 4;
  if (this->sub_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sub_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Troop_Path_Query)
  return target;
}

size_t Troop_Path_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Troop_Path_Query)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX end_pos = 2;
  if (this->has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // uint32 idx_troop = 3;
  if (this->idx_troop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx_troop());
  }

  // .pb.map.E_Map_CMD sub_cmd = 4;
  if (this->sub_cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Troop_Path_Query::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Troop_Path_Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Troop_Path_Query* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Troop_Path_Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Troop_Path_Query)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Troop_Path_Query)
    MergeFrom(*source);
  }
}

void Troop_Path_Query::MergeFrom(const Troop_Path_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Troop_Path_Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end_pos()) {
    _internal_mutable_end_pos()->::pb::map::HEX::MergeFrom(from._internal_end_pos());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.idx_troop() != 0) {
    _internal_set_idx_troop(from._internal_idx_troop());
  }
  if (from.sub_cmd() != 0) {
    _internal_set_sub_cmd(from._internal_sub_cmd());
  }
}

void Troop_Path_Query::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Troop_Path_Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Troop_Path_Query::CopyFrom(const Troop_Path_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Troop_Path_Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Troop_Path_Query::IsInitialized() const {
  return true;
}

void Troop_Path_Query::InternalSwap(Troop_Path_Query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(end_pos_, other->end_pos_);
  swap(error_code_, other->error_code_);
  swap(idx_troop_, other->idx_troop_);
  swap(sub_cmd_, other->sub_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Troop_Path_Query::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obstacle_Path::InitAsDefaultInstance() {
  ::pb::map::_Obstacle_Path_default_instance_._instance.get_mutable()->obstacle_pt_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Obstacle_Path::_Internal {
 public:
  static const ::pb::map::HEX& obstacle_pt(const Obstacle_Path* msg);
};

const ::pb::map::HEX&
Obstacle_Path::_Internal::obstacle_pt(const Obstacle_Path* msg) {
  return *msg->obstacle_pt_;
}
Obstacle_Path::Obstacle_Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Obstacle_Path)
}
Obstacle_Path::Obstacle_Path(const Obstacle_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_startobs_(from.vec_startobs_),
      vec_endobs_(from.vec_endobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obstacle_pt()) {
    obstacle_pt_ = new ::pb::map::HEX(*from.obstacle_pt_);
  } else {
    obstacle_pt_ = nullptr;
  }
  troop_id_ = from.troop_id_;
  // @@protoc_insertion_point(copy_constructor:pb.map.Obstacle_Path)
}

void Obstacle_Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacle_Path_map_2eproto.base);
  ::memset(&obstacle_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&troop_id_) -
      reinterpret_cast<char*>(&obstacle_pt_)) + sizeof(troop_id_));
}

Obstacle_Path::~Obstacle_Path() {
  // @@protoc_insertion_point(destructor:pb.map.Obstacle_Path)
  SharedDtor();
}

void Obstacle_Path::SharedDtor() {
  if (this != internal_default_instance()) delete obstacle_pt_;
}

void Obstacle_Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle_Path& Obstacle_Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_Path_map_2eproto.base);
  return *internal_default_instance();
}


void Obstacle_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Obstacle_Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_startobs_.Clear();
  vec_endobs_.Clear();
  if (GetArenaNoVirtual() == nullptr && obstacle_pt_ != nullptr) {
    delete obstacle_pt_;
  }
  obstacle_pt_ = nullptr;
  troop_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Obstacle_Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 troop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          troop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX obstacle_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.HEX vec_startobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_startobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.HEX vec_endobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_endobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacle_Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Obstacle_Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 troop_id = 1;
  if (this->troop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_troop_id(), target);
  }

  // .pb.map.HEX obstacle_pt = 2;
  if (this->has_obstacle_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obstacle_pt(this), target, stream);
  }

  // repeated .pb.map.HEX vec_startobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_startobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vec_startobs(i), target, stream);
  }

  // repeated .pb.map.HEX vec_endobs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_endobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vec_endobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Obstacle_Path)
  return target;
}

size_t Obstacle_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Obstacle_Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.HEX vec_startobs = 3;
  total_size += 1UL * this->_internal_vec_startobs_size();
  for (const auto& msg : this->vec_startobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.HEX vec_endobs = 4;
  total_size += 1UL * this->_internal_vec_endobs_size();
  for (const auto& msg : this->vec_endobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.map.HEX obstacle_pt = 2;
  if (this->has_obstacle_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obstacle_pt_);
  }

  // int32 troop_id = 1;
  if (this->troop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_troop_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle_Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Obstacle_Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle_Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacle_Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Obstacle_Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Obstacle_Path)
    MergeFrom(*source);
  }
}

void Obstacle_Path::MergeFrom(const Obstacle_Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Obstacle_Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_startobs_.MergeFrom(from.vec_startobs_);
  vec_endobs_.MergeFrom(from.vec_endobs_);
  if (from.has_obstacle_pt()) {
    _internal_mutable_obstacle_pt()->::pb::map::HEX::MergeFrom(from._internal_obstacle_pt());
  }
  if (from.troop_id() != 0) {
    _internal_set_troop_id(from._internal_troop_id());
  }
}

void Obstacle_Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Obstacle_Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle_Path::CopyFrom(const Obstacle_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Obstacle_Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle_Path::IsInitialized() const {
  return true;
}

void Obstacle_Path::InternalSwap(Obstacle_Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_startobs_.InternalSwap(&other->vec_startobs_);
  vec_endobs_.InternalSwap(&other->vec_endobs_);
  swap(obstacle_pt_, other->obstacle_pt_);
  swap(troop_id_, other->troop_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle_Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void March_Path::InitAsDefaultInstance() {
}
class March_Path::_Internal {
 public:
};

March_Path::March_Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.March_Path)
}
March_Path::March_Path(const March_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_path_(from.vec_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&troop_id_, &from.troop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&troop_id_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:pb.map.March_Path)
}

void March_Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_March_Path_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&troop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&troop_id_)) + sizeof(speed_));
}

March_Path::~March_Path() {
  // @@protoc_insertion_point(destructor:pb.map.March_Path)
  SharedDtor();
}

void March_Path::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void March_Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const March_Path& March_Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_March_Path_map_2eproto.base);
  return *internal_default_instance();
}


void March_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.March_Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_path_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&troop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&troop_id_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

const char* March_Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 troop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          troop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 soldier_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          soldier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.map.March_Path.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx_troop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idx_troop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.HEX vec_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 end_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* March_Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.March_Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 troop_id = 1;
  if (this->troop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_troop_id(), target);
  }

  // uint32 hero_id = 2;
  if (this->hero_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // uint32 soldier_id = 3;
  if (this->soldier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_soldier_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.map.March_Path.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint32 idx_troop = 5;
  if (this->idx_troop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_idx_troop(), target);
  }

  // uint32 speed = 6;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_speed(), target);
  }

  // repeated .pb.map.HEX vec_path = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_vec_path(i), target, stream);
  }

  // int64 end_time = 8;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.March_Path)
  return target;
}

size_t March_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.March_Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.HEX vec_path = 7;
  total_size += 1UL * this->_internal_vec_path_size();
  for (const auto& msg : this->vec_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 troop_id = 1;
  if (this->troop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_troop_id());
  }

  // uint32 hero_id = 2;
  if (this->hero_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hero_id());
  }

  // uint32 soldier_id = 3;
  if (this->soldier_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_soldier_id());
  }

  // uint32 idx_troop = 5;
  if (this->idx_troop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx_troop());
  }

  // int64 end_time = 8;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // uint32 speed = 6;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void March_Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.March_Path)
  GOOGLE_DCHECK_NE(&from, this);
  const March_Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<March_Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.March_Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.March_Path)
    MergeFrom(*source);
  }
}

void March_Path::MergeFrom(const March_Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.March_Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_path_.MergeFrom(from.vec_path_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.troop_id() != 0) {
    _internal_set_troop_id(from._internal_troop_id());
  }
  if (from.hero_id() != 0) {
    _internal_set_hero_id(from._internal_hero_id());
  }
  if (from.soldier_id() != 0) {
    _internal_set_soldier_id(from._internal_soldier_id());
  }
  if (from.idx_troop() != 0) {
    _internal_set_idx_troop(from._internal_idx_troop());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
}

void March_Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.March_Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void March_Path::CopyFrom(const March_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.March_Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool March_Path::IsInitialized() const {
  return true;
}

void March_Path::InternalSwap(March_Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_path_.InternalSwap(&other->vec_path_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(troop_id_, other->troop_id_);
  swap(hero_id_, other->hero_id_);
  swap(soldier_id_, other->soldier_id_);
  swap(idx_troop_, other->idx_troop_);
  swap(end_time_, other->end_time_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata March_Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ranking::InitAsDefaultInstance() {
}
class Ranking::_Internal {
 public:
};

Ranking::Ranking()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Ranking)
}
Ranking::Ranking(const Ranking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:pb.map.Ranking)
}

void Ranking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ranking_map_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
}

Ranking::~Ranking() {
  // @@protoc_insertion_point(destructor:pb.map.Ranking)
  SharedDtor();
}

void Ranking::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ranking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ranking& Ranking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ranking_map_2eproto.base);
  return *internal_default_instance();
}


void Ranking::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Ranking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  _internal_metadata_.Clear();
}

const char* Ranking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.map.Ranking.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ranking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Ranking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.map.Ranking.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Ranking)
  return target;
}

size_t Ranking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Ranking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ranking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  const Ranking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ranking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Ranking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Ranking)
    MergeFrom(*source);
  }
}

void Ranking::MergeFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Ranking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ranking::CopyFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ranking::IsInitialized() const {
  return true;
}

void Ranking::InternalSwap(Ranking* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ranking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_Building::InitAsDefaultInstance() {
  ::pb::map::_Map_Building_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Map_Building::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Map_Building* msg);
};

const ::pb::map::HEX&
Map_Building::_Internal::pos(const Map_Building* msg) {
  return *msg->pos_;
}
Map_Building::Map_Building()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Map_Building)
}
Map_Building::Map_Building(const Map_Building& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      first_kill_top_three_(from.first_kill_top_three_),
      first_siege_top_three_(from.first_siege_top_three_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&protect_flag_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(protect_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Map_Building)
}

void Map_Building::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_Building_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protect_flag_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(protect_flag_));
}

Map_Building::~Map_Building() {
  // @@protoc_insertion_point(destructor:pb.map.Map_Building)
  SharedDtor();
}

void Map_Building::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void Map_Building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_Building& Map_Building::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_Building_map_2eproto.base);
  return *internal_default_instance();
}


void Map_Building::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Map_Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_kill_top_three_.Clear();
  first_siege_top_three_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protect_flag_) -
      reinterpret_cast<char*>(&owner_id_)) + sizeof(protect_flag_));
  _internal_metadata_.Clear();
}

const char* Map_Building::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skin_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 life = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 life_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          life_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 troop_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          troop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 reset_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 avoid_battle_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          avoid_battle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 close_city_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          close_city_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Ranking first_kill_top_three = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_kill_top_three(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Ranking first_siege_top_three = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_siege_top_three(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 guildid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.map.Map_Building.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 buildingeye = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          buildingeye_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 protect_flag = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          protect_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_Building::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Map_Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 owner_id = 1;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_owner_id(), target);
  }

  // uint32 skin_id = 2;
  if (this->skin_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skin_id(), target);
  }

  // .pb.map.HEX pos = 3;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  // uint32 life = 6;
  if (this->life() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_life(), target);
  }

  // uint32 life_max = 7;
  if (this->life_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_life_max(), target);
  }

  // uint32 troop_num = 8;
  if (this->troop_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_troop_num(), target);
  }

  // int64 reset_time = 9;
  if (this->reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_reset_time(), target);
  }

  // int64 avoid_battle_time = 10;
  if (this->avoid_battle_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_avoid_battle_time(), target);
  }

  // int64 close_city_time = 11;
  if (this->close_city_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_close_city_time(), target);
  }

  // repeated .pb.map.Ranking first_kill_top_three = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_kill_top_three_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_first_kill_top_three(i), target, stream);
  }

  // repeated .pb.map.Ranking first_siege_top_three = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_siege_top_three_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_first_siege_top_three(i), target, stream);
  }

  // uint32 guildid = 14;
  if (this->guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_guildid(), target);
  }

  // uint32 level = 15;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_level(), target);
  }

  // string name = 16;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.map.Map_Building.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  // uint32 buildingeye = 17;
  if (this->buildingeye() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_buildingeye(), target);
  }

  // uint32 protect_flag = 18;
  if (this->protect_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_protect_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Map_Building)
  return target;
}

size_t Map_Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Map_Building)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.Ranking first_kill_top_three = 12;
  total_size += 1UL * this->_internal_first_kill_top_three_size();
  for (const auto& msg : this->first_kill_top_three_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.Ranking first_siege_top_three = 13;
  total_size += 1UL * this->_internal_first_siege_top_three_size();
  for (const auto& msg : this->first_siege_top_three_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 16;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.map.HEX pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int64 owner_id = 1;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_owner_id());
  }

  // uint32 skin_id = 2;
  if (this->skin_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skin_id());
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // int32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // uint32 life = 6;
  if (this->life() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_life());
  }

  // uint32 life_max = 7;
  if (this->life_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_life_max());
  }

  // uint32 troop_num = 8;
  if (this->troop_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_troop_num());
  }

  // int64 reset_time = 9;
  if (this->reset_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_reset_time());
  }

  // int64 avoid_battle_time = 10;
  if (this->avoid_battle_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_avoid_battle_time());
  }

  // int64 close_city_time = 11;
  if (this->close_city_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_close_city_time());
  }

  // uint32 guildid = 14;
  if (this->guildid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guildid());
  }

  // uint32 level = 15;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  // uint32 buildingeye = 17;
  if (this->buildingeye() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buildingeye());
  }

  // uint32 protect_flag = 18;
  if (this->protect_flag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protect_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_Building::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Map_Building)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_Building* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_Building>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Map_Building)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Map_Building)
    MergeFrom(*source);
  }
}

void Map_Building::MergeFrom(const Map_Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Map_Building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_kill_top_three_.MergeFrom(from.first_kill_top_three_);
  first_siege_top_three_.MergeFrom(from.first_siege_top_three_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.skin_id() != 0) {
    _internal_set_skin_id(from._internal_skin_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.life() != 0) {
    _internal_set_life(from._internal_life());
  }
  if (from.life_max() != 0) {
    _internal_set_life_max(from._internal_life_max());
  }
  if (from.troop_num() != 0) {
    _internal_set_troop_num(from._internal_troop_num());
  }
  if (from.reset_time() != 0) {
    _internal_set_reset_time(from._internal_reset_time());
  }
  if (from.avoid_battle_time() != 0) {
    _internal_set_avoid_battle_time(from._internal_avoid_battle_time());
  }
  if (from.close_city_time() != 0) {
    _internal_set_close_city_time(from._internal_close_city_time());
  }
  if (from.guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.buildingeye() != 0) {
    _internal_set_buildingeye(from._internal_buildingeye());
  }
  if (from.protect_flag() != 0) {
    _internal_set_protect_flag(from._internal_protect_flag());
  }
}

void Map_Building::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Map_Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_Building::CopyFrom(const Map_Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Map_Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_Building::IsInitialized() const {
  return true;
}

void Map_Building::InternalSwap(Map_Building* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  first_kill_top_three_.InternalSwap(&other->first_kill_top_three_);
  first_siege_top_three_.InternalSwap(&other->first_siege_top_three_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(owner_id_, other->owner_id_);
  swap(skin_id_, other->skin_id_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(life_, other->life_);
  swap(life_max_, other->life_max_);
  swap(troop_num_, other->troop_num_);
  swap(reset_time_, other->reset_time_);
  swap(avoid_battle_time_, other->avoid_battle_time_);
  swap(close_city_time_, other->close_city_time_);
  swap(guildid_, other->guildid_);
  swap(level_, other->level_);
  swap(buildingeye_, other->buildingeye_);
  swap(protect_flag_, other->protect_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_Building::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_Troop::InitAsDefaultInstance() {
  ::pb::map::_Map_Troop_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Map_Troop::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Map_Troop* msg);
};

const ::pb::map::HEX&
Map_Troop::_Internal::pos(const Map_Troop* msg) {
  return *msg->pos_;
}
Map_Troop::Map_Troop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Map_Troop)
}
Map_Troop::Map_Troop(const Map_Troop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_path_(from.vec_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_troop_id_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(dst_troop_id_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Map_Troop)
}

void Map_Troop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_Troop_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_troop_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(dst_troop_id_));
}

Map_Troop::~Map_Troop() {
  // @@protoc_insertion_point(destructor:pb.map.Map_Troop)
  SharedDtor();
}

void Map_Troop::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Map_Troop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_Troop& Map_Troop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_Troop_map_2eproto.base);
  return *internal_default_instance();
}


void Map_Troop::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Map_Troop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_path_.Clear();
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_troop_id_) -
      reinterpret_cast<char*>(&owner_id_)) + sizeof(dst_troop_id_));
  _internal_metadata_.Clear();
}

const char* Map_Troop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 troop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          troop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 soldier_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          soldier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx_curpath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          idx_curpath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.HEX vec_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 end_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 morale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          morale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 protect_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          protect_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dst_troop_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          dst_troop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_Troop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Map_Troop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 troop_id = 1;
  if (this->troop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_troop_id(), target);
  }

  // int64 owner_id = 2;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_owner_id(), target);
  }

  // uint32 soldier_id = 3;
  if (this->soldier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_soldier_id(), target);
  }

  // .pb.map.HEX pos = 4;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos(this), target, stream);
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  // uint32 idx_curpath = 6;
  if (this->idx_curpath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_idx_curpath(), target);
  }

  // uint32 time = 7;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_time(), target);
  }

  // uint32 speed = 8;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_speed(), target);
  }

  // repeated .pb.map.HEX vec_path = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_vec_path(i), target, stream);
  }

  // int64 end_time = 10;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_end_time(), target);
  }

  // uint32 morale = 11;
  if (this->morale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_morale(), target);
  }

  // uint32 protect_flag = 12;
  if (this->protect_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_protect_flag(), target);
  }

  // int32 dst_troop_id = 13;
  if (this->dst_troop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_dst_troop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Map_Troop)
  return target;
}

size_t Map_Troop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Map_Troop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.HEX vec_path = 9;
  total_size += 1UL * this->_internal_vec_path_size();
  for (const auto& msg : this->vec_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.map.HEX pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int64 owner_id = 2;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_owner_id());
  }

  // int32 troop_id = 1;
  if (this->troop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_troop_id());
  }

  // uint32 soldier_id = 3;
  if (this->soldier_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_soldier_id());
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  // uint32 idx_curpath = 6;
  if (this->idx_curpath() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx_curpath());
  }

  // uint32 time = 7;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // uint32 speed = 8;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed());
  }

  // int64 end_time = 10;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // uint32 morale = 11;
  if (this->morale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_morale());
  }

  // uint32 protect_flag = 12;
  if (this->protect_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protect_flag());
  }

  // int32 dst_troop_id = 13;
  if (this->dst_troop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dst_troop_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_Troop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Map_Troop)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_Troop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_Troop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Map_Troop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Map_Troop)
    MergeFrom(*source);
  }
}

void Map_Troop::MergeFrom(const Map_Troop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Map_Troop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_path_.MergeFrom(from.vec_path_);
  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.troop_id() != 0) {
    _internal_set_troop_id(from._internal_troop_id());
  }
  if (from.soldier_id() != 0) {
    _internal_set_soldier_id(from._internal_soldier_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.idx_curpath() != 0) {
    _internal_set_idx_curpath(from._internal_idx_curpath());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.morale() != 0) {
    _internal_set_morale(from._internal_morale());
  }
  if (from.protect_flag() != 0) {
    _internal_set_protect_flag(from._internal_protect_flag());
  }
  if (from.dst_troop_id() != 0) {
    _internal_set_dst_troop_id(from._internal_dst_troop_id());
  }
}

void Map_Troop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Map_Troop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_Troop::CopyFrom(const Map_Troop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Map_Troop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_Troop::IsInitialized() const {
  return true;
}

void Map_Troop::InternalSwap(Map_Troop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_path_.InternalSwap(&other->vec_path_);
  swap(pos_, other->pos_);
  swap(owner_id_, other->owner_id_);
  swap(troop_id_, other->troop_id_);
  swap(soldier_id_, other->soldier_id_);
  swap(status_, other->status_);
  swap(idx_curpath_, other->idx_curpath_);
  swap(time_, other->time_);
  swap(speed_, other->speed_);
  swap(end_time_, other->end_time_);
  swap(morale_, other->morale_);
  swap(protect_flag_, other->protect_flag_);
  swap(dst_troop_id_, other->dst_troop_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_Troop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_Field::InitAsDefaultInstance() {
  ::pb::map::_Map_Field_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Map_Field::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Map_Field* msg);
};

const ::pb::map::HEX&
Map_Field::_Internal::pos(const Map_Field* msg) {
  return *msg->pos_;
}
Map_Field::Map_Field()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Map_Field)
}
Map_Field::Map_Field(const Map_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&protect_flag_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(protect_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Map_Field)
}

void Map_Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_Field_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protect_flag_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(protect_flag_));
}

Map_Field::~Map_Field() {
  // @@protoc_insertion_point(destructor:pb.map.Map_Field)
  SharedDtor();
}

void Map_Field::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Map_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_Field& Map_Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_Field_map_2eproto.base);
  return *internal_default_instance();
}


void Map_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Map_Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protect_flag_) -
      reinterpret_cast<char*>(&owner_id_)) + sizeof(protect_flag_));
  _internal_metadata_.Clear();
}

const char* Map_Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          field_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FinishTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          finishtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 protect_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          protect_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_Field::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Map_Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 owner_id = 1;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_owner_id(), target);
  }

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // int32 field_id = 3;
  if (this->field_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_field_id(), target);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // uint32 Status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  // uint32 FinishTime = 6;
  if (this->finishtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_finishtime(), target);
  }

  // uint32 protect_flag = 7;
  if (this->protect_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_protect_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Map_Field)
  return target;
}

size_t Map_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Map_Field)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int64 owner_id = 1;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_owner_id());
  }

  // int32 field_id = 3;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_id());
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 Status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  // uint32 FinishTime = 6;
  if (this->finishtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_finishtime());
  }

  // uint32 protect_flag = 7;
  if (this->protect_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protect_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_Field::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Map_Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_Field* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Map_Field)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Map_Field)
    MergeFrom(*source);
  }
}

void Map_Field::MergeFrom(const Map_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Map_Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.field_id() != 0) {
    _internal_set_field_id(from._internal_field_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.finishtime() != 0) {
    _internal_set_finishtime(from._internal_finishtime());
  }
  if (from.protect_flag() != 0) {
    _internal_set_protect_flag(from._internal_protect_flag());
  }
}

void Map_Field::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Map_Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_Field::CopyFrom(const Map_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Map_Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_Field::IsInitialized() const {
  return true;
}

void Map_Field::InternalSwap(Map_Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(owner_id_, other->owner_id_);
  swap(field_id_, other->field_id_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(finishtime_, other->finishtime_);
  swap(protect_flag_, other->protect_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_Field::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_RecoverField::InitAsDefaultInstance() {
  ::pb::map::_Map_RecoverField_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Map_RecoverField::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Map_RecoverField* msg);
};

const ::pb::map::HEX&
Map_RecoverField::_Internal::pos(const Map_RecoverField* msg) {
  return *msg->pos_;
}
Map_RecoverField::Map_RecoverField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Map_RecoverField)
}
Map_RecoverField::Map_RecoverField(const Map_RecoverField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&atk_user_id_, &from.atk_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&atk_user_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Map_RecoverField)
}

void Map_RecoverField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_RecoverField_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(end_time_));
}

Map_RecoverField::~Map_RecoverField() {
  // @@protoc_insertion_point(destructor:pb.map.Map_RecoverField)
  SharedDtor();
}

void Map_RecoverField::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Map_RecoverField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_RecoverField& Map_RecoverField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_RecoverField_map_2eproto.base);
  return *internal_default_instance();
}


void Map_RecoverField::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Map_RecoverField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&atk_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&atk_user_id_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

const char* Map_RecoverField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.map.HEX pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 atk_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          atk_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_RecoverField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Map_RecoverField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // int64 atk_user_id = 2;
  if (this->atk_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_atk_user_id(), target);
  }

  // int64 end_time = 3;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Map_RecoverField)
  return target;
}

size_t Map_RecoverField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Map_RecoverField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int64 atk_user_id = 2;
  if (this->atk_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_atk_user_id());
  }

  // int64 end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_RecoverField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Map_RecoverField)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_RecoverField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_RecoverField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Map_RecoverField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Map_RecoverField)
    MergeFrom(*source);
  }
}

void Map_RecoverField::MergeFrom(const Map_RecoverField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Map_RecoverField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.atk_user_id() != 0) {
    _internal_set_atk_user_id(from._internal_atk_user_id());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void Map_RecoverField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Map_RecoverField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_RecoverField::CopyFrom(const Map_RecoverField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Map_RecoverField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_RecoverField::IsInitialized() const {
  return true;
}

void Map_RecoverField::InternalSwap(Map_RecoverField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(atk_user_id_, other->atk_user_id_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_RecoverField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_WildNpcTroop::InitAsDefaultInstance() {
  ::pb::map::_Map_WildNpcTroop_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Map_WildNpcTroop::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Map_WildNpcTroop* msg);
};

const ::pb::map::HEX&
Map_WildNpcTroop::_Internal::pos(const Map_WildNpcTroop* msg) {
  return *msg->pos_;
}
Map_WildNpcTroop::Map_WildNpcTroop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Map_WildNpcTroop)
}
Map_WildNpcTroop::Map_WildNpcTroop(const Map_WildNpcTroop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Map_WildNpcTroop)
}

void Map_WildNpcTroop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_WildNpcTroop_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(status_));
}

Map_WildNpcTroop::~Map_WildNpcTroop() {
  // @@protoc_insertion_point(destructor:pb.map.Map_WildNpcTroop)
  SharedDtor();
}

void Map_WildNpcTroop::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Map_WildNpcTroop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_WildNpcTroop& Map_WildNpcTroop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_WildNpcTroop_map_2eproto.base);
  return *internal_default_instance();
}


void Map_WildNpcTroop::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Map_WildNpcTroop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* Map_WildNpcTroop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wild_npc_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wild_npc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 disappear_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          disappear_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_WildNpcTroop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Map_WildNpcTroop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // int32 wild_npc_id = 3;
  if (this->wild_npc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wild_npc_id(), target);
  }

  // int64 disappear_time = 4;
  if (this->disappear_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_disappear_time(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Map_WildNpcTroop)
  return target;
}

size_t Map_WildNpcTroop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Map_WildNpcTroop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // int32 wild_npc_id = 3;
  if (this->wild_npc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wild_npc_id());
  }

  // int64 disappear_time = 4;
  if (this->disappear_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_disappear_time());
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_WildNpcTroop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Map_WildNpcTroop)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_WildNpcTroop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_WildNpcTroop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Map_WildNpcTroop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Map_WildNpcTroop)
    MergeFrom(*source);
  }
}

void Map_WildNpcTroop::MergeFrom(const Map_WildNpcTroop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Map_WildNpcTroop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.wild_npc_id() != 0) {
    _internal_set_wild_npc_id(from._internal_wild_npc_id());
  }
  if (from.disappear_time() != 0) {
    _internal_set_disappear_time(from._internal_disappear_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Map_WildNpcTroop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Map_WildNpcTroop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_WildNpcTroop::CopyFrom(const Map_WildNpcTroop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Map_WildNpcTroop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_WildNpcTroop::IsInitialized() const {
  return true;
}

void Map_WildNpcTroop::InternalSwap(Map_WildNpcTroop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(id_, other->id_);
  swap(wild_npc_id_, other->wild_npc_id_);
  swap(disappear_time_, other->disappear_time_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_WildNpcTroop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_WildBuilding::InitAsDefaultInstance() {
  ::pb::map::_Map_WildBuilding_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Map_WildBuilding::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Map_WildBuilding* msg);
};

const ::pb::map::HEX&
Map_WildBuilding::_Internal::pos(const Map_WildBuilding* msg) {
  return *msg->pos_;
}
Map_WildBuilding::Map_WildBuilding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Map_WildBuilding)
}
Map_WildBuilding::Map_WildBuilding(const Map_WildBuilding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disappear_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(disappear_time_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Map_WildBuilding)
}

void Map_WildBuilding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_WildBuilding_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disappear_time_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(disappear_time_));
}

Map_WildBuilding::~Map_WildBuilding() {
  // @@protoc_insertion_point(destructor:pb.map.Map_WildBuilding)
  SharedDtor();
}

void Map_WildBuilding::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Map_WildBuilding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_WildBuilding& Map_WildBuilding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_WildBuilding_map_2eproto.base);
  return *internal_default_instance();
}


void Map_WildBuilding::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Map_WildBuilding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disappear_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(disappear_time_));
  _internal_metadata_.Clear();
}

const char* Map_WildBuilding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 troop_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          troop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 life = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 life_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          life_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disappear_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          disappear_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_WildBuilding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Map_WildBuilding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // uint32 troop_num = 5;
  if (this->troop_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_troop_num(), target);
  }

  // uint32 life = 6;
  if (this->life() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_life(), target);
  }

  // uint32 life_max = 7;
  if (this->life_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_life_max(), target);
  }

  // int32 disappear_time = 8;
  if (this->disappear_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_disappear_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Map_WildBuilding)
  return target;
}

size_t Map_WildBuilding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Map_WildBuilding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  // uint32 troop_num = 5;
  if (this->troop_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_troop_num());
  }

  // uint32 life = 6;
  if (this->life() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_life());
  }

  // uint32 life_max = 7;
  if (this->life_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_life_max());
  }

  // int32 disappear_time = 8;
  if (this->disappear_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disappear_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_WildBuilding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Map_WildBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_WildBuilding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_WildBuilding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Map_WildBuilding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Map_WildBuilding)
    MergeFrom(*source);
  }
}

void Map_WildBuilding::MergeFrom(const Map_WildBuilding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Map_WildBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.troop_num() != 0) {
    _internal_set_troop_num(from._internal_troop_num());
  }
  if (from.life() != 0) {
    _internal_set_life(from._internal_life());
  }
  if (from.life_max() != 0) {
    _internal_set_life_max(from._internal_life_max());
  }
  if (from.disappear_time() != 0) {
    _internal_set_disappear_time(from._internal_disappear_time());
  }
}

void Map_WildBuilding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Map_WildBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_WildBuilding::CopyFrom(const Map_WildBuilding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Map_WildBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_WildBuilding::IsInitialized() const {
  return true;
}

void Map_WildBuilding::InternalSwap(Map_WildBuilding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(level_, other->level_);
  swap(troop_num_, other->troop_num_);
  swap(life_, other->life_);
  swap(life_max_, other->life_max_);
  swap(disappear_time_, other->disappear_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_WildBuilding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapUserData::InitAsDefaultInstance() {
}
class MapUserData::_Internal {
 public:
};

MapUserData::MapUserData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.MapUserData)
}
MapUserData::MapUserData(const MapUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&civilization_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(civilization_type_));
  // @@protoc_insertion_point(copy_constructor:pb.map.MapUserData)
}

void MapUserData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapUserData_map_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&civilization_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(civilization_type_));
}

MapUserData::~MapUserData() {
  // @@protoc_insertion_point(destructor:pb.map.MapUserData)
  SharedDtor();
}

void MapUserData::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapUserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapUserData& MapUserData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapUserData_map_2eproto.base);
  return *internal_default_instance();
}


void MapUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.MapUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&civilization_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(civilization_type_));
  _internal_metadata_.Clear();
}

const char* MapUserData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.map.MapUserData.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capture_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          capture_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guild_job = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          guild_job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 civilization_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          civilization_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapUserData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.MapUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.map.MapUserData.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // int32 guild_id = 3;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // int32 capture_id = 4;
  if (this->capture_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_capture_id(), target);
  }

  // int32 guild_job = 5;
  if (this->guild_job() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_guild_job(), target);
  }

  // int32 civilization_type = 6;
  if (this->civilization_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_civilization_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.MapUserData)
  return target;
}

size_t MapUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.MapUserData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 guild_id = 3;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guild_id());
  }

  // int32 capture_id = 4;
  if (this->capture_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capture_id());
  }

  // int32 guild_job = 5;
  if (this->guild_job() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guild_job());
  }

  // int32 civilization_type = 6;
  if (this->civilization_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_civilization_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapUserData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.MapUserData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapUserData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapUserData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.MapUserData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.MapUserData)
    MergeFrom(*source);
  }
}

void MapUserData::MergeFrom(const MapUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.MapUserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.capture_id() != 0) {
    _internal_set_capture_id(from._internal_capture_id());
  }
  if (from.guild_job() != 0) {
    _internal_set_guild_job(from._internal_guild_job());
  }
  if (from.civilization_type() != 0) {
    _internal_set_civilization_type(from._internal_civilization_type());
  }
}

void MapUserData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.MapUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapUserData::CopyFrom(const MapUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.MapUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapUserData::IsInitialized() const {
  return true;
}

void MapUserData::InternalSwap(MapUserData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(guild_id_, other->guild_id_);
  swap(capture_id_, other->capture_id_);
  swap(guild_job_, other->guild_job_);
  swap(civilization_type_, other->civilization_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapUserData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_Objs::InitAsDefaultInstance() {
}
class Map_Objs::_Internal {
 public:
};

Map_Objs::Map_Objs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Map_Objs)
}
Map_Objs::Map_Objs(const Map_Objs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_buildings_(from.vec_buildings_),
      vec_troops_(from.vec_troops_),
      vec_fields_(from.vec_fields_),
      vec_recoverfield_(from.vec_recoverfield_),
      vec_wild_npc_troop_(from.vec_wild_npc_troop_),
      vec_wild_building_(from.vec_wild_building_),
      vec_users_(from.vec_users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.map.Map_Objs)
}

void Map_Objs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_Objs_map_2eproto.base);
}

Map_Objs::~Map_Objs() {
  // @@protoc_insertion_point(destructor:pb.map.Map_Objs)
  SharedDtor();
}

void Map_Objs::SharedDtor() {
}

void Map_Objs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_Objs& Map_Objs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_Objs_map_2eproto.base);
  return *internal_default_instance();
}


void Map_Objs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Map_Objs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_buildings_.Clear();
  vec_troops_.Clear();
  vec_fields_.Clear();
  vec_recoverfield_.Clear();
  vec_wild_npc_troop_.Clear();
  vec_wild_building_.Clear();
  vec_users_.Clear();
  _internal_metadata_.Clear();
}

const char* Map_Objs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.map.Map_Building vec_buildings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Map_Troop vec_troops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_troops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Map_Field vec_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Map_RecoverField vec_recoverfield = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_recoverfield(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_wild_npc_troop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Map_WildBuilding vec_wild_building = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_wild_building(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.MapUserData vec_users = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_Objs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Map_Objs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.map.Map_Building vec_buildings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vec_buildings(i), target, stream);
  }

  // repeated .pb.map.Map_Troop vec_troops = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_troops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vec_troops(i), target, stream);
  }

  // repeated .pb.map.Map_Field vec_fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vec_fields(i), target, stream);
  }

  // repeated .pb.map.Map_RecoverField vec_recoverfield = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_recoverfield_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vec_recoverfield(i), target, stream);
  }

  // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_wild_npc_troop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vec_wild_npc_troop(i), target, stream);
  }

  // repeated .pb.map.Map_WildBuilding vec_wild_building = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_wild_building_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_vec_wild_building(i), target, stream);
  }

  // repeated .pb.map.MapUserData vec_users = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_vec_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Map_Objs)
  return target;
}

size_t Map_Objs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Map_Objs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.Map_Building vec_buildings = 1;
  total_size += 1UL * this->_internal_vec_buildings_size();
  for (const auto& msg : this->vec_buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.Map_Troop vec_troops = 2;
  total_size += 1UL * this->_internal_vec_troops_size();
  for (const auto& msg : this->vec_troops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.Map_Field vec_fields = 3;
  total_size += 1UL * this->_internal_vec_fields_size();
  for (const auto& msg : this->vec_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.Map_RecoverField vec_recoverfield = 4;
  total_size += 1UL * this->_internal_vec_recoverfield_size();
  for (const auto& msg : this->vec_recoverfield_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 5;
  total_size += 1UL * this->_internal_vec_wild_npc_troop_size();
  for (const auto& msg : this->vec_wild_npc_troop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.Map_WildBuilding vec_wild_building = 6;
  total_size += 1UL * this->_internal_vec_wild_building_size();
  for (const auto& msg : this->vec_wild_building_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.MapUserData vec_users = 7;
  total_size += 1UL * this->_internal_vec_users_size();
  for (const auto& msg : this->vec_users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_Objs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Map_Objs)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_Objs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_Objs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Map_Objs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Map_Objs)
    MergeFrom(*source);
  }
}

void Map_Objs::MergeFrom(const Map_Objs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Map_Objs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_buildings_.MergeFrom(from.vec_buildings_);
  vec_troops_.MergeFrom(from.vec_troops_);
  vec_fields_.MergeFrom(from.vec_fields_);
  vec_recoverfield_.MergeFrom(from.vec_recoverfield_);
  vec_wild_npc_troop_.MergeFrom(from.vec_wild_npc_troop_);
  vec_wild_building_.MergeFrom(from.vec_wild_building_);
  vec_users_.MergeFrom(from.vec_users_);
}

void Map_Objs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Map_Objs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_Objs::CopyFrom(const Map_Objs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Map_Objs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_Objs::IsInitialized() const {
  return true;
}

void Map_Objs::InternalSwap(Map_Objs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_buildings_.InternalSwap(&other->vec_buildings_);
  vec_troops_.InternalSwap(&other->vec_troops_);
  vec_fields_.InternalSwap(&other->vec_fields_);
  vec_recoverfield_.InternalSwap(&other->vec_recoverfield_);
  vec_wild_npc_troop_.InternalSwap(&other->vec_wild_npc_troop_);
  vec_wild_building_.InternalSwap(&other->vec_wild_building_);
  vec_users_.InternalSwap(&other->vec_users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_Objs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrivateNpc_Troop::InitAsDefaultInstance() {
  ::pb::map::_PrivateNpc_Troop_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class PrivateNpc_Troop::_Internal {
 public:
  static const ::pb::map::HEX& pos(const PrivateNpc_Troop* msg);
};

const ::pb::map::HEX&
PrivateNpc_Troop::_Internal::pos(const PrivateNpc_Troop* msg) {
  return *msg->pos_;
}
PrivateNpc_Troop::PrivateNpc_Troop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.PrivateNpc_Troop)
}
PrivateNpc_Troop::PrivateNpc_Troop(const PrivateNpc_Troop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_template_) -
    reinterpret_cast<char*>(&id_)) + sizeof(id_template_));
  // @@protoc_insertion_point(copy_constructor:pb.map.PrivateNpc_Troop)
}

void PrivateNpc_Troop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrivateNpc_Troop_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_template_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(id_template_));
}

PrivateNpc_Troop::~PrivateNpc_Troop() {
  // @@protoc_insertion_point(destructor:pb.map.PrivateNpc_Troop)
  SharedDtor();
}

void PrivateNpc_Troop::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void PrivateNpc_Troop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivateNpc_Troop& PrivateNpc_Troop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivateNpc_Troop_map_2eproto.base);
  return *internal_default_instance();
}


void PrivateNpc_Troop::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.PrivateNpc_Troop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_template_) -
      reinterpret_cast<char*>(&id_)) + sizeof(id_template_));
  _internal_metadata_.Clear();
}

const char* PrivateNpc_Troop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id_template = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_template_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivateNpc_Troop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.PrivateNpc_Troop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 id_template = 2;
  if (this->id_template() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id_template(), target);
  }

  // .pb.map.HEX pos = 3;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.PrivateNpc_Troop)
  return target;
}

size_t PrivateNpc_Troop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.PrivateNpc_Troop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 id_template = 2;
  if (this->id_template() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_template());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateNpc_Troop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.PrivateNpc_Troop)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateNpc_Troop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrivateNpc_Troop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.PrivateNpc_Troop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.PrivateNpc_Troop)
    MergeFrom(*source);
  }
}

void PrivateNpc_Troop::MergeFrom(const PrivateNpc_Troop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.PrivateNpc_Troop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.id_template() != 0) {
    _internal_set_id_template(from._internal_id_template());
  }
}

void PrivateNpc_Troop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.PrivateNpc_Troop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateNpc_Troop::CopyFrom(const PrivateNpc_Troop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.PrivateNpc_Troop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateNpc_Troop::IsInitialized() const {
  return true;
}

void PrivateNpc_Troop::InternalSwap(PrivateNpc_Troop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(id_, other->id_);
  swap(id_template_, other->id_template_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateNpc_Troop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Private_Map_Objs::InitAsDefaultInstance() {
}
class Private_Map_Objs::_Internal {
 public:
};

Private_Map_Objs::Private_Map_Objs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Private_Map_Objs)
}
Private_Map_Objs::Private_Map_Objs(const Private_Map_Objs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_troop_(from.vec_troop_),
      vec_wild_npc_troop_(from.vec_wild_npc_troop_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.map.Private_Map_Objs)
}

void Private_Map_Objs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Private_Map_Objs_map_2eproto.base);
}

Private_Map_Objs::~Private_Map_Objs() {
  // @@protoc_insertion_point(destructor:pb.map.Private_Map_Objs)
  SharedDtor();
}

void Private_Map_Objs::SharedDtor() {
}

void Private_Map_Objs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Private_Map_Objs& Private_Map_Objs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Private_Map_Objs_map_2eproto.base);
  return *internal_default_instance();
}


void Private_Map_Objs::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Private_Map_Objs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_troop_.Clear();
  vec_wild_npc_troop_.Clear();
  _internal_metadata_.Clear();
}

const char* Private_Map_Objs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.map.PrivateNpc_Troop vec_troop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_troop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_wild_npc_troop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Private_Map_Objs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Private_Map_Objs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.map.PrivateNpc_Troop vec_troop = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_troop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vec_troop(i), target, stream);
  }

  // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_wild_npc_troop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vec_wild_npc_troop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Private_Map_Objs)
  return target;
}

size_t Private_Map_Objs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Private_Map_Objs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.PrivateNpc_Troop vec_troop = 1;
  total_size += 1UL * this->_internal_vec_troop_size();
  for (const auto& msg : this->vec_troop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 2;
  total_size += 1UL * this->_internal_vec_wild_npc_troop_size();
  for (const auto& msg : this->vec_wild_npc_troop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Private_Map_Objs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Private_Map_Objs)
  GOOGLE_DCHECK_NE(&from, this);
  const Private_Map_Objs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Private_Map_Objs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Private_Map_Objs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Private_Map_Objs)
    MergeFrom(*source);
  }
}

void Private_Map_Objs::MergeFrom(const Private_Map_Objs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Private_Map_Objs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_troop_.MergeFrom(from.vec_troop_);
  vec_wild_npc_troop_.MergeFrom(from.vec_wild_npc_troop_);
}

void Private_Map_Objs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Private_Map_Objs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Private_Map_Objs::CopyFrom(const Private_Map_Objs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Private_Map_Objs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Private_Map_Objs::IsInitialized() const {
  return true;
}

void Private_Map_Objs::InternalSwap(Private_Map_Objs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_troop_.InternalSwap(&other->vec_troop_);
  vec_wild_npc_troop_.InternalSwap(&other->vec_wild_npc_troop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Private_Map_Objs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collect_Map_OP::InitAsDefaultInstance() {
  ::pb::map::_Collect_Map_OP_default_instance_._instance.get_mutable()->end_pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Collect_Map_OP::_Internal {
 public:
  static const ::pb::map::HEX& end_pos(const Collect_Map_OP* msg);
};

const ::pb::map::HEX&
Collect_Map_OP::_Internal::end_pos(const Collect_Map_OP* msg) {
  return *msg->end_pos_;
}
Collect_Map_OP::Collect_Map_OP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Collect_Map_OP)
}
Collect_Map_OP::Collect_Map_OP(const Collect_Map_OP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_end_pos()) {
    end_pos_ = new ::pb::map::HEX(*from.end_pos_);
  } else {
    end_pos_ = nullptr;
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Collect_Map_OP)
}

void Collect_Map_OP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collect_Map_OP_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&end_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&end_pos_)) + sizeof(errcode_));
}

Collect_Map_OP::~Collect_Map_OP() {
  // @@protoc_insertion_point(destructor:pb.map.Collect_Map_OP)
  SharedDtor();
}

void Collect_Map_OP::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete end_pos_;
}

void Collect_Map_OP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collect_Map_OP& Collect_Map_OP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collect_Map_OP_map_2eproto.base);
  return *internal_default_instance();
}


void Collect_Map_OP::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Collect_Map_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(errcode_));
  _internal_metadata_.Clear();
}

const char* Collect_Map_OP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX end_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.map.Collect_Map_OP.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collect_Map_OP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Collect_Map_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 errCode = 1;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // .pb.map.HEX end_pos = 2;
  if (this->has_end_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_pos(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.map.Collect_Map_OP.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int64 idx = 4;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Collect_Map_OP)
  return target;
}

size_t Collect_Map_OP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Collect_Map_OP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.map.HEX end_pos = 2;
  if (this->has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  // int64 idx = 4;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_idx());
  }

  // uint32 errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collect_Map_OP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Collect_Map_OP)
  GOOGLE_DCHECK_NE(&from, this);
  const Collect_Map_OP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collect_Map_OP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Collect_Map_OP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Collect_Map_OP)
    MergeFrom(*source);
  }
}

void Collect_Map_OP::MergeFrom(const Collect_Map_OP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Collect_Map_OP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_end_pos()) {
    _internal_mutable_end_pos()->::pb::map::HEX::MergeFrom(from._internal_end_pos());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void Collect_Map_OP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Collect_Map_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collect_Map_OP::CopyFrom(const Collect_Map_OP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Collect_Map_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collect_Map_OP::IsInitialized() const {
  return true;
}

void Collect_Map_OP::InternalSwap(Collect_Map_OP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(end_pos_, other->end_pos_);
  swap(idx_, other->idx_);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collect_Map_OP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Move_City::InitAsDefaultInstance() {
  ::pb::map::_Move_City_default_instance_._instance.get_mutable()->move_pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Move_City::_Internal {
 public:
  static const ::pb::map::HEX& move_pos(const Move_City* msg);
};

const ::pb::map::HEX&
Move_City::_Internal::move_pos(const Move_City* msg) {
  return *msg->move_pos_;
}
Move_City::Move_City()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Move_City)
}
Move_City::Move_City(const Move_City& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_move_pos()) {
    move_pos_ = new ::pb::map::HEX(*from.move_pos_);
  } else {
    move_pos_ = nullptr;
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Move_City)
}

void Move_City::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Move_City_map_2eproto.base);
  ::memset(&move_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&move_pos_)) + sizeof(idx_));
}

Move_City::~Move_City() {
  // @@protoc_insertion_point(destructor:pb.map.Move_City)
  SharedDtor();
}

void Move_City::SharedDtor() {
  if (this != internal_default_instance()) delete move_pos_;
}

void Move_City::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Move_City& Move_City::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Move_City_map_2eproto.base);
  return *internal_default_instance();
}


void Move_City::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Move_City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && move_pos_ != nullptr) {
    delete move_pos_;
  }
  move_pos_ = nullptr;
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(idx_));
  _internal_metadata_.Clear();
}

const char* Move_City::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX move_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Move_City::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Move_City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idx(), target);
  }

  // .pb.map.HEX move_pos = 3;
  if (this->has_move_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::move_pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Move_City)
  return target;
}

size_t Move_City::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Move_City)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX move_pos = 3;
  if (this->has_move_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *move_pos_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Move_City::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Move_City)
  GOOGLE_DCHECK_NE(&from, this);
  const Move_City* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Move_City>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Move_City)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Move_City)
    MergeFrom(*source);
  }
}

void Move_City::MergeFrom(const Move_City& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Move_City)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_move_pos()) {
    _internal_mutable_move_pos()->::pb::map::HEX::MergeFrom(from._internal_move_pos());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void Move_City::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Move_City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Move_City::CopyFrom(const Move_City& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Move_City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Move_City::IsInitialized() const {
  return true;
}

void Move_City::InternalSwap(Move_City* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(move_pos_, other->move_pos_);
  swap(error_code_, other->error_code_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Move_City::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resurgence::InitAsDefaultInstance() {
  ::pb::map::_Resurgence_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Resurgence::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Resurgence* msg);
};

const ::pb::map::HEX&
Resurgence::_Internal::pos(const Resurgence* msg) {
  return *msg->pos_;
}
Resurgence::Resurgence()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Resurgence)
}
Resurgence::Resurgence(const Resurgence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:pb.map.Resurgence)
}

void Resurgence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Resurgence_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(error_code_));
}

Resurgence::~Resurgence() {
  // @@protoc_insertion_point(destructor:pb.map.Resurgence)
  SharedDtor();
}

void Resurgence::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Resurgence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resurgence& Resurgence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resurgence_map_2eproto.base);
  return *internal_default_instance();
}


void Resurgence::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Resurgence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  error_code_ = 0u;
  _internal_metadata_.Clear();
}

const char* Resurgence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resurgence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Resurgence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Resurgence)
  return target;
}

size_t Resurgence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Resurgence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resurgence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Resurgence)
  GOOGLE_DCHECK_NE(&from, this);
  const Resurgence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resurgence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Resurgence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Resurgence)
    MergeFrom(*source);
  }
}

void Resurgence::MergeFrom(const Resurgence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Resurgence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void Resurgence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Resurgence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resurgence::CopyFrom(const Resurgence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Resurgence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resurgence::IsInitialized() const {
  return true;
}

void Resurgence::InternalSwap(Resurgence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resurgence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Migrate::InitAsDefaultInstance() {
  ::pb::map::_Migrate_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Migrate::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Migrate* msg);
};

const ::pb::map::HEX&
Migrate::_Internal::pos(const Migrate* msg) {
  return *msg->pos_;
}
Migrate::Migrate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Migrate)
}
Migrate::Migrate(const Migrate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&country_id_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(country_id_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Migrate)
}

void Migrate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Migrate_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(country_id_));
}

Migrate::~Migrate() {
  // @@protoc_insertion_point(destructor:pb.map.Migrate)
  SharedDtor();
}

void Migrate::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Migrate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Migrate& Migrate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Migrate_map_2eproto.base);
  return *internal_default_instance();
}


void Migrate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Migrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_id_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(country_id_));
  _internal_metadata_.Clear();
}

const char* Migrate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 country_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          country_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Migrate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Migrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // int32 country_id = 2;
  if (this->country_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_country_id(), target);
  }

  // .pb.map.HEX pos = 3;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Migrate)
  return target;
}

size_t Migrate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Migrate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // int32 country_id = 2;
  if (this->country_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_country_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Migrate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Migrate)
  GOOGLE_DCHECK_NE(&from, this);
  const Migrate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Migrate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Migrate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Migrate)
    MergeFrom(*source);
  }
}

void Migrate::MergeFrom(const Migrate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Migrate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.country_id() != 0) {
    _internal_set_country_id(from._internal_country_id());
  }
}

void Migrate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Migrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Migrate::CopyFrom(const Migrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Migrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Migrate::IsInitialized() const {
  return true;
}

void Migrate::InternalSwap(Migrate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(error_code_, other->error_code_);
  swap(country_id_, other->country_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Migrate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Req_Scout::InitAsDefaultInstance() {
  ::pb::map::_Req_Scout_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class Req_Scout::_Internal {
 public:
  static const ::pb::map::HEX& pos(const Req_Scout* msg);
};

const ::pb::map::HEX&
Req_Scout::_Internal::pos(const Req_Scout* msg) {
  return *msg->pos_;
}
Req_Scout::Req_Scout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Req_Scout)
}
Req_Scout::Req_Scout(const Req_Scout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:pb.map.Req_Scout)
}

void Req_Scout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Req_Scout_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(error_code_));
}

Req_Scout::~Req_Scout() {
  // @@protoc_insertion_point(destructor:pb.map.Req_Scout)
  SharedDtor();
}

void Req_Scout::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Req_Scout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_Scout& Req_Scout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Req_Scout_map_2eproto.base);
  return *internal_default_instance();
}


void Req_Scout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Req_Scout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  error_code_ = 0u;
  _internal_metadata_.Clear();
}

const char* Req_Scout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.HEX pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Req_Scout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Req_Scout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Req_Scout)
  return target;
}

size_t Req_Scout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Req_Scout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_Scout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Req_Scout)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_Scout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Req_Scout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Req_Scout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Req_Scout)
    MergeFrom(*source);
  }
}

void Req_Scout::MergeFrom(const Req_Scout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Req_Scout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void Req_Scout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Req_Scout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_Scout::CopyFrom(const Req_Scout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Req_Scout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_Scout::IsInitialized() const {
  return true;
}

void Req_Scout::InternalSwap(Req_Scout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Req_Scout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TroopScout::InitAsDefaultInstance() {
}
class TroopScout::_Internal {
 public:
};

TroopScout::TroopScout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.TroopScout)
}
TroopScout::TroopScout(const TroopScout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seq_no_, &from.seq_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&force3_) -
    reinterpret_cast<char*>(&seq_no_)) + sizeof(force3_));
  // @@protoc_insertion_point(copy_constructor:pb.map.TroopScout)
}

void TroopScout::SharedCtor() {
  ::memset(&seq_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force3_) -
      reinterpret_cast<char*>(&seq_no_)) + sizeof(force3_));
}

TroopScout::~TroopScout() {
  // @@protoc_insertion_point(destructor:pb.map.TroopScout)
  SharedDtor();
}

void TroopScout::SharedDtor() {
}

void TroopScout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TroopScout& TroopScout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TroopScout_map_2eproto.base);
  return *internal_default_instance();
}


void TroopScout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.TroopScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force3_) -
      reinterpret_cast<char*>(&seq_no_)) + sizeof(force3_));
  _internal_metadata_.Clear();
}

const char* TroopScout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seq_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 troop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          troop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 force1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          force1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 force2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          force2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 force3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          force3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TroopScout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.TroopScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seq_no = 1;
  if (this->seq_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seq_no(), target);
  }

  // int32 troop_id = 2;
  if (this->troop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_troop_id(), target);
  }

  // int32 force1 = 3;
  if (this->force1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_force1(), target);
  }

  // int32 force2 = 4;
  if (this->force2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_force2(), target);
  }

  // int32 force3 = 5;
  if (this->force3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_force3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.TroopScout)
  return target;
}

size_t TroopScout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.TroopScout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seq_no = 1;
  if (this->seq_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq_no());
  }

  // int32 troop_id = 2;
  if (this->troop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_troop_id());
  }

  // int32 force1 = 3;
  if (this->force1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_force1());
  }

  // int32 force2 = 4;
  if (this->force2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_force2());
  }

  // int32 force3 = 5;
  if (this->force3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_force3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TroopScout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.TroopScout)
  GOOGLE_DCHECK_NE(&from, this);
  const TroopScout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TroopScout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.TroopScout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.TroopScout)
    MergeFrom(*source);
  }
}

void TroopScout::MergeFrom(const TroopScout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.TroopScout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq_no() != 0) {
    _internal_set_seq_no(from._internal_seq_no());
  }
  if (from.troop_id() != 0) {
    _internal_set_troop_id(from._internal_troop_id());
  }
  if (from.force1() != 0) {
    _internal_set_force1(from._internal_force1());
  }
  if (from.force2() != 0) {
    _internal_set_force2(from._internal_force2());
  }
  if (from.force3() != 0) {
    _internal_set_force3(from._internal_force3());
  }
}

void TroopScout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.TroopScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TroopScout::CopyFrom(const TroopScout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.TroopScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TroopScout::IsInitialized() const {
  return true;
}

void TroopScout::InternalSwap(TroopScout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(seq_no_, other->seq_no_);
  swap(troop_id_, other->troop_id_);
  swap(force1_, other->force1_);
  swap(force2_, other->force2_);
  swap(force3_, other->force3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TroopScout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldScout::InitAsDefaultInstance() {
  ::pb::map::_FieldScout_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class FieldScout::_Internal {
 public:
  static const ::pb::map::HEX& pos(const FieldScout* msg);
};

const ::pb::map::HEX&
FieldScout::_Internal::pos(const FieldScout* msg) {
  return *msg->pos_;
}
FieldScout::FieldScout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.FieldScout)
}
FieldScout::FieldScout(const FieldScout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scout_info_(from.scout_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&scout_time_, &from.scout_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&scout_end_time_) -
    reinterpret_cast<char*>(&scout_time_)) + sizeof(scout_end_time_));
  // @@protoc_insertion_point(copy_constructor:pb.map.FieldScout)
}

void FieldScout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldScout_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scout_end_time_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(scout_end_time_));
}

FieldScout::~FieldScout() {
  // @@protoc_insertion_point(destructor:pb.map.FieldScout)
  SharedDtor();
}

void FieldScout::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void FieldScout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldScout& FieldScout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldScout_map_2eproto.base);
  return *internal_default_instance();
}


void FieldScout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.FieldScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scout_info_.Clear();
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&scout_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scout_end_time_) -
      reinterpret_cast<char*>(&scout_time_)) + sizeof(scout_end_time_));
  _internal_metadata_.Clear();
}

const char* FieldScout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.map.HEX pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.TroopScout scout_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scout_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 scout_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 scout_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scout_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldScout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.FieldScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // repeated .pb.map.TroopScout scout_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scout_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_scout_info(i), target, stream);
  }

  // int64 scout_time = 3;
  if (this->scout_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_scout_time(), target);
  }

  // int64 scout_end_time = 4;
  if (this->scout_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_scout_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.FieldScout)
  return target;
}

size_t FieldScout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.FieldScout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.TroopScout scout_info = 2;
  total_size += 1UL * this->_internal_scout_info_size();
  for (const auto& msg : this->scout_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int64 scout_time = 3;
  if (this->scout_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scout_time());
  }

  // int64 scout_end_time = 4;
  if (this->scout_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scout_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldScout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.FieldScout)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldScout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldScout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.FieldScout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.FieldScout)
    MergeFrom(*source);
  }
}

void FieldScout::MergeFrom(const FieldScout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.FieldScout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scout_info_.MergeFrom(from.scout_info_);
  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.scout_time() != 0) {
    _internal_set_scout_time(from._internal_scout_time());
  }
  if (from.scout_end_time() != 0) {
    _internal_set_scout_end_time(from._internal_scout_end_time());
  }
}

void FieldScout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.FieldScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldScout::CopyFrom(const FieldScout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.FieldScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldScout::IsInitialized() const {
  return true;
}

void FieldScout::InternalSwap(FieldScout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scout_info_.InternalSwap(&other->scout_info_);
  swap(pos_, other->pos_);
  swap(scout_time_, other->scout_time_);
  swap(scout_end_time_, other->scout_end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldScout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rep_Scout::InitAsDefaultInstance() {
}
class Rep_Scout::_Internal {
 public:
};

Rep_Scout::Rep_Scout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Rep_Scout)
}
Rep_Scout::Rep_Scout(const Rep_Scout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      field_scout_(from.field_scout_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_scout_time_ = from.next_scout_time_;
  // @@protoc_insertion_point(copy_constructor:pb.map.Rep_Scout)
}

void Rep_Scout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rep_Scout_map_2eproto.base);
  next_scout_time_ = PROTOBUF_ULONGLONG(0);
}

Rep_Scout::~Rep_Scout() {
  // @@protoc_insertion_point(destructor:pb.map.Rep_Scout)
  SharedDtor();
}

void Rep_Scout::SharedDtor() {
}

void Rep_Scout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rep_Scout& Rep_Scout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rep_Scout_map_2eproto.base);
  return *internal_default_instance();
}


void Rep_Scout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Rep_Scout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_scout_.Clear();
  next_scout_time_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Rep_Scout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.map.FieldScout field_scout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_scout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 next_scout_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          next_scout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rep_Scout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Rep_Scout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.map.FieldScout field_scout = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_scout_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field_scout(i), target, stream);
  }

  // uint64 next_scout_time = 2;
  if (this->next_scout_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_next_scout_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Rep_Scout)
  return target;
}

size_t Rep_Scout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Rep_Scout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.FieldScout field_scout = 1;
  total_size += 1UL * this->_internal_field_scout_size();
  for (const auto& msg : this->field_scout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 next_scout_time = 2;
  if (this->next_scout_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_scout_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rep_Scout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Rep_Scout)
  GOOGLE_DCHECK_NE(&from, this);
  const Rep_Scout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rep_Scout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Rep_Scout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Rep_Scout)
    MergeFrom(*source);
  }
}

void Rep_Scout::MergeFrom(const Rep_Scout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Rep_Scout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_scout_.MergeFrom(from.field_scout_);
  if (from.next_scout_time() != 0) {
    _internal_set_next_scout_time(from._internal_next_scout_time());
  }
}

void Rep_Scout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Rep_Scout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rep_Scout::CopyFrom(const Rep_Scout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Rep_Scout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rep_Scout::IsInitialized() const {
  return true;
}

void Rep_Scout::InternalSwap(Rep_Scout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_scout_.InternalSwap(&other->field_scout_);
  swap(next_scout_time_, other->next_scout_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rep_Scout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rep_DeleteScout::InitAsDefaultInstance() {
}
class Rep_DeleteScout::_Internal {
 public:
};

Rep_DeleteScout::Rep_DeleteScout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Rep_DeleteScout)
}
Rep_DeleteScout::Rep_DeleteScout(const Rep_DeleteScout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_pos_(from.vec_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.map.Rep_DeleteScout)
}

void Rep_DeleteScout::SharedCtor() {
}

Rep_DeleteScout::~Rep_DeleteScout() {
  // @@protoc_insertion_point(destructor:pb.map.Rep_DeleteScout)
  SharedDtor();
}

void Rep_DeleteScout::SharedDtor() {
}

void Rep_DeleteScout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rep_DeleteScout& Rep_DeleteScout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rep_DeleteScout_map_2eproto.base);
  return *internal_default_instance();
}


void Rep_DeleteScout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Rep_DeleteScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_pos_.Clear();
  _internal_metadata_.Clear();
}

const char* Rep_DeleteScout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 vec_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vec_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vec_pos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rep_DeleteScout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Rep_DeleteScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 vec_pos = 1;
  {
    int byte_size = _vec_pos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_vec_pos(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Rep_DeleteScout)
  return target;
}

size_t Rep_DeleteScout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Rep_DeleteScout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 vec_pos = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vec_pos_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rep_DeleteScout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Rep_DeleteScout)
  GOOGLE_DCHECK_NE(&from, this);
  const Rep_DeleteScout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rep_DeleteScout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Rep_DeleteScout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Rep_DeleteScout)
    MergeFrom(*source);
  }
}

void Rep_DeleteScout::MergeFrom(const Rep_DeleteScout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Rep_DeleteScout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_pos_.MergeFrom(from.vec_pos_);
}

void Rep_DeleteScout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Rep_DeleteScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rep_DeleteScout::CopyFrom(const Rep_DeleteScout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Rep_DeleteScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rep_DeleteScout::IsInitialized() const {
  return true;
}

void Rep_DeleteScout::InternalSwap(Rep_DeleteScout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_pos_.InternalSwap(&other->vec_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rep_DeleteScout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rep_ClearScout::InitAsDefaultInstance() {
}
class Rep_ClearScout::_Internal {
 public:
};

Rep_ClearScout::Rep_ClearScout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Rep_ClearScout)
}
Rep_ClearScout::Rep_ClearScout(const Rep_ClearScout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.map.Rep_ClearScout)
}

void Rep_ClearScout::SharedCtor() {
  cmd_ = 0;
}

Rep_ClearScout::~Rep_ClearScout() {
  // @@protoc_insertion_point(destructor:pb.map.Rep_ClearScout)
  SharedDtor();
}

void Rep_ClearScout::SharedDtor() {
}

void Rep_ClearScout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rep_ClearScout& Rep_ClearScout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rep_ClearScout_map_2eproto.base);
  return *internal_default_instance();
}


void Rep_ClearScout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Rep_ClearScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 0;
  _internal_metadata_.Clear();
}

const char* Rep_ClearScout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.map.E_Map_CMD cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::pb::map::E_Map_CMD>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rep_ClearScout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Rep_ClearScout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.map.E_Map_CMD cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Rep_ClearScout)
  return target;
}

size_t Rep_ClearScout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Rep_ClearScout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.E_Map_CMD cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rep_ClearScout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Rep_ClearScout)
  GOOGLE_DCHECK_NE(&from, this);
  const Rep_ClearScout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rep_ClearScout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Rep_ClearScout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Rep_ClearScout)
    MergeFrom(*source);
  }
}

void Rep_ClearScout::MergeFrom(const Rep_ClearScout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Rep_ClearScout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void Rep_ClearScout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Rep_ClearScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rep_ClearScout::CopyFrom(const Rep_ClearScout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Rep_ClearScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rep_ClearScout::IsInitialized() const {
  return true;
}

void Rep_ClearScout::InternalSwap(Rep_ClearScout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rep_ClearScout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CombatantUser::InitAsDefaultInstance() {
}
class CombatantUser::_Internal {
 public:
};

CombatantUser::CombatantUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.CombatantUser)
}
CombatantUser::CombatantUser(const CombatantUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupy_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(occupy_));
  // @@protoc_insertion_point(copy_constructor:pb.map.CombatantUser)
}

void CombatantUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CombatantUser_map_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupy_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(occupy_));
}

CombatantUser::~CombatantUser() {
  // @@protoc_insertion_point(destructor:pb.map.CombatantUser)
  SharedDtor();
}

void CombatantUser::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CombatantUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CombatantUser& CombatantUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CombatantUser_map_2eproto.base);
  return *internal_default_instance();
}


void CombatantUser::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.CombatantUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupy_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(occupy_));
  _internal_metadata_.Clear();
}

const char* CombatantUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.map.CombatantUser.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 honor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          honor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 occupy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          occupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CombatantUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.CombatantUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.map.CombatantUser.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // int32 honor = 3;
  if (this->honor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_honor(), target);
  }

  // int32 occupy = 4;
  if (this->occupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_occupy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.CombatantUser)
  return target;
}

size_t CombatantUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.CombatantUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 honor = 3;
  if (this->honor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_honor());
  }

  // int32 occupy = 4;
  if (this->occupy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occupy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CombatantUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.CombatantUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatantUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CombatantUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.CombatantUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.CombatantUser)
    MergeFrom(*source);
  }
}

void CombatantUser::MergeFrom(const CombatantUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.CombatantUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.honor() != 0) {
    _internal_set_honor(from._internal_honor());
  }
  if (from.occupy() != 0) {
    _internal_set_occupy(from._internal_occupy());
  }
}

void CombatantUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.CombatantUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatantUser::CopyFrom(const CombatantUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.CombatantUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatantUser::IsInitialized() const {
  return true;
}

void CombatantUser::InternalSwap(CombatantUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(honor_, other->honor_);
  swap(occupy_, other->occupy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CombatantUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapCampaign::InitAsDefaultInstance() {
  ::pb::map::_MapCampaign_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
  ::pb::map::_MapCampaign_default_instance_._instance.get_mutable()->honor_top_ = const_cast< ::pb::map::CombatantUser*>(
      ::pb::map::CombatantUser::internal_default_instance());
  ::pb::map::_MapCampaign_default_instance_._instance.get_mutable()->occupy_top_ = const_cast< ::pb::map::CombatantUser*>(
      ::pb::map::CombatantUser::internal_default_instance());
  ::pb::map::_MapCampaign_default_instance_._instance.get_mutable()->self_ = const_cast< ::pb::map::CombatantUser*>(
      ::pb::map::CombatantUser::internal_default_instance());
}
class MapCampaign::_Internal {
 public:
  static const ::pb::map::HEX& pos(const MapCampaign* msg);
  static const ::pb::map::CombatantUser& honor_top(const MapCampaign* msg);
  static const ::pb::map::CombatantUser& occupy_top(const MapCampaign* msg);
  static const ::pb::map::CombatantUser& self(const MapCampaign* msg);
};

const ::pb::map::HEX&
MapCampaign::_Internal::pos(const MapCampaign* msg) {
  return *msg->pos_;
}
const ::pb::map::CombatantUser&
MapCampaign::_Internal::honor_top(const MapCampaign* msg) {
  return *msg->honor_top_;
}
const ::pb::map::CombatantUser&
MapCampaign::_Internal::occupy_top(const MapCampaign* msg) {
  return *msg->occupy_top_;
}
const ::pb::map::CombatantUser&
MapCampaign::_Internal::self(const MapCampaign* msg) {
  return *msg->self_;
}
MapCampaign::MapCampaign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.MapCampaign)
}
MapCampaign::MapCampaign(const MapCampaign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      combatant_guilds_(from.combatant_guilds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_honor_top()) {
    honor_top_ = new ::pb::map::CombatantUser(*from.honor_top_);
  } else {
    honor_top_ = nullptr;
  }
  if (from._internal_has_occupy_top()) {
    occupy_top_ = new ::pb::map::CombatantUser(*from.occupy_top_);
  } else {
    occupy_top_ = nullptr;
  }
  if (from._internal_has_self()) {
    self_ = new ::pb::map::CombatantUser(*from.self_);
  } else {
    self_ = nullptr;
  }
  ::memcpy(&building_id_, &from.building_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&building_id_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:pb.map.MapCampaign)
}

void MapCampaign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapCampaign_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(scale_));
}

MapCampaign::~MapCampaign() {
  // @@protoc_insertion_point(destructor:pb.map.MapCampaign)
  SharedDtor();
}

void MapCampaign::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete honor_top_;
  if (this != internal_default_instance()) delete occupy_top_;
  if (this != internal_default_instance()) delete self_;
}

void MapCampaign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapCampaign& MapCampaign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapCampaign_map_2eproto.base);
  return *internal_default_instance();
}


void MapCampaign::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.MapCampaign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  combatant_guilds_.Clear();
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && honor_top_ != nullptr) {
    delete honor_top_;
  }
  honor_top_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && occupy_top_ != nullptr) {
    delete occupy_top_;
  }
  occupy_top_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
  ::memset(&building_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&building_id_)) + sizeof(scale_));
  _internal_metadata_.Clear();
}

const char* MapCampaign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.map.HEX pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 building_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          building_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.E_MapCampaignScale scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_scale(static_cast<::pb::map::E_MapCampaignScale>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 combatant_guilds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_combatant_guilds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_combatant_guilds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.CombatantUser honor_top = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_honor_top(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.CombatantUser occupy_top = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_occupy_top(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.map.CombatantUser self = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapCampaign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.MapCampaign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // int32 building_id = 2;
  if (this->building_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_building_id(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // .pb.map.E_MapCampaignScale scale = 4;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_scale(), target);
  }

  // repeated int32 combatant_guilds = 5;
  {
    int byte_size = _combatant_guilds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_combatant_guilds(), byte_size, target);
    }
  }

  // int64 start_time = 6;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_start_time(), target);
  }

  // int64 end_time = 7;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_end_time(), target);
  }

  // .pb.map.CombatantUser honor_top = 8;
  if (this->has_honor_top()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::honor_top(this), target, stream);
  }

  // .pb.map.CombatantUser occupy_top = 9;
  if (this->has_occupy_top()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::occupy_top(this), target, stream);
  }

  // .pb.map.CombatantUser self = 10;
  if (this->has_self()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::self(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.MapCampaign)
  return target;
}

size_t MapCampaign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.MapCampaign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 combatant_guilds = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->combatant_guilds_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _combatant_guilds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .pb.map.CombatantUser honor_top = 8;
  if (this->has_honor_top()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *honor_top_);
  }

  // .pb.map.CombatantUser occupy_top = 9;
  if (this->has_occupy_top()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *occupy_top_);
  }

  // .pb.map.CombatantUser self = 10;
  if (this->has_self()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *self_);
  }

  // int32 building_id = 2;
  if (this->building_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_building_id());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int64 start_time = 6;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 7;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // .pb.map.E_MapCampaignScale scale = 4;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapCampaign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.MapCampaign)
  GOOGLE_DCHECK_NE(&from, this);
  const MapCampaign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapCampaign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.MapCampaign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.MapCampaign)
    MergeFrom(*source);
  }
}

void MapCampaign::MergeFrom(const MapCampaign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.MapCampaign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  combatant_guilds_.MergeFrom(from.combatant_guilds_);
  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.has_honor_top()) {
    _internal_mutable_honor_top()->::pb::map::CombatantUser::MergeFrom(from._internal_honor_top());
  }
  if (from.has_occupy_top()) {
    _internal_mutable_occupy_top()->::pb::map::CombatantUser::MergeFrom(from._internal_occupy_top());
  }
  if (from.has_self()) {
    _internal_mutable_self()->::pb::map::CombatantUser::MergeFrom(from._internal_self());
  }
  if (from.building_id() != 0) {
    _internal_set_building_id(from._internal_building_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
}

void MapCampaign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.MapCampaign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCampaign::CopyFrom(const MapCampaign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.MapCampaign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCampaign::IsInitialized() const {
  return true;
}

void MapCampaign::InternalSwap(MapCampaign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  combatant_guilds_.InternalSwap(&other->combatant_guilds_);
  swap(pos_, other->pos_);
  swap(honor_top_, other->honor_top_);
  swap(occupy_top_, other->occupy_top_);
  swap(self_, other->self_);
  swap(building_id_, other->building_id_);
  swap(count_, other->count_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapCampaign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapCampaignResp::InitAsDefaultInstance() {
}
class MapCampaignResp::_Internal {
 public:
};

MapCampaignResp::MapCampaignResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.MapCampaignResp)
}
MapCampaignResp::MapCampaignResp(const MapCampaignResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      campaigns_(from.campaigns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.map.MapCampaignResp)
}

void MapCampaignResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapCampaignResp_map_2eproto.base);
}

MapCampaignResp::~MapCampaignResp() {
  // @@protoc_insertion_point(destructor:pb.map.MapCampaignResp)
  SharedDtor();
}

void MapCampaignResp::SharedDtor() {
}

void MapCampaignResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapCampaignResp& MapCampaignResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapCampaignResp_map_2eproto.base);
  return *internal_default_instance();
}


void MapCampaignResp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.MapCampaignResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  campaigns_.Clear();
  _internal_metadata_.Clear();
}

const char* MapCampaignResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.map.MapCampaign campaigns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_campaigns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapCampaignResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.MapCampaignResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.map.MapCampaign campaigns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_campaigns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_campaigns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.MapCampaignResp)
  return target;
}

size_t MapCampaignResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.MapCampaignResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.MapCampaign campaigns = 1;
  total_size += 1UL * this->_internal_campaigns_size();
  for (const auto& msg : this->campaigns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapCampaignResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.MapCampaignResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MapCampaignResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapCampaignResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.MapCampaignResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.MapCampaignResp)
    MergeFrom(*source);
  }
}

void MapCampaignResp::MergeFrom(const MapCampaignResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.MapCampaignResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  campaigns_.MergeFrom(from.campaigns_);
}

void MapCampaignResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.MapCampaignResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCampaignResp::CopyFrom(const MapCampaignResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.MapCampaignResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCampaignResp::IsInitialized() const {
  return true;
}

void MapCampaignResp::InternalSwap(MapCampaignResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  campaigns_.InternalSwap(&other->campaigns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapCampaignResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Country::InitAsDefaultInstance() {
}
class Country::_Internal {
 public:
};

Country::Country()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Country)
}
Country::Country(const Country& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&country_id_, &from.country_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_) -
    reinterpret_cast<char*>(&country_id_)) + sizeof(open_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Country)
}

void Country::SharedCtor() {
  ::memset(&country_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&country_id_)) + sizeof(open_));
}

Country::~Country() {
  // @@protoc_insertion_point(destructor:pb.map.Country)
  SharedDtor();
}

void Country::SharedDtor() {
}

void Country::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Country& Country::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Country_map_2eproto.base);
  return *internal_default_instance();
}


void Country::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Country)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&country_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_) -
      reinterpret_cast<char*>(&country_id_)) + sizeof(open_));
  _internal_metadata_.Clear();
}

const char* Country::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 country_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          country_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Country::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Country)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 country_id = 1;
  if (this->country_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_country_id(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int32 open = 3;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Country)
  return target;
}

size_t Country::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Country)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 country_id = 1;
  if (this->country_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_country_id());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 open = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_open());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Country::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Country)
  GOOGLE_DCHECK_NE(&from, this);
  const Country* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Country>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Country)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Country)
    MergeFrom(*source);
  }
}

void Country::MergeFrom(const Country& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Country)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.country_id() != 0) {
    _internal_set_country_id(from._internal_country_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
}

void Country::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Country)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country::CopyFrom(const Country& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Country)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country::IsInitialized() const {
  return true;
}

void Country::InternalSwap(Country* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(country_id_, other->country_id_);
  swap(num_, other->num_);
  swap(open_, other->open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Country::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Country_Info::InitAsDefaultInstance() {
}
class Country_Info::_Internal {
 public:
};

Country_Info::Country_Info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Country_Info)
}
Country_Info::Country_Info(const Country_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      countries_(from.countries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.map.Country_Info)
}

void Country_Info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Country_Info_map_2eproto.base);
}

Country_Info::~Country_Info() {
  // @@protoc_insertion_point(destructor:pb.map.Country_Info)
  SharedDtor();
}

void Country_Info::SharedDtor() {
}

void Country_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Country_Info& Country_Info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Country_Info_map_2eproto.base);
  return *internal_default_instance();
}


void Country_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Country_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countries_.Clear();
  _internal_metadata_.Clear();
}

const char* Country_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.map.Country countries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_countries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Country_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Country_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.map.Country countries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_countries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_countries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Country_Info)
  return target;
}

size_t Country_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Country_Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.Country countries = 1;
  total_size += 1UL * this->_internal_countries_size();
  for (const auto& msg : this->countries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Country_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Country_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Country_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Country_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Country_Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Country_Info)
    MergeFrom(*source);
  }
}

void Country_Info::MergeFrom(const Country_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Country_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  countries_.MergeFrom(from.countries_);
}

void Country_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Country_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country_Info::CopyFrom(const Country_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Country_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country_Info::IsInitialized() const {
  return true;
}

void Country_Info::InternalSwap(Country_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  countries_.InternalSwap(&other->countries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Country_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Choose_Country::InitAsDefaultInstance() {
}
class Choose_Country::_Internal {
 public:
};

Choose_Country::Choose_Country()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Choose_Country)
}
Choose_Country::Choose_Country(const Choose_Country& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&country_id_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(country_id_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Choose_Country)
}

void Choose_Country::SharedCtor() {
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_id_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(country_id_));
}

Choose_Country::~Choose_Country() {
  // @@protoc_insertion_point(destructor:pb.map.Choose_Country)
  SharedDtor();
}

void Choose_Country::SharedDtor() {
}

void Choose_Country::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Choose_Country& Choose_Country::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Choose_Country_map_2eproto.base);
  return *internal_default_instance();
}


void Choose_Country::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Choose_Country)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_id_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(country_id_));
  _internal_metadata_.Clear();
}

const char* Choose_Country::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 country_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          country_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Choose_Country::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Choose_Country)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // int32 country_id = 2;
  if (this->country_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_country_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Choose_Country)
  return target;
}

size_t Choose_Country::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Choose_Country)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // int32 country_id = 2;
  if (this->country_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_country_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Choose_Country::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Choose_Country)
  GOOGLE_DCHECK_NE(&from, this);
  const Choose_Country* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Choose_Country>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Choose_Country)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Choose_Country)
    MergeFrom(*source);
  }
}

void Choose_Country::MergeFrom(const Choose_Country& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Choose_Country)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.country_id() != 0) {
    _internal_set_country_id(from._internal_country_id());
  }
}

void Choose_Country::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Choose_Country)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Choose_Country::CopyFrom(const Choose_Country& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Choose_Country)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Choose_Country::IsInitialized() const {
  return true;
}

void Choose_Country::InternalSwap(Choose_Country* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_code_, other->error_code_);
  swap(country_id_, other->country_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Choose_Country::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CampaignScale::InitAsDefaultInstance() {
  ::pb::map::_CampaignScale_default_instance_._instance.get_mutable()->pos_ = const_cast< ::pb::map::HEX*>(
      ::pb::map::HEX::internal_default_instance());
}
class CampaignScale::_Internal {
 public:
  static const ::pb::map::HEX& pos(const CampaignScale* msg);
};

const ::pb::map::HEX&
CampaignScale::_Internal::pos(const CampaignScale* msg) {
  return *msg->pos_;
}
CampaignScale::CampaignScale()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.CampaignScale)
}
CampaignScale::CampaignScale(const CampaignScale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::pb::map::HEX(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(finish_));
  // @@protoc_insertion_point(copy_constructor:pb.map.CampaignScale)
}

void CampaignScale::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CampaignScale_map_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(finish_));
}

CampaignScale::~CampaignScale() {
  // @@protoc_insertion_point(destructor:pb.map.CampaignScale)
  SharedDtor();
}

void CampaignScale::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void CampaignScale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CampaignScale& CampaignScale::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CampaignScale_map_2eproto.base);
  return *internal_default_instance();
}


void CampaignScale::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.CampaignScale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(finish_));
  _internal_metadata_.Clear();
}

const char* CampaignScale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.map.HEX pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool finish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CampaignScale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.CampaignScale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // int32 scale = 2;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scale(), target);
  }

  // bool finish = 3;
  if (this->finish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_finish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.CampaignScale)
  return target;
}

size_t CampaignScale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.CampaignScale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.map.HEX pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 scale = 2;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scale());
  }

  // bool finish = 3;
  if (this->finish() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CampaignScale::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.CampaignScale)
  GOOGLE_DCHECK_NE(&from, this);
  const CampaignScale* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CampaignScale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.CampaignScale)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.CampaignScale)
    MergeFrom(*source);
  }
}

void CampaignScale::MergeFrom(const CampaignScale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.CampaignScale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::pb::map::HEX::MergeFrom(from._internal_pos());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.finish() != 0) {
    _internal_set_finish(from._internal_finish());
  }
}

void CampaignScale::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.CampaignScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampaignScale::CopyFrom(const CampaignScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.CampaignScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampaignScale::IsInitialized() const {
  return true;
}

void CampaignScale::InternalSwap(CampaignScale* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(scale_, other->scale_);
  swap(finish_, other->finish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CampaignScale::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Req_SearchMapObj::InitAsDefaultInstance() {
}
class Req_SearchMapObj::_Internal {
 public:
};

Req_SearchMapObj::Req_SearchMapObj()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Req_SearchMapObj)
}
Req_SearchMapObj::Req_SearchMapObj(const Req_SearchMapObj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&q_, &from.q_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_belong_) -
    reinterpret_cast<char*>(&q_)) + sizeof(obj_belong_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Req_SearchMapObj)
}

void Req_SearchMapObj::SharedCtor() {
  ::memset(&q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_belong_) -
      reinterpret_cast<char*>(&q_)) + sizeof(obj_belong_));
}

Req_SearchMapObj::~Req_SearchMapObj() {
  // @@protoc_insertion_point(destructor:pb.map.Req_SearchMapObj)
  SharedDtor();
}

void Req_SearchMapObj::SharedDtor() {
}

void Req_SearchMapObj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SearchMapObj& Req_SearchMapObj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Req_SearchMapObj_map_2eproto.base);
  return *internal_default_instance();
}


void Req_SearchMapObj::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Req_SearchMapObj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_belong_) -
      reinterpret_cast<char*>(&q_)) + sizeof(obj_belong_));
  _internal_metadata_.Clear();
}

const char* Req_SearchMapObj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exhale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exhale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obj_kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          obj_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obj_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          obj_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obj_level_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          obj_level_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obj_level_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          obj_level_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obj_belong = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          obj_belong_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Req_SearchMapObj::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Req_SearchMapObj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_q(), target);
  }

  // int32 r = 2;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_r(), target);
  }

  // int32 exhale = 3;
  if (this->exhale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exhale(), target);
  }

  // int32 obj_kind = 4;
  if (this->obj_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_obj_kind(), target);
  }

  // int32 obj_type = 5;
  if (this->obj_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_obj_type(), target);
  }

  // int32 obj_level_min = 6;
  if (this->obj_level_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_obj_level_min(), target);
  }

  // int32 obj_level_max = 7;
  if (this->obj_level_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_obj_level_max(), target);
  }

  // int32 obj_belong = 8;
  if (this->obj_belong() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_obj_belong(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Req_SearchMapObj)
  return target;
}

size_t Req_SearchMapObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Req_SearchMapObj)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_q());
  }

  // int32 r = 2;
  if (this->r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  // int32 exhale = 3;
  if (this->exhale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exhale());
  }

  // int32 obj_kind = 4;
  if (this->obj_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obj_kind());
  }

  // int32 obj_type = 5;
  if (this->obj_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obj_type());
  }

  // int32 obj_level_min = 6;
  if (this->obj_level_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obj_level_min());
  }

  // int32 obj_level_max = 7;
  if (this->obj_level_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obj_level_max());
  }

  // int32 obj_belong = 8;
  if (this->obj_belong() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obj_belong());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SearchMapObj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Req_SearchMapObj)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SearchMapObj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Req_SearchMapObj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Req_SearchMapObj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Req_SearchMapObj)
    MergeFrom(*source);
  }
}

void Req_SearchMapObj::MergeFrom(const Req_SearchMapObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Req_SearchMapObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.q() != 0) {
    _internal_set_q(from._internal_q());
  }
  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.exhale() != 0) {
    _internal_set_exhale(from._internal_exhale());
  }
  if (from.obj_kind() != 0) {
    _internal_set_obj_kind(from._internal_obj_kind());
  }
  if (from.obj_type() != 0) {
    _internal_set_obj_type(from._internal_obj_type());
  }
  if (from.obj_level_min() != 0) {
    _internal_set_obj_level_min(from._internal_obj_level_min());
  }
  if (from.obj_level_max() != 0) {
    _internal_set_obj_level_max(from._internal_obj_level_max());
  }
  if (from.obj_belong() != 0) {
    _internal_set_obj_belong(from._internal_obj_belong());
  }
}

void Req_SearchMapObj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Req_SearchMapObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SearchMapObj::CopyFrom(const Req_SearchMapObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Req_SearchMapObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SearchMapObj::IsInitialized() const {
  return true;
}

void Req_SearchMapObj::InternalSwap(Req_SearchMapObj* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(q_, other->q_);
  swap(r_, other->r_);
  swap(exhale_, other->exhale_);
  swap(obj_kind_, other->obj_kind_);
  swap(obj_type_, other->obj_type_);
  swap(obj_level_min_, other->obj_level_min_);
  swap(obj_level_max_, other->obj_level_max_);
  swap(obj_belong_, other->obj_belong_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Req_SearchMapObj::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rep_SearchMapObj::InitAsDefaultInstance() {
}
class Rep_SearchMapObj::_Internal {
 public:
};

Rep_SearchMapObj::Rep_SearchMapObj()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Rep_SearchMapObj)
}
Rep_SearchMapObj::Rep_SearchMapObj(const Rep_SearchMapObj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lst_hex_(from.lst_hex_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Rep_SearchMapObj)
}

void Rep_SearchMapObj::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rep_SearchMapObj_map_2eproto.base);
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(result_));
}

Rep_SearchMapObj::~Rep_SearchMapObj() {
  // @@protoc_insertion_point(destructor:pb.map.Rep_SearchMapObj)
  SharedDtor();
}

void Rep_SearchMapObj::SharedDtor() {
}

void Rep_SearchMapObj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rep_SearchMapObj& Rep_SearchMapObj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rep_SearchMapObj_map_2eproto.base);
  return *internal_default_instance();
}


void Rep_SearchMapObj::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Rep_SearchMapObj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lst_hex_.Clear();
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* Rep_SearchMapObj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.map.HEX lst_hex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lst_hex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rep_SearchMapObj::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Rep_SearchMapObj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // repeated .pb.map.HEX lst_hex = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lst_hex_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lst_hex(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Rep_SearchMapObj)
  return target;
}

size_t Rep_SearchMapObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Rep_SearchMapObj)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.HEX lst_hex = 3;
  total_size += 1UL * this->_internal_lst_hex_size();
  for (const auto& msg : this->lst_hex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rep_SearchMapObj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Rep_SearchMapObj)
  GOOGLE_DCHECK_NE(&from, this);
  const Rep_SearchMapObj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rep_SearchMapObj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Rep_SearchMapObj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Rep_SearchMapObj)
    MergeFrom(*source);
  }
}

void Rep_SearchMapObj::MergeFrom(const Rep_SearchMapObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Rep_SearchMapObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lst_hex_.MergeFrom(from.lst_hex_);
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void Rep_SearchMapObj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Rep_SearchMapObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rep_SearchMapObj::CopyFrom(const Rep_SearchMapObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Rep_SearchMapObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rep_SearchMapObj::IsInitialized() const {
  return true;
}

void Rep_SearchMapObj::InternalSwap(Rep_SearchMapObj* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lst_hex_.InternalSwap(&other->lst_hex_);
  swap(error_code_, other->error_code_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rep_SearchMapObj::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimerTask::InitAsDefaultInstance() {
}
class TimerTask::_Internal {
 public:
};

TimerTask::TimerTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.TimerTask)
}
TimerTask::TimerTask(const TimerTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pb_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pb_param().empty()) {
    pb_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pb_param_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.map.TimerTask)
}

void TimerTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimerTask_map_2eproto.base);
  pb_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

TimerTask::~TimerTask() {
  // @@protoc_insertion_point(destructor:pb.map.TimerTask)
  SharedDtor();
}

void TimerTask::SharedDtor() {
  pb_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimerTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimerTask& TimerTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimerTask_map_2eproto.base);
  return *internal_default_instance();
}


void TimerTask::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.TimerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pb_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* TimerTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id_link = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_link_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pb_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_pb_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimerTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.TimerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // int64 end_time = 4;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_end_time(), target);
  }

  // int64 id_link = 5;
  if (this->id_link() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_id_link(), target);
  }

  // int64 param = 6;
  if (this->param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_param(), target);
  }

  // bytes pb_param = 7;
  if (this->pb_param().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_pb_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.TimerTask)
  return target;
}

size_t TimerTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.TimerTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pb_param = 7;
  if (this->pb_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pb_param());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int64 end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // int64 id_link = 5;
  if (this->id_link() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id_link());
  }

  // int64 param = 6;
  if (this->param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_param());
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.TimerTask)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimerTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.TimerTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.TimerTask)
    MergeFrom(*source);
  }
}

void TimerTask::MergeFrom(const TimerTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.TimerTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pb_param().size() > 0) {

    pb_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pb_param_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.id_link() != 0) {
    _internal_set_id_link(from._internal_id_link());
  }
  if (from.param() != 0) {
    _internal_set_param(from._internal_param());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TimerTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.TimerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTask::CopyFrom(const TimerTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.TimerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTask::IsInitialized() const {
  return true;
}

void TimerTask::InternalSwap(TimerTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pb_param_.Swap(&other->pb_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(user_id_, other->user_id_);
  swap(end_time_, other->end_time_);
  swap(id_link_, other->id_link_);
  swap(param_, other->param_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimerTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rep_Timer_list::InitAsDefaultInstance() {
}
class Rep_Timer_list::_Internal {
 public:
};

Rep_Timer_list::Rep_Timer_list()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Rep_Timer_list)
}
Rep_Timer_list::Rep_Timer_list(const Rep_Timer_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lst_(from.lst_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.map.Rep_Timer_list)
}

void Rep_Timer_list::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rep_Timer_list_map_2eproto.base);
}

Rep_Timer_list::~Rep_Timer_list() {
  // @@protoc_insertion_point(destructor:pb.map.Rep_Timer_list)
  SharedDtor();
}

void Rep_Timer_list::SharedDtor() {
}

void Rep_Timer_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rep_Timer_list& Rep_Timer_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rep_Timer_list_map_2eproto.base);
  return *internal_default_instance();
}


void Rep_Timer_list::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Rep_Timer_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lst_.Clear();
  _internal_metadata_.Clear();
}

const char* Rep_Timer_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.map.TimerTask lst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lst(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rep_Timer_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Rep_Timer_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.map.TimerTask lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lst_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lst(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Rep_Timer_list)
  return target;
}

size_t Rep_Timer_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Rep_Timer_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.map.TimerTask lst = 1;
  total_size += 1UL * this->_internal_lst_size();
  for (const auto& msg : this->lst_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rep_Timer_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Rep_Timer_list)
  GOOGLE_DCHECK_NE(&from, this);
  const Rep_Timer_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rep_Timer_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Rep_Timer_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Rep_Timer_list)
    MergeFrom(*source);
  }
}

void Rep_Timer_list::MergeFrom(const Rep_Timer_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Rep_Timer_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lst_.MergeFrom(from.lst_);
}

void Rep_Timer_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Rep_Timer_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rep_Timer_list::CopyFrom(const Rep_Timer_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Rep_Timer_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rep_Timer_list::IsInitialized() const {
  return true;
}

void Rep_Timer_list::InternalSwap(Rep_Timer_list* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lst_.InternalSwap(&other->lst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rep_Timer_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Req_ChgMap::InitAsDefaultInstance() {
}
class Req_ChgMap::_Internal {
 public:
};

Req_ChgMap::Req_ChgMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Req_ChgMap)
}
Req_ChgMap::Req_ChgMap(const Req_ChgMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&maptype_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(maptype_));
  // @@protoc_insertion_point(copy_constructor:pb.map.Req_ChgMap)
}

void Req_ChgMap::SharedCtor() {
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maptype_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(maptype_));
}

Req_ChgMap::~Req_ChgMap() {
  // @@protoc_insertion_point(destructor:pb.map.Req_ChgMap)
  SharedDtor();
}

void Req_ChgMap::SharedDtor() {
}

void Req_ChgMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_ChgMap& Req_ChgMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Req_ChgMap_map_2eproto.base);
  return *internal_default_instance();
}


void Req_ChgMap::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Req_ChgMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maptype_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(maptype_));
  _internal_metadata_.Clear();
}

const char* Req_ChgMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mapType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Req_ChgMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Req_ChgMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // uint32 mapType = 2;
  if (this->maptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Req_ChgMap)
  return target;
}

size_t Req_ChgMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Req_ChgMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  // uint32 mapType = 2;
  if (this->maptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maptype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_ChgMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Req_ChgMap)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_ChgMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Req_ChgMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Req_ChgMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Req_ChgMap)
    MergeFrom(*source);
  }
}

void Req_ChgMap::MergeFrom(const Req_ChgMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Req_ChgMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.maptype() != 0) {
    _internal_set_maptype(from._internal_maptype());
  }
}

void Req_ChgMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Req_ChgMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_ChgMap::CopyFrom(const Req_ChgMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Req_ChgMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_ChgMap::IsInitialized() const {
  return true;
}

void Req_ChgMap::InternalSwap(Req_ChgMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_code_, other->error_code_);
  swap(maptype_, other->maptype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Req_ChgMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Req_Map_Chk_View::InitAsDefaultInstance() {
}
class Req_Map_Chk_View::_Internal {
 public:
};

Req_Map_Chk_View::Req_Map_Chk_View()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.map.Req_Map_Chk_View)
}
Req_Map_Chk_View::Req_Map_Chk_View(const Req_Map_Chk_View& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_chk_troop_lst_(from.vec_chk_troop_lst_),
      vec_chk_buildings_lst_(from.vec_chk_buildings_lst_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.map.Req_Map_Chk_View)
}

void Req_Map_Chk_View::SharedCtor() {
}

Req_Map_Chk_View::~Req_Map_Chk_View() {
  // @@protoc_insertion_point(destructor:pb.map.Req_Map_Chk_View)
  SharedDtor();
}

void Req_Map_Chk_View::SharedDtor() {
}

void Req_Map_Chk_View::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_Map_Chk_View& Req_Map_Chk_View::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Req_Map_Chk_View_map_2eproto.base);
  return *internal_default_instance();
}


void Req_Map_Chk_View::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.map.Req_Map_Chk_View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_chk_troop_lst_.Clear();
  vec_chk_buildings_lst_.Clear();
  _internal_metadata_.Clear();
}

const char* Req_Map_Chk_View::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 vec_chk_troop_lst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_vec_chk_troop_lst(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vec_chk_troop_lst(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 vec_chk_buildings_lst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_vec_chk_buildings_lst(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_vec_chk_buildings_lst(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Req_Map_Chk_View::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.map.Req_Map_Chk_View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 vec_chk_troop_lst = 1;
  {
    int byte_size = _vec_chk_troop_lst_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_vec_chk_troop_lst(), byte_size, target);
    }
  }

  // repeated int64 vec_chk_buildings_lst = 2;
  {
    int byte_size = _vec_chk_buildings_lst_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_vec_chk_buildings_lst(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.map.Req_Map_Chk_View)
  return target;
}

size_t Req_Map_Chk_View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.map.Req_Map_Chk_View)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 vec_chk_troop_lst = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->vec_chk_troop_lst_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_chk_troop_lst_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 vec_chk_buildings_lst = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->vec_chk_buildings_lst_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_chk_buildings_lst_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_Map_Chk_View::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.map.Req_Map_Chk_View)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_Map_Chk_View* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Req_Map_Chk_View>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.map.Req_Map_Chk_View)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.map.Req_Map_Chk_View)
    MergeFrom(*source);
  }
}

void Req_Map_Chk_View::MergeFrom(const Req_Map_Chk_View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.map.Req_Map_Chk_View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_chk_troop_lst_.MergeFrom(from.vec_chk_troop_lst_);
  vec_chk_buildings_lst_.MergeFrom(from.vec_chk_buildings_lst_);
}

void Req_Map_Chk_View::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.map.Req_Map_Chk_View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_Map_Chk_View::CopyFrom(const Req_Map_Chk_View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.map.Req_Map_Chk_View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_Map_Chk_View::IsInitialized() const {
  return true;
}

void Req_Map_Chk_View::InternalSwap(Req_Map_Chk_View* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_chk_troop_lst_.InternalSwap(&other->vec_chk_troop_lst_);
  vec_chk_buildings_lst_.InternalSwap(&other->vec_chk_buildings_lst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Req_Map_Chk_View::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::map::Base_Operate* Arena::CreateMaybeMessage< ::pb::map::Base_Operate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Base_Operate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::HEX* Arena::CreateMaybeMessage< ::pb::map::HEX >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::HEX >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Resp_MapOperate* Arena::CreateMaybeMessage< ::pb::map::Resp_MapOperate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Resp_MapOperate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Building* Arena::CreateMaybeMessage< ::pb::map::Building >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Building >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Troop_Map_OP* Arena::CreateMaybeMessage< ::pb::map::Troop_Map_OP >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Troop_Map_OP >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Robot_AI_Model* Arena::CreateMaybeMessage< ::pb::map::Robot_AI_Model >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Robot_AI_Model >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Troop_Path_Query* Arena::CreateMaybeMessage< ::pb::map::Troop_Path_Query >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Troop_Path_Query >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Obstacle_Path* Arena::CreateMaybeMessage< ::pb::map::Obstacle_Path >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Obstacle_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::March_Path* Arena::CreateMaybeMessage< ::pb::map::March_Path >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::March_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Ranking* Arena::CreateMaybeMessage< ::pb::map::Ranking >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Ranking >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Map_Building* Arena::CreateMaybeMessage< ::pb::map::Map_Building >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Map_Building >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Map_Troop* Arena::CreateMaybeMessage< ::pb::map::Map_Troop >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Map_Troop >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Map_Field* Arena::CreateMaybeMessage< ::pb::map::Map_Field >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Map_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Map_RecoverField* Arena::CreateMaybeMessage< ::pb::map::Map_RecoverField >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Map_RecoverField >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Map_WildNpcTroop* Arena::CreateMaybeMessage< ::pb::map::Map_WildNpcTroop >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Map_WildNpcTroop >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Map_WildBuilding* Arena::CreateMaybeMessage< ::pb::map::Map_WildBuilding >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Map_WildBuilding >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::MapUserData* Arena::CreateMaybeMessage< ::pb::map::MapUserData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::MapUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Map_Objs* Arena::CreateMaybeMessage< ::pb::map::Map_Objs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Map_Objs >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::PrivateNpc_Troop* Arena::CreateMaybeMessage< ::pb::map::PrivateNpc_Troop >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::PrivateNpc_Troop >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Private_Map_Objs* Arena::CreateMaybeMessage< ::pb::map::Private_Map_Objs >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Private_Map_Objs >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Collect_Map_OP* Arena::CreateMaybeMessage< ::pb::map::Collect_Map_OP >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Collect_Map_OP >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Move_City* Arena::CreateMaybeMessage< ::pb::map::Move_City >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Move_City >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Resurgence* Arena::CreateMaybeMessage< ::pb::map::Resurgence >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Resurgence >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Migrate* Arena::CreateMaybeMessage< ::pb::map::Migrate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Migrate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Req_Scout* Arena::CreateMaybeMessage< ::pb::map::Req_Scout >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Req_Scout >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::TroopScout* Arena::CreateMaybeMessage< ::pb::map::TroopScout >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::TroopScout >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::FieldScout* Arena::CreateMaybeMessage< ::pb::map::FieldScout >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::FieldScout >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Rep_Scout* Arena::CreateMaybeMessage< ::pb::map::Rep_Scout >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Rep_Scout >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Rep_DeleteScout* Arena::CreateMaybeMessage< ::pb::map::Rep_DeleteScout >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Rep_DeleteScout >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Rep_ClearScout* Arena::CreateMaybeMessage< ::pb::map::Rep_ClearScout >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Rep_ClearScout >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::CombatantUser* Arena::CreateMaybeMessage< ::pb::map::CombatantUser >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::CombatantUser >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::MapCampaign* Arena::CreateMaybeMessage< ::pb::map::MapCampaign >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::MapCampaign >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::MapCampaignResp* Arena::CreateMaybeMessage< ::pb::map::MapCampaignResp >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::MapCampaignResp >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Country* Arena::CreateMaybeMessage< ::pb::map::Country >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Country >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Country_Info* Arena::CreateMaybeMessage< ::pb::map::Country_Info >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Country_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Choose_Country* Arena::CreateMaybeMessage< ::pb::map::Choose_Country >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Choose_Country >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::CampaignScale* Arena::CreateMaybeMessage< ::pb::map::CampaignScale >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::CampaignScale >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Req_SearchMapObj* Arena::CreateMaybeMessage< ::pb::map::Req_SearchMapObj >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Req_SearchMapObj >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Rep_SearchMapObj* Arena::CreateMaybeMessage< ::pb::map::Rep_SearchMapObj >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Rep_SearchMapObj >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::TimerTask* Arena::CreateMaybeMessage< ::pb::map::TimerTask >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::TimerTask >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Rep_Timer_list* Arena::CreateMaybeMessage< ::pb::map::Rep_Timer_list >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Rep_Timer_list >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Req_ChgMap* Arena::CreateMaybeMessage< ::pb::map::Req_ChgMap >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Req_ChgMap >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::map::Req_Map_Chk_View* Arena::CreateMaybeMessage< ::pb::map::Req_Map_Chk_View >(Arena* arena) {
  return Arena::CreateInternal< ::pb::map::Req_Map_Chk_View >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
