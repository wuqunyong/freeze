// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userinfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userinfo_2eproto;
namespace pb {
namespace userinfo {
class AsyncUserDatasReq;
struct AsyncUserDatasReqDefaultTypeInternal;
extern AsyncUserDatasReqDefaultTypeInternal _AsyncUserDatasReq_default_instance_;
class AsyncUserDatasResp;
struct AsyncUserDatasRespDefaultTypeInternal;
extern AsyncUserDatasRespDefaultTypeInternal _AsyncUserDatasResp_default_instance_;
class NewUser;
struct NewUserDefaultTypeInternal;
extern NewUserDefaultTypeInternal _NewUser_default_instance_;
class NoviceField;
struct NoviceFieldDefaultTypeInternal;
extern NoviceFieldDefaultTypeInternal _NoviceField_default_instance_;
class RespNoviceData;
struct RespNoviceDataDefaultTypeInternal;
extern RespNoviceDataDefaultTypeInternal _RespNoviceData_default_instance_;
class SearchByIdReq;
struct SearchByIdReqDefaultTypeInternal;
extern SearchByIdReqDefaultTypeInternal _SearchByIdReq_default_instance_;
class SearchByNameReq;
struct SearchByNameReqDefaultTypeInternal;
extern SearchByNameReqDefaultTypeInternal _SearchByNameReq_default_instance_;
class SearchInfo;
struct SearchInfoDefaultTypeInternal;
extern SearchInfoDefaultTypeInternal _SearchInfo_default_instance_;
class SearchResp;
struct SearchRespDefaultTypeInternal;
extern SearchRespDefaultTypeInternal _SearchResp_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfoReq;
struct UserInfoReqDefaultTypeInternal;
extern UserInfoReqDefaultTypeInternal _UserInfoReq_default_instance_;
class UserInfoResp;
struct UserInfoRespDefaultTypeInternal;
extern UserInfoRespDefaultTypeInternal _UserInfoResp_default_instance_;
}  // namespace userinfo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::userinfo::AsyncUserDatasReq* Arena::CreateMaybeMessage<::pb::userinfo::AsyncUserDatasReq>(Arena*);
template<> ::pb::userinfo::AsyncUserDatasResp* Arena::CreateMaybeMessage<::pb::userinfo::AsyncUserDatasResp>(Arena*);
template<> ::pb::userinfo::NewUser* Arena::CreateMaybeMessage<::pb::userinfo::NewUser>(Arena*);
template<> ::pb::userinfo::NoviceField* Arena::CreateMaybeMessage<::pb::userinfo::NoviceField>(Arena*);
template<> ::pb::userinfo::RespNoviceData* Arena::CreateMaybeMessage<::pb::userinfo::RespNoviceData>(Arena*);
template<> ::pb::userinfo::SearchByIdReq* Arena::CreateMaybeMessage<::pb::userinfo::SearchByIdReq>(Arena*);
template<> ::pb::userinfo::SearchByNameReq* Arena::CreateMaybeMessage<::pb::userinfo::SearchByNameReq>(Arena*);
template<> ::pb::userinfo::SearchInfo* Arena::CreateMaybeMessage<::pb::userinfo::SearchInfo>(Arena*);
template<> ::pb::userinfo::SearchResp* Arena::CreateMaybeMessage<::pb::userinfo::SearchResp>(Arena*);
template<> ::pb::userinfo::UserData* Arena::CreateMaybeMessage<::pb::userinfo::UserData>(Arena*);
template<> ::pb::userinfo::UserInfo* Arena::CreateMaybeMessage<::pb::userinfo::UserInfo>(Arena*);
template<> ::pb::userinfo::UserInfoReq* Arena::CreateMaybeMessage<::pb::userinfo::UserInfoReq>(Arena*);
template<> ::pb::userinfo::UserInfoResp* Arena::CreateMaybeMessage<::pb::userinfo::UserInfoResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace userinfo {

enum E_Cmd : int {
  E_Cmd_UserInfoReq = 0,
  E_Cmd_UserInfoResp = 1,
  E_Cmd_SearchByIdReq = 2,
  E_Cmd_SearchByNameReq = 3,
  E_Cmd_SearchResp = 4,
  E_Cmd_NewUser = 5,
  E_Cmd_NoviceData = 6,
  E_Cmd_AsyncUserDatasReq = 7,
  E_Cmd_AsyncUserDatasResp = 8,
  E_Cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_Cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_Cmd_IsValid(int value);
constexpr E_Cmd E_Cmd_MIN = E_Cmd_UserInfoReq;
constexpr E_Cmd E_Cmd_MAX = E_Cmd_AsyncUserDatasResp;
constexpr int E_Cmd_ARRAYSIZE = E_Cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Cmd_descriptor();
template<typename T>
inline const std::string& E_Cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_Cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_Cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_Cmd_descriptor(), enum_t_value);
}
inline bool E_Cmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_Cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_Cmd>(
    E_Cmd_descriptor(), name, value);
}
enum E_UserFlag : int {
  E_UserFlag_New = 0,
  E_UserFlag_Back = 1,
  E_UserFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_UserFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_UserFlag_IsValid(int value);
constexpr E_UserFlag E_UserFlag_MIN = E_UserFlag_New;
constexpr E_UserFlag E_UserFlag_MAX = E_UserFlag_Back;
constexpr int E_UserFlag_ARRAYSIZE = E_UserFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_UserFlag_descriptor();
template<typename T>
inline const std::string& E_UserFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_UserFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_UserFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_UserFlag_descriptor(), enum_t_value);
}
inline bool E_UserFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_UserFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_UserFlag>(
    E_UserFlag_descriptor(), name, value);
}
// ===================================================================

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit PROTOBUF_CONSTEXPR UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserData& from) {
    UserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresentationFieldNumber = 2,
    kGuildNameFieldNumber = 4,
    kGuildGroupNameFieldNumber = 5,
    kCaptiveGuildNameFieldNumber = 8,
    kPowerFieldNumber = 1,
    kGuildIdFieldNumber = 3,
    kOfficerFieldNumber = 6,
    kCaptiveGuildIdFieldNumber = 7,
  };
  // string presentation = 2;
  void clear_presentation();
  const std::string& presentation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_presentation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_presentation();
  PROTOBUF_NODISCARD std::string* release_presentation();
  void set_allocated_presentation(std::string* presentation);
  private:
  const std::string& _internal_presentation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_presentation(const std::string& value);
  std::string* _internal_mutable_presentation();
  public:

  // string guild_name = 4;
  void clear_guild_name();
  const std::string& guild_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_name();
  PROTOBUF_NODISCARD std::string* release_guild_name();
  void set_allocated_guild_name(std::string* guild_name);
  private:
  const std::string& _internal_guild_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_name(const std::string& value);
  std::string* _internal_mutable_guild_name();
  public:

  // string guild_group_name = 5;
  void clear_guild_group_name();
  const std::string& guild_group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_group_name();
  PROTOBUF_NODISCARD std::string* release_guild_group_name();
  void set_allocated_guild_group_name(std::string* guild_group_name);
  private:
  const std::string& _internal_guild_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_group_name(const std::string& value);
  std::string* _internal_mutable_guild_group_name();
  public:

  // string captive_guild_name = 8;
  void clear_captive_guild_name();
  const std::string& captive_guild_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captive_guild_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captive_guild_name();
  PROTOBUF_NODISCARD std::string* release_captive_guild_name();
  void set_allocated_captive_guild_name(std::string* captive_guild_name);
  private:
  const std::string& _internal_captive_guild_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captive_guild_name(const std::string& value);
  std::string* _internal_mutable_captive_guild_name();
  public:

  // int32 power = 1;
  void clear_power();
  int32_t power() const;
  void set_power(int32_t value);
  private:
  int32_t _internal_power() const;
  void _internal_set_power(int32_t value);
  public:

  // int32 guild_id = 3;
  void clear_guild_id();
  int32_t guild_id() const;
  void set_guild_id(int32_t value);
  private:
  int32_t _internal_guild_id() const;
  void _internal_set_guild_id(int32_t value);
  public:

  // int32 officer = 6;
  void clear_officer();
  int32_t officer() const;
  void set_officer(int32_t value);
  private:
  int32_t _internal_officer() const;
  void _internal_set_officer(int32_t value);
  public:

  // int32 captive_guild_id = 7;
  void clear_captive_guild_id();
  int32_t captive_guild_id() const;
  void set_captive_guild_id(int32_t value);
  private:
  int32_t _internal_captive_guild_id() const;
  void _internal_set_captive_guild_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr presentation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captive_guild_name_;
    int32_t power_;
    int32_t guild_id_;
    int32_t officer_;
    int32_t captive_guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class AsyncUserDatasReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.AsyncUserDatasReq) */ {
 public:
  inline AsyncUserDatasReq() : AsyncUserDatasReq(nullptr) {}
  ~AsyncUserDatasReq() override;
  explicit PROTOBUF_CONSTEXPR AsyncUserDatasReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AsyncUserDatasReq(const AsyncUserDatasReq& from);
  AsyncUserDatasReq(AsyncUserDatasReq&& from) noexcept
    : AsyncUserDatasReq() {
    *this = ::std::move(from);
  }

  inline AsyncUserDatasReq& operator=(const AsyncUserDatasReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsyncUserDatasReq& operator=(AsyncUserDatasReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AsyncUserDatasReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AsyncUserDatasReq* internal_default_instance() {
    return reinterpret_cast<const AsyncUserDatasReq*>(
               &_AsyncUserDatasReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AsyncUserDatasReq& a, AsyncUserDatasReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AsyncUserDatasReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsyncUserDatasReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AsyncUserDatasReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AsyncUserDatasReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AsyncUserDatasReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AsyncUserDatasReq& from) {
    AsyncUserDatasReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsyncUserDatasReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.AsyncUserDatasReq";
  }
  protected:
  explicit AsyncUserDatasReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
  };
  // repeated int64 user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  private:
  int64_t _internal_user_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_user_ids() const;
  void _internal_add_user_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_user_ids();
  public:
  int64_t user_ids(int index) const;
  void set_user_ids(int index, int64_t value);
  void add_user_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_user_ids();

  // @@protoc_insertion_point(class_scope:pb.userinfo.AsyncUserDatasReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > user_ids_;
    mutable std::atomic<int> _user_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class AsyncUserDatasResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.AsyncUserDatasResp) */ {
 public:
  inline AsyncUserDatasResp() : AsyncUserDatasResp(nullptr) {}
  ~AsyncUserDatasResp() override;
  explicit PROTOBUF_CONSTEXPR AsyncUserDatasResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AsyncUserDatasResp(const AsyncUserDatasResp& from);
  AsyncUserDatasResp(AsyncUserDatasResp&& from) noexcept
    : AsyncUserDatasResp() {
    *this = ::std::move(from);
  }

  inline AsyncUserDatasResp& operator=(const AsyncUserDatasResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsyncUserDatasResp& operator=(AsyncUserDatasResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AsyncUserDatasResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AsyncUserDatasResp* internal_default_instance() {
    return reinterpret_cast<const AsyncUserDatasResp*>(
               &_AsyncUserDatasResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AsyncUserDatasResp& a, AsyncUserDatasResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AsyncUserDatasResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsyncUserDatasResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AsyncUserDatasResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AsyncUserDatasResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AsyncUserDatasResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AsyncUserDatasResp& from) {
    AsyncUserDatasResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsyncUserDatasResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.AsyncUserDatasResp";
  }
  protected:
  explicit AsyncUserDatasResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDatasFieldNumber = 1,
  };
  // repeated .pb.userinfo.UserData user_datas = 1;
  int user_datas_size() const;
  private:
  int _internal_user_datas_size() const;
  public:
  void clear_user_datas();
  ::pb::userinfo::UserData* mutable_user_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::UserData >*
      mutable_user_datas();
  private:
  const ::pb::userinfo::UserData& _internal_user_datas(int index) const;
  ::pb::userinfo::UserData* _internal_add_user_datas();
  public:
  const ::pb::userinfo::UserData& user_datas(int index) const;
  ::pb::userinfo::UserData* add_user_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::UserData >&
      user_datas() const;

  // @@protoc_insertion_point(class_scope:pb.userinfo.AsyncUserDatasResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::UserData > user_datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kPresentationFieldNumber = 6,
    kGuildNameFieldNumber = 8,
    kGuildGroupNameFieldNumber = 9,
    kCaptiveGuildNameFieldNumber = 12,
    kUserIdFieldNumber = 2,
    kMapIdFieldNumber = 1,
    kHeadIdFieldNumber = 4,
    kPowerFieldNumber = 5,
    kGuildIdFieldNumber = 7,
    kOfficerFieldNumber = 10,
    kCaptiveGuildIdFieldNumber = 11,
  };
  // string user_name = 3;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string presentation = 6;
  void clear_presentation();
  const std::string& presentation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_presentation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_presentation();
  PROTOBUF_NODISCARD std::string* release_presentation();
  void set_allocated_presentation(std::string* presentation);
  private:
  const std::string& _internal_presentation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_presentation(const std::string& value);
  std::string* _internal_mutable_presentation();
  public:

  // string guild_name = 8;
  void clear_guild_name();
  const std::string& guild_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_name();
  PROTOBUF_NODISCARD std::string* release_guild_name();
  void set_allocated_guild_name(std::string* guild_name);
  private:
  const std::string& _internal_guild_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_name(const std::string& value);
  std::string* _internal_mutable_guild_name();
  public:

  // string guild_group_name = 9;
  void clear_guild_group_name();
  const std::string& guild_group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_group_name();
  PROTOBUF_NODISCARD std::string* release_guild_group_name();
  void set_allocated_guild_group_name(std::string* guild_group_name);
  private:
  const std::string& _internal_guild_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_group_name(const std::string& value);
  std::string* _internal_mutable_guild_group_name();
  public:

  // string captive_guild_name = 12;
  void clear_captive_guild_name();
  const std::string& captive_guild_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captive_guild_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captive_guild_name();
  PROTOBUF_NODISCARD std::string* release_captive_guild_name();
  void set_allocated_captive_guild_name(std::string* captive_guild_name);
  private:
  const std::string& _internal_captive_guild_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captive_guild_name(const std::string& value);
  std::string* _internal_mutable_captive_guild_name();
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 map_id = 1;
  void clear_map_id();
  int32_t map_id() const;
  void set_map_id(int32_t value);
  private:
  int32_t _internal_map_id() const;
  void _internal_set_map_id(int32_t value);
  public:

  // int32 head_id = 4;
  void clear_head_id();
  int32_t head_id() const;
  void set_head_id(int32_t value);
  private:
  int32_t _internal_head_id() const;
  void _internal_set_head_id(int32_t value);
  public:

  // int32 power = 5;
  void clear_power();
  int32_t power() const;
  void set_power(int32_t value);
  private:
  int32_t _internal_power() const;
  void _internal_set_power(int32_t value);
  public:

  // int32 guild_id = 7;
  void clear_guild_id();
  int32_t guild_id() const;
  void set_guild_id(int32_t value);
  private:
  int32_t _internal_guild_id() const;
  void _internal_set_guild_id(int32_t value);
  public:

  // int32 officer = 10;
  void clear_officer();
  int32_t officer() const;
  void set_officer(int32_t value);
  private:
  int32_t _internal_officer() const;
  void _internal_set_officer(int32_t value);
  public:

  // int32 captive_guild_id = 11;
  void clear_captive_guild_id();
  int32_t captive_guild_id() const;
  void set_captive_guild_id(int32_t value);
  private:
  int32_t _internal_captive_guild_id() const;
  void _internal_set_captive_guild_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr presentation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captive_guild_name_;
    int64_t user_id_;
    int32_t map_id_;
    int32_t head_id_;
    int32_t power_;
    int32_t guild_id_;
    int32_t officer_;
    int32_t captive_guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class UserInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.UserInfoReq) */ {
 public:
  inline UserInfoReq() : UserInfoReq(nullptr) {}
  ~UserInfoReq() override;
  explicit PROTOBUF_CONSTEXPR UserInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoReq(const UserInfoReq& from);
  UserInfoReq(UserInfoReq&& from) noexcept
    : UserInfoReq() {
    *this = ::std::move(from);
  }

  inline UserInfoReq& operator=(const UserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoReq& operator=(UserInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoReq* internal_default_instance() {
    return reinterpret_cast<const UserInfoReq*>(
               &_UserInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserInfoReq& a, UserInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfoReq& from) {
    UserInfoReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.UserInfoReq";
  }
  protected:
  explicit UserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.UserInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class UserInfoResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.UserInfoResp) */ {
 public:
  inline UserInfoResp() : UserInfoResp(nullptr) {}
  ~UserInfoResp() override;
  explicit PROTOBUF_CONSTEXPR UserInfoResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoResp(const UserInfoResp& from);
  UserInfoResp(UserInfoResp&& from) noexcept
    : UserInfoResp() {
    *this = ::std::move(from);
  }

  inline UserInfoResp& operator=(const UserInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoResp& operator=(UserInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoResp* internal_default_instance() {
    return reinterpret_cast<const UserInfoResp*>(
               &_UserInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserInfoResp& a, UserInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfoResp& from) {
    UserInfoResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.UserInfoResp";
  }
  protected:
  explicit UserInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // .pb.userinfo.UserInfo user_info = 2;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::pb::userinfo::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::pb::userinfo::UserInfo* release_user_info();
  ::pb::userinfo::UserInfo* mutable_user_info();
  void set_allocated_user_info(::pb::userinfo::UserInfo* user_info);
  private:
  const ::pb::userinfo::UserInfo& _internal_user_info() const;
  ::pb::userinfo::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::pb::userinfo::UserInfo* user_info);
  ::pb::userinfo::UserInfo* unsafe_arena_release_user_info();

  // uint32 error_code = 1;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.UserInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::pb::userinfo::UserInfo* user_info_;
    uint32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class SearchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.SearchInfo) */ {
 public:
  inline SearchInfo() : SearchInfo(nullptr) {}
  ~SearchInfo() override;
  explicit PROTOBUF_CONSTEXPR SearchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchInfo(const SearchInfo& from);
  SearchInfo(SearchInfo&& from) noexcept
    : SearchInfo() {
    *this = ::std::move(from);
  }

  inline SearchInfo& operator=(const SearchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchInfo& operator=(SearchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchInfo* internal_default_instance() {
    return reinterpret_cast<const SearchInfo*>(
               &_SearchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SearchInfo& a, SearchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchInfo& from) {
    SearchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.SearchInfo";
  }
  protected:
  explicit SearchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kHeadIdFieldNumber = 4,
    kPowerFieldNumber = 5,
    kGameIdFieldNumber = 6,
  };
  // string user_name = 3;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  int32_t map_id() const;
  void set_map_id(int32_t value);
  private:
  int32_t _internal_map_id() const;
  void _internal_set_map_id(int32_t value);
  public:

  // int32 head_id = 4;
  void clear_head_id();
  int32_t head_id() const;
  void set_head_id(int32_t value);
  private:
  int32_t _internal_head_id() const;
  void _internal_set_head_id(int32_t value);
  public:

  // int32 power = 5;
  void clear_power();
  int32_t power() const;
  void set_power(int32_t value);
  private:
  int32_t _internal_power() const;
  void _internal_set_power(int32_t value);
  public:

  // int32 game_id = 6;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.SearchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    int64_t user_id_;
    int32_t map_id_;
    int32_t head_id_;
    int32_t power_;
    int32_t game_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class SearchByIdReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.SearchByIdReq) */ {
 public:
  inline SearchByIdReq() : SearchByIdReq(nullptr) {}
  ~SearchByIdReq() override;
  explicit PROTOBUF_CONSTEXPR SearchByIdReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByIdReq(const SearchByIdReq& from);
  SearchByIdReq(SearchByIdReq&& from) noexcept
    : SearchByIdReq() {
    *this = ::std::move(from);
  }

  inline SearchByIdReq& operator=(const SearchByIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByIdReq& operator=(SearchByIdReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByIdReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByIdReq* internal_default_instance() {
    return reinterpret_cast<const SearchByIdReq*>(
               &_SearchByIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SearchByIdReq& a, SearchByIdReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByIdReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByIdReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByIdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByIdReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByIdReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByIdReq& from) {
    SearchByIdReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByIdReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.SearchByIdReq";
  }
  protected:
  explicit SearchByIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.SearchByIdReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class SearchByNameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.SearchByNameReq) */ {
 public:
  inline SearchByNameReq() : SearchByNameReq(nullptr) {}
  ~SearchByNameReq() override;
  explicit PROTOBUF_CONSTEXPR SearchByNameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByNameReq(const SearchByNameReq& from);
  SearchByNameReq(SearchByNameReq&& from) noexcept
    : SearchByNameReq() {
    *this = ::std::move(from);
  }

  inline SearchByNameReq& operator=(const SearchByNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByNameReq& operator=(SearchByNameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByNameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByNameReq* internal_default_instance() {
    return reinterpret_cast<const SearchByNameReq*>(
               &_SearchByNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SearchByNameReq& a, SearchByNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByNameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByNameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByNameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByNameReq& from) {
    SearchByNameReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByNameReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.SearchByNameReq";
  }
  protected:
  explicit SearchByNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.SearchByNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class SearchResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.SearchResp) */ {
 public:
  inline SearchResp() : SearchResp(nullptr) {}
  ~SearchResp() override;
  explicit PROTOBUF_CONSTEXPR SearchResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResp(const SearchResp& from);
  SearchResp(SearchResp&& from) noexcept
    : SearchResp() {
    *this = ::std::move(from);
  }

  inline SearchResp& operator=(const SearchResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResp& operator=(SearchResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResp* internal_default_instance() {
    return reinterpret_cast<const SearchResp*>(
               &_SearchResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SearchResp& a, SearchResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResp& from) {
    SearchResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.SearchResp";
  }
  protected:
  explicit SearchResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchInfosFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // repeated .pb.userinfo.SearchInfo search_infos = 2;
  int search_infos_size() const;
  private:
  int _internal_search_infos_size() const;
  public:
  void clear_search_infos();
  ::pb::userinfo::SearchInfo* mutable_search_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::SearchInfo >*
      mutable_search_infos();
  private:
  const ::pb::userinfo::SearchInfo& _internal_search_infos(int index) const;
  ::pb::userinfo::SearchInfo* _internal_add_search_infos();
  public:
  const ::pb::userinfo::SearchInfo& search_infos(int index) const;
  ::pb::userinfo::SearchInfo* add_search_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::SearchInfo >&
      search_infos() const;

  // uint32 error_code = 1;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.SearchResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::SearchInfo > search_infos_;
    uint32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class NewUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.NewUser) */ {
 public:
  inline NewUser() : NewUser(nullptr) {}
  ~NewUser() override;
  explicit PROTOBUF_CONSTEXPR NewUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewUser(const NewUser& from);
  NewUser(NewUser&& from) noexcept
    : NewUser() {
    *this = ::std::move(from);
  }

  inline NewUser& operator=(const NewUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewUser& operator=(NewUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewUser* internal_default_instance() {
    return reinterpret_cast<const NewUser*>(
               &_NewUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NewUser& a, NewUser& b) {
    a.Swap(&b);
  }
  inline void Swap(NewUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewUser& from) {
    NewUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.NewUser";
  }
  protected:
  explicit NewUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFlagFieldNumber = 1,
    kHeadIdFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pb.userinfo.E_UserFlag flag = 1;
  void clear_flag();
  ::pb::userinfo::E_UserFlag flag() const;
  void set_flag(::pb::userinfo::E_UserFlag value);
  private:
  ::pb::userinfo::E_UserFlag _internal_flag() const;
  void _internal_set_flag(::pb::userinfo::E_UserFlag value);
  public:

  // int32 head_id = 3;
  void clear_head_id();
  int32_t head_id() const;
  void set_head_id(int32_t value);
  private:
  int32_t _internal_head_id() const;
  void _internal_set_head_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.NewUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int flag_;
    int32_t head_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class NoviceField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.NoviceField) */ {
 public:
  inline NoviceField() : NoviceField(nullptr) {}
  ~NoviceField() override;
  explicit PROTOBUF_CONSTEXPR NoviceField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoviceField(const NoviceField& from);
  NoviceField(NoviceField&& from) noexcept
    : NoviceField() {
    *this = ::std::move(from);
  }

  inline NoviceField& operator=(const NoviceField& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoviceField& operator=(NoviceField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoviceField& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoviceField* internal_default_instance() {
    return reinterpret_cast<const NoviceField*>(
               &_NoviceField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NoviceField& a, NoviceField& b) {
    a.Swap(&b);
  }
  inline void Swap(NoviceField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoviceField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoviceField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoviceField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoviceField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoviceField& from) {
    NoviceField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoviceField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.NoviceField";
  }
  protected:
  explicit NoviceField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kRFieldNumber = 2,
  };
  // int32 q = 1;
  void clear_q();
  int32_t q() const;
  void set_q(int32_t value);
  private:
  int32_t _internal_q() const;
  void _internal_set_q(int32_t value);
  public:

  // int32 r = 2;
  void clear_r();
  int32_t r() const;
  void set_r(int32_t value);
  private:
  int32_t _internal_r() const;
  void _internal_set_r(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.userinfo.NoviceField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t q_;
    int32_t r_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class RespNoviceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.userinfo.RespNoviceData) */ {
 public:
  inline RespNoviceData() : RespNoviceData(nullptr) {}
  ~RespNoviceData() override;
  explicit PROTOBUF_CONSTEXPR RespNoviceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespNoviceData(const RespNoviceData& from);
  RespNoviceData(RespNoviceData&& from) noexcept
    : RespNoviceData() {
    *this = ::std::move(from);
  }

  inline RespNoviceData& operator=(const RespNoviceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespNoviceData& operator=(RespNoviceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespNoviceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespNoviceData* internal_default_instance() {
    return reinterpret_cast<const RespNoviceData*>(
               &_RespNoviceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RespNoviceData& a, RespNoviceData& b) {
    a.Swap(&b);
  }
  inline void Swap(RespNoviceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespNoviceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespNoviceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespNoviceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespNoviceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RespNoviceData& from) {
    RespNoviceData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespNoviceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.userinfo.RespNoviceData";
  }
  protected:
  explicit RespNoviceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .pb.userinfo.NoviceField fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::pb::userinfo::NoviceField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::NoviceField >*
      mutable_fields();
  private:
  const ::pb::userinfo::NoviceField& _internal_fields(int index) const;
  ::pb::userinfo::NoviceField* _internal_add_fields();
  public:
  const ::pb::userinfo::NoviceField& fields(int index) const;
  ::pb::userinfo::NoviceField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::NoviceField >&
      fields() const;

  // @@protoc_insertion_point(class_scope:pb.userinfo.RespNoviceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::NoviceField > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_userinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserData

// int32 power = 1;
inline void UserData::clear_power() {
  _impl_.power_ = 0;
}
inline int32_t UserData::_internal_power() const {
  return _impl_.power_;
}
inline int32_t UserData::power() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.power)
  return _internal_power();
}
inline void UserData::_internal_set_power(int32_t value) {
  
  _impl_.power_ = value;
}
inline void UserData::set_power(int32_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.power)
}

// string presentation = 2;
inline void UserData::clear_presentation() {
  _impl_.presentation_.ClearToEmpty();
}
inline const std::string& UserData::presentation() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.presentation)
  return _internal_presentation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_presentation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.presentation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.presentation)
}
inline std::string* UserData::mutable_presentation() {
  std::string* _s = _internal_mutable_presentation();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserData.presentation)
  return _s;
}
inline const std::string& UserData::_internal_presentation() const {
  return _impl_.presentation_.Get();
}
inline void UserData::_internal_set_presentation(const std::string& value) {
  
  _impl_.presentation_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_presentation() {
  
  return _impl_.presentation_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_presentation() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserData.presentation)
  return _impl_.presentation_.Release();
}
inline void UserData::set_allocated_presentation(std::string* presentation) {
  if (presentation != nullptr) {
    
  } else {
    
  }
  _impl_.presentation_.SetAllocated(presentation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.presentation_.IsDefault()) {
    _impl_.presentation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserData.presentation)
}

// int32 guild_id = 3;
inline void UserData::clear_guild_id() {
  _impl_.guild_id_ = 0;
}
inline int32_t UserData::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline int32_t UserData::guild_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.guild_id)
  return _internal_guild_id();
}
inline void UserData::_internal_set_guild_id(int32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void UserData::set_guild_id(int32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.guild_id)
}

// string guild_name = 4;
inline void UserData::clear_guild_name() {
  _impl_.guild_name_.ClearToEmpty();
}
inline const std::string& UserData::guild_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.guild_name)
  return _internal_guild_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_guild_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guild_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.guild_name)
}
inline std::string* UserData::mutable_guild_name() {
  std::string* _s = _internal_mutable_guild_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserData.guild_name)
  return _s;
}
inline const std::string& UserData::_internal_guild_name() const {
  return _impl_.guild_name_.Get();
}
inline void UserData::_internal_set_guild_name(const std::string& value) {
  
  _impl_.guild_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_guild_name() {
  
  return _impl_.guild_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_guild_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserData.guild_name)
  return _impl_.guild_name_.Release();
}
inline void UserData::set_allocated_guild_name(std::string* guild_name) {
  if (guild_name != nullptr) {
    
  } else {
    
  }
  _impl_.guild_name_.SetAllocated(guild_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_name_.IsDefault()) {
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserData.guild_name)
}

// string guild_group_name = 5;
inline void UserData::clear_guild_group_name() {
  _impl_.guild_group_name_.ClearToEmpty();
}
inline const std::string& UserData::guild_group_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.guild_group_name)
  return _internal_guild_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_guild_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guild_group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.guild_group_name)
}
inline std::string* UserData::mutable_guild_group_name() {
  std::string* _s = _internal_mutable_guild_group_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserData.guild_group_name)
  return _s;
}
inline const std::string& UserData::_internal_guild_group_name() const {
  return _impl_.guild_group_name_.Get();
}
inline void UserData::_internal_set_guild_group_name(const std::string& value) {
  
  _impl_.guild_group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_guild_group_name() {
  
  return _impl_.guild_group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_guild_group_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserData.guild_group_name)
  return _impl_.guild_group_name_.Release();
}
inline void UserData::set_allocated_guild_group_name(std::string* guild_group_name) {
  if (guild_group_name != nullptr) {
    
  } else {
    
  }
  _impl_.guild_group_name_.SetAllocated(guild_group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_group_name_.IsDefault()) {
    _impl_.guild_group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserData.guild_group_name)
}

// int32 officer = 6;
inline void UserData::clear_officer() {
  _impl_.officer_ = 0;
}
inline int32_t UserData::_internal_officer() const {
  return _impl_.officer_;
}
inline int32_t UserData::officer() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.officer)
  return _internal_officer();
}
inline void UserData::_internal_set_officer(int32_t value) {
  
  _impl_.officer_ = value;
}
inline void UserData::set_officer(int32_t value) {
  _internal_set_officer(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.officer)
}

// int32 captive_guild_id = 7;
inline void UserData::clear_captive_guild_id() {
  _impl_.captive_guild_id_ = 0;
}
inline int32_t UserData::_internal_captive_guild_id() const {
  return _impl_.captive_guild_id_;
}
inline int32_t UserData::captive_guild_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.captive_guild_id)
  return _internal_captive_guild_id();
}
inline void UserData::_internal_set_captive_guild_id(int32_t value) {
  
  _impl_.captive_guild_id_ = value;
}
inline void UserData::set_captive_guild_id(int32_t value) {
  _internal_set_captive_guild_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.captive_guild_id)
}

// string captive_guild_name = 8;
inline void UserData::clear_captive_guild_name() {
  _impl_.captive_guild_name_.ClearToEmpty();
}
inline const std::string& UserData::captive_guild_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserData.captive_guild_name)
  return _internal_captive_guild_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_captive_guild_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.captive_guild_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserData.captive_guild_name)
}
inline std::string* UserData::mutable_captive_guild_name() {
  std::string* _s = _internal_mutable_captive_guild_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserData.captive_guild_name)
  return _s;
}
inline const std::string& UserData::_internal_captive_guild_name() const {
  return _impl_.captive_guild_name_.Get();
}
inline void UserData::_internal_set_captive_guild_name(const std::string& value) {
  
  _impl_.captive_guild_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_captive_guild_name() {
  
  return _impl_.captive_guild_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_captive_guild_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserData.captive_guild_name)
  return _impl_.captive_guild_name_.Release();
}
inline void UserData::set_allocated_captive_guild_name(std::string* captive_guild_name) {
  if (captive_guild_name != nullptr) {
    
  } else {
    
  }
  _impl_.captive_guild_name_.SetAllocated(captive_guild_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captive_guild_name_.IsDefault()) {
    _impl_.captive_guild_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserData.captive_guild_name)
}

// -------------------------------------------------------------------

// AsyncUserDatasReq

// repeated int64 user_ids = 1;
inline int AsyncUserDatasReq::_internal_user_ids_size() const {
  return _impl_.user_ids_.size();
}
inline int AsyncUserDatasReq::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void AsyncUserDatasReq::clear_user_ids() {
  _impl_.user_ids_.Clear();
}
inline int64_t AsyncUserDatasReq::_internal_user_ids(int index) const {
  return _impl_.user_ids_.Get(index);
}
inline int64_t AsyncUserDatasReq::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.userinfo.AsyncUserDatasReq.user_ids)
  return _internal_user_ids(index);
}
inline void AsyncUserDatasReq::set_user_ids(int index, int64_t value) {
  _impl_.user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.userinfo.AsyncUserDatasReq.user_ids)
}
inline void AsyncUserDatasReq::_internal_add_user_ids(int64_t value) {
  _impl_.user_ids_.Add(value);
}
inline void AsyncUserDatasReq::add_user_ids(int64_t value) {
  _internal_add_user_ids(value);
  // @@protoc_insertion_point(field_add:pb.userinfo.AsyncUserDatasReq.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AsyncUserDatasReq::_internal_user_ids() const {
  return _impl_.user_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AsyncUserDatasReq::user_ids() const {
  // @@protoc_insertion_point(field_list:pb.userinfo.AsyncUserDatasReq.user_ids)
  return _internal_user_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AsyncUserDatasReq::_internal_mutable_user_ids() {
  return &_impl_.user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AsyncUserDatasReq::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.userinfo.AsyncUserDatasReq.user_ids)
  return _internal_mutable_user_ids();
}

// -------------------------------------------------------------------

// AsyncUserDatasResp

// repeated .pb.userinfo.UserData user_datas = 1;
inline int AsyncUserDatasResp::_internal_user_datas_size() const {
  return _impl_.user_datas_.size();
}
inline int AsyncUserDatasResp::user_datas_size() const {
  return _internal_user_datas_size();
}
inline void AsyncUserDatasResp::clear_user_datas() {
  _impl_.user_datas_.Clear();
}
inline ::pb::userinfo::UserData* AsyncUserDatasResp::mutable_user_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.userinfo.AsyncUserDatasResp.user_datas)
  return _impl_.user_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::UserData >*
AsyncUserDatasResp::mutable_user_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.userinfo.AsyncUserDatasResp.user_datas)
  return &_impl_.user_datas_;
}
inline const ::pb::userinfo::UserData& AsyncUserDatasResp::_internal_user_datas(int index) const {
  return _impl_.user_datas_.Get(index);
}
inline const ::pb::userinfo::UserData& AsyncUserDatasResp::user_datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.userinfo.AsyncUserDatasResp.user_datas)
  return _internal_user_datas(index);
}
inline ::pb::userinfo::UserData* AsyncUserDatasResp::_internal_add_user_datas() {
  return _impl_.user_datas_.Add();
}
inline ::pb::userinfo::UserData* AsyncUserDatasResp::add_user_datas() {
  ::pb::userinfo::UserData* _add = _internal_add_user_datas();
  // @@protoc_insertion_point(field_add:pb.userinfo.AsyncUserDatasResp.user_datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::UserData >&
AsyncUserDatasResp::user_datas() const {
  // @@protoc_insertion_point(field_list:pb.userinfo.AsyncUserDatasResp.user_datas)
  return _impl_.user_datas_;
}

// -------------------------------------------------------------------

// UserInfo

// int32 map_id = 1;
inline void UserInfo::clear_map_id() {
  _impl_.map_id_ = 0;
}
inline int32_t UserInfo::_internal_map_id() const {
  return _impl_.map_id_;
}
inline int32_t UserInfo::map_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.map_id)
  return _internal_map_id();
}
inline void UserInfo::_internal_set_map_id(int32_t value) {
  
  _impl_.map_id_ = value;
}
inline void UserInfo::set_map_id(int32_t value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.map_id)
}

// int64 user_id = 2;
inline void UserInfo::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t UserInfo::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.user_id)
  return _internal_user_id();
}
inline void UserInfo::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void UserInfo::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.user_id)
}

// string user_name = 3;
inline void UserInfo::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& UserInfo::user_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.user_name)
}
inline std::string* UserInfo::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserInfo.user_name)
  return _s;
}
inline const std::string& UserInfo::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void UserInfo::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserInfo.user_name)
  return _impl_.user_name_.Release();
}
inline void UserInfo::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserInfo.user_name)
}

// int32 head_id = 4;
inline void UserInfo::clear_head_id() {
  _impl_.head_id_ = 0;
}
inline int32_t UserInfo::_internal_head_id() const {
  return _impl_.head_id_;
}
inline int32_t UserInfo::head_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.head_id)
  return _internal_head_id();
}
inline void UserInfo::_internal_set_head_id(int32_t value) {
  
  _impl_.head_id_ = value;
}
inline void UserInfo::set_head_id(int32_t value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.head_id)
}

// int32 power = 5;
inline void UserInfo::clear_power() {
  _impl_.power_ = 0;
}
inline int32_t UserInfo::_internal_power() const {
  return _impl_.power_;
}
inline int32_t UserInfo::power() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.power)
  return _internal_power();
}
inline void UserInfo::_internal_set_power(int32_t value) {
  
  _impl_.power_ = value;
}
inline void UserInfo::set_power(int32_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.power)
}

// string presentation = 6;
inline void UserInfo::clear_presentation() {
  _impl_.presentation_.ClearToEmpty();
}
inline const std::string& UserInfo::presentation() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.presentation)
  return _internal_presentation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_presentation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.presentation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.presentation)
}
inline std::string* UserInfo::mutable_presentation() {
  std::string* _s = _internal_mutable_presentation();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserInfo.presentation)
  return _s;
}
inline const std::string& UserInfo::_internal_presentation() const {
  return _impl_.presentation_.Get();
}
inline void UserInfo::_internal_set_presentation(const std::string& value) {
  
  _impl_.presentation_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_presentation() {
  
  return _impl_.presentation_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_presentation() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserInfo.presentation)
  return _impl_.presentation_.Release();
}
inline void UserInfo::set_allocated_presentation(std::string* presentation) {
  if (presentation != nullptr) {
    
  } else {
    
  }
  _impl_.presentation_.SetAllocated(presentation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.presentation_.IsDefault()) {
    _impl_.presentation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserInfo.presentation)
}

// int32 guild_id = 7;
inline void UserInfo::clear_guild_id() {
  _impl_.guild_id_ = 0;
}
inline int32_t UserInfo::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline int32_t UserInfo::guild_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.guild_id)
  return _internal_guild_id();
}
inline void UserInfo::_internal_set_guild_id(int32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void UserInfo::set_guild_id(int32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.guild_id)
}

// string guild_name = 8;
inline void UserInfo::clear_guild_name() {
  _impl_.guild_name_.ClearToEmpty();
}
inline const std::string& UserInfo::guild_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.guild_name)
  return _internal_guild_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_guild_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guild_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.guild_name)
}
inline std::string* UserInfo::mutable_guild_name() {
  std::string* _s = _internal_mutable_guild_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserInfo.guild_name)
  return _s;
}
inline const std::string& UserInfo::_internal_guild_name() const {
  return _impl_.guild_name_.Get();
}
inline void UserInfo::_internal_set_guild_name(const std::string& value) {
  
  _impl_.guild_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_guild_name() {
  
  return _impl_.guild_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_guild_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserInfo.guild_name)
  return _impl_.guild_name_.Release();
}
inline void UserInfo::set_allocated_guild_name(std::string* guild_name) {
  if (guild_name != nullptr) {
    
  } else {
    
  }
  _impl_.guild_name_.SetAllocated(guild_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_name_.IsDefault()) {
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserInfo.guild_name)
}

// string guild_group_name = 9;
inline void UserInfo::clear_guild_group_name() {
  _impl_.guild_group_name_.ClearToEmpty();
}
inline const std::string& UserInfo::guild_group_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.guild_group_name)
  return _internal_guild_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_guild_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guild_group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.guild_group_name)
}
inline std::string* UserInfo::mutable_guild_group_name() {
  std::string* _s = _internal_mutable_guild_group_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserInfo.guild_group_name)
  return _s;
}
inline const std::string& UserInfo::_internal_guild_group_name() const {
  return _impl_.guild_group_name_.Get();
}
inline void UserInfo::_internal_set_guild_group_name(const std::string& value) {
  
  _impl_.guild_group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_guild_group_name() {
  
  return _impl_.guild_group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_guild_group_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserInfo.guild_group_name)
  return _impl_.guild_group_name_.Release();
}
inline void UserInfo::set_allocated_guild_group_name(std::string* guild_group_name) {
  if (guild_group_name != nullptr) {
    
  } else {
    
  }
  _impl_.guild_group_name_.SetAllocated(guild_group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_group_name_.IsDefault()) {
    _impl_.guild_group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserInfo.guild_group_name)
}

// int32 officer = 10;
inline void UserInfo::clear_officer() {
  _impl_.officer_ = 0;
}
inline int32_t UserInfo::_internal_officer() const {
  return _impl_.officer_;
}
inline int32_t UserInfo::officer() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.officer)
  return _internal_officer();
}
inline void UserInfo::_internal_set_officer(int32_t value) {
  
  _impl_.officer_ = value;
}
inline void UserInfo::set_officer(int32_t value) {
  _internal_set_officer(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.officer)
}

// int32 captive_guild_id = 11;
inline void UserInfo::clear_captive_guild_id() {
  _impl_.captive_guild_id_ = 0;
}
inline int32_t UserInfo::_internal_captive_guild_id() const {
  return _impl_.captive_guild_id_;
}
inline int32_t UserInfo::captive_guild_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.captive_guild_id)
  return _internal_captive_guild_id();
}
inline void UserInfo::_internal_set_captive_guild_id(int32_t value) {
  
  _impl_.captive_guild_id_ = value;
}
inline void UserInfo::set_captive_guild_id(int32_t value) {
  _internal_set_captive_guild_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.captive_guild_id)
}

// string captive_guild_name = 12;
inline void UserInfo::clear_captive_guild_name() {
  _impl_.captive_guild_name_.ClearToEmpty();
}
inline const std::string& UserInfo::captive_guild_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfo.captive_guild_name)
  return _internal_captive_guild_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_captive_guild_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.captive_guild_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfo.captive_guild_name)
}
inline std::string* UserInfo::mutable_captive_guild_name() {
  std::string* _s = _internal_mutable_captive_guild_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserInfo.captive_guild_name)
  return _s;
}
inline const std::string& UserInfo::_internal_captive_guild_name() const {
  return _impl_.captive_guild_name_.Get();
}
inline void UserInfo::_internal_set_captive_guild_name(const std::string& value) {
  
  _impl_.captive_guild_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_captive_guild_name() {
  
  return _impl_.captive_guild_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_captive_guild_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserInfo.captive_guild_name)
  return _impl_.captive_guild_name_.Release();
}
inline void UserInfo::set_allocated_captive_guild_name(std::string* captive_guild_name) {
  if (captive_guild_name != nullptr) {
    
  } else {
    
  }
  _impl_.captive_guild_name_.SetAllocated(captive_guild_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captive_guild_name_.IsDefault()) {
    _impl_.captive_guild_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserInfo.captive_guild_name)
}

// -------------------------------------------------------------------

// UserInfoReq

// int64 user_id = 1;
inline void UserInfoReq::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t UserInfoReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t UserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfoReq.user_id)
  return _internal_user_id();
}
inline void UserInfoReq::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void UserInfoReq::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfoReq.user_id)
}

// -------------------------------------------------------------------

// UserInfoResp

// uint32 error_code = 1;
inline void UserInfoResp::clear_error_code() {
  _impl_.error_code_ = 0u;
}
inline uint32_t UserInfoResp::_internal_error_code() const {
  return _impl_.error_code_;
}
inline uint32_t UserInfoResp::error_code() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfoResp.error_code)
  return _internal_error_code();
}
inline void UserInfoResp::_internal_set_error_code(uint32_t value) {
  
  _impl_.error_code_ = value;
}
inline void UserInfoResp::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.UserInfoResp.error_code)
}

// .pb.userinfo.UserInfo user_info = 2;
inline bool UserInfoResp::_internal_has_user_info() const {
  return this != internal_default_instance() && _impl_.user_info_ != nullptr;
}
inline bool UserInfoResp::has_user_info() const {
  return _internal_has_user_info();
}
inline void UserInfoResp::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
}
inline const ::pb::userinfo::UserInfo& UserInfoResp::_internal_user_info() const {
  const ::pb::userinfo::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::userinfo::UserInfo&>(
      ::pb::userinfo::_UserInfo_default_instance_);
}
inline const ::pb::userinfo::UserInfo& UserInfoResp::user_info() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.UserInfoResp.user_info)
  return _internal_user_info();
}
inline void UserInfoResp::unsafe_arena_set_allocated_user_info(
    ::pb::userinfo::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.userinfo.UserInfoResp.user_info)
}
inline ::pb::userinfo::UserInfo* UserInfoResp::release_user_info() {
  
  ::pb::userinfo::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::userinfo::UserInfo* UserInfoResp::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:pb.userinfo.UserInfoResp.user_info)
  
  ::pb::userinfo::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::pb::userinfo::UserInfo* UserInfoResp::_internal_mutable_user_info() {
  
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::userinfo::UserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = p;
  }
  return _impl_.user_info_;
}
inline ::pb::userinfo::UserInfo* UserInfoResp::mutable_user_info() {
  ::pb::userinfo::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.UserInfoResp.user_info)
  return _msg;
}
inline void UserInfoResp::set_allocated_user_info(::pb::userinfo::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.UserInfoResp.user_info)
}

// -------------------------------------------------------------------

// SearchInfo

// int64 user_id = 1;
inline void SearchInfo::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SearchInfo::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SearchInfo::user_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchInfo.user_id)
  return _internal_user_id();
}
inline void SearchInfo::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SearchInfo::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchInfo.user_id)
}

// int32 map_id = 2;
inline void SearchInfo::clear_map_id() {
  _impl_.map_id_ = 0;
}
inline int32_t SearchInfo::_internal_map_id() const {
  return _impl_.map_id_;
}
inline int32_t SearchInfo::map_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchInfo.map_id)
  return _internal_map_id();
}
inline void SearchInfo::_internal_set_map_id(int32_t value) {
  
  _impl_.map_id_ = value;
}
inline void SearchInfo::set_map_id(int32_t value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchInfo.map_id)
}

// string user_name = 3;
inline void SearchInfo::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& SearchInfo::user_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchInfo.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchInfo::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchInfo.user_name)
}
inline std::string* SearchInfo::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.SearchInfo.user_name)
  return _s;
}
inline const std::string& SearchInfo::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void SearchInfo::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchInfo::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.SearchInfo.user_name)
  return _impl_.user_name_.Release();
}
inline void SearchInfo::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.SearchInfo.user_name)
}

// int32 head_id = 4;
inline void SearchInfo::clear_head_id() {
  _impl_.head_id_ = 0;
}
inline int32_t SearchInfo::_internal_head_id() const {
  return _impl_.head_id_;
}
inline int32_t SearchInfo::head_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchInfo.head_id)
  return _internal_head_id();
}
inline void SearchInfo::_internal_set_head_id(int32_t value) {
  
  _impl_.head_id_ = value;
}
inline void SearchInfo::set_head_id(int32_t value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchInfo.head_id)
}

// int32 power = 5;
inline void SearchInfo::clear_power() {
  _impl_.power_ = 0;
}
inline int32_t SearchInfo::_internal_power() const {
  return _impl_.power_;
}
inline int32_t SearchInfo::power() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchInfo.power)
  return _internal_power();
}
inline void SearchInfo::_internal_set_power(int32_t value) {
  
  _impl_.power_ = value;
}
inline void SearchInfo::set_power(int32_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchInfo.power)
}

// int32 game_id = 6;
inline void SearchInfo::clear_game_id() {
  _impl_.game_id_ = 0;
}
inline int32_t SearchInfo::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int32_t SearchInfo::game_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchInfo.game_id)
  return _internal_game_id();
}
inline void SearchInfo::_internal_set_game_id(int32_t value) {
  
  _impl_.game_id_ = value;
}
inline void SearchInfo::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchInfo.game_id)
}

// -------------------------------------------------------------------

// SearchByIdReq

// int64 user_id = 1;
inline void SearchByIdReq::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t SearchByIdReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t SearchByIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchByIdReq.user_id)
  return _internal_user_id();
}
inline void SearchByIdReq::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void SearchByIdReq::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchByIdReq.user_id)
}

// -------------------------------------------------------------------

// SearchByNameReq

// string user_name = 1;
inline void SearchByNameReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& SearchByNameReq::user_name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchByNameReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchByNameReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchByNameReq.user_name)
}
inline std::string* SearchByNameReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.SearchByNameReq.user_name)
  return _s;
}
inline const std::string& SearchByNameReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void SearchByNameReq::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchByNameReq::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchByNameReq::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.SearchByNameReq.user_name)
  return _impl_.user_name_.Release();
}
inline void SearchByNameReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.SearchByNameReq.user_name)
}

// -------------------------------------------------------------------

// SearchResp

// uint32 error_code = 1;
inline void SearchResp::clear_error_code() {
  _impl_.error_code_ = 0u;
}
inline uint32_t SearchResp::_internal_error_code() const {
  return _impl_.error_code_;
}
inline uint32_t SearchResp::error_code() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchResp.error_code)
  return _internal_error_code();
}
inline void SearchResp::_internal_set_error_code(uint32_t value) {
  
  _impl_.error_code_ = value;
}
inline void SearchResp::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.SearchResp.error_code)
}

// repeated .pb.userinfo.SearchInfo search_infos = 2;
inline int SearchResp::_internal_search_infos_size() const {
  return _impl_.search_infos_.size();
}
inline int SearchResp::search_infos_size() const {
  return _internal_search_infos_size();
}
inline void SearchResp::clear_search_infos() {
  _impl_.search_infos_.Clear();
}
inline ::pb::userinfo::SearchInfo* SearchResp::mutable_search_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.userinfo.SearchResp.search_infos)
  return _impl_.search_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::SearchInfo >*
SearchResp::mutable_search_infos() {
  // @@protoc_insertion_point(field_mutable_list:pb.userinfo.SearchResp.search_infos)
  return &_impl_.search_infos_;
}
inline const ::pb::userinfo::SearchInfo& SearchResp::_internal_search_infos(int index) const {
  return _impl_.search_infos_.Get(index);
}
inline const ::pb::userinfo::SearchInfo& SearchResp::search_infos(int index) const {
  // @@protoc_insertion_point(field_get:pb.userinfo.SearchResp.search_infos)
  return _internal_search_infos(index);
}
inline ::pb::userinfo::SearchInfo* SearchResp::_internal_add_search_infos() {
  return _impl_.search_infos_.Add();
}
inline ::pb::userinfo::SearchInfo* SearchResp::add_search_infos() {
  ::pb::userinfo::SearchInfo* _add = _internal_add_search_infos();
  // @@protoc_insertion_point(field_add:pb.userinfo.SearchResp.search_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::SearchInfo >&
SearchResp::search_infos() const {
  // @@protoc_insertion_point(field_list:pb.userinfo.SearchResp.search_infos)
  return _impl_.search_infos_;
}

// -------------------------------------------------------------------

// NewUser

// .pb.userinfo.E_UserFlag flag = 1;
inline void NewUser::clear_flag() {
  _impl_.flag_ = 0;
}
inline ::pb::userinfo::E_UserFlag NewUser::_internal_flag() const {
  return static_cast< ::pb::userinfo::E_UserFlag >(_impl_.flag_);
}
inline ::pb::userinfo::E_UserFlag NewUser::flag() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.NewUser.flag)
  return _internal_flag();
}
inline void NewUser::_internal_set_flag(::pb::userinfo::E_UserFlag value) {
  
  _impl_.flag_ = value;
}
inline void NewUser::set_flag(::pb::userinfo::E_UserFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.NewUser.flag)
}

// string name = 2;
inline void NewUser::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NewUser::name() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.NewUser.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewUser::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.userinfo.NewUser.name)
}
inline std::string* NewUser::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.userinfo.NewUser.name)
  return _s;
}
inline const std::string& NewUser::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NewUser::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NewUser::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NewUser::release_name() {
  // @@protoc_insertion_point(field_release:pb.userinfo.NewUser.name)
  return _impl_.name_.Release();
}
inline void NewUser::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.userinfo.NewUser.name)
}

// int32 head_id = 3;
inline void NewUser::clear_head_id() {
  _impl_.head_id_ = 0;
}
inline int32_t NewUser::_internal_head_id() const {
  return _impl_.head_id_;
}
inline int32_t NewUser::head_id() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.NewUser.head_id)
  return _internal_head_id();
}
inline void NewUser::_internal_set_head_id(int32_t value) {
  
  _impl_.head_id_ = value;
}
inline void NewUser::set_head_id(int32_t value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.NewUser.head_id)
}

// -------------------------------------------------------------------

// NoviceField

// int32 q = 1;
inline void NoviceField::clear_q() {
  _impl_.q_ = 0;
}
inline int32_t NoviceField::_internal_q() const {
  return _impl_.q_;
}
inline int32_t NoviceField::q() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.NoviceField.q)
  return _internal_q();
}
inline void NoviceField::_internal_set_q(int32_t value) {
  
  _impl_.q_ = value;
}
inline void NoviceField::set_q(int32_t value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.NoviceField.q)
}

// int32 r = 2;
inline void NoviceField::clear_r() {
  _impl_.r_ = 0;
}
inline int32_t NoviceField::_internal_r() const {
  return _impl_.r_;
}
inline int32_t NoviceField::r() const {
  // @@protoc_insertion_point(field_get:pb.userinfo.NoviceField.r)
  return _internal_r();
}
inline void NoviceField::_internal_set_r(int32_t value) {
  
  _impl_.r_ = value;
}
inline void NoviceField::set_r(int32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:pb.userinfo.NoviceField.r)
}

// -------------------------------------------------------------------

// RespNoviceData

// repeated .pb.userinfo.NoviceField fields = 1;
inline int RespNoviceData::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int RespNoviceData::fields_size() const {
  return _internal_fields_size();
}
inline void RespNoviceData::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::pb::userinfo::NoviceField* RespNoviceData::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:pb.userinfo.RespNoviceData.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::NoviceField >*
RespNoviceData::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:pb.userinfo.RespNoviceData.fields)
  return &_impl_.fields_;
}
inline const ::pb::userinfo::NoviceField& RespNoviceData::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::pb::userinfo::NoviceField& RespNoviceData::fields(int index) const {
  // @@protoc_insertion_point(field_get:pb.userinfo.RespNoviceData.fields)
  return _internal_fields(index);
}
inline ::pb::userinfo::NoviceField* RespNoviceData::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::pb::userinfo::NoviceField* RespNoviceData::add_fields() {
  ::pb::userinfo::NoviceField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:pb.userinfo.RespNoviceData.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::userinfo::NoviceField >&
RespNoviceData::fields() const {
  // @@protoc_insertion_point(field_list:pb.userinfo.RespNoviceData.fields)
  return _impl_.fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userinfo
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::userinfo::E_Cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::userinfo::E_Cmd>() {
  return ::pb::userinfo::E_Cmd_descriptor();
}
template <> struct is_proto_enum< ::pb::userinfo::E_UserFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::userinfo::E_UserFlag>() {
  return ::pb::userinfo::E_UserFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userinfo_2eproto
