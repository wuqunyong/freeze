// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[43]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto;
namespace pb {
namespace map {
class Base_Operate;
class Base_OperateDefaultTypeInternal;
extern Base_OperateDefaultTypeInternal _Base_Operate_default_instance_;
class Building;
class BuildingDefaultTypeInternal;
extern BuildingDefaultTypeInternal _Building_default_instance_;
class CampaignScale;
class CampaignScaleDefaultTypeInternal;
extern CampaignScaleDefaultTypeInternal _CampaignScale_default_instance_;
class Choose_Country;
class Choose_CountryDefaultTypeInternal;
extern Choose_CountryDefaultTypeInternal _Choose_Country_default_instance_;
class Collect_Map_OP;
class Collect_Map_OPDefaultTypeInternal;
extern Collect_Map_OPDefaultTypeInternal _Collect_Map_OP_default_instance_;
class CombatantUser;
class CombatantUserDefaultTypeInternal;
extern CombatantUserDefaultTypeInternal _CombatantUser_default_instance_;
class Country;
class CountryDefaultTypeInternal;
extern CountryDefaultTypeInternal _Country_default_instance_;
class Country_Info;
class Country_InfoDefaultTypeInternal;
extern Country_InfoDefaultTypeInternal _Country_Info_default_instance_;
class FieldScout;
class FieldScoutDefaultTypeInternal;
extern FieldScoutDefaultTypeInternal _FieldScout_default_instance_;
class HEX;
class HEXDefaultTypeInternal;
extern HEXDefaultTypeInternal _HEX_default_instance_;
class MapCampaign;
class MapCampaignDefaultTypeInternal;
extern MapCampaignDefaultTypeInternal _MapCampaign_default_instance_;
class MapCampaignResp;
class MapCampaignRespDefaultTypeInternal;
extern MapCampaignRespDefaultTypeInternal _MapCampaignResp_default_instance_;
class MapUserData;
class MapUserDataDefaultTypeInternal;
extern MapUserDataDefaultTypeInternal _MapUserData_default_instance_;
class Map_Building;
class Map_BuildingDefaultTypeInternal;
extern Map_BuildingDefaultTypeInternal _Map_Building_default_instance_;
class Map_Field;
class Map_FieldDefaultTypeInternal;
extern Map_FieldDefaultTypeInternal _Map_Field_default_instance_;
class Map_Objs;
class Map_ObjsDefaultTypeInternal;
extern Map_ObjsDefaultTypeInternal _Map_Objs_default_instance_;
class Map_RecoverField;
class Map_RecoverFieldDefaultTypeInternal;
extern Map_RecoverFieldDefaultTypeInternal _Map_RecoverField_default_instance_;
class Map_Troop;
class Map_TroopDefaultTypeInternal;
extern Map_TroopDefaultTypeInternal _Map_Troop_default_instance_;
class Map_WildBuilding;
class Map_WildBuildingDefaultTypeInternal;
extern Map_WildBuildingDefaultTypeInternal _Map_WildBuilding_default_instance_;
class Map_WildNpcTroop;
class Map_WildNpcTroopDefaultTypeInternal;
extern Map_WildNpcTroopDefaultTypeInternal _Map_WildNpcTroop_default_instance_;
class March_Path;
class March_PathDefaultTypeInternal;
extern March_PathDefaultTypeInternal _March_Path_default_instance_;
class Migrate;
class MigrateDefaultTypeInternal;
extern MigrateDefaultTypeInternal _Migrate_default_instance_;
class Move_City;
class Move_CityDefaultTypeInternal;
extern Move_CityDefaultTypeInternal _Move_City_default_instance_;
class Obstacle_Path;
class Obstacle_PathDefaultTypeInternal;
extern Obstacle_PathDefaultTypeInternal _Obstacle_Path_default_instance_;
class PrivateNpc_Troop;
class PrivateNpc_TroopDefaultTypeInternal;
extern PrivateNpc_TroopDefaultTypeInternal _PrivateNpc_Troop_default_instance_;
class Private_Map_Objs;
class Private_Map_ObjsDefaultTypeInternal;
extern Private_Map_ObjsDefaultTypeInternal _Private_Map_Objs_default_instance_;
class Ranking;
class RankingDefaultTypeInternal;
extern RankingDefaultTypeInternal _Ranking_default_instance_;
class Rep_ClearScout;
class Rep_ClearScoutDefaultTypeInternal;
extern Rep_ClearScoutDefaultTypeInternal _Rep_ClearScout_default_instance_;
class Rep_DeleteScout;
class Rep_DeleteScoutDefaultTypeInternal;
extern Rep_DeleteScoutDefaultTypeInternal _Rep_DeleteScout_default_instance_;
class Rep_Scout;
class Rep_ScoutDefaultTypeInternal;
extern Rep_ScoutDefaultTypeInternal _Rep_Scout_default_instance_;
class Rep_SearchMapObj;
class Rep_SearchMapObjDefaultTypeInternal;
extern Rep_SearchMapObjDefaultTypeInternal _Rep_SearchMapObj_default_instance_;
class Rep_Timer_list;
class Rep_Timer_listDefaultTypeInternal;
extern Rep_Timer_listDefaultTypeInternal _Rep_Timer_list_default_instance_;
class Req_ChgMap;
class Req_ChgMapDefaultTypeInternal;
extern Req_ChgMapDefaultTypeInternal _Req_ChgMap_default_instance_;
class Req_Map_Chk_View;
class Req_Map_Chk_ViewDefaultTypeInternal;
extern Req_Map_Chk_ViewDefaultTypeInternal _Req_Map_Chk_View_default_instance_;
class Req_Scout;
class Req_ScoutDefaultTypeInternal;
extern Req_ScoutDefaultTypeInternal _Req_Scout_default_instance_;
class Req_SearchMapObj;
class Req_SearchMapObjDefaultTypeInternal;
extern Req_SearchMapObjDefaultTypeInternal _Req_SearchMapObj_default_instance_;
class Resp_MapOperate;
class Resp_MapOperateDefaultTypeInternal;
extern Resp_MapOperateDefaultTypeInternal _Resp_MapOperate_default_instance_;
class Resurgence;
class ResurgenceDefaultTypeInternal;
extern ResurgenceDefaultTypeInternal _Resurgence_default_instance_;
class Robot_AI_Model;
class Robot_AI_ModelDefaultTypeInternal;
extern Robot_AI_ModelDefaultTypeInternal _Robot_AI_Model_default_instance_;
class TimerTask;
class TimerTaskDefaultTypeInternal;
extern TimerTaskDefaultTypeInternal _TimerTask_default_instance_;
class TroopScout;
class TroopScoutDefaultTypeInternal;
extern TroopScoutDefaultTypeInternal _TroopScout_default_instance_;
class Troop_Map_OP;
class Troop_Map_OPDefaultTypeInternal;
extern Troop_Map_OPDefaultTypeInternal _Troop_Map_OP_default_instance_;
class Troop_Path_Query;
class Troop_Path_QueryDefaultTypeInternal;
extern Troop_Path_QueryDefaultTypeInternal _Troop_Path_Query_default_instance_;
}  // namespace map
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::map::Base_Operate* Arena::CreateMaybeMessage<::pb::map::Base_Operate>(Arena*);
template<> ::pb::map::Building* Arena::CreateMaybeMessage<::pb::map::Building>(Arena*);
template<> ::pb::map::CampaignScale* Arena::CreateMaybeMessage<::pb::map::CampaignScale>(Arena*);
template<> ::pb::map::Choose_Country* Arena::CreateMaybeMessage<::pb::map::Choose_Country>(Arena*);
template<> ::pb::map::Collect_Map_OP* Arena::CreateMaybeMessage<::pb::map::Collect_Map_OP>(Arena*);
template<> ::pb::map::CombatantUser* Arena::CreateMaybeMessage<::pb::map::CombatantUser>(Arena*);
template<> ::pb::map::Country* Arena::CreateMaybeMessage<::pb::map::Country>(Arena*);
template<> ::pb::map::Country_Info* Arena::CreateMaybeMessage<::pb::map::Country_Info>(Arena*);
template<> ::pb::map::FieldScout* Arena::CreateMaybeMessage<::pb::map::FieldScout>(Arena*);
template<> ::pb::map::HEX* Arena::CreateMaybeMessage<::pb::map::HEX>(Arena*);
template<> ::pb::map::MapCampaign* Arena::CreateMaybeMessage<::pb::map::MapCampaign>(Arena*);
template<> ::pb::map::MapCampaignResp* Arena::CreateMaybeMessage<::pb::map::MapCampaignResp>(Arena*);
template<> ::pb::map::MapUserData* Arena::CreateMaybeMessage<::pb::map::MapUserData>(Arena*);
template<> ::pb::map::Map_Building* Arena::CreateMaybeMessage<::pb::map::Map_Building>(Arena*);
template<> ::pb::map::Map_Field* Arena::CreateMaybeMessage<::pb::map::Map_Field>(Arena*);
template<> ::pb::map::Map_Objs* Arena::CreateMaybeMessage<::pb::map::Map_Objs>(Arena*);
template<> ::pb::map::Map_RecoverField* Arena::CreateMaybeMessage<::pb::map::Map_RecoverField>(Arena*);
template<> ::pb::map::Map_Troop* Arena::CreateMaybeMessage<::pb::map::Map_Troop>(Arena*);
template<> ::pb::map::Map_WildBuilding* Arena::CreateMaybeMessage<::pb::map::Map_WildBuilding>(Arena*);
template<> ::pb::map::Map_WildNpcTroop* Arena::CreateMaybeMessage<::pb::map::Map_WildNpcTroop>(Arena*);
template<> ::pb::map::March_Path* Arena::CreateMaybeMessage<::pb::map::March_Path>(Arena*);
template<> ::pb::map::Migrate* Arena::CreateMaybeMessage<::pb::map::Migrate>(Arena*);
template<> ::pb::map::Move_City* Arena::CreateMaybeMessage<::pb::map::Move_City>(Arena*);
template<> ::pb::map::Obstacle_Path* Arena::CreateMaybeMessage<::pb::map::Obstacle_Path>(Arena*);
template<> ::pb::map::PrivateNpc_Troop* Arena::CreateMaybeMessage<::pb::map::PrivateNpc_Troop>(Arena*);
template<> ::pb::map::Private_Map_Objs* Arena::CreateMaybeMessage<::pb::map::Private_Map_Objs>(Arena*);
template<> ::pb::map::Ranking* Arena::CreateMaybeMessage<::pb::map::Ranking>(Arena*);
template<> ::pb::map::Rep_ClearScout* Arena::CreateMaybeMessage<::pb::map::Rep_ClearScout>(Arena*);
template<> ::pb::map::Rep_DeleteScout* Arena::CreateMaybeMessage<::pb::map::Rep_DeleteScout>(Arena*);
template<> ::pb::map::Rep_Scout* Arena::CreateMaybeMessage<::pb::map::Rep_Scout>(Arena*);
template<> ::pb::map::Rep_SearchMapObj* Arena::CreateMaybeMessage<::pb::map::Rep_SearchMapObj>(Arena*);
template<> ::pb::map::Rep_Timer_list* Arena::CreateMaybeMessage<::pb::map::Rep_Timer_list>(Arena*);
template<> ::pb::map::Req_ChgMap* Arena::CreateMaybeMessage<::pb::map::Req_ChgMap>(Arena*);
template<> ::pb::map::Req_Map_Chk_View* Arena::CreateMaybeMessage<::pb::map::Req_Map_Chk_View>(Arena*);
template<> ::pb::map::Req_Scout* Arena::CreateMaybeMessage<::pb::map::Req_Scout>(Arena*);
template<> ::pb::map::Req_SearchMapObj* Arena::CreateMaybeMessage<::pb::map::Req_SearchMapObj>(Arena*);
template<> ::pb::map::Resp_MapOperate* Arena::CreateMaybeMessage<::pb::map::Resp_MapOperate>(Arena*);
template<> ::pb::map::Resurgence* Arena::CreateMaybeMessage<::pb::map::Resurgence>(Arena*);
template<> ::pb::map::Robot_AI_Model* Arena::CreateMaybeMessage<::pb::map::Robot_AI_Model>(Arena*);
template<> ::pb::map::TimerTask* Arena::CreateMaybeMessage<::pb::map::TimerTask>(Arena*);
template<> ::pb::map::TroopScout* Arena::CreateMaybeMessage<::pb::map::TroopScout>(Arena*);
template<> ::pb::map::Troop_Map_OP* Arena::CreateMaybeMessage<::pb::map::Troop_Map_OP>(Arena*);
template<> ::pb::map::Troop_Path_Query* Arena::CreateMaybeMessage<::pb::map::Troop_Path_Query>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace map {

enum E_Map_CMD : int {
  SynTroop = 0,
  Scout = 1,
  Attack_Occupy = 2,
  March = 3,
  Transfer = 4,
  Garrison = 5,
  WipeOut = 6,
  Reclamation = 7,
  Attack_City = 8,
  Suppress = 9,
  CreateBuilding = 10,
  Crusade = 11,
  BuildingLvUp = 12,
  CallRedif = 13,
  Rescue = 14,
  Annihilate = 15,
  Besiege = 16,
  QueryRoute = 20,
  ReqViewPos = 21,
  MapObjList = 22,
  SynNewBuilding = 23,
  SynBuilding = 24,
  DiscardField = 25,
  ChooseNation = 26,
  AbortMarch = 27,
  BackCity = 28,
  SpecialDefense = 29,
  CollectField = 100,
  CancelCollectField = 101,
  MoveCity = 102,
  CloseCity = 103,
  CancelCloseCity = 104,
  BackCityQuick = 105,
  EmergencyEvacuation = 106,
  CMD_MIGRATE = 107,
  Retracement = 108,
  CancelDiscardField = 109,
  PrivateMapObjList = 110,
  RepScout = 111,
  RepDeleteScout = 112,
  RepClearScout = 113,
  ReqMapInfo = 114,
  RespMapBuildingInfo = 115,
  RespMapCampaign = 116,
  QueryObstacleRoute = 117,
  CountryInfo = 118,
  ChooseCountry = 119,
  RespCampaignScale = 120,
  RespNpcBuildingOccupy = 121,
  ReqSearchMapObj = 122,
  CmdEnterMap = 123,
  RepTimerLst = 124,
  ReqChgMap = 125,
  RespDelPrivateMapObjList = 126,
  RespDelMap_RecoverField = 127,
  ReqMapChkView = 128,
  SynMapUserInfo = 129,
  RobotMarch = 180,
  RobotQueryRoute = 181,
  RobotOccupy = 182,
  RobotAtkCity = 183,
  RobotBackCity = 184,
  RobotAbortMarch = 185,
  RobotGarrison = 186,
  RobotAIModel = 187,
  RespMapOperate = 199,
  E_Map_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  E_Map_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool E_Map_CMD_IsValid(int value);
constexpr E_Map_CMD E_Map_CMD_MIN = SynTroop;
constexpr E_Map_CMD E_Map_CMD_MAX = RespMapOperate;
constexpr int E_Map_CMD_ARRAYSIZE = E_Map_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Map_CMD_descriptor();
template<typename T>
inline const std::string& E_Map_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_Map_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_Map_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_Map_CMD_descriptor(), enum_t_value);
}
inline bool E_Map_CMD_Parse(
    const std::string& name, E_Map_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_Map_CMD>(
    E_Map_CMD_descriptor(), name, value);
}
enum E_AIBehavior_Type : int {
  E_AIBehavior_None = 0,
  E_AIBehavior_Line = 1,
  E_AIBehavior_Round = 2,
  E_AIBehavior_Sector = 3,
  E_AIBehavior_Propel = 4,
  E_AIBehavior_Situ = 5,
  E_AIBehavior_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  E_AIBehavior_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool E_AIBehavior_Type_IsValid(int value);
constexpr E_AIBehavior_Type E_AIBehavior_Type_MIN = E_AIBehavior_None;
constexpr E_AIBehavior_Type E_AIBehavior_Type_MAX = E_AIBehavior_Situ;
constexpr int E_AIBehavior_Type_ARRAYSIZE = E_AIBehavior_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_AIBehavior_Type_descriptor();
template<typename T>
inline const std::string& E_AIBehavior_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_AIBehavior_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_AIBehavior_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_AIBehavior_Type_descriptor(), enum_t_value);
}
inline bool E_AIBehavior_Type_Parse(
    const std::string& name, E_AIBehavior_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_AIBehavior_Type>(
    E_AIBehavior_Type_descriptor(), name, value);
}
enum E_MapCampaignScale : int {
  E_MapCampaignScale_Small = 0,
  E_MapCampaignScale_Medium = 1,
  E_MapCampaignScale_Big = 2,
  E_MapCampaignScale_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  E_MapCampaignScale_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool E_MapCampaignScale_IsValid(int value);
constexpr E_MapCampaignScale E_MapCampaignScale_MIN = E_MapCampaignScale_Small;
constexpr E_MapCampaignScale E_MapCampaignScale_MAX = E_MapCampaignScale_Big;
constexpr int E_MapCampaignScale_ARRAYSIZE = E_MapCampaignScale_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_MapCampaignScale_descriptor();
template<typename T>
inline const std::string& E_MapCampaignScale_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_MapCampaignScale>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_MapCampaignScale_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_MapCampaignScale_descriptor(), enum_t_value);
}
inline bool E_MapCampaignScale_Parse(
    const std::string& name, E_MapCampaignScale* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_MapCampaignScale>(
    E_MapCampaignScale_descriptor(), name, value);
}
// ===================================================================

class Base_Operate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Base_Operate) */ {
 public:
  Base_Operate();
  virtual ~Base_Operate();

  Base_Operate(const Base_Operate& from);
  Base_Operate(Base_Operate&& from) noexcept
    : Base_Operate() {
    *this = ::std::move(from);
  }

  inline Base_Operate& operator=(const Base_Operate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Base_Operate& operator=(Base_Operate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Base_Operate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Base_Operate* internal_default_instance() {
    return reinterpret_cast<const Base_Operate*>(
               &_Base_Operate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Base_Operate& a, Base_Operate& b) {
    a.Swap(&b);
  }
  inline void Swap(Base_Operate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Base_Operate* New() const final {
    return CreateMaybeMessage<Base_Operate>(nullptr);
  }

  Base_Operate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Base_Operate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Base_Operate& from);
  void MergeFrom(const Base_Operate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Base_Operate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Base_Operate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // .pb.map.E_Map_CMD cmd = 1;
  void clear_cmd();
  ::pb::map::E_Map_CMD cmd() const;
  void set_cmd(::pb::map::E_Map_CMD value);
  private:
  ::pb::map::E_Map_CMD _internal_cmd() const;
  void _internal_set_cmd(::pb::map::E_Map_CMD value);
  public:

  // uint32 error_code = 2;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Base_Operate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class HEX :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.HEX) */ {
 public:
  HEX();
  virtual ~HEX();

  HEX(const HEX& from);
  HEX(HEX&& from) noexcept
    : HEX() {
    *this = ::std::move(from);
  }

  inline HEX& operator=(const HEX& from) {
    CopyFrom(from);
    return *this;
  }
  inline HEX& operator=(HEX&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HEX& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HEX* internal_default_instance() {
    return reinterpret_cast<const HEX*>(
               &_HEX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HEX& a, HEX& b) {
    a.Swap(&b);
  }
  inline void Swap(HEX* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HEX* New() const final {
    return CreateMaybeMessage<HEX>(nullptr);
  }

  HEX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HEX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HEX& from);
  void MergeFrom(const HEX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HEX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.HEX";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kRFieldNumber = 2,
  };
  // int32 q = 1;
  void clear_q();
  ::PROTOBUF_NAMESPACE_ID::int32 q() const;
  void set_q(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_q() const;
  void _internal_set_q(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 r = 2;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.HEX)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 q_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Resp_MapOperate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Resp_MapOperate) */ {
 public:
  Resp_MapOperate();
  virtual ~Resp_MapOperate();

  Resp_MapOperate(const Resp_MapOperate& from);
  Resp_MapOperate(Resp_MapOperate&& from) noexcept
    : Resp_MapOperate() {
    *this = ::std::move(from);
  }

  inline Resp_MapOperate& operator=(const Resp_MapOperate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resp_MapOperate& operator=(Resp_MapOperate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resp_MapOperate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resp_MapOperate* internal_default_instance() {
    return reinterpret_cast<const Resp_MapOperate*>(
               &_Resp_MapOperate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Resp_MapOperate& a, Resp_MapOperate& b) {
    a.Swap(&b);
  }
  inline void Swap(Resp_MapOperate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resp_MapOperate* New() const final {
    return CreateMaybeMessage<Resp_MapOperate>(nullptr);
  }

  Resp_MapOperate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resp_MapOperate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resp_MapOperate& from);
  void MergeFrom(const Resp_MapOperate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resp_MapOperate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Resp_MapOperate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTroopIdFieldNumber = 1,
    kOpFieldNumber = 2,
  };
  // int64 troop_id = 1;
  void clear_troop_id();
  ::PROTOBUF_NAMESPACE_ID::int64 troop_id() const;
  void set_troop_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_troop_id() const;
  void _internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .pb.map.E_Map_CMD op = 2;
  void clear_op();
  ::pb::map::E_Map_CMD op() const;
  void set_op(::pb::map::E_Map_CMD value);
  private:
  ::pb::map::E_Map_CMD _internal_op() const;
  void _internal_set_op(::pb::map::E_Map_CMD value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Resp_MapOperate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 troop_id_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Building :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Building) */ {
 public:
  Building();
  virtual ~Building();

  Building(const Building& from);
  Building(Building&& from) noexcept
    : Building() {
    *this = ::std::move(from);
  }

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }
  inline Building& operator=(Building&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Building& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Building* internal_default_instance() {
    return reinterpret_cast<const Building*>(
               &_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Building& a, Building& b) {
    a.Swap(&b);
  }
  inline void Swap(Building* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Building* New() const final {
    return CreateMaybeMessage<Building>(nullptr);
  }

  Building* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Building>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Building* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Building";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 4,
    kIdxFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // .pb.map.HEX pos = 4;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // uint32 idx = 1;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Building)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Troop_Map_OP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Troop_Map_OP) */ {
 public:
  Troop_Map_OP();
  virtual ~Troop_Map_OP();

  Troop_Map_OP(const Troop_Map_OP& from);
  Troop_Map_OP(Troop_Map_OP&& from) noexcept
    : Troop_Map_OP() {
    *this = ::std::move(from);
  }

  inline Troop_Map_OP& operator=(const Troop_Map_OP& from) {
    CopyFrom(from);
    return *this;
  }
  inline Troop_Map_OP& operator=(Troop_Map_OP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Troop_Map_OP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Troop_Map_OP* internal_default_instance() {
    return reinterpret_cast<const Troop_Map_OP*>(
               &_Troop_Map_OP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Troop_Map_OP& a, Troop_Map_OP& b) {
    a.Swap(&b);
  }
  inline void Swap(Troop_Map_OP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Troop_Map_OP* New() const final {
    return CreateMaybeMessage<Troop_Map_OP>(nullptr);
  }

  Troop_Map_OP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Troop_Map_OP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Troop_Map_OP& from);
  void MergeFrom(const Troop_Map_OP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Troop_Map_OP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Troop_Map_OP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPosFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
    kIdxTroopFieldNumber = 3,
    kCountFieldNumber = 4,
    kIsAutoreturnFieldNumber = 5,
    kTargetTypeFieldNumber = 6,
  };
  // .pb.map.HEX end_pos = 2;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::pb::map::HEX& end_pos() const;
  ::pb::map::HEX* release_end_pos();
  ::pb::map::HEX* mutable_end_pos();
  void set_allocated_end_pos(::pb::map::HEX* end_pos);
  private:
  const ::pb::map::HEX& _internal_end_pos() const;
  ::pb::map::HEX* _internal_mutable_end_pos();
  public:

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx_troop = 3;
  void clear_idx_troop();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop() const;
  void set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_troop() const;
  void _internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 is_autoreturn = 5;
  void clear_is_autoreturn();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_autoreturn() const;
  void set_is_autoreturn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_autoreturn() const;
  void _internal_set_is_autoreturn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 target_type = 6;
  void clear_target_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_type() const;
  void set_target_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_type() const;
  void _internal_set_target_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Troop_Map_OP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* end_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_autoreturn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Robot_AI_Model :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Robot_AI_Model) */ {
 public:
  Robot_AI_Model();
  virtual ~Robot_AI_Model();

  Robot_AI_Model(const Robot_AI_Model& from);
  Robot_AI_Model(Robot_AI_Model&& from) noexcept
    : Robot_AI_Model() {
    *this = ::std::move(from);
  }

  inline Robot_AI_Model& operator=(const Robot_AI_Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot_AI_Model& operator=(Robot_AI_Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot_AI_Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot_AI_Model* internal_default_instance() {
    return reinterpret_cast<const Robot_AI_Model*>(
               &_Robot_AI_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Robot_AI_Model& a, Robot_AI_Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot_AI_Model* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot_AI_Model* New() const final {
    return CreateMaybeMessage<Robot_AI_Model>(nullptr);
  }

  Robot_AI_Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot_AI_Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot_AI_Model& from);
  void MergeFrom(const Robot_AI_Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot_AI_Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Robot_AI_Model";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterPosFieldNumber = 4,
    kStartPosFieldNumber = 5,
    kEndPosFieldNumber = 6,
    kErrorCodeFieldNumber = 1,
    kIdxTroopFieldNumber = 2,
    kAiTypeFieldNumber = 3,
    kAlterRadiusFieldNumber = 7,
    kIsClockwiseFieldNumber = 8,
  };
  // .pb.map.HEX center_pos = 4;
  bool has_center_pos() const;
  private:
  bool _internal_has_center_pos() const;
  public:
  void clear_center_pos();
  const ::pb::map::HEX& center_pos() const;
  ::pb::map::HEX* release_center_pos();
  ::pb::map::HEX* mutable_center_pos();
  void set_allocated_center_pos(::pb::map::HEX* center_pos);
  private:
  const ::pb::map::HEX& _internal_center_pos() const;
  ::pb::map::HEX* _internal_mutable_center_pos();
  public:

  // .pb.map.HEX start_pos = 5;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::pb::map::HEX& start_pos() const;
  ::pb::map::HEX* release_start_pos();
  ::pb::map::HEX* mutable_start_pos();
  void set_allocated_start_pos(::pb::map::HEX* start_pos);
  private:
  const ::pb::map::HEX& _internal_start_pos() const;
  ::pb::map::HEX* _internal_mutable_start_pos();
  public:

  // .pb.map.HEX end_pos = 6;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::pb::map::HEX& end_pos() const;
  ::pb::map::HEX* release_end_pos();
  ::pb::map::HEX* mutable_end_pos();
  void set_allocated_end_pos(::pb::map::HEX* end_pos);
  private:
  const ::pb::map::HEX& _internal_end_pos() const;
  ::pb::map::HEX* _internal_mutable_end_pos();
  public:

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx_troop = 2;
  void clear_idx_troop();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop() const;
  void set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_troop() const;
  void _internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pb.map.E_AIBehavior_Type ai_type = 3;
  void clear_ai_type();
  ::pb::map::E_AIBehavior_Type ai_type() const;
  void set_ai_type(::pb::map::E_AIBehavior_Type value);
  private:
  ::pb::map::E_AIBehavior_Type _internal_ai_type() const;
  void _internal_set_ai_type(::pb::map::E_AIBehavior_Type value);
  public:

  // int32 alter_radius = 7;
  void clear_alter_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 alter_radius() const;
  void set_alter_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alter_radius() const;
  void _internal_set_alter_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_clockwise = 8;
  void clear_is_clockwise();
  bool is_clockwise() const;
  void set_is_clockwise(bool value);
  private:
  bool _internal_is_clockwise() const;
  void _internal_set_is_clockwise(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Robot_AI_Model)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* center_pos_;
  ::pb::map::HEX* start_pos_;
  ::pb::map::HEX* end_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop_;
  int ai_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 alter_radius_;
  bool is_clockwise_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Troop_Path_Query :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Troop_Path_Query) */ {
 public:
  Troop_Path_Query();
  virtual ~Troop_Path_Query();

  Troop_Path_Query(const Troop_Path_Query& from);
  Troop_Path_Query(Troop_Path_Query&& from) noexcept
    : Troop_Path_Query() {
    *this = ::std::move(from);
  }

  inline Troop_Path_Query& operator=(const Troop_Path_Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Troop_Path_Query& operator=(Troop_Path_Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Troop_Path_Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Troop_Path_Query* internal_default_instance() {
    return reinterpret_cast<const Troop_Path_Query*>(
               &_Troop_Path_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Troop_Path_Query& a, Troop_Path_Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Troop_Path_Query* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Troop_Path_Query* New() const final {
    return CreateMaybeMessage<Troop_Path_Query>(nullptr);
  }

  Troop_Path_Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Troop_Path_Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Troop_Path_Query& from);
  void MergeFrom(const Troop_Path_Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Troop_Path_Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Troop_Path_Query";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPosFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
    kIdxTroopFieldNumber = 3,
    kSubCmdFieldNumber = 4,
  };
  // .pb.map.HEX end_pos = 2;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::pb::map::HEX& end_pos() const;
  ::pb::map::HEX* release_end_pos();
  ::pb::map::HEX* mutable_end_pos();
  void set_allocated_end_pos(::pb::map::HEX* end_pos);
  private:
  const ::pb::map::HEX& _internal_end_pos() const;
  ::pb::map::HEX* _internal_mutable_end_pos();
  public:

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx_troop = 3;
  void clear_idx_troop();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop() const;
  void set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_troop() const;
  void _internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pb.map.E_Map_CMD sub_cmd = 4;
  void clear_sub_cmd();
  ::pb::map::E_Map_CMD sub_cmd() const;
  void set_sub_cmd(::pb::map::E_Map_CMD value);
  private:
  ::pb::map::E_Map_CMD _internal_sub_cmd() const;
  void _internal_set_sub_cmd(::pb::map::E_Map_CMD value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Troop_Path_Query)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* end_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop_;
  int sub_cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Obstacle_Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Obstacle_Path) */ {
 public:
  Obstacle_Path();
  virtual ~Obstacle_Path();

  Obstacle_Path(const Obstacle_Path& from);
  Obstacle_Path(Obstacle_Path&& from) noexcept
    : Obstacle_Path() {
    *this = ::std::move(from);
  }

  inline Obstacle_Path& operator=(const Obstacle_Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle_Path& operator=(Obstacle_Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle_Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle_Path* internal_default_instance() {
    return reinterpret_cast<const Obstacle_Path*>(
               &_Obstacle_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Obstacle_Path& a, Obstacle_Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle_Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle_Path* New() const final {
    return CreateMaybeMessage<Obstacle_Path>(nullptr);
  }

  Obstacle_Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle_Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle_Path& from);
  void MergeFrom(const Obstacle_Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle_Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Obstacle_Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecStartobsFieldNumber = 3,
    kVecEndobsFieldNumber = 4,
    kObstaclePtFieldNumber = 2,
    kTroopIdFieldNumber = 1,
  };
  // repeated .pb.map.HEX vec_startobs = 3;
  int vec_startobs_size() const;
  private:
  int _internal_vec_startobs_size() const;
  public:
  void clear_vec_startobs();
  ::pb::map::HEX* mutable_vec_startobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
      mutable_vec_startobs();
  private:
  const ::pb::map::HEX& _internal_vec_startobs(int index) const;
  ::pb::map::HEX* _internal_add_vec_startobs();
  public:
  const ::pb::map::HEX& vec_startobs(int index) const;
  ::pb::map::HEX* add_vec_startobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
      vec_startobs() const;

  // repeated .pb.map.HEX vec_endobs = 4;
  int vec_endobs_size() const;
  private:
  int _internal_vec_endobs_size() const;
  public:
  void clear_vec_endobs();
  ::pb::map::HEX* mutable_vec_endobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
      mutable_vec_endobs();
  private:
  const ::pb::map::HEX& _internal_vec_endobs(int index) const;
  ::pb::map::HEX* _internal_add_vec_endobs();
  public:
  const ::pb::map::HEX& vec_endobs(int index) const;
  ::pb::map::HEX* add_vec_endobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
      vec_endobs() const;

  // .pb.map.HEX obstacle_pt = 2;
  bool has_obstacle_pt() const;
  private:
  bool _internal_has_obstacle_pt() const;
  public:
  void clear_obstacle_pt();
  const ::pb::map::HEX& obstacle_pt() const;
  ::pb::map::HEX* release_obstacle_pt();
  ::pb::map::HEX* mutable_obstacle_pt();
  void set_allocated_obstacle_pt(::pb::map::HEX* obstacle_pt);
  private:
  const ::pb::map::HEX& _internal_obstacle_pt() const;
  ::pb::map::HEX* _internal_mutable_obstacle_pt();
  public:

  // int32 troop_id = 1;
  void clear_troop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id() const;
  void set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_troop_id() const;
  void _internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Obstacle_Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX > vec_startobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX > vec_endobs_;
  ::pb::map::HEX* obstacle_pt_;
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class March_Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.March_Path) */ {
 public:
  March_Path();
  virtual ~March_Path();

  March_Path(const March_Path& from);
  March_Path(March_Path&& from) noexcept
    : March_Path() {
    *this = ::std::move(from);
  }

  inline March_Path& operator=(const March_Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline March_Path& operator=(March_Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const March_Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const March_Path* internal_default_instance() {
    return reinterpret_cast<const March_Path*>(
               &_March_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(March_Path& a, March_Path& b) {
    a.Swap(&b);
  }
  inline void Swap(March_Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline March_Path* New() const final {
    return CreateMaybeMessage<March_Path>(nullptr);
  }

  March_Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<March_Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const March_Path& from);
  void MergeFrom(const March_Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(March_Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.March_Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecPathFieldNumber = 7,
    kNameFieldNumber = 4,
    kTroopIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kSoldierIdFieldNumber = 3,
    kIdxTroopFieldNumber = 5,
    kEndTimeFieldNumber = 8,
    kSpeedFieldNumber = 6,
  };
  // repeated .pb.map.HEX vec_path = 7;
  int vec_path_size() const;
  private:
  int _internal_vec_path_size() const;
  public:
  void clear_vec_path();
  ::pb::map::HEX* mutable_vec_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
      mutable_vec_path();
  private:
  const ::pb::map::HEX& _internal_vec_path(int index) const;
  ::pb::map::HEX* _internal_add_vec_path();
  public:
  const ::pb::map::HEX& vec_path(int index) const;
  ::pb::map::HEX* add_vec_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
      vec_path() const;

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 troop_id = 1;
  void clear_troop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id() const;
  void set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_troop_id() const;
  void _internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 hero_id = 2;
  void clear_hero_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id() const;
  void set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hero_id() const;
  void _internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 soldier_id = 3;
  void clear_soldier_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 soldier_id() const;
  void set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_soldier_id() const;
  void _internal_set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx_troop = 5;
  void clear_idx_troop();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop() const;
  void set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_troop() const;
  void _internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 end_time = 8;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 speed = 6;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::uint32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.March_Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX > vec_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 soldier_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_troop_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Ranking :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Ranking) */ {
 public:
  Ranking();
  virtual ~Ranking();

  Ranking(const Ranking& from);
  Ranking(Ranking&& from) noexcept
    : Ranking() {
    *this = ::std::move(from);
  }

  inline Ranking& operator=(const Ranking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ranking& operator=(Ranking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ranking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ranking* internal_default_instance() {
    return reinterpret_cast<const Ranking*>(
               &_Ranking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Ranking& a, Ranking& b) {
    a.Swap(&b);
  }
  inline void Swap(Ranking* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ranking* New() const final {
    return CreateMaybeMessage<Ranking>(nullptr);
  }

  Ranking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ranking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ranking& from);
  void MergeFrom(const Ranking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ranking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Ranking";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // uint32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Ranking)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Map_Building :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Map_Building) */ {
 public:
  Map_Building();
  virtual ~Map_Building();

  Map_Building(const Map_Building& from);
  Map_Building(Map_Building&& from) noexcept
    : Map_Building() {
    *this = ::std::move(from);
  }

  inline Map_Building& operator=(const Map_Building& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_Building& operator=(Map_Building&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_Building& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_Building* internal_default_instance() {
    return reinterpret_cast<const Map_Building*>(
               &_Map_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Map_Building& a, Map_Building& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_Building* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_Building* New() const final {
    return CreateMaybeMessage<Map_Building>(nullptr);
  }

  Map_Building* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_Building>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_Building& from);
  void MergeFrom(const Map_Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_Building* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Map_Building";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstKillTopThreeFieldNumber = 12,
    kFirstSiegeTopThreeFieldNumber = 13,
    kNameFieldNumber = 16,
    kPosFieldNumber = 3,
    kOwnerIdFieldNumber = 1,
    kSkinIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kIdFieldNumber = 5,
    kLifeFieldNumber = 6,
    kLifeMaxFieldNumber = 7,
    kTroopNumFieldNumber = 8,
    kResetTimeFieldNumber = 9,
    kAvoidBattleTimeFieldNumber = 10,
    kCloseCityTimeFieldNumber = 11,
    kGuildidFieldNumber = 14,
    kLevelFieldNumber = 15,
    kBuildingeyeFieldNumber = 17,
    kProtectFlagFieldNumber = 18,
  };
  // repeated .pb.map.Ranking first_kill_top_three = 12;
  int first_kill_top_three_size() const;
  private:
  int _internal_first_kill_top_three_size() const;
  public:
  void clear_first_kill_top_three();
  ::pb::map::Ranking* mutable_first_kill_top_three(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >*
      mutable_first_kill_top_three();
  private:
  const ::pb::map::Ranking& _internal_first_kill_top_three(int index) const;
  ::pb::map::Ranking* _internal_add_first_kill_top_three();
  public:
  const ::pb::map::Ranking& first_kill_top_three(int index) const;
  ::pb::map::Ranking* add_first_kill_top_three();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >&
      first_kill_top_three() const;

  // repeated .pb.map.Ranking first_siege_top_three = 13;
  int first_siege_top_three_size() const;
  private:
  int _internal_first_siege_top_three_size() const;
  public:
  void clear_first_siege_top_three();
  ::pb::map::Ranking* mutable_first_siege_top_three(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >*
      mutable_first_siege_top_three();
  private:
  const ::pb::map::Ranking& _internal_first_siege_top_three(int index) const;
  ::pb::map::Ranking* _internal_add_first_siege_top_three();
  public:
  const ::pb::map::Ranking& first_siege_top_three(int index) const;
  ::pb::map::Ranking* add_first_siege_top_three();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >&
      first_siege_top_three() const;

  // string name = 16;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pb.map.HEX pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // int64 owner_id = 1;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int64 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 skin_id = 2;
  void clear_skin_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skin_id() const;
  void set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skin_id() const;
  void _internal_set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 life = 6;
  void clear_life();
  ::PROTOBUF_NAMESPACE_ID::uint32 life() const;
  void set_life(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_life() const;
  void _internal_set_life(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 life_max = 7;
  void clear_life_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 life_max() const;
  void set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_life_max() const;
  void _internal_set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 troop_num = 8;
  void clear_troop_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 troop_num() const;
  void set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_troop_num() const;
  void _internal_set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 reset_time = 9;
  void clear_reset_time();
  ::PROTOBUF_NAMESPACE_ID::int64 reset_time() const;
  void set_reset_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reset_time() const;
  void _internal_set_reset_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 avoid_battle_time = 10;
  void clear_avoid_battle_time();
  ::PROTOBUF_NAMESPACE_ID::int64 avoid_battle_time() const;
  void set_avoid_battle_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_avoid_battle_time() const;
  void _internal_set_avoid_battle_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 close_city_time = 11;
  void clear_close_city_time();
  ::PROTOBUF_NAMESPACE_ID::int64 close_city_time() const;
  void set_close_city_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_close_city_time() const;
  void _internal_set_close_city_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 guildid = 14;
  void clear_guildid();
  ::PROTOBUF_NAMESPACE_ID::uint32 guildid() const;
  void set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guildid() const;
  void _internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 level = 15;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 buildingeye = 17;
  void clear_buildingeye();
  ::PROTOBUF_NAMESPACE_ID::uint32 buildingeye() const;
  void set_buildingeye(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buildingeye() const;
  void _internal_set_buildingeye(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 protect_flag = 18;
  void clear_protect_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 protect_flag() const;
  void set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protect_flag() const;
  void _internal_set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Map_Building)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking > first_kill_top_three_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking > first_siege_top_three_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skin_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 life_;
  ::PROTOBUF_NAMESPACE_ID::uint32 life_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 troop_num_;
  ::PROTOBUF_NAMESPACE_ID::int64 reset_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 avoid_battle_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 close_city_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guildid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buildingeye_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protect_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Map_Troop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Map_Troop) */ {
 public:
  Map_Troop();
  virtual ~Map_Troop();

  Map_Troop(const Map_Troop& from);
  Map_Troop(Map_Troop&& from) noexcept
    : Map_Troop() {
    *this = ::std::move(from);
  }

  inline Map_Troop& operator=(const Map_Troop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_Troop& operator=(Map_Troop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_Troop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_Troop* internal_default_instance() {
    return reinterpret_cast<const Map_Troop*>(
               &_Map_Troop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Map_Troop& a, Map_Troop& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_Troop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_Troop* New() const final {
    return CreateMaybeMessage<Map_Troop>(nullptr);
  }

  Map_Troop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_Troop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_Troop& from);
  void MergeFrom(const Map_Troop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_Troop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Map_Troop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecPathFieldNumber = 9,
    kPosFieldNumber = 4,
    kOwnerIdFieldNumber = 2,
    kTroopIdFieldNumber = 1,
    kSoldierIdFieldNumber = 3,
    kStatusFieldNumber = 5,
    kIdxCurpathFieldNumber = 6,
    kTimeFieldNumber = 7,
    kSpeedFieldNumber = 8,
    kEndTimeFieldNumber = 10,
    kMoraleFieldNumber = 11,
    kProtectFlagFieldNumber = 12,
    kDstTroopIdFieldNumber = 13,
  };
  // repeated .pb.map.HEX vec_path = 9;
  int vec_path_size() const;
  private:
  int _internal_vec_path_size() const;
  public:
  void clear_vec_path();
  ::pb::map::HEX* mutable_vec_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
      mutable_vec_path();
  private:
  const ::pb::map::HEX& _internal_vec_path(int index) const;
  ::pb::map::HEX* _internal_add_vec_path();
  public:
  const ::pb::map::HEX& vec_path(int index) const;
  ::pb::map::HEX* add_vec_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
      vec_path() const;

  // .pb.map.HEX pos = 4;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // int64 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int64 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 troop_id = 1;
  void clear_troop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id() const;
  void set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_troop_id() const;
  void _internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 soldier_id = 3;
  void clear_soldier_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 soldier_id() const;
  void set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_soldier_id() const;
  void _internal_set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx_curpath = 6;
  void clear_idx_curpath();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_curpath() const;
  void set_idx_curpath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_curpath() const;
  void _internal_set_idx_curpath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 7;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 speed = 8;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::uint32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 end_time = 10;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 morale = 11;
  void clear_morale();
  ::PROTOBUF_NAMESPACE_ID::uint32 morale() const;
  void set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_morale() const;
  void _internal_set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 protect_flag = 12;
  void clear_protect_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 protect_flag() const;
  void set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protect_flag() const;
  void _internal_set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 dst_troop_id = 13;
  void clear_dst_troop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 dst_troop_id() const;
  void set_dst_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dst_troop_id() const;
  void _internal_set_dst_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Map_Troop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX > vec_path_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 soldier_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_curpath_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 morale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protect_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_troop_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Map_Field :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Map_Field) */ {
 public:
  Map_Field();
  virtual ~Map_Field();

  Map_Field(const Map_Field& from);
  Map_Field(Map_Field&& from) noexcept
    : Map_Field() {
    *this = ::std::move(from);
  }

  inline Map_Field& operator=(const Map_Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_Field& operator=(Map_Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_Field* internal_default_instance() {
    return reinterpret_cast<const Map_Field*>(
               &_Map_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Map_Field& a, Map_Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_Field* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_Field* New() const final {
    return CreateMaybeMessage<Map_Field>(nullptr);
  }

  Map_Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_Field& from);
  void MergeFrom(const Map_Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Map_Field";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
    kFieldIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kStatusFieldNumber = 5,
    kFinishTimeFieldNumber = 6,
    kProtectFlagFieldNumber = 7,
  };
  // .pb.map.HEX pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // int64 owner_id = 1;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int64 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 field_id = 3;
  void clear_field_id();
  ::PROTOBUF_NAMESPACE_ID::int32 field_id() const;
  void set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_id() const;
  void _internal_set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 FinishTime = 6;
  void clear_finishtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 finishtime() const;
  void set_finishtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_finishtime() const;
  void _internal_set_finishtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 protect_flag = 7;
  void clear_protect_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 protect_flag() const;
  void set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protect_flag() const;
  void _internal_set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Map_Field)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 owner_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 finishtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protect_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Map_RecoverField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Map_RecoverField) */ {
 public:
  Map_RecoverField();
  virtual ~Map_RecoverField();

  Map_RecoverField(const Map_RecoverField& from);
  Map_RecoverField(Map_RecoverField&& from) noexcept
    : Map_RecoverField() {
    *this = ::std::move(from);
  }

  inline Map_RecoverField& operator=(const Map_RecoverField& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_RecoverField& operator=(Map_RecoverField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_RecoverField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_RecoverField* internal_default_instance() {
    return reinterpret_cast<const Map_RecoverField*>(
               &_Map_RecoverField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Map_RecoverField& a, Map_RecoverField& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_RecoverField* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_RecoverField* New() const final {
    return CreateMaybeMessage<Map_RecoverField>(nullptr);
  }

  Map_RecoverField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_RecoverField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_RecoverField& from);
  void MergeFrom(const Map_RecoverField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_RecoverField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Map_RecoverField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kAtkUserIdFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // .pb.map.HEX pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // int64 atk_user_id = 2;
  void clear_atk_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 atk_user_id() const;
  void set_atk_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_atk_user_id() const;
  void _internal_set_atk_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 3;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Map_RecoverField)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 atk_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Map_WildNpcTroop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Map_WildNpcTroop) */ {
 public:
  Map_WildNpcTroop();
  virtual ~Map_WildNpcTroop();

  Map_WildNpcTroop(const Map_WildNpcTroop& from);
  Map_WildNpcTroop(Map_WildNpcTroop&& from) noexcept
    : Map_WildNpcTroop() {
    *this = ::std::move(from);
  }

  inline Map_WildNpcTroop& operator=(const Map_WildNpcTroop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_WildNpcTroop& operator=(Map_WildNpcTroop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_WildNpcTroop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_WildNpcTroop* internal_default_instance() {
    return reinterpret_cast<const Map_WildNpcTroop*>(
               &_Map_WildNpcTroop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Map_WildNpcTroop& a, Map_WildNpcTroop& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_WildNpcTroop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_WildNpcTroop* New() const final {
    return CreateMaybeMessage<Map_WildNpcTroop>(nullptr);
  }

  Map_WildNpcTroop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_WildNpcTroop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_WildNpcTroop& from);
  void MergeFrom(const Map_WildNpcTroop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_WildNpcTroop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Map_WildNpcTroop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kIdFieldNumber = 1,
    kWildNpcIdFieldNumber = 3,
    kDisappearTimeFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // .pb.map.HEX pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 wild_npc_id = 3;
  void clear_wild_npc_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wild_npc_id() const;
  void set_wild_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wild_npc_id() const;
  void _internal_set_wild_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 disappear_time = 4;
  void clear_disappear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 disappear_time() const;
  void set_disappear_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_disappear_time() const;
  void _internal_set_disappear_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Map_WildNpcTroop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wild_npc_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 disappear_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Map_WildBuilding :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Map_WildBuilding) */ {
 public:
  Map_WildBuilding();
  virtual ~Map_WildBuilding();

  Map_WildBuilding(const Map_WildBuilding& from);
  Map_WildBuilding(Map_WildBuilding&& from) noexcept
    : Map_WildBuilding() {
    *this = ::std::move(from);
  }

  inline Map_WildBuilding& operator=(const Map_WildBuilding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_WildBuilding& operator=(Map_WildBuilding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_WildBuilding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_WildBuilding* internal_default_instance() {
    return reinterpret_cast<const Map_WildBuilding*>(
               &_Map_WildBuilding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Map_WildBuilding& a, Map_WildBuilding& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_WildBuilding* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_WildBuilding* New() const final {
    return CreateMaybeMessage<Map_WildBuilding>(nullptr);
  }

  Map_WildBuilding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_WildBuilding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_WildBuilding& from);
  void MergeFrom(const Map_WildBuilding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_WildBuilding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Map_WildBuilding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kLevelFieldNumber = 4,
    kTroopNumFieldNumber = 5,
    kLifeFieldNumber = 6,
    kLifeMaxFieldNumber = 7,
    kDisappearTimeFieldNumber = 8,
  };
  // .pb.map.HEX pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 troop_num = 5;
  void clear_troop_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 troop_num() const;
  void set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_troop_num() const;
  void _internal_set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 life = 6;
  void clear_life();
  ::PROTOBUF_NAMESPACE_ID::uint32 life() const;
  void set_life(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_life() const;
  void _internal_set_life(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 life_max = 7;
  void clear_life_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 life_max() const;
  void set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_life_max() const;
  void _internal_set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 disappear_time = 8;
  void clear_disappear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 disappear_time() const;
  void set_disappear_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_disappear_time() const;
  void _internal_set_disappear_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Map_WildBuilding)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 troop_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 life_;
  ::PROTOBUF_NAMESPACE_ID::uint32 life_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 disappear_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class MapUserData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.MapUserData) */ {
 public:
  MapUserData();
  virtual ~MapUserData();

  MapUserData(const MapUserData& from);
  MapUserData(MapUserData&& from) noexcept
    : MapUserData() {
    *this = ::std::move(from);
  }

  inline MapUserData& operator=(const MapUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapUserData& operator=(MapUserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapUserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapUserData* internal_default_instance() {
    return reinterpret_cast<const MapUserData*>(
               &_MapUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MapUserData& a, MapUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapUserData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapUserData* New() const final {
    return CreateMaybeMessage<MapUserData>(nullptr);
  }

  MapUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapUserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapUserData& from);
  void MergeFrom(const MapUserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapUserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.MapUserData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kGuildIdFieldNumber = 3,
    kCaptureIdFieldNumber = 4,
    kGuildJobFieldNumber = 5,
    kCivilizationTypeFieldNumber = 6,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 guild_id = 3;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::int32 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 capture_id = 4;
  void clear_capture_id();
  ::PROTOBUF_NAMESPACE_ID::int32 capture_id() const;
  void set_capture_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_capture_id() const;
  void _internal_set_capture_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guild_job = 5;
  void clear_guild_job();
  ::PROTOBUF_NAMESPACE_ID::int32 guild_job() const;
  void set_guild_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guild_job() const;
  void _internal_set_guild_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 civilization_type = 6;
  void clear_civilization_type();
  ::PROTOBUF_NAMESPACE_ID::int32 civilization_type() const;
  void set_civilization_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_civilization_type() const;
  void _internal_set_civilization_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.MapUserData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 capture_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 guild_job_;
  ::PROTOBUF_NAMESPACE_ID::int32 civilization_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Map_Objs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Map_Objs) */ {
 public:
  Map_Objs();
  virtual ~Map_Objs();

  Map_Objs(const Map_Objs& from);
  Map_Objs(Map_Objs&& from) noexcept
    : Map_Objs() {
    *this = ::std::move(from);
  }

  inline Map_Objs& operator=(const Map_Objs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_Objs& operator=(Map_Objs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_Objs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_Objs* internal_default_instance() {
    return reinterpret_cast<const Map_Objs*>(
               &_Map_Objs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Map_Objs& a, Map_Objs& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_Objs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_Objs* New() const final {
    return CreateMaybeMessage<Map_Objs>(nullptr);
  }

  Map_Objs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_Objs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_Objs& from);
  void MergeFrom(const Map_Objs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_Objs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Map_Objs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecBuildingsFieldNumber = 1,
    kVecTroopsFieldNumber = 2,
    kVecFieldsFieldNumber = 3,
    kVecRecoverfieldFieldNumber = 4,
    kVecWildNpcTroopFieldNumber = 5,
    kVecWildBuildingFieldNumber = 6,
    kVecUsersFieldNumber = 7,
  };
  // repeated .pb.map.Map_Building vec_buildings = 1;
  int vec_buildings_size() const;
  private:
  int _internal_vec_buildings_size() const;
  public:
  void clear_vec_buildings();
  ::pb::map::Map_Building* mutable_vec_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Building >*
      mutable_vec_buildings();
  private:
  const ::pb::map::Map_Building& _internal_vec_buildings(int index) const;
  ::pb::map::Map_Building* _internal_add_vec_buildings();
  public:
  const ::pb::map::Map_Building& vec_buildings(int index) const;
  ::pb::map::Map_Building* add_vec_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Building >&
      vec_buildings() const;

  // repeated .pb.map.Map_Troop vec_troops = 2;
  int vec_troops_size() const;
  private:
  int _internal_vec_troops_size() const;
  public:
  void clear_vec_troops();
  ::pb::map::Map_Troop* mutable_vec_troops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Troop >*
      mutable_vec_troops();
  private:
  const ::pb::map::Map_Troop& _internal_vec_troops(int index) const;
  ::pb::map::Map_Troop* _internal_add_vec_troops();
  public:
  const ::pb::map::Map_Troop& vec_troops(int index) const;
  ::pb::map::Map_Troop* add_vec_troops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Troop >&
      vec_troops() const;

  // repeated .pb.map.Map_Field vec_fields = 3;
  int vec_fields_size() const;
  private:
  int _internal_vec_fields_size() const;
  public:
  void clear_vec_fields();
  ::pb::map::Map_Field* mutable_vec_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Field >*
      mutable_vec_fields();
  private:
  const ::pb::map::Map_Field& _internal_vec_fields(int index) const;
  ::pb::map::Map_Field* _internal_add_vec_fields();
  public:
  const ::pb::map::Map_Field& vec_fields(int index) const;
  ::pb::map::Map_Field* add_vec_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Field >&
      vec_fields() const;

  // repeated .pb.map.Map_RecoverField vec_recoverfield = 4;
  int vec_recoverfield_size() const;
  private:
  int _internal_vec_recoverfield_size() const;
  public:
  void clear_vec_recoverfield();
  ::pb::map::Map_RecoverField* mutable_vec_recoverfield(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_RecoverField >*
      mutable_vec_recoverfield();
  private:
  const ::pb::map::Map_RecoverField& _internal_vec_recoverfield(int index) const;
  ::pb::map::Map_RecoverField* _internal_add_vec_recoverfield();
  public:
  const ::pb::map::Map_RecoverField& vec_recoverfield(int index) const;
  ::pb::map::Map_RecoverField* add_vec_recoverfield();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_RecoverField >&
      vec_recoverfield() const;

  // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 5;
  int vec_wild_npc_troop_size() const;
  private:
  int _internal_vec_wild_npc_troop_size() const;
  public:
  void clear_vec_wild_npc_troop();
  ::pb::map::Map_WildNpcTroop* mutable_vec_wild_npc_troop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >*
      mutable_vec_wild_npc_troop();
  private:
  const ::pb::map::Map_WildNpcTroop& _internal_vec_wild_npc_troop(int index) const;
  ::pb::map::Map_WildNpcTroop* _internal_add_vec_wild_npc_troop();
  public:
  const ::pb::map::Map_WildNpcTroop& vec_wild_npc_troop(int index) const;
  ::pb::map::Map_WildNpcTroop* add_vec_wild_npc_troop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >&
      vec_wild_npc_troop() const;

  // repeated .pb.map.Map_WildBuilding vec_wild_building = 6;
  int vec_wild_building_size() const;
  private:
  int _internal_vec_wild_building_size() const;
  public:
  void clear_vec_wild_building();
  ::pb::map::Map_WildBuilding* mutable_vec_wild_building(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildBuilding >*
      mutable_vec_wild_building();
  private:
  const ::pb::map::Map_WildBuilding& _internal_vec_wild_building(int index) const;
  ::pb::map::Map_WildBuilding* _internal_add_vec_wild_building();
  public:
  const ::pb::map::Map_WildBuilding& vec_wild_building(int index) const;
  ::pb::map::Map_WildBuilding* add_vec_wild_building();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildBuilding >&
      vec_wild_building() const;

  // repeated .pb.map.MapUserData vec_users = 7;
  int vec_users_size() const;
  private:
  int _internal_vec_users_size() const;
  public:
  void clear_vec_users();
  ::pb::map::MapUserData* mutable_vec_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapUserData >*
      mutable_vec_users();
  private:
  const ::pb::map::MapUserData& _internal_vec_users(int index) const;
  ::pb::map::MapUserData* _internal_add_vec_users();
  public:
  const ::pb::map::MapUserData& vec_users(int index) const;
  ::pb::map::MapUserData* add_vec_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapUserData >&
      vec_users() const;

  // @@protoc_insertion_point(class_scope:pb.map.Map_Objs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Building > vec_buildings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Troop > vec_troops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Field > vec_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_RecoverField > vec_recoverfield_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop > vec_wild_npc_troop_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildBuilding > vec_wild_building_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapUserData > vec_users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PrivateNpc_Troop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.PrivateNpc_Troop) */ {
 public:
  PrivateNpc_Troop();
  virtual ~PrivateNpc_Troop();

  PrivateNpc_Troop(const PrivateNpc_Troop& from);
  PrivateNpc_Troop(PrivateNpc_Troop&& from) noexcept
    : PrivateNpc_Troop() {
    *this = ::std::move(from);
  }

  inline PrivateNpc_Troop& operator=(const PrivateNpc_Troop& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateNpc_Troop& operator=(PrivateNpc_Troop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateNpc_Troop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateNpc_Troop* internal_default_instance() {
    return reinterpret_cast<const PrivateNpc_Troop*>(
               &_PrivateNpc_Troop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PrivateNpc_Troop& a, PrivateNpc_Troop& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateNpc_Troop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateNpc_Troop* New() const final {
    return CreateMaybeMessage<PrivateNpc_Troop>(nullptr);
  }

  PrivateNpc_Troop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateNpc_Troop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateNpc_Troop& from);
  void MergeFrom(const PrivateNpc_Troop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateNpc_Troop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.PrivateNpc_Troop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kIdFieldNumber = 1,
    kIdTemplateFieldNumber = 2,
  };
  // .pb.map.HEX pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id_template = 2;
  void clear_id_template();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_template() const;
  void set_id_template(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_template() const;
  void _internal_set_id_template(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.PrivateNpc_Troop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_template_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Private_Map_Objs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Private_Map_Objs) */ {
 public:
  Private_Map_Objs();
  virtual ~Private_Map_Objs();

  Private_Map_Objs(const Private_Map_Objs& from);
  Private_Map_Objs(Private_Map_Objs&& from) noexcept
    : Private_Map_Objs() {
    *this = ::std::move(from);
  }

  inline Private_Map_Objs& operator=(const Private_Map_Objs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Private_Map_Objs& operator=(Private_Map_Objs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Private_Map_Objs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Private_Map_Objs* internal_default_instance() {
    return reinterpret_cast<const Private_Map_Objs*>(
               &_Private_Map_Objs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Private_Map_Objs& a, Private_Map_Objs& b) {
    a.Swap(&b);
  }
  inline void Swap(Private_Map_Objs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Private_Map_Objs* New() const final {
    return CreateMaybeMessage<Private_Map_Objs>(nullptr);
  }

  Private_Map_Objs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Private_Map_Objs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Private_Map_Objs& from);
  void MergeFrom(const Private_Map_Objs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Private_Map_Objs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Private_Map_Objs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecTroopFieldNumber = 1,
    kVecWildNpcTroopFieldNumber = 2,
  };
  // repeated .pb.map.PrivateNpc_Troop vec_troop = 1;
  int vec_troop_size() const;
  private:
  int _internal_vec_troop_size() const;
  public:
  void clear_vec_troop();
  ::pb::map::PrivateNpc_Troop* mutable_vec_troop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::PrivateNpc_Troop >*
      mutable_vec_troop();
  private:
  const ::pb::map::PrivateNpc_Troop& _internal_vec_troop(int index) const;
  ::pb::map::PrivateNpc_Troop* _internal_add_vec_troop();
  public:
  const ::pb::map::PrivateNpc_Troop& vec_troop(int index) const;
  ::pb::map::PrivateNpc_Troop* add_vec_troop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::PrivateNpc_Troop >&
      vec_troop() const;

  // repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 2;
  int vec_wild_npc_troop_size() const;
  private:
  int _internal_vec_wild_npc_troop_size() const;
  public:
  void clear_vec_wild_npc_troop();
  ::pb::map::Map_WildNpcTroop* mutable_vec_wild_npc_troop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >*
      mutable_vec_wild_npc_troop();
  private:
  const ::pb::map::Map_WildNpcTroop& _internal_vec_wild_npc_troop(int index) const;
  ::pb::map::Map_WildNpcTroop* _internal_add_vec_wild_npc_troop();
  public:
  const ::pb::map::Map_WildNpcTroop& vec_wild_npc_troop(int index) const;
  ::pb::map::Map_WildNpcTroop* add_vec_wild_npc_troop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >&
      vec_wild_npc_troop() const;

  // @@protoc_insertion_point(class_scope:pb.map.Private_Map_Objs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::PrivateNpc_Troop > vec_troop_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop > vec_wild_npc_troop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Collect_Map_OP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Collect_Map_OP) */ {
 public:
  Collect_Map_OP();
  virtual ~Collect_Map_OP();

  Collect_Map_OP(const Collect_Map_OP& from);
  Collect_Map_OP(Collect_Map_OP&& from) noexcept
    : Collect_Map_OP() {
    *this = ::std::move(from);
  }

  inline Collect_Map_OP& operator=(const Collect_Map_OP& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collect_Map_OP& operator=(Collect_Map_OP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collect_Map_OP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collect_Map_OP* internal_default_instance() {
    return reinterpret_cast<const Collect_Map_OP*>(
               &_Collect_Map_OP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Collect_Map_OP& a, Collect_Map_OP& b) {
    a.Swap(&b);
  }
  inline void Swap(Collect_Map_OP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collect_Map_OP* New() const final {
    return CreateMaybeMessage<Collect_Map_OP>(nullptr);
  }

  Collect_Map_OP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collect_Map_OP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collect_Map_OP& from);
  void MergeFrom(const Collect_Map_OP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collect_Map_OP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Collect_Map_OP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kEndPosFieldNumber = 2,
    kIdxFieldNumber = 4,
    kErrCodeFieldNumber = 1,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pb.map.HEX end_pos = 2;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::pb::map::HEX& end_pos() const;
  ::pb::map::HEX* release_end_pos();
  ::pb::map::HEX* mutable_end_pos();
  void set_allocated_end_pos(::pb::map::HEX* end_pos);
  private:
  const ::pb::map::HEX& _internal_end_pos() const;
  ::pb::map::HEX* _internal_mutable_end_pos();
  public:

  // int64 idx = 4;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int64 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Collect_Map_OP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pb::map::HEX* end_pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Move_City :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Move_City) */ {
 public:
  Move_City();
  virtual ~Move_City();

  Move_City(const Move_City& from);
  Move_City(Move_City&& from) noexcept
    : Move_City() {
    *this = ::std::move(from);
  }

  inline Move_City& operator=(const Move_City& from) {
    CopyFrom(from);
    return *this;
  }
  inline Move_City& operator=(Move_City&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Move_City& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Move_City* internal_default_instance() {
    return reinterpret_cast<const Move_City*>(
               &_Move_City_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Move_City& a, Move_City& b) {
    a.Swap(&b);
  }
  inline void Swap(Move_City* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Move_City* New() const final {
    return CreateMaybeMessage<Move_City>(nullptr);
  }

  Move_City* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Move_City>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Move_City& from);
  void MergeFrom(const Move_City& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Move_City* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Move_City";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovePosFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
    kIdxFieldNumber = 2,
  };
  // .pb.map.HEX move_pos = 3;
  bool has_move_pos() const;
  private:
  bool _internal_has_move_pos() const;
  public:
  void clear_move_pos();
  const ::pb::map::HEX& move_pos() const;
  ::pb::map::HEX* release_move_pos();
  ::pb::map::HEX* mutable_move_pos();
  void set_allocated_move_pos(::pb::map::HEX* move_pos);
  private:
  const ::pb::map::HEX& _internal_move_pos() const;
  ::pb::map::HEX* _internal_mutable_move_pos();
  public:

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx = 2;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Move_City)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* move_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Resurgence :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Resurgence) */ {
 public:
  Resurgence();
  virtual ~Resurgence();

  Resurgence(const Resurgence& from);
  Resurgence(Resurgence&& from) noexcept
    : Resurgence() {
    *this = ::std::move(from);
  }

  inline Resurgence& operator=(const Resurgence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resurgence& operator=(Resurgence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resurgence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resurgence* internal_default_instance() {
    return reinterpret_cast<const Resurgence*>(
               &_Resurgence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Resurgence& a, Resurgence& b) {
    a.Swap(&b);
  }
  inline void Swap(Resurgence* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resurgence* New() const final {
    return CreateMaybeMessage<Resurgence>(nullptr);
  }

  Resurgence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resurgence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resurgence& from);
  void MergeFrom(const Resurgence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resurgence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Resurgence";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // .pb.map.HEX pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Resurgence)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Migrate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Migrate) */ {
 public:
  Migrate();
  virtual ~Migrate();

  Migrate(const Migrate& from);
  Migrate(Migrate&& from) noexcept
    : Migrate() {
    *this = ::std::move(from);
  }

  inline Migrate& operator=(const Migrate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Migrate& operator=(Migrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Migrate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Migrate* internal_default_instance() {
    return reinterpret_cast<const Migrate*>(
               &_Migrate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Migrate& a, Migrate& b) {
    a.Swap(&b);
  }
  inline void Swap(Migrate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Migrate* New() const final {
    return CreateMaybeMessage<Migrate>(nullptr);
  }

  Migrate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Migrate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Migrate& from);
  void MergeFrom(const Migrate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Migrate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Migrate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
    kCountryIdFieldNumber = 2,
  };
  // .pb.map.HEX pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 country_id = 2;
  void clear_country_id();
  ::PROTOBUF_NAMESPACE_ID::int32 country_id() const;
  void set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_country_id() const;
  void _internal_set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Migrate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 country_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Req_Scout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Req_Scout) */ {
 public:
  Req_Scout();
  virtual ~Req_Scout();

  Req_Scout(const Req_Scout& from);
  Req_Scout(Req_Scout&& from) noexcept
    : Req_Scout() {
    *this = ::std::move(from);
  }

  inline Req_Scout& operator=(const Req_Scout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Req_Scout& operator=(Req_Scout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Req_Scout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_Scout* internal_default_instance() {
    return reinterpret_cast<const Req_Scout*>(
               &_Req_Scout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Req_Scout& a, Req_Scout& b) {
    a.Swap(&b);
  }
  inline void Swap(Req_Scout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Req_Scout* New() const final {
    return CreateMaybeMessage<Req_Scout>(nullptr);
  }

  Req_Scout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Req_Scout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Req_Scout& from);
  void MergeFrom(const Req_Scout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_Scout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Req_Scout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // .pb.map.HEX pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Req_Scout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class TroopScout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.TroopScout) */ {
 public:
  TroopScout();
  virtual ~TroopScout();

  TroopScout(const TroopScout& from);
  TroopScout(TroopScout&& from) noexcept
    : TroopScout() {
    *this = ::std::move(from);
  }

  inline TroopScout& operator=(const TroopScout& from) {
    CopyFrom(from);
    return *this;
  }
  inline TroopScout& operator=(TroopScout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TroopScout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TroopScout* internal_default_instance() {
    return reinterpret_cast<const TroopScout*>(
               &_TroopScout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TroopScout& a, TroopScout& b) {
    a.Swap(&b);
  }
  inline void Swap(TroopScout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TroopScout* New() const final {
    return CreateMaybeMessage<TroopScout>(nullptr);
  }

  TroopScout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TroopScout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TroopScout& from);
  void MergeFrom(const TroopScout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TroopScout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.TroopScout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqNoFieldNumber = 1,
    kTroopIdFieldNumber = 2,
    kForce1FieldNumber = 3,
    kForce2FieldNumber = 4,
    kForce3FieldNumber = 5,
  };
  // int32 seq_no = 1;
  void clear_seq_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seq_no() const;
  void set_seq_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq_no() const;
  void _internal_set_seq_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 troop_id = 2;
  void clear_troop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id() const;
  void set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_troop_id() const;
  void _internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 force1 = 3;
  void clear_force1();
  ::PROTOBUF_NAMESPACE_ID::int32 force1() const;
  void set_force1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_force1() const;
  void _internal_set_force1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 force2 = 4;
  void clear_force2();
  ::PROTOBUF_NAMESPACE_ID::int32 force2() const;
  void set_force2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_force2() const;
  void _internal_set_force2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 force3 = 5;
  void clear_force3();
  ::PROTOBUF_NAMESPACE_ID::int32 force3() const;
  void set_force3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_force3() const;
  void _internal_set_force3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.TroopScout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 troop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 force1_;
  ::PROTOBUF_NAMESPACE_ID::int32 force2_;
  ::PROTOBUF_NAMESPACE_ID::int32 force3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class FieldScout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.FieldScout) */ {
 public:
  FieldScout();
  virtual ~FieldScout();

  FieldScout(const FieldScout& from);
  FieldScout(FieldScout&& from) noexcept
    : FieldScout() {
    *this = ::std::move(from);
  }

  inline FieldScout& operator=(const FieldScout& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldScout& operator=(FieldScout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldScout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldScout* internal_default_instance() {
    return reinterpret_cast<const FieldScout*>(
               &_FieldScout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FieldScout& a, FieldScout& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldScout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldScout* New() const final {
    return CreateMaybeMessage<FieldScout>(nullptr);
  }

  FieldScout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldScout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldScout& from);
  void MergeFrom(const FieldScout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldScout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.FieldScout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoutInfoFieldNumber = 2,
    kPosFieldNumber = 1,
    kScoutTimeFieldNumber = 3,
    kScoutEndTimeFieldNumber = 4,
  };
  // repeated .pb.map.TroopScout scout_info = 2;
  int scout_info_size() const;
  private:
  int _internal_scout_info_size() const;
  public:
  void clear_scout_info();
  ::pb::map::TroopScout* mutable_scout_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TroopScout >*
      mutable_scout_info();
  private:
  const ::pb::map::TroopScout& _internal_scout_info(int index) const;
  ::pb::map::TroopScout* _internal_add_scout_info();
  public:
  const ::pb::map::TroopScout& scout_info(int index) const;
  ::pb::map::TroopScout* add_scout_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TroopScout >&
      scout_info() const;

  // .pb.map.HEX pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // int64 scout_time = 3;
  void clear_scout_time();
  ::PROTOBUF_NAMESPACE_ID::int64 scout_time() const;
  void set_scout_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scout_time() const;
  void _internal_set_scout_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 scout_end_time = 4;
  void clear_scout_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 scout_end_time() const;
  void set_scout_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scout_end_time() const;
  void _internal_set_scout_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.FieldScout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TroopScout > scout_info_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::int64 scout_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 scout_end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Rep_Scout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Rep_Scout) */ {
 public:
  Rep_Scout();
  virtual ~Rep_Scout();

  Rep_Scout(const Rep_Scout& from);
  Rep_Scout(Rep_Scout&& from) noexcept
    : Rep_Scout() {
    *this = ::std::move(from);
  }

  inline Rep_Scout& operator=(const Rep_Scout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rep_Scout& operator=(Rep_Scout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rep_Scout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rep_Scout* internal_default_instance() {
    return reinterpret_cast<const Rep_Scout*>(
               &_Rep_Scout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Rep_Scout& a, Rep_Scout& b) {
    a.Swap(&b);
  }
  inline void Swap(Rep_Scout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rep_Scout* New() const final {
    return CreateMaybeMessage<Rep_Scout>(nullptr);
  }

  Rep_Scout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rep_Scout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rep_Scout& from);
  void MergeFrom(const Rep_Scout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rep_Scout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Rep_Scout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldScoutFieldNumber = 1,
    kNextScoutTimeFieldNumber = 2,
  };
  // repeated .pb.map.FieldScout field_scout = 1;
  int field_scout_size() const;
  private:
  int _internal_field_scout_size() const;
  public:
  void clear_field_scout();
  ::pb::map::FieldScout* mutable_field_scout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::FieldScout >*
      mutable_field_scout();
  private:
  const ::pb::map::FieldScout& _internal_field_scout(int index) const;
  ::pb::map::FieldScout* _internal_add_field_scout();
  public:
  const ::pb::map::FieldScout& field_scout(int index) const;
  ::pb::map::FieldScout* add_field_scout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::FieldScout >&
      field_scout() const;

  // uint64 next_scout_time = 2;
  void clear_next_scout_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_scout_time() const;
  void set_next_scout_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_scout_time() const;
  void _internal_set_next_scout_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Rep_Scout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::FieldScout > field_scout_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_scout_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Rep_DeleteScout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Rep_DeleteScout) */ {
 public:
  Rep_DeleteScout();
  virtual ~Rep_DeleteScout();

  Rep_DeleteScout(const Rep_DeleteScout& from);
  Rep_DeleteScout(Rep_DeleteScout&& from) noexcept
    : Rep_DeleteScout() {
    *this = ::std::move(from);
  }

  inline Rep_DeleteScout& operator=(const Rep_DeleteScout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rep_DeleteScout& operator=(Rep_DeleteScout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rep_DeleteScout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rep_DeleteScout* internal_default_instance() {
    return reinterpret_cast<const Rep_DeleteScout*>(
               &_Rep_DeleteScout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Rep_DeleteScout& a, Rep_DeleteScout& b) {
    a.Swap(&b);
  }
  inline void Swap(Rep_DeleteScout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rep_DeleteScout* New() const final {
    return CreateMaybeMessage<Rep_DeleteScout>(nullptr);
  }

  Rep_DeleteScout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rep_DeleteScout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rep_DeleteScout& from);
  void MergeFrom(const Rep_DeleteScout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rep_DeleteScout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Rep_DeleteScout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecPosFieldNumber = 1,
  };
  // repeated uint32 vec_pos = 1;
  int vec_pos_size() const;
  private:
  int _internal_vec_pos_size() const;
  public:
  void clear_vec_pos();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vec_pos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_vec_pos() const;
  void _internal_add_vec_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_vec_pos();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 vec_pos(int index) const;
  void set_vec_pos(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vec_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vec_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vec_pos();

  // @@protoc_insertion_point(class_scope:pb.map.Rep_DeleteScout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vec_pos_;
  mutable std::atomic<int> _vec_pos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Rep_ClearScout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Rep_ClearScout) */ {
 public:
  Rep_ClearScout();
  virtual ~Rep_ClearScout();

  Rep_ClearScout(const Rep_ClearScout& from);
  Rep_ClearScout(Rep_ClearScout&& from) noexcept
    : Rep_ClearScout() {
    *this = ::std::move(from);
  }

  inline Rep_ClearScout& operator=(const Rep_ClearScout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rep_ClearScout& operator=(Rep_ClearScout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rep_ClearScout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rep_ClearScout* internal_default_instance() {
    return reinterpret_cast<const Rep_ClearScout*>(
               &_Rep_ClearScout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Rep_ClearScout& a, Rep_ClearScout& b) {
    a.Swap(&b);
  }
  inline void Swap(Rep_ClearScout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rep_ClearScout* New() const final {
    return CreateMaybeMessage<Rep_ClearScout>(nullptr);
  }

  Rep_ClearScout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rep_ClearScout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rep_ClearScout& from);
  void MergeFrom(const Rep_ClearScout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rep_ClearScout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Rep_ClearScout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // .pb.map.E_Map_CMD cmd = 1;
  void clear_cmd();
  ::pb::map::E_Map_CMD cmd() const;
  void set_cmd(::pb::map::E_Map_CMD value);
  private:
  ::pb::map::E_Map_CMD _internal_cmd() const;
  void _internal_set_cmd(::pb::map::E_Map_CMD value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Rep_ClearScout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class CombatantUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.CombatantUser) */ {
 public:
  CombatantUser();
  virtual ~CombatantUser();

  CombatantUser(const CombatantUser& from);
  CombatantUser(CombatantUser&& from) noexcept
    : CombatantUser() {
    *this = ::std::move(from);
  }

  inline CombatantUser& operator=(const CombatantUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CombatantUser& operator=(CombatantUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CombatantUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CombatantUser* internal_default_instance() {
    return reinterpret_cast<const CombatantUser*>(
               &_CombatantUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CombatantUser& a, CombatantUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CombatantUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CombatantUser* New() const final {
    return CreateMaybeMessage<CombatantUser>(nullptr);
  }

  CombatantUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CombatantUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CombatantUser& from);
  void MergeFrom(const CombatantUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CombatantUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.CombatantUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kHonorFieldNumber = 3,
    kOccupyFieldNumber = 4,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 honor = 3;
  void clear_honor();
  ::PROTOBUF_NAMESPACE_ID::int32 honor() const;
  void set_honor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_honor() const;
  void _internal_set_honor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 occupy = 4;
  void clear_occupy();
  ::PROTOBUF_NAMESPACE_ID::int32 occupy() const;
  void set_occupy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_occupy() const;
  void _internal_set_occupy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.CombatantUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 honor_;
  ::PROTOBUF_NAMESPACE_ID::int32 occupy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class MapCampaign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.MapCampaign) */ {
 public:
  MapCampaign();
  virtual ~MapCampaign();

  MapCampaign(const MapCampaign& from);
  MapCampaign(MapCampaign&& from) noexcept
    : MapCampaign() {
    *this = ::std::move(from);
  }

  inline MapCampaign& operator=(const MapCampaign& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapCampaign& operator=(MapCampaign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapCampaign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCampaign* internal_default_instance() {
    return reinterpret_cast<const MapCampaign*>(
               &_MapCampaign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MapCampaign& a, MapCampaign& b) {
    a.Swap(&b);
  }
  inline void Swap(MapCampaign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapCampaign* New() const final {
    return CreateMaybeMessage<MapCampaign>(nullptr);
  }

  MapCampaign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapCampaign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapCampaign& from);
  void MergeFrom(const MapCampaign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapCampaign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.MapCampaign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCombatantGuildsFieldNumber = 5,
    kPosFieldNumber = 1,
    kHonorTopFieldNumber = 8,
    kOccupyTopFieldNumber = 9,
    kSelfFieldNumber = 10,
    kBuildingIdFieldNumber = 2,
    kCountFieldNumber = 3,
    kStartTimeFieldNumber = 6,
    kEndTimeFieldNumber = 7,
    kScaleFieldNumber = 4,
  };
  // repeated int32 combatant_guilds = 5;
  int combatant_guilds_size() const;
  private:
  int _internal_combatant_guilds_size() const;
  public:
  void clear_combatant_guilds();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_combatant_guilds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_combatant_guilds() const;
  void _internal_add_combatant_guilds(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_combatant_guilds();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 combatant_guilds(int index) const;
  void set_combatant_guilds(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_combatant_guilds(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      combatant_guilds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_combatant_guilds();

  // .pb.map.HEX pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // .pb.map.CombatantUser honor_top = 8;
  bool has_honor_top() const;
  private:
  bool _internal_has_honor_top() const;
  public:
  void clear_honor_top();
  const ::pb::map::CombatantUser& honor_top() const;
  ::pb::map::CombatantUser* release_honor_top();
  ::pb::map::CombatantUser* mutable_honor_top();
  void set_allocated_honor_top(::pb::map::CombatantUser* honor_top);
  private:
  const ::pb::map::CombatantUser& _internal_honor_top() const;
  ::pb::map::CombatantUser* _internal_mutable_honor_top();
  public:

  // .pb.map.CombatantUser occupy_top = 9;
  bool has_occupy_top() const;
  private:
  bool _internal_has_occupy_top() const;
  public:
  void clear_occupy_top();
  const ::pb::map::CombatantUser& occupy_top() const;
  ::pb::map::CombatantUser* release_occupy_top();
  ::pb::map::CombatantUser* mutable_occupy_top();
  void set_allocated_occupy_top(::pb::map::CombatantUser* occupy_top);
  private:
  const ::pb::map::CombatantUser& _internal_occupy_top() const;
  ::pb::map::CombatantUser* _internal_mutable_occupy_top();
  public:

  // .pb.map.CombatantUser self = 10;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::pb::map::CombatantUser& self() const;
  ::pb::map::CombatantUser* release_self();
  ::pb::map::CombatantUser* mutable_self();
  void set_allocated_self(::pb::map::CombatantUser* self);
  private:
  const ::pb::map::CombatantUser& _internal_self() const;
  ::pb::map::CombatantUser* _internal_mutable_self();
  public:

  // int32 building_id = 2;
  void clear_building_id();
  ::PROTOBUF_NAMESPACE_ID::int32 building_id() const;
  void set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_building_id() const;
  void _internal_set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 start_time = 6;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 7;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .pb.map.E_MapCampaignScale scale = 4;
  void clear_scale();
  ::pb::map::E_MapCampaignScale scale() const;
  void set_scale(::pb::map::E_MapCampaignScale value);
  private:
  ::pb::map::E_MapCampaignScale _internal_scale() const;
  void _internal_set_scale(::pb::map::E_MapCampaignScale value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.MapCampaign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > combatant_guilds_;
  mutable std::atomic<int> _combatant_guilds_cached_byte_size_;
  ::pb::map::HEX* pos_;
  ::pb::map::CombatantUser* honor_top_;
  ::pb::map::CombatantUser* occupy_top_;
  ::pb::map::CombatantUser* self_;
  ::PROTOBUF_NAMESPACE_ID::int32 building_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  int scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class MapCampaignResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.MapCampaignResp) */ {
 public:
  MapCampaignResp();
  virtual ~MapCampaignResp();

  MapCampaignResp(const MapCampaignResp& from);
  MapCampaignResp(MapCampaignResp&& from) noexcept
    : MapCampaignResp() {
    *this = ::std::move(from);
  }

  inline MapCampaignResp& operator=(const MapCampaignResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapCampaignResp& operator=(MapCampaignResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapCampaignResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCampaignResp* internal_default_instance() {
    return reinterpret_cast<const MapCampaignResp*>(
               &_MapCampaignResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MapCampaignResp& a, MapCampaignResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MapCampaignResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapCampaignResp* New() const final {
    return CreateMaybeMessage<MapCampaignResp>(nullptr);
  }

  MapCampaignResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapCampaignResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapCampaignResp& from);
  void MergeFrom(const MapCampaignResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapCampaignResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.MapCampaignResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampaignsFieldNumber = 1,
  };
  // repeated .pb.map.MapCampaign campaigns = 1;
  int campaigns_size() const;
  private:
  int _internal_campaigns_size() const;
  public:
  void clear_campaigns();
  ::pb::map::MapCampaign* mutable_campaigns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapCampaign >*
      mutable_campaigns();
  private:
  const ::pb::map::MapCampaign& _internal_campaigns(int index) const;
  ::pb::map::MapCampaign* _internal_add_campaigns();
  public:
  const ::pb::map::MapCampaign& campaigns(int index) const;
  ::pb::map::MapCampaign* add_campaigns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapCampaign >&
      campaigns() const;

  // @@protoc_insertion_point(class_scope:pb.map.MapCampaignResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapCampaign > campaigns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Country :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Country) */ {
 public:
  Country();
  virtual ~Country();

  Country(const Country& from);
  Country(Country&& from) noexcept
    : Country() {
    *this = ::std::move(from);
  }

  inline Country& operator=(const Country& from) {
    CopyFrom(from);
    return *this;
  }
  inline Country& operator=(Country&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Country& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Country* internal_default_instance() {
    return reinterpret_cast<const Country*>(
               &_Country_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Country& a, Country& b) {
    a.Swap(&b);
  }
  inline void Swap(Country* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Country* New() const final {
    return CreateMaybeMessage<Country>(nullptr);
  }

  Country* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Country>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Country& from);
  void MergeFrom(const Country& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Country* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Country";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryIdFieldNumber = 1,
    kNumFieldNumber = 2,
    kOpenFieldNumber = 3,
  };
  // int32 country_id = 1;
  void clear_country_id();
  ::PROTOBUF_NAMESPACE_ID::int32 country_id() const;
  void set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_country_id() const;
  void _internal_set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 open = 3;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::int32 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Country)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 country_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Country_Info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Country_Info) */ {
 public:
  Country_Info();
  virtual ~Country_Info();

  Country_Info(const Country_Info& from);
  Country_Info(Country_Info&& from) noexcept
    : Country_Info() {
    *this = ::std::move(from);
  }

  inline Country_Info& operator=(const Country_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Country_Info& operator=(Country_Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Country_Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Country_Info* internal_default_instance() {
    return reinterpret_cast<const Country_Info*>(
               &_Country_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Country_Info& a, Country_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Country_Info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Country_Info* New() const final {
    return CreateMaybeMessage<Country_Info>(nullptr);
  }

  Country_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Country_Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Country_Info& from);
  void MergeFrom(const Country_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Country_Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Country_Info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountriesFieldNumber = 1,
  };
  // repeated .pb.map.Country countries = 1;
  int countries_size() const;
  private:
  int _internal_countries_size() const;
  public:
  void clear_countries();
  ::pb::map::Country* mutable_countries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Country >*
      mutable_countries();
  private:
  const ::pb::map::Country& _internal_countries(int index) const;
  ::pb::map::Country* _internal_add_countries();
  public:
  const ::pb::map::Country& countries(int index) const;
  ::pb::map::Country* add_countries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Country >&
      countries() const;

  // @@protoc_insertion_point(class_scope:pb.map.Country_Info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Country > countries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Choose_Country :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Choose_Country) */ {
 public:
  Choose_Country();
  virtual ~Choose_Country();

  Choose_Country(const Choose_Country& from);
  Choose_Country(Choose_Country&& from) noexcept
    : Choose_Country() {
    *this = ::std::move(from);
  }

  inline Choose_Country& operator=(const Choose_Country& from) {
    CopyFrom(from);
    return *this;
  }
  inline Choose_Country& operator=(Choose_Country&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Choose_Country& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Choose_Country* internal_default_instance() {
    return reinterpret_cast<const Choose_Country*>(
               &_Choose_Country_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Choose_Country& a, Choose_Country& b) {
    a.Swap(&b);
  }
  inline void Swap(Choose_Country* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Choose_Country* New() const final {
    return CreateMaybeMessage<Choose_Country>(nullptr);
  }

  Choose_Country* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Choose_Country>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Choose_Country& from);
  void MergeFrom(const Choose_Country& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Choose_Country* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Choose_Country";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
    kCountryIdFieldNumber = 2,
  };
  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 country_id = 2;
  void clear_country_id();
  ::PROTOBUF_NAMESPACE_ID::int32 country_id() const;
  void set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_country_id() const;
  void _internal_set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Choose_Country)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 country_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class CampaignScale :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.CampaignScale) */ {
 public:
  CampaignScale();
  virtual ~CampaignScale();

  CampaignScale(const CampaignScale& from);
  CampaignScale(CampaignScale&& from) noexcept
    : CampaignScale() {
    *this = ::std::move(from);
  }

  inline CampaignScale& operator=(const CampaignScale& from) {
    CopyFrom(from);
    return *this;
  }
  inline CampaignScale& operator=(CampaignScale&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CampaignScale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CampaignScale* internal_default_instance() {
    return reinterpret_cast<const CampaignScale*>(
               &_CampaignScale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CampaignScale& a, CampaignScale& b) {
    a.Swap(&b);
  }
  inline void Swap(CampaignScale* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CampaignScale* New() const final {
    return CreateMaybeMessage<CampaignScale>(nullptr);
  }

  CampaignScale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CampaignScale>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CampaignScale& from);
  void MergeFrom(const CampaignScale& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CampaignScale* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.CampaignScale";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kScaleFieldNumber = 2,
    kFinishFieldNumber = 3,
  };
  // .pb.map.HEX pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::pb::map::HEX& pos() const;
  ::pb::map::HEX* release_pos();
  ::pb::map::HEX* mutable_pos();
  void set_allocated_pos(::pb::map::HEX* pos);
  private:
  const ::pb::map::HEX& _internal_pos() const;
  ::pb::map::HEX* _internal_mutable_pos();
  public:

  // int32 scale = 2;
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool finish = 3;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.CampaignScale)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::map::HEX* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Req_SearchMapObj :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Req_SearchMapObj) */ {
 public:
  Req_SearchMapObj();
  virtual ~Req_SearchMapObj();

  Req_SearchMapObj(const Req_SearchMapObj& from);
  Req_SearchMapObj(Req_SearchMapObj&& from) noexcept
    : Req_SearchMapObj() {
    *this = ::std::move(from);
  }

  inline Req_SearchMapObj& operator=(const Req_SearchMapObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline Req_SearchMapObj& operator=(Req_SearchMapObj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Req_SearchMapObj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SearchMapObj* internal_default_instance() {
    return reinterpret_cast<const Req_SearchMapObj*>(
               &_Req_SearchMapObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Req_SearchMapObj& a, Req_SearchMapObj& b) {
    a.Swap(&b);
  }
  inline void Swap(Req_SearchMapObj* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Req_SearchMapObj* New() const final {
    return CreateMaybeMessage<Req_SearchMapObj>(nullptr);
  }

  Req_SearchMapObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Req_SearchMapObj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Req_SearchMapObj& from);
  void MergeFrom(const Req_SearchMapObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SearchMapObj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Req_SearchMapObj";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kRFieldNumber = 2,
    kExhaleFieldNumber = 3,
    kObjKindFieldNumber = 4,
    kObjTypeFieldNumber = 5,
    kObjLevelMinFieldNumber = 6,
    kObjLevelMaxFieldNumber = 7,
    kObjBelongFieldNumber = 8,
  };
  // int32 q = 1;
  void clear_q();
  ::PROTOBUF_NAMESPACE_ID::int32 q() const;
  void set_q(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_q() const;
  void _internal_set_q(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 r = 2;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exhale = 3;
  void clear_exhale();
  ::PROTOBUF_NAMESPACE_ID::int32 exhale() const;
  void set_exhale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exhale() const;
  void _internal_set_exhale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obj_kind = 4;
  void clear_obj_kind();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_kind() const;
  void set_obj_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obj_kind() const;
  void _internal_set_obj_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obj_type = 5;
  void clear_obj_type();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_type() const;
  void set_obj_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obj_type() const;
  void _internal_set_obj_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obj_level_min = 6;
  void clear_obj_level_min();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_level_min() const;
  void set_obj_level_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obj_level_min() const;
  void _internal_set_obj_level_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obj_level_max = 7;
  void clear_obj_level_max();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_level_max() const;
  void set_obj_level_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obj_level_max() const;
  void _internal_set_obj_level_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obj_belong = 8;
  void clear_obj_belong();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_belong() const;
  void set_obj_belong(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obj_belong() const;
  void _internal_set_obj_belong(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Req_SearchMapObj)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 q_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 exhale_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_kind_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_level_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_level_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_belong_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Rep_SearchMapObj :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Rep_SearchMapObj) */ {
 public:
  Rep_SearchMapObj();
  virtual ~Rep_SearchMapObj();

  Rep_SearchMapObj(const Rep_SearchMapObj& from);
  Rep_SearchMapObj(Rep_SearchMapObj&& from) noexcept
    : Rep_SearchMapObj() {
    *this = ::std::move(from);
  }

  inline Rep_SearchMapObj& operator=(const Rep_SearchMapObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rep_SearchMapObj& operator=(Rep_SearchMapObj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rep_SearchMapObj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rep_SearchMapObj* internal_default_instance() {
    return reinterpret_cast<const Rep_SearchMapObj*>(
               &_Rep_SearchMapObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Rep_SearchMapObj& a, Rep_SearchMapObj& b) {
    a.Swap(&b);
  }
  inline void Swap(Rep_SearchMapObj* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rep_SearchMapObj* New() const final {
    return CreateMaybeMessage<Rep_SearchMapObj>(nullptr);
  }

  Rep_SearchMapObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rep_SearchMapObj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rep_SearchMapObj& from);
  void MergeFrom(const Rep_SearchMapObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rep_SearchMapObj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Rep_SearchMapObj";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLstHexFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // repeated .pb.map.HEX lst_hex = 3;
  int lst_hex_size() const;
  private:
  int _internal_lst_hex_size() const;
  public:
  void clear_lst_hex();
  ::pb::map::HEX* mutable_lst_hex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
      mutable_lst_hex();
  private:
  const ::pb::map::HEX& _internal_lst_hex(int index) const;
  ::pb::map::HEX* _internal_add_lst_hex();
  public:
  const ::pb::map::HEX& lst_hex(int index) const;
  ::pb::map::HEX* add_lst_hex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
      lst_hex() const;

  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Rep_SearchMapObj)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX > lst_hex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class TimerTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.TimerTask) */ {
 public:
  TimerTask();
  virtual ~TimerTask();

  TimerTask(const TimerTask& from);
  TimerTask(TimerTask&& from) noexcept
    : TimerTask() {
    *this = ::std::move(from);
  }

  inline TimerTask& operator=(const TimerTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerTask& operator=(TimerTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimerTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerTask* internal_default_instance() {
    return reinterpret_cast<const TimerTask*>(
               &_TimerTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TimerTask& a, TimerTask& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerTask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimerTask* New() const final {
    return CreateMaybeMessage<TimerTask>(nullptr);
  }

  TimerTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimerTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimerTask& from);
  void MergeFrom(const TimerTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.TimerTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPbParamFieldNumber = 7,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kEndTimeFieldNumber = 4,
    kIdLinkFieldNumber = 5,
    kParamFieldNumber = 6,
    kTypeFieldNumber = 3,
  };
  // bytes pb_param = 7;
  void clear_pb_param();
  const std::string& pb_param() const;
  void set_pb_param(const std::string& value);
  void set_pb_param(std::string&& value);
  void set_pb_param(const char* value);
  void set_pb_param(const void* value, size_t size);
  std::string* mutable_pb_param();
  std::string* release_pb_param();
  void set_allocated_pb_param(std::string* pb_param);
  private:
  const std::string& _internal_pb_param() const;
  void _internal_set_pb_param(const std::string& value);
  std::string* _internal_mutable_pb_param();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id_link = 5;
  void clear_id_link();
  ::PROTOBUF_NAMESPACE_ID::int64 id_link() const;
  void set_id_link(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id_link() const;
  void _internal_set_id_link(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 param = 6;
  void clear_param();
  ::PROTOBUF_NAMESPACE_ID::int64 param() const;
  void set_param(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_param() const;
  void _internal_set_param(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.TimerTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pb_param_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_link_;
  ::PROTOBUF_NAMESPACE_ID::int64 param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Rep_Timer_list :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Rep_Timer_list) */ {
 public:
  Rep_Timer_list();
  virtual ~Rep_Timer_list();

  Rep_Timer_list(const Rep_Timer_list& from);
  Rep_Timer_list(Rep_Timer_list&& from) noexcept
    : Rep_Timer_list() {
    *this = ::std::move(from);
  }

  inline Rep_Timer_list& operator=(const Rep_Timer_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rep_Timer_list& operator=(Rep_Timer_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rep_Timer_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rep_Timer_list* internal_default_instance() {
    return reinterpret_cast<const Rep_Timer_list*>(
               &_Rep_Timer_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Rep_Timer_list& a, Rep_Timer_list& b) {
    a.Swap(&b);
  }
  inline void Swap(Rep_Timer_list* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rep_Timer_list* New() const final {
    return CreateMaybeMessage<Rep_Timer_list>(nullptr);
  }

  Rep_Timer_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rep_Timer_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rep_Timer_list& from);
  void MergeFrom(const Rep_Timer_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rep_Timer_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Rep_Timer_list";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLstFieldNumber = 1,
  };
  // repeated .pb.map.TimerTask lst = 1;
  int lst_size() const;
  private:
  int _internal_lst_size() const;
  public:
  void clear_lst();
  ::pb::map::TimerTask* mutable_lst(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TimerTask >*
      mutable_lst();
  private:
  const ::pb::map::TimerTask& _internal_lst(int index) const;
  ::pb::map::TimerTask* _internal_add_lst();
  public:
  const ::pb::map::TimerTask& lst(int index) const;
  ::pb::map::TimerTask* add_lst();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TimerTask >&
      lst() const;

  // @@protoc_insertion_point(class_scope:pb.map.Rep_Timer_list)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TimerTask > lst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Req_ChgMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Req_ChgMap) */ {
 public:
  Req_ChgMap();
  virtual ~Req_ChgMap();

  Req_ChgMap(const Req_ChgMap& from);
  Req_ChgMap(Req_ChgMap&& from) noexcept
    : Req_ChgMap() {
    *this = ::std::move(from);
  }

  inline Req_ChgMap& operator=(const Req_ChgMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Req_ChgMap& operator=(Req_ChgMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Req_ChgMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_ChgMap* internal_default_instance() {
    return reinterpret_cast<const Req_ChgMap*>(
               &_Req_ChgMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Req_ChgMap& a, Req_ChgMap& b) {
    a.Swap(&b);
  }
  inline void Swap(Req_ChgMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Req_ChgMap* New() const final {
    return CreateMaybeMessage<Req_ChgMap>(nullptr);
  }

  Req_ChgMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Req_ChgMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Req_ChgMap& from);
  void MergeFrom(const Req_ChgMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_ChgMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Req_ChgMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
    kMapTypeFieldNumber = 2,
  };
  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mapType = 2;
  void clear_maptype();
  ::PROTOBUF_NAMESPACE_ID::uint32 maptype() const;
  void set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maptype() const;
  void _internal_set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.map.Req_ChgMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Req_Map_Chk_View :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.map.Req_Map_Chk_View) */ {
 public:
  Req_Map_Chk_View();
  virtual ~Req_Map_Chk_View();

  Req_Map_Chk_View(const Req_Map_Chk_View& from);
  Req_Map_Chk_View(Req_Map_Chk_View&& from) noexcept
    : Req_Map_Chk_View() {
    *this = ::std::move(from);
  }

  inline Req_Map_Chk_View& operator=(const Req_Map_Chk_View& from) {
    CopyFrom(from);
    return *this;
  }
  inline Req_Map_Chk_View& operator=(Req_Map_Chk_View&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Req_Map_Chk_View& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_Map_Chk_View* internal_default_instance() {
    return reinterpret_cast<const Req_Map_Chk_View*>(
               &_Req_Map_Chk_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Req_Map_Chk_View& a, Req_Map_Chk_View& b) {
    a.Swap(&b);
  }
  inline void Swap(Req_Map_Chk_View* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Req_Map_Chk_View* New() const final {
    return CreateMaybeMessage<Req_Map_Chk_View>(nullptr);
  }

  Req_Map_Chk_View* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Req_Map_Chk_View>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Req_Map_Chk_View& from);
  void MergeFrom(const Req_Map_Chk_View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_Map_Chk_View* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.map.Req_Map_Chk_View";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecChkTroopLstFieldNumber = 1,
    kVecChkBuildingsLstFieldNumber = 2,
  };
  // repeated int64 vec_chk_troop_lst = 1;
  int vec_chk_troop_lst_size() const;
  private:
  int _internal_vec_chk_troop_lst_size() const;
  public:
  void clear_vec_chk_troop_lst();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vec_chk_troop_lst(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_vec_chk_troop_lst() const;
  void _internal_add_vec_chk_troop_lst(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_vec_chk_troop_lst();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 vec_chk_troop_lst(int index) const;
  void set_vec_chk_troop_lst(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_vec_chk_troop_lst(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      vec_chk_troop_lst() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_vec_chk_troop_lst();

  // repeated int64 vec_chk_buildings_lst = 2;
  int vec_chk_buildings_lst_size() const;
  private:
  int _internal_vec_chk_buildings_lst_size() const;
  public:
  void clear_vec_chk_buildings_lst();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vec_chk_buildings_lst(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_vec_chk_buildings_lst() const;
  void _internal_add_vec_chk_buildings_lst(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_vec_chk_buildings_lst();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 vec_chk_buildings_lst(int index) const;
  void set_vec_chk_buildings_lst(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_vec_chk_buildings_lst(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      vec_chk_buildings_lst() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_vec_chk_buildings_lst();

  // @@protoc_insertion_point(class_scope:pb.map.Req_Map_Chk_View)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > vec_chk_troop_lst_;
  mutable std::atomic<int> _vec_chk_troop_lst_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > vec_chk_buildings_lst_;
  mutable std::atomic<int> _vec_chk_buildings_lst_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Base_Operate

// .pb.map.E_Map_CMD cmd = 1;
inline void Base_Operate::clear_cmd() {
  cmd_ = 0;
}
inline ::pb::map::E_Map_CMD Base_Operate::_internal_cmd() const {
  return static_cast< ::pb::map::E_Map_CMD >(cmd_);
}
inline ::pb::map::E_Map_CMD Base_Operate::cmd() const {
  // @@protoc_insertion_point(field_get:pb.map.Base_Operate.cmd)
  return _internal_cmd();
}
inline void Base_Operate::_internal_set_cmd(::pb::map::E_Map_CMD value) {
  
  cmd_ = value;
}
inline void Base_Operate::set_cmd(::pb::map::E_Map_CMD value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.map.Base_Operate.cmd)
}

// uint32 error_code = 2;
inline void Base_Operate::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Base_Operate::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Base_Operate::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Base_Operate.error_code)
  return _internal_error_code();
}
inline void Base_Operate::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Base_Operate::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Base_Operate.error_code)
}

// -------------------------------------------------------------------

// HEX

// int32 q = 1;
inline void HEX::clear_q() {
  q_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HEX::_internal_q() const {
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HEX::q() const {
  // @@protoc_insertion_point(field_get:pb.map.HEX.q)
  return _internal_q();
}
inline void HEX::_internal_set_q(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  q_ = value;
}
inline void HEX::set_q(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:pb.map.HEX.q)
}

// int32 r = 2;
inline void HEX::clear_r() {
  r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HEX::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HEX::r() const {
  // @@protoc_insertion_point(field_get:pb.map.HEX.r)
  return _internal_r();
}
inline void HEX::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_ = value;
}
inline void HEX::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:pb.map.HEX.r)
}

// -------------------------------------------------------------------

// Resp_MapOperate

// int64 troop_id = 1;
inline void Resp_MapOperate::clear_troop_id() {
  troop_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Resp_MapOperate::_internal_troop_id() const {
  return troop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Resp_MapOperate::troop_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Resp_MapOperate.troop_id)
  return _internal_troop_id();
}
inline void Resp_MapOperate::_internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  troop_id_ = value;
}
inline void Resp_MapOperate::set_troop_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_troop_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Resp_MapOperate.troop_id)
}

// .pb.map.E_Map_CMD op = 2;
inline void Resp_MapOperate::clear_op() {
  op_ = 0;
}
inline ::pb::map::E_Map_CMD Resp_MapOperate::_internal_op() const {
  return static_cast< ::pb::map::E_Map_CMD >(op_);
}
inline ::pb::map::E_Map_CMD Resp_MapOperate::op() const {
  // @@protoc_insertion_point(field_get:pb.map.Resp_MapOperate.op)
  return _internal_op();
}
inline void Resp_MapOperate::_internal_set_op(::pb::map::E_Map_CMD value) {
  
  op_ = value;
}
inline void Resp_MapOperate::set_op(::pb::map::E_Map_CMD value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:pb.map.Resp_MapOperate.op)
}

// -------------------------------------------------------------------

// Building

// uint32 idx = 1;
inline void Building::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Building::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Building::idx() const {
  // @@protoc_insertion_point(field_get:pb.map.Building.idx)
  return _internal_idx();
}
inline void Building::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void Building::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:pb.map.Building.idx)
}

// uint32 type = 2;
inline void Building::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Building::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Building::type() const {
  // @@protoc_insertion_point(field_get:pb.map.Building.type)
  return _internal_type();
}
inline void Building::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Building::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.map.Building.type)
}

// uint32 level = 3;
inline void Building::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Building::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Building::level() const {
  // @@protoc_insertion_point(field_get:pb.map.Building.level)
  return _internal_level();
}
inline void Building::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void Building::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.map.Building.level)
}

// .pb.map.HEX pos = 4;
inline bool Building::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Building::has_pos() const {
  return _internal_has_pos();
}
inline void Building::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Building::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Building::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Building.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Building::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Building.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Building::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Building::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Building.pos)
  return _internal_mutable_pos();
}
inline void Building::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Building.pos)
}

// -------------------------------------------------------------------

// Troop_Map_OP

// uint32 error_code = 1;
inline void Troop_Map_OP::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Map_OP.error_code)
  return _internal_error_code();
}
inline void Troop_Map_OP::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Troop_Map_OP::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Map_OP.error_code)
}

// .pb.map.HEX end_pos = 2;
inline bool Troop_Map_OP::_internal_has_end_pos() const {
  return this != internal_default_instance() && end_pos_ != nullptr;
}
inline bool Troop_Map_OP::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Troop_Map_OP::clear_end_pos() {
  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
}
inline const ::pb::map::HEX& Troop_Map_OP::_internal_end_pos() const {
  const ::pb::map::HEX* p = end_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Troop_Map_OP::end_pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Map_OP.end_pos)
  return _internal_end_pos();
}
inline ::pb::map::HEX* Troop_Map_OP::release_end_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Troop_Map_OP.end_pos)
  
  ::pb::map::HEX* temp = end_pos_;
  end_pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Troop_Map_OP::_internal_mutable_end_pos() {
  
  if (end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    end_pos_ = p;
  }
  return end_pos_;
}
inline ::pb::map::HEX* Troop_Map_OP::mutable_end_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Troop_Map_OP.end_pos)
  return _internal_mutable_end_pos();
}
inline void Troop_Map_OP::set_allocated_end_pos(::pb::map::HEX* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Troop_Map_OP.end_pos)
}

// uint32 idx_troop = 3;
inline void Troop_Map_OP::clear_idx_troop() {
  idx_troop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::_internal_idx_troop() const {
  return idx_troop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::idx_troop() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Map_OP.idx_troop)
  return _internal_idx_troop();
}
inline void Troop_Map_OP::_internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_troop_ = value;
}
inline void Troop_Map_OP::set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_troop(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Map_OP.idx_troop)
}

// uint32 count = 4;
inline void Troop_Map_OP::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::count() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Map_OP.count)
  return _internal_count();
}
inline void Troop_Map_OP::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void Troop_Map_OP::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Map_OP.count)
}

// uint32 is_autoreturn = 5;
inline void Troop_Map_OP::clear_is_autoreturn() {
  is_autoreturn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::_internal_is_autoreturn() const {
  return is_autoreturn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::is_autoreturn() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Map_OP.is_autoreturn)
  return _internal_is_autoreturn();
}
inline void Troop_Map_OP::_internal_set_is_autoreturn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_autoreturn_ = value;
}
inline void Troop_Map_OP::set_is_autoreturn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_autoreturn(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Map_OP.is_autoreturn)
}

// uint32 target_type = 6;
inline void Troop_Map_OP::clear_target_type() {
  target_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::_internal_target_type() const {
  return target_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Map_OP::target_type() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Map_OP.target_type)
  return _internal_target_type();
}
inline void Troop_Map_OP::_internal_set_target_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_type_ = value;
}
inline void Troop_Map_OP::set_target_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_type(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Map_OP.target_type)
}

// -------------------------------------------------------------------

// Robot_AI_Model

// uint32 error_code = 1;
inline void Robot_AI_Model::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot_AI_Model::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot_AI_Model::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.error_code)
  return _internal_error_code();
}
inline void Robot_AI_Model::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Robot_AI_Model::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Robot_AI_Model.error_code)
}

// uint32 idx_troop = 2;
inline void Robot_AI_Model::clear_idx_troop() {
  idx_troop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot_AI_Model::_internal_idx_troop() const {
  return idx_troop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot_AI_Model::idx_troop() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.idx_troop)
  return _internal_idx_troop();
}
inline void Robot_AI_Model::_internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_troop_ = value;
}
inline void Robot_AI_Model::set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_troop(value);
  // @@protoc_insertion_point(field_set:pb.map.Robot_AI_Model.idx_troop)
}

// .pb.map.E_AIBehavior_Type ai_type = 3;
inline void Robot_AI_Model::clear_ai_type() {
  ai_type_ = 0;
}
inline ::pb::map::E_AIBehavior_Type Robot_AI_Model::_internal_ai_type() const {
  return static_cast< ::pb::map::E_AIBehavior_Type >(ai_type_);
}
inline ::pb::map::E_AIBehavior_Type Robot_AI_Model::ai_type() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.ai_type)
  return _internal_ai_type();
}
inline void Robot_AI_Model::_internal_set_ai_type(::pb::map::E_AIBehavior_Type value) {
  
  ai_type_ = value;
}
inline void Robot_AI_Model::set_ai_type(::pb::map::E_AIBehavior_Type value) {
  _internal_set_ai_type(value);
  // @@protoc_insertion_point(field_set:pb.map.Robot_AI_Model.ai_type)
}

// .pb.map.HEX center_pos = 4;
inline bool Robot_AI_Model::_internal_has_center_pos() const {
  return this != internal_default_instance() && center_pos_ != nullptr;
}
inline bool Robot_AI_Model::has_center_pos() const {
  return _internal_has_center_pos();
}
inline void Robot_AI_Model::clear_center_pos() {
  if (GetArenaNoVirtual() == nullptr && center_pos_ != nullptr) {
    delete center_pos_;
  }
  center_pos_ = nullptr;
}
inline const ::pb::map::HEX& Robot_AI_Model::_internal_center_pos() const {
  const ::pb::map::HEX* p = center_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Robot_AI_Model::center_pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.center_pos)
  return _internal_center_pos();
}
inline ::pb::map::HEX* Robot_AI_Model::release_center_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Robot_AI_Model.center_pos)
  
  ::pb::map::HEX* temp = center_pos_;
  center_pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Robot_AI_Model::_internal_mutable_center_pos() {
  
  if (center_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    center_pos_ = p;
  }
  return center_pos_;
}
inline ::pb::map::HEX* Robot_AI_Model::mutable_center_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Robot_AI_Model.center_pos)
  return _internal_mutable_center_pos();
}
inline void Robot_AI_Model::set_allocated_center_pos(::pb::map::HEX* center_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center_pos_;
  }
  if (center_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_pos, submessage_arena);
    }
    
  } else {
    
  }
  center_pos_ = center_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Robot_AI_Model.center_pos)
}

// .pb.map.HEX start_pos = 5;
inline bool Robot_AI_Model::_internal_has_start_pos() const {
  return this != internal_default_instance() && start_pos_ != nullptr;
}
inline bool Robot_AI_Model::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void Robot_AI_Model::clear_start_pos() {
  if (GetArenaNoVirtual() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
}
inline const ::pb::map::HEX& Robot_AI_Model::_internal_start_pos() const {
  const ::pb::map::HEX* p = start_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Robot_AI_Model::start_pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.start_pos)
  return _internal_start_pos();
}
inline ::pb::map::HEX* Robot_AI_Model::release_start_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Robot_AI_Model.start_pos)
  
  ::pb::map::HEX* temp = start_pos_;
  start_pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Robot_AI_Model::_internal_mutable_start_pos() {
  
  if (start_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    start_pos_ = p;
  }
  return start_pos_;
}
inline ::pb::map::HEX* Robot_AI_Model::mutable_start_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Robot_AI_Model.start_pos)
  return _internal_mutable_start_pos();
}
inline void Robot_AI_Model::set_allocated_start_pos(::pb::map::HEX* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_pos_;
  }
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    
  } else {
    
  }
  start_pos_ = start_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Robot_AI_Model.start_pos)
}

// .pb.map.HEX end_pos = 6;
inline bool Robot_AI_Model::_internal_has_end_pos() const {
  return this != internal_default_instance() && end_pos_ != nullptr;
}
inline bool Robot_AI_Model::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Robot_AI_Model::clear_end_pos() {
  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
}
inline const ::pb::map::HEX& Robot_AI_Model::_internal_end_pos() const {
  const ::pb::map::HEX* p = end_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Robot_AI_Model::end_pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.end_pos)
  return _internal_end_pos();
}
inline ::pb::map::HEX* Robot_AI_Model::release_end_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Robot_AI_Model.end_pos)
  
  ::pb::map::HEX* temp = end_pos_;
  end_pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Robot_AI_Model::_internal_mutable_end_pos() {
  
  if (end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    end_pos_ = p;
  }
  return end_pos_;
}
inline ::pb::map::HEX* Robot_AI_Model::mutable_end_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Robot_AI_Model.end_pos)
  return _internal_mutable_end_pos();
}
inline void Robot_AI_Model::set_allocated_end_pos(::pb::map::HEX* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Robot_AI_Model.end_pos)
}

// int32 alter_radius = 7;
inline void Robot_AI_Model::clear_alter_radius() {
  alter_radius_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot_AI_Model::_internal_alter_radius() const {
  return alter_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot_AI_Model::alter_radius() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.alter_radius)
  return _internal_alter_radius();
}
inline void Robot_AI_Model::_internal_set_alter_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  alter_radius_ = value;
}
inline void Robot_AI_Model::set_alter_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alter_radius(value);
  // @@protoc_insertion_point(field_set:pb.map.Robot_AI_Model.alter_radius)
}

// bool is_clockwise = 8;
inline void Robot_AI_Model::clear_is_clockwise() {
  is_clockwise_ = false;
}
inline bool Robot_AI_Model::_internal_is_clockwise() const {
  return is_clockwise_;
}
inline bool Robot_AI_Model::is_clockwise() const {
  // @@protoc_insertion_point(field_get:pb.map.Robot_AI_Model.is_clockwise)
  return _internal_is_clockwise();
}
inline void Robot_AI_Model::_internal_set_is_clockwise(bool value) {
  
  is_clockwise_ = value;
}
inline void Robot_AI_Model::set_is_clockwise(bool value) {
  _internal_set_is_clockwise(value);
  // @@protoc_insertion_point(field_set:pb.map.Robot_AI_Model.is_clockwise)
}

// -------------------------------------------------------------------

// Troop_Path_Query

// uint32 error_code = 1;
inline void Troop_Path_Query::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Path_Query::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Path_Query::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Path_Query.error_code)
  return _internal_error_code();
}
inline void Troop_Path_Query::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Troop_Path_Query::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Path_Query.error_code)
}

// .pb.map.HEX end_pos = 2;
inline bool Troop_Path_Query::_internal_has_end_pos() const {
  return this != internal_default_instance() && end_pos_ != nullptr;
}
inline bool Troop_Path_Query::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Troop_Path_Query::clear_end_pos() {
  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
}
inline const ::pb::map::HEX& Troop_Path_Query::_internal_end_pos() const {
  const ::pb::map::HEX* p = end_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Troop_Path_Query::end_pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Path_Query.end_pos)
  return _internal_end_pos();
}
inline ::pb::map::HEX* Troop_Path_Query::release_end_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Troop_Path_Query.end_pos)
  
  ::pb::map::HEX* temp = end_pos_;
  end_pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Troop_Path_Query::_internal_mutable_end_pos() {
  
  if (end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    end_pos_ = p;
  }
  return end_pos_;
}
inline ::pb::map::HEX* Troop_Path_Query::mutable_end_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Troop_Path_Query.end_pos)
  return _internal_mutable_end_pos();
}
inline void Troop_Path_Query::set_allocated_end_pos(::pb::map::HEX* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Troop_Path_Query.end_pos)
}

// uint32 idx_troop = 3;
inline void Troop_Path_Query::clear_idx_troop() {
  idx_troop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Path_Query::_internal_idx_troop() const {
  return idx_troop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Troop_Path_Query::idx_troop() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Path_Query.idx_troop)
  return _internal_idx_troop();
}
inline void Troop_Path_Query::_internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_troop_ = value;
}
inline void Troop_Path_Query::set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_troop(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Path_Query.idx_troop)
}

// .pb.map.E_Map_CMD sub_cmd = 4;
inline void Troop_Path_Query::clear_sub_cmd() {
  sub_cmd_ = 0;
}
inline ::pb::map::E_Map_CMD Troop_Path_Query::_internal_sub_cmd() const {
  return static_cast< ::pb::map::E_Map_CMD >(sub_cmd_);
}
inline ::pb::map::E_Map_CMD Troop_Path_Query::sub_cmd() const {
  // @@protoc_insertion_point(field_get:pb.map.Troop_Path_Query.sub_cmd)
  return _internal_sub_cmd();
}
inline void Troop_Path_Query::_internal_set_sub_cmd(::pb::map::E_Map_CMD value) {
  
  sub_cmd_ = value;
}
inline void Troop_Path_Query::set_sub_cmd(::pb::map::E_Map_CMD value) {
  _internal_set_sub_cmd(value);
  // @@protoc_insertion_point(field_set:pb.map.Troop_Path_Query.sub_cmd)
}

// -------------------------------------------------------------------

// Obstacle_Path

// int32 troop_id = 1;
inline void Obstacle_Path::clear_troop_id() {
  troop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_Path::_internal_troop_id() const {
  return troop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_Path::troop_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Obstacle_Path.troop_id)
  return _internal_troop_id();
}
inline void Obstacle_Path::_internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  troop_id_ = value;
}
inline void Obstacle_Path::set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_troop_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Obstacle_Path.troop_id)
}

// .pb.map.HEX obstacle_pt = 2;
inline bool Obstacle_Path::_internal_has_obstacle_pt() const {
  return this != internal_default_instance() && obstacle_pt_ != nullptr;
}
inline bool Obstacle_Path::has_obstacle_pt() const {
  return _internal_has_obstacle_pt();
}
inline void Obstacle_Path::clear_obstacle_pt() {
  if (GetArenaNoVirtual() == nullptr && obstacle_pt_ != nullptr) {
    delete obstacle_pt_;
  }
  obstacle_pt_ = nullptr;
}
inline const ::pb::map::HEX& Obstacle_Path::_internal_obstacle_pt() const {
  const ::pb::map::HEX* p = obstacle_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Obstacle_Path::obstacle_pt() const {
  // @@protoc_insertion_point(field_get:pb.map.Obstacle_Path.obstacle_pt)
  return _internal_obstacle_pt();
}
inline ::pb::map::HEX* Obstacle_Path::release_obstacle_pt() {
  // @@protoc_insertion_point(field_release:pb.map.Obstacle_Path.obstacle_pt)
  
  ::pb::map::HEX* temp = obstacle_pt_;
  obstacle_pt_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Obstacle_Path::_internal_mutable_obstacle_pt() {
  
  if (obstacle_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    obstacle_pt_ = p;
  }
  return obstacle_pt_;
}
inline ::pb::map::HEX* Obstacle_Path::mutable_obstacle_pt() {
  // @@protoc_insertion_point(field_mutable:pb.map.Obstacle_Path.obstacle_pt)
  return _internal_mutable_obstacle_pt();
}
inline void Obstacle_Path::set_allocated_obstacle_pt(::pb::map::HEX* obstacle_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obstacle_pt_;
  }
  if (obstacle_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obstacle_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obstacle_pt, submessage_arena);
    }
    
  } else {
    
  }
  obstacle_pt_ = obstacle_pt;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Obstacle_Path.obstacle_pt)
}

// repeated .pb.map.HEX vec_startobs = 3;
inline int Obstacle_Path::_internal_vec_startobs_size() const {
  return vec_startobs_.size();
}
inline int Obstacle_Path::vec_startobs_size() const {
  return _internal_vec_startobs_size();
}
inline void Obstacle_Path::clear_vec_startobs() {
  vec_startobs_.Clear();
}
inline ::pb::map::HEX* Obstacle_Path::mutable_vec_startobs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Obstacle_Path.vec_startobs)
  return vec_startobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
Obstacle_Path::mutable_vec_startobs() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Obstacle_Path.vec_startobs)
  return &vec_startobs_;
}
inline const ::pb::map::HEX& Obstacle_Path::_internal_vec_startobs(int index) const {
  return vec_startobs_.Get(index);
}
inline const ::pb::map::HEX& Obstacle_Path::vec_startobs(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Obstacle_Path.vec_startobs)
  return _internal_vec_startobs(index);
}
inline ::pb::map::HEX* Obstacle_Path::_internal_add_vec_startobs() {
  return vec_startobs_.Add();
}
inline ::pb::map::HEX* Obstacle_Path::add_vec_startobs() {
  // @@protoc_insertion_point(field_add:pb.map.Obstacle_Path.vec_startobs)
  return _internal_add_vec_startobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
Obstacle_Path::vec_startobs() const {
  // @@protoc_insertion_point(field_list:pb.map.Obstacle_Path.vec_startobs)
  return vec_startobs_;
}

// repeated .pb.map.HEX vec_endobs = 4;
inline int Obstacle_Path::_internal_vec_endobs_size() const {
  return vec_endobs_.size();
}
inline int Obstacle_Path::vec_endobs_size() const {
  return _internal_vec_endobs_size();
}
inline void Obstacle_Path::clear_vec_endobs() {
  vec_endobs_.Clear();
}
inline ::pb::map::HEX* Obstacle_Path::mutable_vec_endobs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Obstacle_Path.vec_endobs)
  return vec_endobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
Obstacle_Path::mutable_vec_endobs() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Obstacle_Path.vec_endobs)
  return &vec_endobs_;
}
inline const ::pb::map::HEX& Obstacle_Path::_internal_vec_endobs(int index) const {
  return vec_endobs_.Get(index);
}
inline const ::pb::map::HEX& Obstacle_Path::vec_endobs(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Obstacle_Path.vec_endobs)
  return _internal_vec_endobs(index);
}
inline ::pb::map::HEX* Obstacle_Path::_internal_add_vec_endobs() {
  return vec_endobs_.Add();
}
inline ::pb::map::HEX* Obstacle_Path::add_vec_endobs() {
  // @@protoc_insertion_point(field_add:pb.map.Obstacle_Path.vec_endobs)
  return _internal_add_vec_endobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
Obstacle_Path::vec_endobs() const {
  // @@protoc_insertion_point(field_list:pb.map.Obstacle_Path.vec_endobs)
  return vec_endobs_;
}

// -------------------------------------------------------------------

// March_Path

// int32 troop_id = 1;
inline void March_Path::clear_troop_id() {
  troop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 March_Path::_internal_troop_id() const {
  return troop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 March_Path::troop_id() const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.troop_id)
  return _internal_troop_id();
}
inline void March_Path::_internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  troop_id_ = value;
}
inline void March_Path::set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_troop_id(value);
  // @@protoc_insertion_point(field_set:pb.map.March_Path.troop_id)
}

// uint32 hero_id = 2;
inline void March_Path::clear_hero_id() {
  hero_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::_internal_hero_id() const {
  return hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::hero_id() const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.hero_id)
  return _internal_hero_id();
}
inline void March_Path::_internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hero_id_ = value;
}
inline void March_Path::set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:pb.map.March_Path.hero_id)
}

// uint32 soldier_id = 3;
inline void March_Path::clear_soldier_id() {
  soldier_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::_internal_soldier_id() const {
  return soldier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::soldier_id() const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.soldier_id)
  return _internal_soldier_id();
}
inline void March_Path::_internal_set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  soldier_id_ = value;
}
inline void March_Path::set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_soldier_id(value);
  // @@protoc_insertion_point(field_set:pb.map.March_Path.soldier_id)
}

// string name = 4;
inline void March_Path::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& March_Path::name() const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.name)
  return _internal_name();
}
inline void March_Path::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.map.March_Path.name)
}
inline std::string* March_Path::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.map.March_Path.name)
  return _internal_mutable_name();
}
inline const std::string& March_Path::_internal_name() const {
  return name_.GetNoArena();
}
inline void March_Path::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void March_Path::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.map.March_Path.name)
}
inline void March_Path::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map.March_Path.name)
}
inline void March_Path::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map.March_Path.name)
}
inline std::string* March_Path::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* March_Path::release_name() {
  // @@protoc_insertion_point(field_release:pb.map.March_Path.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void March_Path::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.map.March_Path.name)
}

// uint32 idx_troop = 5;
inline void March_Path::clear_idx_troop() {
  idx_troop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::_internal_idx_troop() const {
  return idx_troop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::idx_troop() const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.idx_troop)
  return _internal_idx_troop();
}
inline void March_Path::_internal_set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_troop_ = value;
}
inline void March_Path::set_idx_troop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_troop(value);
  // @@protoc_insertion_point(field_set:pb.map.March_Path.idx_troop)
}

// uint32 speed = 6;
inline void March_Path::clear_speed() {
  speed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 March_Path::speed() const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.speed)
  return _internal_speed();
}
inline void March_Path::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  speed_ = value;
}
inline void March_Path::set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:pb.map.March_Path.speed)
}

// repeated .pb.map.HEX vec_path = 7;
inline int March_Path::_internal_vec_path_size() const {
  return vec_path_.size();
}
inline int March_Path::vec_path_size() const {
  return _internal_vec_path_size();
}
inline void March_Path::clear_vec_path() {
  vec_path_.Clear();
}
inline ::pb::map::HEX* March_Path::mutable_vec_path(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.March_Path.vec_path)
  return vec_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
March_Path::mutable_vec_path() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.March_Path.vec_path)
  return &vec_path_;
}
inline const ::pb::map::HEX& March_Path::_internal_vec_path(int index) const {
  return vec_path_.Get(index);
}
inline const ::pb::map::HEX& March_Path::vec_path(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.vec_path)
  return _internal_vec_path(index);
}
inline ::pb::map::HEX* March_Path::_internal_add_vec_path() {
  return vec_path_.Add();
}
inline ::pb::map::HEX* March_Path::add_vec_path() {
  // @@protoc_insertion_point(field_add:pb.map.March_Path.vec_path)
  return _internal_add_vec_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
March_Path::vec_path() const {
  // @@protoc_insertion_point(field_list:pb.map.March_Path.vec_path)
  return vec_path_;
}

// int64 end_time = 8;
inline void March_Path::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 March_Path::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 March_Path::end_time() const {
  // @@protoc_insertion_point(field_get:pb.map.March_Path.end_time)
  return _internal_end_time();
}
inline void March_Path::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void March_Path::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:pb.map.March_Path.end_time)
}

// -------------------------------------------------------------------

// Ranking

// string user_name = 1;
inline void Ranking::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Ranking::user_name() const {
  // @@protoc_insertion_point(field_get:pb.map.Ranking.user_name)
  return _internal_user_name();
}
inline void Ranking::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:pb.map.Ranking.user_name)
}
inline std::string* Ranking::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:pb.map.Ranking.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& Ranking::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void Ranking::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Ranking::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.map.Ranking.user_name)
}
inline void Ranking::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map.Ranking.user_name)
}
inline void Ranking::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map.Ranking.user_name)
}
inline std::string* Ranking::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Ranking::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.map.Ranking.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Ranking::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:pb.map.Ranking.user_name)
}

// uint32 value = 2;
inline void Ranking::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::value() const {
  // @@protoc_insertion_point(field_get:pb.map.Ranking.value)
  return _internal_value();
}
inline void Ranking::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void Ranking::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.map.Ranking.value)
}

// -------------------------------------------------------------------

// Map_Building

// int64 owner_id = 1;
inline void Map_Building::clear_owner_id() {
  owner_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::owner_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.owner_id)
  return _internal_owner_id();
}
inline void Map_Building::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  owner_id_ = value;
}
inline void Map_Building::set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.owner_id)
}

// uint32 skin_id = 2;
inline void Map_Building::clear_skin_id() {
  skin_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_skin_id() const {
  return skin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::skin_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.skin_id)
  return _internal_skin_id();
}
inline void Map_Building::_internal_set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skin_id_ = value;
}
inline void Map_Building::set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skin_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.skin_id)
}

// .pb.map.HEX pos = 3;
inline bool Map_Building::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Map_Building::has_pos() const {
  return _internal_has_pos();
}
inline void Map_Building::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Map_Building::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Map_Building::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Map_Building::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Map_Building.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Map_Building::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Map_Building::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Building.pos)
  return _internal_mutable_pos();
}
inline void Map_Building::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Map_Building.pos)
}

// uint32 type = 4;
inline void Map_Building::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::type() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.type)
  return _internal_type();
}
inline void Map_Building::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Map_Building::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.type)
}

// int32 id = 5;
inline void Map_Building::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Building::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Building::id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.id)
  return _internal_id();
}
inline void Map_Building::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Map_Building::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.id)
}

// uint32 life = 6;
inline void Map_Building::clear_life() {
  life_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_life() const {
  return life_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::life() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.life)
  return _internal_life();
}
inline void Map_Building::_internal_set_life(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  life_ = value;
}
inline void Map_Building::set_life(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.life)
}

// uint32 life_max = 7;
inline void Map_Building::clear_life_max() {
  life_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_life_max() const {
  return life_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::life_max() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.life_max)
  return _internal_life_max();
}
inline void Map_Building::_internal_set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  life_max_ = value;
}
inline void Map_Building::set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_life_max(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.life_max)
}

// uint32 troop_num = 8;
inline void Map_Building::clear_troop_num() {
  troop_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_troop_num() const {
  return troop_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::troop_num() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.troop_num)
  return _internal_troop_num();
}
inline void Map_Building::_internal_set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  troop_num_ = value;
}
inline void Map_Building::set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_troop_num(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.troop_num)
}

// int64 reset_time = 9;
inline void Map_Building::clear_reset_time() {
  reset_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::_internal_reset_time() const {
  return reset_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::reset_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.reset_time)
  return _internal_reset_time();
}
inline void Map_Building::_internal_set_reset_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reset_time_ = value;
}
inline void Map_Building::set_reset_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reset_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.reset_time)
}

// int64 avoid_battle_time = 10;
inline void Map_Building::clear_avoid_battle_time() {
  avoid_battle_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::_internal_avoid_battle_time() const {
  return avoid_battle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::avoid_battle_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.avoid_battle_time)
  return _internal_avoid_battle_time();
}
inline void Map_Building::_internal_set_avoid_battle_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  avoid_battle_time_ = value;
}
inline void Map_Building::set_avoid_battle_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_avoid_battle_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.avoid_battle_time)
}

// int64 close_city_time = 11;
inline void Map_Building::clear_close_city_time() {
  close_city_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::_internal_close_city_time() const {
  return close_city_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Building::close_city_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.close_city_time)
  return _internal_close_city_time();
}
inline void Map_Building::_internal_set_close_city_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  close_city_time_ = value;
}
inline void Map_Building::set_close_city_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_close_city_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.close_city_time)
}

// repeated .pb.map.Ranking first_kill_top_three = 12;
inline int Map_Building::_internal_first_kill_top_three_size() const {
  return first_kill_top_three_.size();
}
inline int Map_Building::first_kill_top_three_size() const {
  return _internal_first_kill_top_three_size();
}
inline void Map_Building::clear_first_kill_top_three() {
  first_kill_top_three_.Clear();
}
inline ::pb::map::Ranking* Map_Building::mutable_first_kill_top_three(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Building.first_kill_top_three)
  return first_kill_top_three_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >*
Map_Building::mutable_first_kill_top_three() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Building.first_kill_top_three)
  return &first_kill_top_three_;
}
inline const ::pb::map::Ranking& Map_Building::_internal_first_kill_top_three(int index) const {
  return first_kill_top_three_.Get(index);
}
inline const ::pb::map::Ranking& Map_Building::first_kill_top_three(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.first_kill_top_three)
  return _internal_first_kill_top_three(index);
}
inline ::pb::map::Ranking* Map_Building::_internal_add_first_kill_top_three() {
  return first_kill_top_three_.Add();
}
inline ::pb::map::Ranking* Map_Building::add_first_kill_top_three() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Building.first_kill_top_three)
  return _internal_add_first_kill_top_three();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >&
Map_Building::first_kill_top_three() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Building.first_kill_top_three)
  return first_kill_top_three_;
}

// repeated .pb.map.Ranking first_siege_top_three = 13;
inline int Map_Building::_internal_first_siege_top_three_size() const {
  return first_siege_top_three_.size();
}
inline int Map_Building::first_siege_top_three_size() const {
  return _internal_first_siege_top_three_size();
}
inline void Map_Building::clear_first_siege_top_three() {
  first_siege_top_three_.Clear();
}
inline ::pb::map::Ranking* Map_Building::mutable_first_siege_top_three(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Building.first_siege_top_three)
  return first_siege_top_three_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >*
Map_Building::mutable_first_siege_top_three() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Building.first_siege_top_three)
  return &first_siege_top_three_;
}
inline const ::pb::map::Ranking& Map_Building::_internal_first_siege_top_three(int index) const {
  return first_siege_top_three_.Get(index);
}
inline const ::pb::map::Ranking& Map_Building::first_siege_top_three(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.first_siege_top_three)
  return _internal_first_siege_top_three(index);
}
inline ::pb::map::Ranking* Map_Building::_internal_add_first_siege_top_three() {
  return first_siege_top_three_.Add();
}
inline ::pb::map::Ranking* Map_Building::add_first_siege_top_three() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Building.first_siege_top_three)
  return _internal_add_first_siege_top_three();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Ranking >&
Map_Building::first_siege_top_three() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Building.first_siege_top_three)
  return first_siege_top_three_;
}

// uint32 guildid = 14;
inline void Map_Building::clear_guildid() {
  guildid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_guildid() const {
  return guildid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::guildid() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.guildid)
  return _internal_guildid();
}
inline void Map_Building::_internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  guildid_ = value;
}
inline void Map_Building::set_guildid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.guildid)
}

// uint32 level = 15;
inline void Map_Building::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::level() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.level)
  return _internal_level();
}
inline void Map_Building::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void Map_Building::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.level)
}

// string name = 16;
inline void Map_Building::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Map_Building::name() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.name)
  return _internal_name();
}
inline void Map_Building::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.name)
}
inline std::string* Map_Building::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Building.name)
  return _internal_mutable_name();
}
inline const std::string& Map_Building::_internal_name() const {
  return name_.GetNoArena();
}
inline void Map_Building::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Map_Building::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.map.Map_Building.name)
}
inline void Map_Building::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map.Map_Building.name)
}
inline void Map_Building::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map.Map_Building.name)
}
inline std::string* Map_Building::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Map_Building::release_name() {
  // @@protoc_insertion_point(field_release:pb.map.Map_Building.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Map_Building::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.map.Map_Building.name)
}

// uint32 buildingeye = 17;
inline void Map_Building::clear_buildingeye() {
  buildingeye_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_buildingeye() const {
  return buildingeye_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::buildingeye() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.buildingeye)
  return _internal_buildingeye();
}
inline void Map_Building::_internal_set_buildingeye(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  buildingeye_ = value;
}
inline void Map_Building::set_buildingeye(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buildingeye(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.buildingeye)
}

// uint32 protect_flag = 18;
inline void Map_Building::clear_protect_flag() {
  protect_flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::_internal_protect_flag() const {
  return protect_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Building::protect_flag() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Building.protect_flag)
  return _internal_protect_flag();
}
inline void Map_Building::_internal_set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protect_flag_ = value;
}
inline void Map_Building::set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protect_flag(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Building.protect_flag)
}

// -------------------------------------------------------------------

// Map_Troop

// int32 troop_id = 1;
inline void Map_Troop::clear_troop_id() {
  troop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Troop::_internal_troop_id() const {
  return troop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Troop::troop_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.troop_id)
  return _internal_troop_id();
}
inline void Map_Troop::_internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  troop_id_ = value;
}
inline void Map_Troop::set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_troop_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.troop_id)
}

// int64 owner_id = 2;
inline void Map_Troop::clear_owner_id() {
  owner_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Troop::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Troop::owner_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.owner_id)
  return _internal_owner_id();
}
inline void Map_Troop::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  owner_id_ = value;
}
inline void Map_Troop::set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.owner_id)
}

// uint32 soldier_id = 3;
inline void Map_Troop::clear_soldier_id() {
  soldier_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::_internal_soldier_id() const {
  return soldier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::soldier_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.soldier_id)
  return _internal_soldier_id();
}
inline void Map_Troop::_internal_set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  soldier_id_ = value;
}
inline void Map_Troop::set_soldier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_soldier_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.soldier_id)
}

// .pb.map.HEX pos = 4;
inline bool Map_Troop::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Map_Troop::has_pos() const {
  return _internal_has_pos();
}
inline void Map_Troop::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Map_Troop::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Map_Troop::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Map_Troop::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Map_Troop.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Map_Troop::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Map_Troop::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Troop.pos)
  return _internal_mutable_pos();
}
inline void Map_Troop::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Map_Troop.pos)
}

// uint32 status = 5;
inline void Map_Troop::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::status() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.status)
  return _internal_status();
}
inline void Map_Troop::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void Map_Troop::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.status)
}

// uint32 idx_curpath = 6;
inline void Map_Troop::clear_idx_curpath() {
  idx_curpath_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::_internal_idx_curpath() const {
  return idx_curpath_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::idx_curpath() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.idx_curpath)
  return _internal_idx_curpath();
}
inline void Map_Troop::_internal_set_idx_curpath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_curpath_ = value;
}
inline void Map_Troop::set_idx_curpath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_curpath(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.idx_curpath)
}

// uint32 time = 7;
inline void Map_Troop::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.time)
  return _internal_time();
}
inline void Map_Troop::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Map_Troop::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.time)
}

// uint32 speed = 8;
inline void Map_Troop::clear_speed() {
  speed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::speed() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.speed)
  return _internal_speed();
}
inline void Map_Troop::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  speed_ = value;
}
inline void Map_Troop::set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.speed)
}

// repeated .pb.map.HEX vec_path = 9;
inline int Map_Troop::_internal_vec_path_size() const {
  return vec_path_.size();
}
inline int Map_Troop::vec_path_size() const {
  return _internal_vec_path_size();
}
inline void Map_Troop::clear_vec_path() {
  vec_path_.Clear();
}
inline ::pb::map::HEX* Map_Troop::mutable_vec_path(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Troop.vec_path)
  return vec_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
Map_Troop::mutable_vec_path() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Troop.vec_path)
  return &vec_path_;
}
inline const ::pb::map::HEX& Map_Troop::_internal_vec_path(int index) const {
  return vec_path_.Get(index);
}
inline const ::pb::map::HEX& Map_Troop::vec_path(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.vec_path)
  return _internal_vec_path(index);
}
inline ::pb::map::HEX* Map_Troop::_internal_add_vec_path() {
  return vec_path_.Add();
}
inline ::pb::map::HEX* Map_Troop::add_vec_path() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Troop.vec_path)
  return _internal_add_vec_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
Map_Troop::vec_path() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Troop.vec_path)
  return vec_path_;
}

// int64 end_time = 10;
inline void Map_Troop::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Troop::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Troop::end_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.end_time)
  return _internal_end_time();
}
inline void Map_Troop::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void Map_Troop::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.end_time)
}

// uint32 morale = 11;
inline void Map_Troop::clear_morale() {
  morale_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::_internal_morale() const {
  return morale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::morale() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.morale)
  return _internal_morale();
}
inline void Map_Troop::_internal_set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  morale_ = value;
}
inline void Map_Troop::set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_morale(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.morale)
}

// uint32 protect_flag = 12;
inline void Map_Troop::clear_protect_flag() {
  protect_flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::_internal_protect_flag() const {
  return protect_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Troop::protect_flag() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.protect_flag)
  return _internal_protect_flag();
}
inline void Map_Troop::_internal_set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protect_flag_ = value;
}
inline void Map_Troop::set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protect_flag(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.protect_flag)
}

// int32 dst_troop_id = 13;
inline void Map_Troop::clear_dst_troop_id() {
  dst_troop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Troop::_internal_dst_troop_id() const {
  return dst_troop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Troop::dst_troop_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Troop.dst_troop_id)
  return _internal_dst_troop_id();
}
inline void Map_Troop::_internal_set_dst_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dst_troop_id_ = value;
}
inline void Map_Troop::set_dst_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dst_troop_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Troop.dst_troop_id)
}

// -------------------------------------------------------------------

// Map_Field

// int64 owner_id = 1;
inline void Map_Field::clear_owner_id() {
  owner_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Field::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_Field::owner_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Field.owner_id)
  return _internal_owner_id();
}
inline void Map_Field::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  owner_id_ = value;
}
inline void Map_Field::set_owner_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Field.owner_id)
}

// .pb.map.HEX pos = 2;
inline bool Map_Field::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Map_Field::has_pos() const {
  return _internal_has_pos();
}
inline void Map_Field::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Map_Field::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Map_Field::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Field.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Map_Field::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Map_Field.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Map_Field::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Map_Field::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Field.pos)
  return _internal_mutable_pos();
}
inline void Map_Field::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Map_Field.pos)
}

// int32 field_id = 3;
inline void Map_Field::clear_field_id() {
  field_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Field::_internal_field_id() const {
  return field_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_Field::field_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Field.field_id)
  return _internal_field_id();
}
inline void Map_Field::_internal_set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  field_id_ = value;
}
inline void Map_Field::set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Field.field_id)
}

// uint32 type = 4;
inline void Map_Field::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::type() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Field.type)
  return _internal_type();
}
inline void Map_Field::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Map_Field::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Field.type)
}

// uint32 Status = 5;
inline void Map_Field::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::status() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Field.Status)
  return _internal_status();
}
inline void Map_Field::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void Map_Field::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Field.Status)
}

// uint32 FinishTime = 6;
inline void Map_Field::clear_finishtime() {
  finishtime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::_internal_finishtime() const {
  return finishtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::finishtime() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Field.FinishTime)
  return _internal_finishtime();
}
inline void Map_Field::_internal_set_finishtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  finishtime_ = value;
}
inline void Map_Field::set_finishtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_finishtime(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Field.FinishTime)
}

// uint32 protect_flag = 7;
inline void Map_Field::clear_protect_flag() {
  protect_flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::_internal_protect_flag() const {
  return protect_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_Field::protect_flag() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Field.protect_flag)
  return _internal_protect_flag();
}
inline void Map_Field::_internal_set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protect_flag_ = value;
}
inline void Map_Field::set_protect_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protect_flag(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_Field.protect_flag)
}

// -------------------------------------------------------------------

// Map_RecoverField

// .pb.map.HEX pos = 1;
inline bool Map_RecoverField::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Map_RecoverField::has_pos() const {
  return _internal_has_pos();
}
inline void Map_RecoverField::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Map_RecoverField::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Map_RecoverField::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_RecoverField.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Map_RecoverField::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Map_RecoverField.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Map_RecoverField::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Map_RecoverField::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_RecoverField.pos)
  return _internal_mutable_pos();
}
inline void Map_RecoverField::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Map_RecoverField.pos)
}

// int64 atk_user_id = 2;
inline void Map_RecoverField::clear_atk_user_id() {
  atk_user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_RecoverField::_internal_atk_user_id() const {
  return atk_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_RecoverField::atk_user_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_RecoverField.atk_user_id)
  return _internal_atk_user_id();
}
inline void Map_RecoverField::_internal_set_atk_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  atk_user_id_ = value;
}
inline void Map_RecoverField::set_atk_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_atk_user_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_RecoverField.atk_user_id)
}

// int64 end_time = 3;
inline void Map_RecoverField::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_RecoverField::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_RecoverField::end_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_RecoverField.end_time)
  return _internal_end_time();
}
inline void Map_RecoverField::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void Map_RecoverField::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_RecoverField.end_time)
}

// -------------------------------------------------------------------

// Map_WildNpcTroop

// uint32 id = 1;
inline void Map_WildNpcTroop::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildNpcTroop::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildNpcTroop::id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildNpcTroop.id)
  return _internal_id();
}
inline void Map_WildNpcTroop::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Map_WildNpcTroop::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildNpcTroop.id)
}

// .pb.map.HEX pos = 2;
inline bool Map_WildNpcTroop::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Map_WildNpcTroop::has_pos() const {
  return _internal_has_pos();
}
inline void Map_WildNpcTroop::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Map_WildNpcTroop::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Map_WildNpcTroop::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildNpcTroop.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Map_WildNpcTroop::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Map_WildNpcTroop.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Map_WildNpcTroop::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Map_WildNpcTroop::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_WildNpcTroop.pos)
  return _internal_mutable_pos();
}
inline void Map_WildNpcTroop::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Map_WildNpcTroop.pos)
}

// int32 wild_npc_id = 3;
inline void Map_WildNpcTroop::clear_wild_npc_id() {
  wild_npc_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_WildNpcTroop::_internal_wild_npc_id() const {
  return wild_npc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_WildNpcTroop::wild_npc_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildNpcTroop.wild_npc_id)
  return _internal_wild_npc_id();
}
inline void Map_WildNpcTroop::_internal_set_wild_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wild_npc_id_ = value;
}
inline void Map_WildNpcTroop::set_wild_npc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wild_npc_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildNpcTroop.wild_npc_id)
}

// int64 disappear_time = 4;
inline void Map_WildNpcTroop::clear_disappear_time() {
  disappear_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_WildNpcTroop::_internal_disappear_time() const {
  return disappear_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map_WildNpcTroop::disappear_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildNpcTroop.disappear_time)
  return _internal_disappear_time();
}
inline void Map_WildNpcTroop::_internal_set_disappear_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  disappear_time_ = value;
}
inline void Map_WildNpcTroop::set_disappear_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_disappear_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildNpcTroop.disappear_time)
}

// int32 status = 5;
inline void Map_WildNpcTroop::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_WildNpcTroop::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_WildNpcTroop::status() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildNpcTroop.status)
  return _internal_status();
}
inline void Map_WildNpcTroop::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void Map_WildNpcTroop::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildNpcTroop.status)
}

// -------------------------------------------------------------------

// Map_WildBuilding

// uint32 id = 1;
inline void Map_WildBuilding::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::id() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.id)
  return _internal_id();
}
inline void Map_WildBuilding::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Map_WildBuilding::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildBuilding.id)
}

// .pb.map.HEX pos = 2;
inline bool Map_WildBuilding::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Map_WildBuilding::has_pos() const {
  return _internal_has_pos();
}
inline void Map_WildBuilding::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Map_WildBuilding::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Map_WildBuilding::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Map_WildBuilding::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Map_WildBuilding.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Map_WildBuilding::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Map_WildBuilding::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_WildBuilding.pos)
  return _internal_mutable_pos();
}
inline void Map_WildBuilding::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Map_WildBuilding.pos)
}

// uint32 type = 3;
inline void Map_WildBuilding::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::type() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.type)
  return _internal_type();
}
inline void Map_WildBuilding::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Map_WildBuilding::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildBuilding.type)
}

// uint32 level = 4;
inline void Map_WildBuilding::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::level() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.level)
  return _internal_level();
}
inline void Map_WildBuilding::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void Map_WildBuilding::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildBuilding.level)
}

// uint32 troop_num = 5;
inline void Map_WildBuilding::clear_troop_num() {
  troop_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::_internal_troop_num() const {
  return troop_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::troop_num() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.troop_num)
  return _internal_troop_num();
}
inline void Map_WildBuilding::_internal_set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  troop_num_ = value;
}
inline void Map_WildBuilding::set_troop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_troop_num(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildBuilding.troop_num)
}

// uint32 life = 6;
inline void Map_WildBuilding::clear_life() {
  life_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::_internal_life() const {
  return life_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::life() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.life)
  return _internal_life();
}
inline void Map_WildBuilding::_internal_set_life(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  life_ = value;
}
inline void Map_WildBuilding::set_life(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildBuilding.life)
}

// uint32 life_max = 7;
inline void Map_WildBuilding::clear_life_max() {
  life_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::_internal_life_max() const {
  return life_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_WildBuilding::life_max() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.life_max)
  return _internal_life_max();
}
inline void Map_WildBuilding::_internal_set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  life_max_ = value;
}
inline void Map_WildBuilding::set_life_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_life_max(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildBuilding.life_max)
}

// int32 disappear_time = 8;
inline void Map_WildBuilding::clear_disappear_time() {
  disappear_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_WildBuilding::_internal_disappear_time() const {
  return disappear_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map_WildBuilding::disappear_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Map_WildBuilding.disappear_time)
  return _internal_disappear_time();
}
inline void Map_WildBuilding::_internal_set_disappear_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  disappear_time_ = value;
}
inline void Map_WildBuilding::set_disappear_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_disappear_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Map_WildBuilding.disappear_time)
}

// -------------------------------------------------------------------

// MapUserData

// int64 user_id = 1;
inline void MapUserData::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapUserData::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapUserData::user_id() const {
  // @@protoc_insertion_point(field_get:pb.map.MapUserData.user_id)
  return _internal_user_id();
}
inline void MapUserData::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void MapUserData::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.map.MapUserData.user_id)
}

// string user_name = 2;
inline void MapUserData::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapUserData::user_name() const {
  // @@protoc_insertion_point(field_get:pb.map.MapUserData.user_name)
  return _internal_user_name();
}
inline void MapUserData::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:pb.map.MapUserData.user_name)
}
inline std::string* MapUserData::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:pb.map.MapUserData.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& MapUserData::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void MapUserData::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapUserData::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.map.MapUserData.user_name)
}
inline void MapUserData::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map.MapUserData.user_name)
}
inline void MapUserData::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map.MapUserData.user_name)
}
inline std::string* MapUserData::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapUserData::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.map.MapUserData.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapUserData::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:pb.map.MapUserData.user_name)
}

// int32 guild_id = 3;
inline void MapUserData::clear_guild_id() {
  guild_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::guild_id() const {
  // @@protoc_insertion_point(field_get:pb.map.MapUserData.guild_id)
  return _internal_guild_id();
}
inline void MapUserData::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guild_id_ = value;
}
inline void MapUserData::set_guild_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:pb.map.MapUserData.guild_id)
}

// int32 capture_id = 4;
inline void MapUserData::clear_capture_id() {
  capture_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::_internal_capture_id() const {
  return capture_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::capture_id() const {
  // @@protoc_insertion_point(field_get:pb.map.MapUserData.capture_id)
  return _internal_capture_id();
}
inline void MapUserData::_internal_set_capture_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  capture_id_ = value;
}
inline void MapUserData::set_capture_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_capture_id(value);
  // @@protoc_insertion_point(field_set:pb.map.MapUserData.capture_id)
}

// int32 guild_job = 5;
inline void MapUserData::clear_guild_job() {
  guild_job_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::_internal_guild_job() const {
  return guild_job_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::guild_job() const {
  // @@protoc_insertion_point(field_get:pb.map.MapUserData.guild_job)
  return _internal_guild_job();
}
inline void MapUserData::_internal_set_guild_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guild_job_ = value;
}
inline void MapUserData::set_guild_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guild_job(value);
  // @@protoc_insertion_point(field_set:pb.map.MapUserData.guild_job)
}

// int32 civilization_type = 6;
inline void MapUserData::clear_civilization_type() {
  civilization_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::_internal_civilization_type() const {
  return civilization_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapUserData::civilization_type() const {
  // @@protoc_insertion_point(field_get:pb.map.MapUserData.civilization_type)
  return _internal_civilization_type();
}
inline void MapUserData::_internal_set_civilization_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  civilization_type_ = value;
}
inline void MapUserData::set_civilization_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_civilization_type(value);
  // @@protoc_insertion_point(field_set:pb.map.MapUserData.civilization_type)
}

// -------------------------------------------------------------------

// Map_Objs

// repeated .pb.map.Map_Building vec_buildings = 1;
inline int Map_Objs::_internal_vec_buildings_size() const {
  return vec_buildings_.size();
}
inline int Map_Objs::vec_buildings_size() const {
  return _internal_vec_buildings_size();
}
inline void Map_Objs::clear_vec_buildings() {
  vec_buildings_.Clear();
}
inline ::pb::map::Map_Building* Map_Objs::mutable_vec_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Objs.vec_buildings)
  return vec_buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Building >*
Map_Objs::mutable_vec_buildings() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Objs.vec_buildings)
  return &vec_buildings_;
}
inline const ::pb::map::Map_Building& Map_Objs::_internal_vec_buildings(int index) const {
  return vec_buildings_.Get(index);
}
inline const ::pb::map::Map_Building& Map_Objs::vec_buildings(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Objs.vec_buildings)
  return _internal_vec_buildings(index);
}
inline ::pb::map::Map_Building* Map_Objs::_internal_add_vec_buildings() {
  return vec_buildings_.Add();
}
inline ::pb::map::Map_Building* Map_Objs::add_vec_buildings() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Objs.vec_buildings)
  return _internal_add_vec_buildings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Building >&
Map_Objs::vec_buildings() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Objs.vec_buildings)
  return vec_buildings_;
}

// repeated .pb.map.Map_Troop vec_troops = 2;
inline int Map_Objs::_internal_vec_troops_size() const {
  return vec_troops_.size();
}
inline int Map_Objs::vec_troops_size() const {
  return _internal_vec_troops_size();
}
inline void Map_Objs::clear_vec_troops() {
  vec_troops_.Clear();
}
inline ::pb::map::Map_Troop* Map_Objs::mutable_vec_troops(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Objs.vec_troops)
  return vec_troops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Troop >*
Map_Objs::mutable_vec_troops() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Objs.vec_troops)
  return &vec_troops_;
}
inline const ::pb::map::Map_Troop& Map_Objs::_internal_vec_troops(int index) const {
  return vec_troops_.Get(index);
}
inline const ::pb::map::Map_Troop& Map_Objs::vec_troops(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Objs.vec_troops)
  return _internal_vec_troops(index);
}
inline ::pb::map::Map_Troop* Map_Objs::_internal_add_vec_troops() {
  return vec_troops_.Add();
}
inline ::pb::map::Map_Troop* Map_Objs::add_vec_troops() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Objs.vec_troops)
  return _internal_add_vec_troops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Troop >&
Map_Objs::vec_troops() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Objs.vec_troops)
  return vec_troops_;
}

// repeated .pb.map.Map_Field vec_fields = 3;
inline int Map_Objs::_internal_vec_fields_size() const {
  return vec_fields_.size();
}
inline int Map_Objs::vec_fields_size() const {
  return _internal_vec_fields_size();
}
inline void Map_Objs::clear_vec_fields() {
  vec_fields_.Clear();
}
inline ::pb::map::Map_Field* Map_Objs::mutable_vec_fields(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Objs.vec_fields)
  return vec_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Field >*
Map_Objs::mutable_vec_fields() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Objs.vec_fields)
  return &vec_fields_;
}
inline const ::pb::map::Map_Field& Map_Objs::_internal_vec_fields(int index) const {
  return vec_fields_.Get(index);
}
inline const ::pb::map::Map_Field& Map_Objs::vec_fields(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Objs.vec_fields)
  return _internal_vec_fields(index);
}
inline ::pb::map::Map_Field* Map_Objs::_internal_add_vec_fields() {
  return vec_fields_.Add();
}
inline ::pb::map::Map_Field* Map_Objs::add_vec_fields() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Objs.vec_fields)
  return _internal_add_vec_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_Field >&
Map_Objs::vec_fields() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Objs.vec_fields)
  return vec_fields_;
}

// repeated .pb.map.Map_RecoverField vec_recoverfield = 4;
inline int Map_Objs::_internal_vec_recoverfield_size() const {
  return vec_recoverfield_.size();
}
inline int Map_Objs::vec_recoverfield_size() const {
  return _internal_vec_recoverfield_size();
}
inline void Map_Objs::clear_vec_recoverfield() {
  vec_recoverfield_.Clear();
}
inline ::pb::map::Map_RecoverField* Map_Objs::mutable_vec_recoverfield(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Objs.vec_recoverfield)
  return vec_recoverfield_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_RecoverField >*
Map_Objs::mutable_vec_recoverfield() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Objs.vec_recoverfield)
  return &vec_recoverfield_;
}
inline const ::pb::map::Map_RecoverField& Map_Objs::_internal_vec_recoverfield(int index) const {
  return vec_recoverfield_.Get(index);
}
inline const ::pb::map::Map_RecoverField& Map_Objs::vec_recoverfield(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Objs.vec_recoverfield)
  return _internal_vec_recoverfield(index);
}
inline ::pb::map::Map_RecoverField* Map_Objs::_internal_add_vec_recoverfield() {
  return vec_recoverfield_.Add();
}
inline ::pb::map::Map_RecoverField* Map_Objs::add_vec_recoverfield() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Objs.vec_recoverfield)
  return _internal_add_vec_recoverfield();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_RecoverField >&
Map_Objs::vec_recoverfield() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Objs.vec_recoverfield)
  return vec_recoverfield_;
}

// repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 5;
inline int Map_Objs::_internal_vec_wild_npc_troop_size() const {
  return vec_wild_npc_troop_.size();
}
inline int Map_Objs::vec_wild_npc_troop_size() const {
  return _internal_vec_wild_npc_troop_size();
}
inline void Map_Objs::clear_vec_wild_npc_troop() {
  vec_wild_npc_troop_.Clear();
}
inline ::pb::map::Map_WildNpcTroop* Map_Objs::mutable_vec_wild_npc_troop(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Objs.vec_wild_npc_troop)
  return vec_wild_npc_troop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >*
Map_Objs::mutable_vec_wild_npc_troop() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Objs.vec_wild_npc_troop)
  return &vec_wild_npc_troop_;
}
inline const ::pb::map::Map_WildNpcTroop& Map_Objs::_internal_vec_wild_npc_troop(int index) const {
  return vec_wild_npc_troop_.Get(index);
}
inline const ::pb::map::Map_WildNpcTroop& Map_Objs::vec_wild_npc_troop(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Objs.vec_wild_npc_troop)
  return _internal_vec_wild_npc_troop(index);
}
inline ::pb::map::Map_WildNpcTroop* Map_Objs::_internal_add_vec_wild_npc_troop() {
  return vec_wild_npc_troop_.Add();
}
inline ::pb::map::Map_WildNpcTroop* Map_Objs::add_vec_wild_npc_troop() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Objs.vec_wild_npc_troop)
  return _internal_add_vec_wild_npc_troop();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >&
Map_Objs::vec_wild_npc_troop() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Objs.vec_wild_npc_troop)
  return vec_wild_npc_troop_;
}

// repeated .pb.map.Map_WildBuilding vec_wild_building = 6;
inline int Map_Objs::_internal_vec_wild_building_size() const {
  return vec_wild_building_.size();
}
inline int Map_Objs::vec_wild_building_size() const {
  return _internal_vec_wild_building_size();
}
inline void Map_Objs::clear_vec_wild_building() {
  vec_wild_building_.Clear();
}
inline ::pb::map::Map_WildBuilding* Map_Objs::mutable_vec_wild_building(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Objs.vec_wild_building)
  return vec_wild_building_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildBuilding >*
Map_Objs::mutable_vec_wild_building() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Objs.vec_wild_building)
  return &vec_wild_building_;
}
inline const ::pb::map::Map_WildBuilding& Map_Objs::_internal_vec_wild_building(int index) const {
  return vec_wild_building_.Get(index);
}
inline const ::pb::map::Map_WildBuilding& Map_Objs::vec_wild_building(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Objs.vec_wild_building)
  return _internal_vec_wild_building(index);
}
inline ::pb::map::Map_WildBuilding* Map_Objs::_internal_add_vec_wild_building() {
  return vec_wild_building_.Add();
}
inline ::pb::map::Map_WildBuilding* Map_Objs::add_vec_wild_building() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Objs.vec_wild_building)
  return _internal_add_vec_wild_building();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildBuilding >&
Map_Objs::vec_wild_building() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Objs.vec_wild_building)
  return vec_wild_building_;
}

// repeated .pb.map.MapUserData vec_users = 7;
inline int Map_Objs::_internal_vec_users_size() const {
  return vec_users_.size();
}
inline int Map_Objs::vec_users_size() const {
  return _internal_vec_users_size();
}
inline void Map_Objs::clear_vec_users() {
  vec_users_.Clear();
}
inline ::pb::map::MapUserData* Map_Objs::mutable_vec_users(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Map_Objs.vec_users)
  return vec_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapUserData >*
Map_Objs::mutable_vec_users() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Map_Objs.vec_users)
  return &vec_users_;
}
inline const ::pb::map::MapUserData& Map_Objs::_internal_vec_users(int index) const {
  return vec_users_.Get(index);
}
inline const ::pb::map::MapUserData& Map_Objs::vec_users(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Map_Objs.vec_users)
  return _internal_vec_users(index);
}
inline ::pb::map::MapUserData* Map_Objs::_internal_add_vec_users() {
  return vec_users_.Add();
}
inline ::pb::map::MapUserData* Map_Objs::add_vec_users() {
  // @@protoc_insertion_point(field_add:pb.map.Map_Objs.vec_users)
  return _internal_add_vec_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapUserData >&
Map_Objs::vec_users() const {
  // @@protoc_insertion_point(field_list:pb.map.Map_Objs.vec_users)
  return vec_users_;
}

// -------------------------------------------------------------------

// PrivateNpc_Troop

// uint32 id = 1;
inline void PrivateNpc_Troop::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrivateNpc_Troop::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrivateNpc_Troop::id() const {
  // @@protoc_insertion_point(field_get:pb.map.PrivateNpc_Troop.id)
  return _internal_id();
}
inline void PrivateNpc_Troop::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void PrivateNpc_Troop::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.map.PrivateNpc_Troop.id)
}

// uint32 id_template = 2;
inline void PrivateNpc_Troop::clear_id_template() {
  id_template_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrivateNpc_Troop::_internal_id_template() const {
  return id_template_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrivateNpc_Troop::id_template() const {
  // @@protoc_insertion_point(field_get:pb.map.PrivateNpc_Troop.id_template)
  return _internal_id_template();
}
inline void PrivateNpc_Troop::_internal_set_id_template(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_template_ = value;
}
inline void PrivateNpc_Troop::set_id_template(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_template(value);
  // @@protoc_insertion_point(field_set:pb.map.PrivateNpc_Troop.id_template)
}

// .pb.map.HEX pos = 3;
inline bool PrivateNpc_Troop::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PrivateNpc_Troop::has_pos() const {
  return _internal_has_pos();
}
inline void PrivateNpc_Troop::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& PrivateNpc_Troop::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& PrivateNpc_Troop::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.PrivateNpc_Troop.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* PrivateNpc_Troop::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.PrivateNpc_Troop.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* PrivateNpc_Troop::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* PrivateNpc_Troop::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.PrivateNpc_Troop.pos)
  return _internal_mutable_pos();
}
inline void PrivateNpc_Troop::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.PrivateNpc_Troop.pos)
}

// -------------------------------------------------------------------

// Private_Map_Objs

// repeated .pb.map.PrivateNpc_Troop vec_troop = 1;
inline int Private_Map_Objs::_internal_vec_troop_size() const {
  return vec_troop_.size();
}
inline int Private_Map_Objs::vec_troop_size() const {
  return _internal_vec_troop_size();
}
inline void Private_Map_Objs::clear_vec_troop() {
  vec_troop_.Clear();
}
inline ::pb::map::PrivateNpc_Troop* Private_Map_Objs::mutable_vec_troop(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Private_Map_Objs.vec_troop)
  return vec_troop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::PrivateNpc_Troop >*
Private_Map_Objs::mutable_vec_troop() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Private_Map_Objs.vec_troop)
  return &vec_troop_;
}
inline const ::pb::map::PrivateNpc_Troop& Private_Map_Objs::_internal_vec_troop(int index) const {
  return vec_troop_.Get(index);
}
inline const ::pb::map::PrivateNpc_Troop& Private_Map_Objs::vec_troop(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Private_Map_Objs.vec_troop)
  return _internal_vec_troop(index);
}
inline ::pb::map::PrivateNpc_Troop* Private_Map_Objs::_internal_add_vec_troop() {
  return vec_troop_.Add();
}
inline ::pb::map::PrivateNpc_Troop* Private_Map_Objs::add_vec_troop() {
  // @@protoc_insertion_point(field_add:pb.map.Private_Map_Objs.vec_troop)
  return _internal_add_vec_troop();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::PrivateNpc_Troop >&
Private_Map_Objs::vec_troop() const {
  // @@protoc_insertion_point(field_list:pb.map.Private_Map_Objs.vec_troop)
  return vec_troop_;
}

// repeated .pb.map.Map_WildNpcTroop vec_wild_npc_troop = 2;
inline int Private_Map_Objs::_internal_vec_wild_npc_troop_size() const {
  return vec_wild_npc_troop_.size();
}
inline int Private_Map_Objs::vec_wild_npc_troop_size() const {
  return _internal_vec_wild_npc_troop_size();
}
inline void Private_Map_Objs::clear_vec_wild_npc_troop() {
  vec_wild_npc_troop_.Clear();
}
inline ::pb::map::Map_WildNpcTroop* Private_Map_Objs::mutable_vec_wild_npc_troop(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Private_Map_Objs.vec_wild_npc_troop)
  return vec_wild_npc_troop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >*
Private_Map_Objs::mutable_vec_wild_npc_troop() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Private_Map_Objs.vec_wild_npc_troop)
  return &vec_wild_npc_troop_;
}
inline const ::pb::map::Map_WildNpcTroop& Private_Map_Objs::_internal_vec_wild_npc_troop(int index) const {
  return vec_wild_npc_troop_.Get(index);
}
inline const ::pb::map::Map_WildNpcTroop& Private_Map_Objs::vec_wild_npc_troop(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Private_Map_Objs.vec_wild_npc_troop)
  return _internal_vec_wild_npc_troop(index);
}
inline ::pb::map::Map_WildNpcTroop* Private_Map_Objs::_internal_add_vec_wild_npc_troop() {
  return vec_wild_npc_troop_.Add();
}
inline ::pb::map::Map_WildNpcTroop* Private_Map_Objs::add_vec_wild_npc_troop() {
  // @@protoc_insertion_point(field_add:pb.map.Private_Map_Objs.vec_wild_npc_troop)
  return _internal_add_vec_wild_npc_troop();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Map_WildNpcTroop >&
Private_Map_Objs::vec_wild_npc_troop() const {
  // @@protoc_insertion_point(field_list:pb.map.Private_Map_Objs.vec_wild_npc_troop)
  return vec_wild_npc_troop_;
}

// -------------------------------------------------------------------

// Collect_Map_OP

// uint32 errCode = 1;
inline void Collect_Map_OP::clear_errcode() {
  errcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Collect_Map_OP::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Collect_Map_OP::errcode() const {
  // @@protoc_insertion_point(field_get:pb.map.Collect_Map_OP.errCode)
  return _internal_errcode();
}
inline void Collect_Map_OP::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errcode_ = value;
}
inline void Collect_Map_OP::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:pb.map.Collect_Map_OP.errCode)
}

// .pb.map.HEX end_pos = 2;
inline bool Collect_Map_OP::_internal_has_end_pos() const {
  return this != internal_default_instance() && end_pos_ != nullptr;
}
inline bool Collect_Map_OP::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Collect_Map_OP::clear_end_pos() {
  if (GetArenaNoVirtual() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
}
inline const ::pb::map::HEX& Collect_Map_OP::_internal_end_pos() const {
  const ::pb::map::HEX* p = end_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Collect_Map_OP::end_pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Collect_Map_OP.end_pos)
  return _internal_end_pos();
}
inline ::pb::map::HEX* Collect_Map_OP::release_end_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Collect_Map_OP.end_pos)
  
  ::pb::map::HEX* temp = end_pos_;
  end_pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Collect_Map_OP::_internal_mutable_end_pos() {
  
  if (end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    end_pos_ = p;
  }
  return end_pos_;
}
inline ::pb::map::HEX* Collect_Map_OP::mutable_end_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Collect_Map_OP.end_pos)
  return _internal_mutable_end_pos();
}
inline void Collect_Map_OP::set_allocated_end_pos(::pb::map::HEX* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Collect_Map_OP.end_pos)
}

// string name = 3;
inline void Collect_Map_OP::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collect_Map_OP::name() const {
  // @@protoc_insertion_point(field_get:pb.map.Collect_Map_OP.name)
  return _internal_name();
}
inline void Collect_Map_OP::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.map.Collect_Map_OP.name)
}
inline std::string* Collect_Map_OP::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.map.Collect_Map_OP.name)
  return _internal_mutable_name();
}
inline const std::string& Collect_Map_OP::_internal_name() const {
  return name_.GetNoArena();
}
inline void Collect_Map_OP::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collect_Map_OP::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.map.Collect_Map_OP.name)
}
inline void Collect_Map_OP::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map.Collect_Map_OP.name)
}
inline void Collect_Map_OP::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map.Collect_Map_OP.name)
}
inline std::string* Collect_Map_OP::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collect_Map_OP::release_name() {
  // @@protoc_insertion_point(field_release:pb.map.Collect_Map_OP.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collect_Map_OP::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.map.Collect_Map_OP.name)
}

// int64 idx = 4;
inline void Collect_Map_OP::clear_idx() {
  idx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Collect_Map_OP::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Collect_Map_OP::idx() const {
  // @@protoc_insertion_point(field_get:pb.map.Collect_Map_OP.idx)
  return _internal_idx();
}
inline void Collect_Map_OP::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  idx_ = value;
}
inline void Collect_Map_OP::set_idx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:pb.map.Collect_Map_OP.idx)
}

// -------------------------------------------------------------------

// Move_City

// uint32 error_code = 1;
inline void Move_City::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Move_City::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Move_City::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Move_City.error_code)
  return _internal_error_code();
}
inline void Move_City::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Move_City::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Move_City.error_code)
}

// uint32 idx = 2;
inline void Move_City::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Move_City::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Move_City::idx() const {
  // @@protoc_insertion_point(field_get:pb.map.Move_City.idx)
  return _internal_idx();
}
inline void Move_City::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void Move_City::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:pb.map.Move_City.idx)
}

// .pb.map.HEX move_pos = 3;
inline bool Move_City::_internal_has_move_pos() const {
  return this != internal_default_instance() && move_pos_ != nullptr;
}
inline bool Move_City::has_move_pos() const {
  return _internal_has_move_pos();
}
inline void Move_City::clear_move_pos() {
  if (GetArenaNoVirtual() == nullptr && move_pos_ != nullptr) {
    delete move_pos_;
  }
  move_pos_ = nullptr;
}
inline const ::pb::map::HEX& Move_City::_internal_move_pos() const {
  const ::pb::map::HEX* p = move_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Move_City::move_pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Move_City.move_pos)
  return _internal_move_pos();
}
inline ::pb::map::HEX* Move_City::release_move_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Move_City.move_pos)
  
  ::pb::map::HEX* temp = move_pos_;
  move_pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Move_City::_internal_mutable_move_pos() {
  
  if (move_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    move_pos_ = p;
  }
  return move_pos_;
}
inline ::pb::map::HEX* Move_City::mutable_move_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Move_City.move_pos)
  return _internal_mutable_move_pos();
}
inline void Move_City::set_allocated_move_pos(::pb::map::HEX* move_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete move_pos_;
  }
  if (move_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_pos, submessage_arena);
    }
    
  } else {
    
  }
  move_pos_ = move_pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Move_City.move_pos)
}

// -------------------------------------------------------------------

// Resurgence

// uint32 error_code = 1;
inline void Resurgence::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Resurgence::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Resurgence::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Resurgence.error_code)
  return _internal_error_code();
}
inline void Resurgence::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Resurgence::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Resurgence.error_code)
}

// .pb.map.HEX pos = 2;
inline bool Resurgence::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Resurgence::has_pos() const {
  return _internal_has_pos();
}
inline void Resurgence::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Resurgence::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Resurgence::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Resurgence.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Resurgence::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Resurgence.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Resurgence::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Resurgence::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Resurgence.pos)
  return _internal_mutable_pos();
}
inline void Resurgence::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Resurgence.pos)
}

// -------------------------------------------------------------------

// Migrate

// uint32 error_code = 1;
inline void Migrate::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Migrate::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Migrate::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Migrate.error_code)
  return _internal_error_code();
}
inline void Migrate::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Migrate::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Migrate.error_code)
}

// int32 country_id = 2;
inline void Migrate::clear_country_id() {
  country_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Migrate::_internal_country_id() const {
  return country_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Migrate::country_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Migrate.country_id)
  return _internal_country_id();
}
inline void Migrate::_internal_set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  country_id_ = value;
}
inline void Migrate::set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_country_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Migrate.country_id)
}

// .pb.map.HEX pos = 3;
inline bool Migrate::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Migrate::has_pos() const {
  return _internal_has_pos();
}
inline void Migrate::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Migrate::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Migrate::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Migrate.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Migrate::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Migrate.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Migrate::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Migrate::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Migrate.pos)
  return _internal_mutable_pos();
}
inline void Migrate::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Migrate.pos)
}

// -------------------------------------------------------------------

// Req_Scout

// uint32 error_code = 1;
inline void Req_Scout::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Req_Scout::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Req_Scout::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_Scout.error_code)
  return _internal_error_code();
}
inline void Req_Scout::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Req_Scout::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_Scout.error_code)
}

// .pb.map.HEX pos = 2;
inline bool Req_Scout::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Req_Scout::has_pos() const {
  return _internal_has_pos();
}
inline void Req_Scout::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& Req_Scout::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& Req_Scout::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_Scout.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* Req_Scout::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.Req_Scout.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* Req_Scout::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* Req_Scout::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.Req_Scout.pos)
  return _internal_mutable_pos();
}
inline void Req_Scout::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.Req_Scout.pos)
}

// -------------------------------------------------------------------

// TroopScout

// int32 seq_no = 1;
inline void TroopScout::clear_seq_no() {
  seq_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::_internal_seq_no() const {
  return seq_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::seq_no() const {
  // @@protoc_insertion_point(field_get:pb.map.TroopScout.seq_no)
  return _internal_seq_no();
}
inline void TroopScout::_internal_set_seq_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_no_ = value;
}
inline void TroopScout::set_seq_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq_no(value);
  // @@protoc_insertion_point(field_set:pb.map.TroopScout.seq_no)
}

// int32 troop_id = 2;
inline void TroopScout::clear_troop_id() {
  troop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::_internal_troop_id() const {
  return troop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::troop_id() const {
  // @@protoc_insertion_point(field_get:pb.map.TroopScout.troop_id)
  return _internal_troop_id();
}
inline void TroopScout::_internal_set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  troop_id_ = value;
}
inline void TroopScout::set_troop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_troop_id(value);
  // @@protoc_insertion_point(field_set:pb.map.TroopScout.troop_id)
}

// int32 force1 = 3;
inline void TroopScout::clear_force1() {
  force1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::_internal_force1() const {
  return force1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::force1() const {
  // @@protoc_insertion_point(field_get:pb.map.TroopScout.force1)
  return _internal_force1();
}
inline void TroopScout::_internal_set_force1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  force1_ = value;
}
inline void TroopScout::set_force1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_force1(value);
  // @@protoc_insertion_point(field_set:pb.map.TroopScout.force1)
}

// int32 force2 = 4;
inline void TroopScout::clear_force2() {
  force2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::_internal_force2() const {
  return force2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::force2() const {
  // @@protoc_insertion_point(field_get:pb.map.TroopScout.force2)
  return _internal_force2();
}
inline void TroopScout::_internal_set_force2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  force2_ = value;
}
inline void TroopScout::set_force2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_force2(value);
  // @@protoc_insertion_point(field_set:pb.map.TroopScout.force2)
}

// int32 force3 = 5;
inline void TroopScout::clear_force3() {
  force3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::_internal_force3() const {
  return force3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TroopScout::force3() const {
  // @@protoc_insertion_point(field_get:pb.map.TroopScout.force3)
  return _internal_force3();
}
inline void TroopScout::_internal_set_force3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  force3_ = value;
}
inline void TroopScout::set_force3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_force3(value);
  // @@protoc_insertion_point(field_set:pb.map.TroopScout.force3)
}

// -------------------------------------------------------------------

// FieldScout

// .pb.map.HEX pos = 1;
inline bool FieldScout::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool FieldScout::has_pos() const {
  return _internal_has_pos();
}
inline void FieldScout::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& FieldScout::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& FieldScout::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.FieldScout.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* FieldScout::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.FieldScout.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* FieldScout::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* FieldScout::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.FieldScout.pos)
  return _internal_mutable_pos();
}
inline void FieldScout::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.FieldScout.pos)
}

// repeated .pb.map.TroopScout scout_info = 2;
inline int FieldScout::_internal_scout_info_size() const {
  return scout_info_.size();
}
inline int FieldScout::scout_info_size() const {
  return _internal_scout_info_size();
}
inline void FieldScout::clear_scout_info() {
  scout_info_.Clear();
}
inline ::pb::map::TroopScout* FieldScout::mutable_scout_info(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.FieldScout.scout_info)
  return scout_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TroopScout >*
FieldScout::mutable_scout_info() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.FieldScout.scout_info)
  return &scout_info_;
}
inline const ::pb::map::TroopScout& FieldScout::_internal_scout_info(int index) const {
  return scout_info_.Get(index);
}
inline const ::pb::map::TroopScout& FieldScout::scout_info(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.FieldScout.scout_info)
  return _internal_scout_info(index);
}
inline ::pb::map::TroopScout* FieldScout::_internal_add_scout_info() {
  return scout_info_.Add();
}
inline ::pb::map::TroopScout* FieldScout::add_scout_info() {
  // @@protoc_insertion_point(field_add:pb.map.FieldScout.scout_info)
  return _internal_add_scout_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TroopScout >&
FieldScout::scout_info() const {
  // @@protoc_insertion_point(field_list:pb.map.FieldScout.scout_info)
  return scout_info_;
}

// int64 scout_time = 3;
inline void FieldScout::clear_scout_time() {
  scout_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldScout::_internal_scout_time() const {
  return scout_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldScout::scout_time() const {
  // @@protoc_insertion_point(field_get:pb.map.FieldScout.scout_time)
  return _internal_scout_time();
}
inline void FieldScout::_internal_set_scout_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  scout_time_ = value;
}
inline void FieldScout::set_scout_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scout_time(value);
  // @@protoc_insertion_point(field_set:pb.map.FieldScout.scout_time)
}

// int64 scout_end_time = 4;
inline void FieldScout::clear_scout_end_time() {
  scout_end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldScout::_internal_scout_end_time() const {
  return scout_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldScout::scout_end_time() const {
  // @@protoc_insertion_point(field_get:pb.map.FieldScout.scout_end_time)
  return _internal_scout_end_time();
}
inline void FieldScout::_internal_set_scout_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  scout_end_time_ = value;
}
inline void FieldScout::set_scout_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scout_end_time(value);
  // @@protoc_insertion_point(field_set:pb.map.FieldScout.scout_end_time)
}

// -------------------------------------------------------------------

// Rep_Scout

// repeated .pb.map.FieldScout field_scout = 1;
inline int Rep_Scout::_internal_field_scout_size() const {
  return field_scout_.size();
}
inline int Rep_Scout::field_scout_size() const {
  return _internal_field_scout_size();
}
inline void Rep_Scout::clear_field_scout() {
  field_scout_.Clear();
}
inline ::pb::map::FieldScout* Rep_Scout::mutable_field_scout(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Rep_Scout.field_scout)
  return field_scout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::FieldScout >*
Rep_Scout::mutable_field_scout() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Rep_Scout.field_scout)
  return &field_scout_;
}
inline const ::pb::map::FieldScout& Rep_Scout::_internal_field_scout(int index) const {
  return field_scout_.Get(index);
}
inline const ::pb::map::FieldScout& Rep_Scout::field_scout(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_Scout.field_scout)
  return _internal_field_scout(index);
}
inline ::pb::map::FieldScout* Rep_Scout::_internal_add_field_scout() {
  return field_scout_.Add();
}
inline ::pb::map::FieldScout* Rep_Scout::add_field_scout() {
  // @@protoc_insertion_point(field_add:pb.map.Rep_Scout.field_scout)
  return _internal_add_field_scout();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::FieldScout >&
Rep_Scout::field_scout() const {
  // @@protoc_insertion_point(field_list:pb.map.Rep_Scout.field_scout)
  return field_scout_;
}

// uint64 next_scout_time = 2;
inline void Rep_Scout::clear_next_scout_time() {
  next_scout_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Rep_Scout::_internal_next_scout_time() const {
  return next_scout_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Rep_Scout::next_scout_time() const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_Scout.next_scout_time)
  return _internal_next_scout_time();
}
inline void Rep_Scout::_internal_set_next_scout_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_scout_time_ = value;
}
inline void Rep_Scout::set_next_scout_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_scout_time(value);
  // @@protoc_insertion_point(field_set:pb.map.Rep_Scout.next_scout_time)
}

// -------------------------------------------------------------------

// Rep_DeleteScout

// repeated uint32 vec_pos = 1;
inline int Rep_DeleteScout::_internal_vec_pos_size() const {
  return vec_pos_.size();
}
inline int Rep_DeleteScout::vec_pos_size() const {
  return _internal_vec_pos_size();
}
inline void Rep_DeleteScout::clear_vec_pos() {
  vec_pos_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rep_DeleteScout::_internal_vec_pos(int index) const {
  return vec_pos_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rep_DeleteScout::vec_pos(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_DeleteScout.vec_pos)
  return _internal_vec_pos(index);
}
inline void Rep_DeleteScout::set_vec_pos(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vec_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.map.Rep_DeleteScout.vec_pos)
}
inline void Rep_DeleteScout::_internal_add_vec_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vec_pos_.Add(value);
}
inline void Rep_DeleteScout::add_vec_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_vec_pos(value);
  // @@protoc_insertion_point(field_add:pb.map.Rep_DeleteScout.vec_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Rep_DeleteScout::_internal_vec_pos() const {
  return vec_pos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Rep_DeleteScout::vec_pos() const {
  // @@protoc_insertion_point(field_list:pb.map.Rep_DeleteScout.vec_pos)
  return _internal_vec_pos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Rep_DeleteScout::_internal_mutable_vec_pos() {
  return &vec_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Rep_DeleteScout::mutable_vec_pos() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Rep_DeleteScout.vec_pos)
  return _internal_mutable_vec_pos();
}

// -------------------------------------------------------------------

// Rep_ClearScout

// .pb.map.E_Map_CMD cmd = 1;
inline void Rep_ClearScout::clear_cmd() {
  cmd_ = 0;
}
inline ::pb::map::E_Map_CMD Rep_ClearScout::_internal_cmd() const {
  return static_cast< ::pb::map::E_Map_CMD >(cmd_);
}
inline ::pb::map::E_Map_CMD Rep_ClearScout::cmd() const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_ClearScout.cmd)
  return _internal_cmd();
}
inline void Rep_ClearScout::_internal_set_cmd(::pb::map::E_Map_CMD value) {
  
  cmd_ = value;
}
inline void Rep_ClearScout::set_cmd(::pb::map::E_Map_CMD value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.map.Rep_ClearScout.cmd)
}

// -------------------------------------------------------------------

// CombatantUser

// int64 user_id = 1;
inline void CombatantUser::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CombatantUser::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CombatantUser::user_id() const {
  // @@protoc_insertion_point(field_get:pb.map.CombatantUser.user_id)
  return _internal_user_id();
}
inline void CombatantUser::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void CombatantUser::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.map.CombatantUser.user_id)
}

// string user_name = 2;
inline void CombatantUser::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CombatantUser::user_name() const {
  // @@protoc_insertion_point(field_get:pb.map.CombatantUser.user_name)
  return _internal_user_name();
}
inline void CombatantUser::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:pb.map.CombatantUser.user_name)
}
inline std::string* CombatantUser::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:pb.map.CombatantUser.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& CombatantUser::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void CombatantUser::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CombatantUser::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.map.CombatantUser.user_name)
}
inline void CombatantUser::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map.CombatantUser.user_name)
}
inline void CombatantUser::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map.CombatantUser.user_name)
}
inline std::string* CombatantUser::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CombatantUser::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.map.CombatantUser.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CombatantUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:pb.map.CombatantUser.user_name)
}

// int32 honor = 3;
inline void CombatantUser::clear_honor() {
  honor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CombatantUser::_internal_honor() const {
  return honor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CombatantUser::honor() const {
  // @@protoc_insertion_point(field_get:pb.map.CombatantUser.honor)
  return _internal_honor();
}
inline void CombatantUser::_internal_set_honor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  honor_ = value;
}
inline void CombatantUser::set_honor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_honor(value);
  // @@protoc_insertion_point(field_set:pb.map.CombatantUser.honor)
}

// int32 occupy = 4;
inline void CombatantUser::clear_occupy() {
  occupy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CombatantUser::_internal_occupy() const {
  return occupy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CombatantUser::occupy() const {
  // @@protoc_insertion_point(field_get:pb.map.CombatantUser.occupy)
  return _internal_occupy();
}
inline void CombatantUser::_internal_set_occupy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  occupy_ = value;
}
inline void CombatantUser::set_occupy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_occupy(value);
  // @@protoc_insertion_point(field_set:pb.map.CombatantUser.occupy)
}

// -------------------------------------------------------------------

// MapCampaign

// .pb.map.HEX pos = 1;
inline bool MapCampaign::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool MapCampaign::has_pos() const {
  return _internal_has_pos();
}
inline void MapCampaign::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& MapCampaign::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& MapCampaign::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* MapCampaign::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.MapCampaign.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* MapCampaign::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* MapCampaign::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.MapCampaign.pos)
  return _internal_mutable_pos();
}
inline void MapCampaign::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.MapCampaign.pos)
}

// int32 building_id = 2;
inline void MapCampaign::clear_building_id() {
  building_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapCampaign::_internal_building_id() const {
  return building_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapCampaign::building_id() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.building_id)
  return _internal_building_id();
}
inline void MapCampaign::_internal_set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  building_id_ = value;
}
inline void MapCampaign::set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_building_id(value);
  // @@protoc_insertion_point(field_set:pb.map.MapCampaign.building_id)
}

// int32 count = 3;
inline void MapCampaign::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapCampaign::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapCampaign::count() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.count)
  return _internal_count();
}
inline void MapCampaign::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void MapCampaign::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:pb.map.MapCampaign.count)
}

// .pb.map.E_MapCampaignScale scale = 4;
inline void MapCampaign::clear_scale() {
  scale_ = 0;
}
inline ::pb::map::E_MapCampaignScale MapCampaign::_internal_scale() const {
  return static_cast< ::pb::map::E_MapCampaignScale >(scale_);
}
inline ::pb::map::E_MapCampaignScale MapCampaign::scale() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.scale)
  return _internal_scale();
}
inline void MapCampaign::_internal_set_scale(::pb::map::E_MapCampaignScale value) {
  
  scale_ = value;
}
inline void MapCampaign::set_scale(::pb::map::E_MapCampaignScale value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:pb.map.MapCampaign.scale)
}

// repeated int32 combatant_guilds = 5;
inline int MapCampaign::_internal_combatant_guilds_size() const {
  return combatant_guilds_.size();
}
inline int MapCampaign::combatant_guilds_size() const {
  return _internal_combatant_guilds_size();
}
inline void MapCampaign::clear_combatant_guilds() {
  combatant_guilds_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapCampaign::_internal_combatant_guilds(int index) const {
  return combatant_guilds_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapCampaign::combatant_guilds(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.combatant_guilds)
  return _internal_combatant_guilds(index);
}
inline void MapCampaign::set_combatant_guilds(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  combatant_guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.map.MapCampaign.combatant_guilds)
}
inline void MapCampaign::_internal_add_combatant_guilds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  combatant_guilds_.Add(value);
}
inline void MapCampaign::add_combatant_guilds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_combatant_guilds(value);
  // @@protoc_insertion_point(field_add:pb.map.MapCampaign.combatant_guilds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MapCampaign::_internal_combatant_guilds() const {
  return combatant_guilds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MapCampaign::combatant_guilds() const {
  // @@protoc_insertion_point(field_list:pb.map.MapCampaign.combatant_guilds)
  return _internal_combatant_guilds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MapCampaign::_internal_mutable_combatant_guilds() {
  return &combatant_guilds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MapCampaign::mutable_combatant_guilds() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.MapCampaign.combatant_guilds)
  return _internal_mutable_combatant_guilds();
}

// int64 start_time = 6;
inline void MapCampaign::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapCampaign::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapCampaign::start_time() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.start_time)
  return _internal_start_time();
}
inline void MapCampaign::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void MapCampaign::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:pb.map.MapCampaign.start_time)
}

// int64 end_time = 7;
inline void MapCampaign::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapCampaign::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapCampaign::end_time() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.end_time)
  return _internal_end_time();
}
inline void MapCampaign::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void MapCampaign::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:pb.map.MapCampaign.end_time)
}

// .pb.map.CombatantUser honor_top = 8;
inline bool MapCampaign::_internal_has_honor_top() const {
  return this != internal_default_instance() && honor_top_ != nullptr;
}
inline bool MapCampaign::has_honor_top() const {
  return _internal_has_honor_top();
}
inline void MapCampaign::clear_honor_top() {
  if (GetArenaNoVirtual() == nullptr && honor_top_ != nullptr) {
    delete honor_top_;
  }
  honor_top_ = nullptr;
}
inline const ::pb::map::CombatantUser& MapCampaign::_internal_honor_top() const {
  const ::pb::map::CombatantUser* p = honor_top_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::CombatantUser*>(
      &::pb::map::_CombatantUser_default_instance_);
}
inline const ::pb::map::CombatantUser& MapCampaign::honor_top() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.honor_top)
  return _internal_honor_top();
}
inline ::pb::map::CombatantUser* MapCampaign::release_honor_top() {
  // @@protoc_insertion_point(field_release:pb.map.MapCampaign.honor_top)
  
  ::pb::map::CombatantUser* temp = honor_top_;
  honor_top_ = nullptr;
  return temp;
}
inline ::pb::map::CombatantUser* MapCampaign::_internal_mutable_honor_top() {
  
  if (honor_top_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::CombatantUser>(GetArenaNoVirtual());
    honor_top_ = p;
  }
  return honor_top_;
}
inline ::pb::map::CombatantUser* MapCampaign::mutable_honor_top() {
  // @@protoc_insertion_point(field_mutable:pb.map.MapCampaign.honor_top)
  return _internal_mutable_honor_top();
}
inline void MapCampaign::set_allocated_honor_top(::pb::map::CombatantUser* honor_top) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete honor_top_;
  }
  if (honor_top) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      honor_top = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, honor_top, submessage_arena);
    }
    
  } else {
    
  }
  honor_top_ = honor_top;
  // @@protoc_insertion_point(field_set_allocated:pb.map.MapCampaign.honor_top)
}

// .pb.map.CombatantUser occupy_top = 9;
inline bool MapCampaign::_internal_has_occupy_top() const {
  return this != internal_default_instance() && occupy_top_ != nullptr;
}
inline bool MapCampaign::has_occupy_top() const {
  return _internal_has_occupy_top();
}
inline void MapCampaign::clear_occupy_top() {
  if (GetArenaNoVirtual() == nullptr && occupy_top_ != nullptr) {
    delete occupy_top_;
  }
  occupy_top_ = nullptr;
}
inline const ::pb::map::CombatantUser& MapCampaign::_internal_occupy_top() const {
  const ::pb::map::CombatantUser* p = occupy_top_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::CombatantUser*>(
      &::pb::map::_CombatantUser_default_instance_);
}
inline const ::pb::map::CombatantUser& MapCampaign::occupy_top() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.occupy_top)
  return _internal_occupy_top();
}
inline ::pb::map::CombatantUser* MapCampaign::release_occupy_top() {
  // @@protoc_insertion_point(field_release:pb.map.MapCampaign.occupy_top)
  
  ::pb::map::CombatantUser* temp = occupy_top_;
  occupy_top_ = nullptr;
  return temp;
}
inline ::pb::map::CombatantUser* MapCampaign::_internal_mutable_occupy_top() {
  
  if (occupy_top_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::CombatantUser>(GetArenaNoVirtual());
    occupy_top_ = p;
  }
  return occupy_top_;
}
inline ::pb::map::CombatantUser* MapCampaign::mutable_occupy_top() {
  // @@protoc_insertion_point(field_mutable:pb.map.MapCampaign.occupy_top)
  return _internal_mutable_occupy_top();
}
inline void MapCampaign::set_allocated_occupy_top(::pb::map::CombatantUser* occupy_top) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete occupy_top_;
  }
  if (occupy_top) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      occupy_top = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occupy_top, submessage_arena);
    }
    
  } else {
    
  }
  occupy_top_ = occupy_top;
  // @@protoc_insertion_point(field_set_allocated:pb.map.MapCampaign.occupy_top)
}

// .pb.map.CombatantUser self = 10;
inline bool MapCampaign::_internal_has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline bool MapCampaign::has_self() const {
  return _internal_has_self();
}
inline void MapCampaign::clear_self() {
  if (GetArenaNoVirtual() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::pb::map::CombatantUser& MapCampaign::_internal_self() const {
  const ::pb::map::CombatantUser* p = self_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::CombatantUser*>(
      &::pb::map::_CombatantUser_default_instance_);
}
inline const ::pb::map::CombatantUser& MapCampaign::self() const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaign.self)
  return _internal_self();
}
inline ::pb::map::CombatantUser* MapCampaign::release_self() {
  // @@protoc_insertion_point(field_release:pb.map.MapCampaign.self)
  
  ::pb::map::CombatantUser* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::pb::map::CombatantUser* MapCampaign::_internal_mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::CombatantUser>(GetArenaNoVirtual());
    self_ = p;
  }
  return self_;
}
inline ::pb::map::CombatantUser* MapCampaign::mutable_self() {
  // @@protoc_insertion_point(field_mutable:pb.map.MapCampaign.self)
  return _internal_mutable_self();
}
inline void MapCampaign::set_allocated_self(::pb::map::CombatantUser* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:pb.map.MapCampaign.self)
}

// -------------------------------------------------------------------

// MapCampaignResp

// repeated .pb.map.MapCampaign campaigns = 1;
inline int MapCampaignResp::_internal_campaigns_size() const {
  return campaigns_.size();
}
inline int MapCampaignResp::campaigns_size() const {
  return _internal_campaigns_size();
}
inline void MapCampaignResp::clear_campaigns() {
  campaigns_.Clear();
}
inline ::pb::map::MapCampaign* MapCampaignResp::mutable_campaigns(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.MapCampaignResp.campaigns)
  return campaigns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapCampaign >*
MapCampaignResp::mutable_campaigns() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.MapCampaignResp.campaigns)
  return &campaigns_;
}
inline const ::pb::map::MapCampaign& MapCampaignResp::_internal_campaigns(int index) const {
  return campaigns_.Get(index);
}
inline const ::pb::map::MapCampaign& MapCampaignResp::campaigns(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.MapCampaignResp.campaigns)
  return _internal_campaigns(index);
}
inline ::pb::map::MapCampaign* MapCampaignResp::_internal_add_campaigns() {
  return campaigns_.Add();
}
inline ::pb::map::MapCampaign* MapCampaignResp::add_campaigns() {
  // @@protoc_insertion_point(field_add:pb.map.MapCampaignResp.campaigns)
  return _internal_add_campaigns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::MapCampaign >&
MapCampaignResp::campaigns() const {
  // @@protoc_insertion_point(field_list:pb.map.MapCampaignResp.campaigns)
  return campaigns_;
}

// -------------------------------------------------------------------

// Country

// int32 country_id = 1;
inline void Country::clear_country_id() {
  country_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Country::_internal_country_id() const {
  return country_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Country::country_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Country.country_id)
  return _internal_country_id();
}
inline void Country::_internal_set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  country_id_ = value;
}
inline void Country::set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_country_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Country.country_id)
}

// int32 num = 2;
inline void Country::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Country::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Country::num() const {
  // @@protoc_insertion_point(field_get:pb.map.Country.num)
  return _internal_num();
}
inline void Country::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void Country::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:pb.map.Country.num)
}

// int32 open = 3;
inline void Country::clear_open() {
  open_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Country::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Country::open() const {
  // @@protoc_insertion_point(field_get:pb.map.Country.open)
  return _internal_open();
}
inline void Country::_internal_set_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_ = value;
}
inline void Country::set_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:pb.map.Country.open)
}

// -------------------------------------------------------------------

// Country_Info

// repeated .pb.map.Country countries = 1;
inline int Country_Info::_internal_countries_size() const {
  return countries_.size();
}
inline int Country_Info::countries_size() const {
  return _internal_countries_size();
}
inline void Country_Info::clear_countries() {
  countries_.Clear();
}
inline ::pb::map::Country* Country_Info::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Country_Info.countries)
  return countries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Country >*
Country_Info::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Country_Info.countries)
  return &countries_;
}
inline const ::pb::map::Country& Country_Info::_internal_countries(int index) const {
  return countries_.Get(index);
}
inline const ::pb::map::Country& Country_Info::countries(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Country_Info.countries)
  return _internal_countries(index);
}
inline ::pb::map::Country* Country_Info::_internal_add_countries() {
  return countries_.Add();
}
inline ::pb::map::Country* Country_Info::add_countries() {
  // @@protoc_insertion_point(field_add:pb.map.Country_Info.countries)
  return _internal_add_countries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::Country >&
Country_Info::countries() const {
  // @@protoc_insertion_point(field_list:pb.map.Country_Info.countries)
  return countries_;
}

// -------------------------------------------------------------------

// Choose_Country

// uint32 error_code = 1;
inline void Choose_Country::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Choose_Country::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Choose_Country::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Choose_Country.error_code)
  return _internal_error_code();
}
inline void Choose_Country::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Choose_Country::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Choose_Country.error_code)
}

// int32 country_id = 2;
inline void Choose_Country::clear_country_id() {
  country_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Choose_Country::_internal_country_id() const {
  return country_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Choose_Country::country_id() const {
  // @@protoc_insertion_point(field_get:pb.map.Choose_Country.country_id)
  return _internal_country_id();
}
inline void Choose_Country::_internal_set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  country_id_ = value;
}
inline void Choose_Country::set_country_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_country_id(value);
  // @@protoc_insertion_point(field_set:pb.map.Choose_Country.country_id)
}

// -------------------------------------------------------------------

// CampaignScale

// .pb.map.HEX pos = 1;
inline bool CampaignScale::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool CampaignScale::has_pos() const {
  return _internal_has_pos();
}
inline void CampaignScale::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::pb::map::HEX& CampaignScale::_internal_pos() const {
  const ::pb::map::HEX* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::map::HEX*>(
      &::pb::map::_HEX_default_instance_);
}
inline const ::pb::map::HEX& CampaignScale::pos() const {
  // @@protoc_insertion_point(field_get:pb.map.CampaignScale.pos)
  return _internal_pos();
}
inline ::pb::map::HEX* CampaignScale::release_pos() {
  // @@protoc_insertion_point(field_release:pb.map.CampaignScale.pos)
  
  ::pb::map::HEX* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::pb::map::HEX* CampaignScale::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::map::HEX>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::pb::map::HEX* CampaignScale::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:pb.map.CampaignScale.pos)
  return _internal_mutable_pos();
}
inline void CampaignScale::set_allocated_pos(::pb::map::HEX* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pb.map.CampaignScale.pos)
}

// int32 scale = 2;
inline void CampaignScale::clear_scale() {
  scale_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CampaignScale::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CampaignScale::scale() const {
  // @@protoc_insertion_point(field_get:pb.map.CampaignScale.scale)
  return _internal_scale();
}
inline void CampaignScale::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scale_ = value;
}
inline void CampaignScale::set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:pb.map.CampaignScale.scale)
}

// bool finish = 3;
inline void CampaignScale::clear_finish() {
  finish_ = false;
}
inline bool CampaignScale::_internal_finish() const {
  return finish_;
}
inline bool CampaignScale::finish() const {
  // @@protoc_insertion_point(field_get:pb.map.CampaignScale.finish)
  return _internal_finish();
}
inline void CampaignScale::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void CampaignScale::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:pb.map.CampaignScale.finish)
}

// -------------------------------------------------------------------

// Req_SearchMapObj

// int32 q = 1;
inline void Req_SearchMapObj::clear_q() {
  q_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_q() const {
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::q() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.q)
  return _internal_q();
}
inline void Req_SearchMapObj::_internal_set_q(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  q_ = value;
}
inline void Req_SearchMapObj::set_q(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.q)
}

// int32 r = 2;
inline void Req_SearchMapObj::clear_r() {
  r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::r() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.r)
  return _internal_r();
}
inline void Req_SearchMapObj::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_ = value;
}
inline void Req_SearchMapObj::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.r)
}

// int32 exhale = 3;
inline void Req_SearchMapObj::clear_exhale() {
  exhale_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_exhale() const {
  return exhale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::exhale() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.exhale)
  return _internal_exhale();
}
inline void Req_SearchMapObj::_internal_set_exhale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exhale_ = value;
}
inline void Req_SearchMapObj::set_exhale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exhale(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.exhale)
}

// int32 obj_kind = 4;
inline void Req_SearchMapObj::clear_obj_kind() {
  obj_kind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_obj_kind() const {
  return obj_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::obj_kind() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.obj_kind)
  return _internal_obj_kind();
}
inline void Req_SearchMapObj::_internal_set_obj_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_kind_ = value;
}
inline void Req_SearchMapObj::set_obj_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obj_kind(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.obj_kind)
}

// int32 obj_type = 5;
inline void Req_SearchMapObj::clear_obj_type() {
  obj_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_obj_type() const {
  return obj_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::obj_type() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.obj_type)
  return _internal_obj_type();
}
inline void Req_SearchMapObj::_internal_set_obj_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_type_ = value;
}
inline void Req_SearchMapObj::set_obj_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obj_type(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.obj_type)
}

// int32 obj_level_min = 6;
inline void Req_SearchMapObj::clear_obj_level_min() {
  obj_level_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_obj_level_min() const {
  return obj_level_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::obj_level_min() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.obj_level_min)
  return _internal_obj_level_min();
}
inline void Req_SearchMapObj::_internal_set_obj_level_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_level_min_ = value;
}
inline void Req_SearchMapObj::set_obj_level_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obj_level_min(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.obj_level_min)
}

// int32 obj_level_max = 7;
inline void Req_SearchMapObj::clear_obj_level_max() {
  obj_level_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_obj_level_max() const {
  return obj_level_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::obj_level_max() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.obj_level_max)
  return _internal_obj_level_max();
}
inline void Req_SearchMapObj::_internal_set_obj_level_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_level_max_ = value;
}
inline void Req_SearchMapObj::set_obj_level_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obj_level_max(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.obj_level_max)
}

// int32 obj_belong = 8;
inline void Req_SearchMapObj::clear_obj_belong() {
  obj_belong_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::_internal_obj_belong() const {
  return obj_belong_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Req_SearchMapObj::obj_belong() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_SearchMapObj.obj_belong)
  return _internal_obj_belong();
}
inline void Req_SearchMapObj::_internal_set_obj_belong(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_belong_ = value;
}
inline void Req_SearchMapObj::set_obj_belong(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obj_belong(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_SearchMapObj.obj_belong)
}

// -------------------------------------------------------------------

// Rep_SearchMapObj

// uint32 error_code = 1;
inline void Rep_SearchMapObj::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rep_SearchMapObj::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rep_SearchMapObj::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_SearchMapObj.error_code)
  return _internal_error_code();
}
inline void Rep_SearchMapObj::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Rep_SearchMapObj::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Rep_SearchMapObj.error_code)
}

// int32 result = 2;
inline void Rep_SearchMapObj::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rep_SearchMapObj::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rep_SearchMapObj::result() const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_SearchMapObj.result)
  return _internal_result();
}
inline void Rep_SearchMapObj::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void Rep_SearchMapObj::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pb.map.Rep_SearchMapObj.result)
}

// repeated .pb.map.HEX lst_hex = 3;
inline int Rep_SearchMapObj::_internal_lst_hex_size() const {
  return lst_hex_.size();
}
inline int Rep_SearchMapObj::lst_hex_size() const {
  return _internal_lst_hex_size();
}
inline void Rep_SearchMapObj::clear_lst_hex() {
  lst_hex_.Clear();
}
inline ::pb::map::HEX* Rep_SearchMapObj::mutable_lst_hex(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Rep_SearchMapObj.lst_hex)
  return lst_hex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >*
Rep_SearchMapObj::mutable_lst_hex() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Rep_SearchMapObj.lst_hex)
  return &lst_hex_;
}
inline const ::pb::map::HEX& Rep_SearchMapObj::_internal_lst_hex(int index) const {
  return lst_hex_.Get(index);
}
inline const ::pb::map::HEX& Rep_SearchMapObj::lst_hex(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_SearchMapObj.lst_hex)
  return _internal_lst_hex(index);
}
inline ::pb::map::HEX* Rep_SearchMapObj::_internal_add_lst_hex() {
  return lst_hex_.Add();
}
inline ::pb::map::HEX* Rep_SearchMapObj::add_lst_hex() {
  // @@protoc_insertion_point(field_add:pb.map.Rep_SearchMapObj.lst_hex)
  return _internal_add_lst_hex();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::HEX >&
Rep_SearchMapObj::lst_hex() const {
  // @@protoc_insertion_point(field_list:pb.map.Rep_SearchMapObj.lst_hex)
  return lst_hex_;
}

// -------------------------------------------------------------------

// TimerTask

// int64 id = 1;
inline void TimerTask::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::id() const {
  // @@protoc_insertion_point(field_get:pb.map.TimerTask.id)
  return _internal_id();
}
inline void TimerTask::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void TimerTask::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.map.TimerTask.id)
}

// int64 user_id = 2;
inline void TimerTask::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::user_id() const {
  // @@protoc_insertion_point(field_get:pb.map.TimerTask.user_id)
  return _internal_user_id();
}
inline void TimerTask::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void TimerTask::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.map.TimerTask.user_id)
}

// uint32 type = 3;
inline void TimerTask::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimerTask::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimerTask::type() const {
  // @@protoc_insertion_point(field_get:pb.map.TimerTask.type)
  return _internal_type();
}
inline void TimerTask::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TimerTask::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.map.TimerTask.type)
}

// int64 end_time = 4;
inline void TimerTask::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::end_time() const {
  // @@protoc_insertion_point(field_get:pb.map.TimerTask.end_time)
  return _internal_end_time();
}
inline void TimerTask::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void TimerTask::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:pb.map.TimerTask.end_time)
}

// int64 id_link = 5;
inline void TimerTask::clear_id_link() {
  id_link_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::_internal_id_link() const {
  return id_link_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::id_link() const {
  // @@protoc_insertion_point(field_get:pb.map.TimerTask.id_link)
  return _internal_id_link();
}
inline void TimerTask::_internal_set_id_link(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_link_ = value;
}
inline void TimerTask::set_id_link(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id_link(value);
  // @@protoc_insertion_point(field_set:pb.map.TimerTask.id_link)
}

// int64 param = 6;
inline void TimerTask::clear_param() {
  param_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::_internal_param() const {
  return param_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerTask::param() const {
  // @@protoc_insertion_point(field_get:pb.map.TimerTask.param)
  return _internal_param();
}
inline void TimerTask::_internal_set_param(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  param_ = value;
}
inline void TimerTask::set_param(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:pb.map.TimerTask.param)
}

// bytes pb_param = 7;
inline void TimerTask::clear_pb_param() {
  pb_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TimerTask::pb_param() const {
  // @@protoc_insertion_point(field_get:pb.map.TimerTask.pb_param)
  return _internal_pb_param();
}
inline void TimerTask::set_pb_param(const std::string& value) {
  _internal_set_pb_param(value);
  // @@protoc_insertion_point(field_set:pb.map.TimerTask.pb_param)
}
inline std::string* TimerTask::mutable_pb_param() {
  // @@protoc_insertion_point(field_mutable:pb.map.TimerTask.pb_param)
  return _internal_mutable_pb_param();
}
inline const std::string& TimerTask::_internal_pb_param() const {
  return pb_param_.GetNoArena();
}
inline void TimerTask::_internal_set_pb_param(const std::string& value) {
  
  pb_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TimerTask::set_pb_param(std::string&& value) {
  
  pb_param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.map.TimerTask.pb_param)
}
inline void TimerTask::set_pb_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pb_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map.TimerTask.pb_param)
}
inline void TimerTask::set_pb_param(const void* value, size_t size) {
  
  pb_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map.TimerTask.pb_param)
}
inline std::string* TimerTask::_internal_mutable_pb_param() {
  
  return pb_param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TimerTask::release_pb_param() {
  // @@protoc_insertion_point(field_release:pb.map.TimerTask.pb_param)
  
  return pb_param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TimerTask::set_allocated_pb_param(std::string* pb_param) {
  if (pb_param != nullptr) {
    
  } else {
    
  }
  pb_param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pb_param);
  // @@protoc_insertion_point(field_set_allocated:pb.map.TimerTask.pb_param)
}

// -------------------------------------------------------------------

// Rep_Timer_list

// repeated .pb.map.TimerTask lst = 1;
inline int Rep_Timer_list::_internal_lst_size() const {
  return lst_.size();
}
inline int Rep_Timer_list::lst_size() const {
  return _internal_lst_size();
}
inline void Rep_Timer_list::clear_lst() {
  lst_.Clear();
}
inline ::pb::map::TimerTask* Rep_Timer_list::mutable_lst(int index) {
  // @@protoc_insertion_point(field_mutable:pb.map.Rep_Timer_list.lst)
  return lst_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TimerTask >*
Rep_Timer_list::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Rep_Timer_list.lst)
  return &lst_;
}
inline const ::pb::map::TimerTask& Rep_Timer_list::_internal_lst(int index) const {
  return lst_.Get(index);
}
inline const ::pb::map::TimerTask& Rep_Timer_list::lst(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Rep_Timer_list.lst)
  return _internal_lst(index);
}
inline ::pb::map::TimerTask* Rep_Timer_list::_internal_add_lst() {
  return lst_.Add();
}
inline ::pb::map::TimerTask* Rep_Timer_list::add_lst() {
  // @@protoc_insertion_point(field_add:pb.map.Rep_Timer_list.lst)
  return _internal_add_lst();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::map::TimerTask >&
Rep_Timer_list::lst() const {
  // @@protoc_insertion_point(field_list:pb.map.Rep_Timer_list.lst)
  return lst_;
}

// -------------------------------------------------------------------

// Req_ChgMap

// uint32 error_code = 1;
inline void Req_ChgMap::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Req_ChgMap::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Req_ChgMap::error_code() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_ChgMap.error_code)
  return _internal_error_code();
}
inline void Req_ChgMap::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void Req_ChgMap::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_ChgMap.error_code)
}

// uint32 mapType = 2;
inline void Req_ChgMap::clear_maptype() {
  maptype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Req_ChgMap::_internal_maptype() const {
  return maptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Req_ChgMap::maptype() const {
  // @@protoc_insertion_point(field_get:pb.map.Req_ChgMap.mapType)
  return _internal_maptype();
}
inline void Req_ChgMap::_internal_set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maptype_ = value;
}
inline void Req_ChgMap::set_maptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maptype(value);
  // @@protoc_insertion_point(field_set:pb.map.Req_ChgMap.mapType)
}

// -------------------------------------------------------------------

// Req_Map_Chk_View

// repeated int64 vec_chk_troop_lst = 1;
inline int Req_Map_Chk_View::_internal_vec_chk_troop_lst_size() const {
  return vec_chk_troop_lst_.size();
}
inline int Req_Map_Chk_View::vec_chk_troop_lst_size() const {
  return _internal_vec_chk_troop_lst_size();
}
inline void Req_Map_Chk_View::clear_vec_chk_troop_lst() {
  vec_chk_troop_lst_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Req_Map_Chk_View::_internal_vec_chk_troop_lst(int index) const {
  return vec_chk_troop_lst_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Req_Map_Chk_View::vec_chk_troop_lst(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Req_Map_Chk_View.vec_chk_troop_lst)
  return _internal_vec_chk_troop_lst(index);
}
inline void Req_Map_Chk_View::set_vec_chk_troop_lst(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  vec_chk_troop_lst_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.map.Req_Map_Chk_View.vec_chk_troop_lst)
}
inline void Req_Map_Chk_View::_internal_add_vec_chk_troop_lst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  vec_chk_troop_lst_.Add(value);
}
inline void Req_Map_Chk_View::add_vec_chk_troop_lst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_vec_chk_troop_lst(value);
  // @@protoc_insertion_point(field_add:pb.map.Req_Map_Chk_View.vec_chk_troop_lst)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Req_Map_Chk_View::_internal_vec_chk_troop_lst() const {
  return vec_chk_troop_lst_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Req_Map_Chk_View::vec_chk_troop_lst() const {
  // @@protoc_insertion_point(field_list:pb.map.Req_Map_Chk_View.vec_chk_troop_lst)
  return _internal_vec_chk_troop_lst();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Req_Map_Chk_View::_internal_mutable_vec_chk_troop_lst() {
  return &vec_chk_troop_lst_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Req_Map_Chk_View::mutable_vec_chk_troop_lst() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Req_Map_Chk_View.vec_chk_troop_lst)
  return _internal_mutable_vec_chk_troop_lst();
}

// repeated int64 vec_chk_buildings_lst = 2;
inline int Req_Map_Chk_View::_internal_vec_chk_buildings_lst_size() const {
  return vec_chk_buildings_lst_.size();
}
inline int Req_Map_Chk_View::vec_chk_buildings_lst_size() const {
  return _internal_vec_chk_buildings_lst_size();
}
inline void Req_Map_Chk_View::clear_vec_chk_buildings_lst() {
  vec_chk_buildings_lst_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Req_Map_Chk_View::_internal_vec_chk_buildings_lst(int index) const {
  return vec_chk_buildings_lst_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Req_Map_Chk_View::vec_chk_buildings_lst(int index) const {
  // @@protoc_insertion_point(field_get:pb.map.Req_Map_Chk_View.vec_chk_buildings_lst)
  return _internal_vec_chk_buildings_lst(index);
}
inline void Req_Map_Chk_View::set_vec_chk_buildings_lst(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  vec_chk_buildings_lst_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.map.Req_Map_Chk_View.vec_chk_buildings_lst)
}
inline void Req_Map_Chk_View::_internal_add_vec_chk_buildings_lst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  vec_chk_buildings_lst_.Add(value);
}
inline void Req_Map_Chk_View::add_vec_chk_buildings_lst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_vec_chk_buildings_lst(value);
  // @@protoc_insertion_point(field_add:pb.map.Req_Map_Chk_View.vec_chk_buildings_lst)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Req_Map_Chk_View::_internal_vec_chk_buildings_lst() const {
  return vec_chk_buildings_lst_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Req_Map_Chk_View::vec_chk_buildings_lst() const {
  // @@protoc_insertion_point(field_list:pb.map.Req_Map_Chk_View.vec_chk_buildings_lst)
  return _internal_vec_chk_buildings_lst();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Req_Map_Chk_View::_internal_mutable_vec_chk_buildings_lst() {
  return &vec_chk_buildings_lst_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Req_Map_Chk_View::mutable_vec_chk_buildings_lst() {
  // @@protoc_insertion_point(field_mutable_list:pb.map.Req_Map_Chk_View.vec_chk_buildings_lst)
  return _internal_mutable_vec_chk_buildings_lst();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::map::E_Map_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::map::E_Map_CMD>() {
  return ::pb::map::E_Map_CMD_descriptor();
}
template <> struct is_proto_enum< ::pb::map::E_AIBehavior_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::map::E_AIBehavior_Type>() {
  return ::pb::map::E_AIBehavior_Type_descriptor();
}
template <> struct is_proto_enum< ::pb::map::E_MapCampaignScale> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::map::E_MapCampaignScale>() {
  return ::pb::map::E_MapCampaignScale_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_2eproto
