// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto;
namespace pb {
namespace db {
class Base_Cmd;
struct Base_CmdDefaultTypeInternal;
extern Base_CmdDefaultTypeInternal _Base_Cmd_default_instance_;
class DB_Add_Recordset;
struct DB_Add_RecordsetDefaultTypeInternal;
extern DB_Add_RecordsetDefaultTypeInternal _DB_Add_Recordset_default_instance_;
class DB_DataFlag;
struct DB_DataFlagDefaultTypeInternal;
extern DB_DataFlagDefaultTypeInternal _DB_DataFlag_default_instance_;
class DB_Delete;
struct DB_DeleteDefaultTypeInternal;
extern DB_DeleteDefaultTypeInternal _DB_Delete_default_instance_;
class DB_EffectProp;
struct DB_EffectPropDefaultTypeInternal;
extern DB_EffectPropDefaultTypeInternal _DB_EffectProp_default_instance_;
class DB_Field;
struct DB_FieldDefaultTypeInternal;
extern DB_FieldDefaultTypeInternal _DB_Field_default_instance_;
class DB_FieldMeta;
struct DB_FieldMetaDefaultTypeInternal;
extern DB_FieldMetaDefaultTypeInternal _DB_FieldMeta_default_instance_;
class DB_Metas;
struct DB_MetasDefaultTypeInternal;
extern DB_MetasDefaultTypeInternal _DB_Metas_default_instance_;
class DB_OP_Condition;
struct DB_OP_ConditionDefaultTypeInternal;
extern DB_OP_ConditionDefaultTypeInternal _DB_OP_Condition_default_instance_;
class DB_OP_User;
struct DB_OP_UserDefaultTypeInternal;
extern DB_OP_UserDefaultTypeInternal _DB_OP_User_default_instance_;
class DB_Record;
struct DB_RecordDefaultTypeInternal;
extern DB_RecordDefaultTypeInternal _DB_Record_default_instance_;
class DB_Record_OP;
struct DB_Record_OPDefaultTypeInternal;
extern DB_Record_OPDefaultTypeInternal _DB_Record_OP_default_instance_;
class DB_Recordset;
struct DB_RecordsetDefaultTypeInternal;
extern DB_RecordsetDefaultTypeInternal _DB_Recordset_default_instance_;
class DB_TableMeta;
struct DB_TableMetaDefaultTypeInternal;
extern DB_TableMetaDefaultTypeInternal _DB_TableMeta_default_instance_;
class DB_Update;
struct DB_UpdateDefaultTypeInternal;
extern DB_UpdateDefaultTypeInternal _DB_Update_default_instance_;
class EffectProp;
struct EffectPropDefaultTypeInternal;
extern EffectPropDefaultTypeInternal _EffectProp_default_instance_;
class Key_Value;
struct Key_ValueDefaultTypeInternal;
extern Key_ValueDefaultTypeInternal _Key_Value_default_instance_;
class Query_Recordset;
struct Query_RecordsetDefaultTypeInternal;
extern Query_RecordsetDefaultTypeInternal _Query_Recordset_default_instance_;
class User_DB_Record_OPS;
struct User_DB_Record_OPSDefaultTypeInternal;
extern User_DB_Record_OPSDefaultTypeInternal _User_DB_Record_OPS_default_instance_;
class User_DB_Recordset;
struct User_DB_RecordsetDefaultTypeInternal;
extern User_DB_RecordsetDefaultTypeInternal _User_DB_Recordset_default_instance_;
class User_DB_Recordset_Ext;
struct User_DB_Recordset_ExtDefaultTypeInternal;
extern User_DB_Recordset_ExtDefaultTypeInternal _User_DB_Recordset_Ext_default_instance_;
}  // namespace db
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::db::Base_Cmd* Arena::CreateMaybeMessage<::pb::db::Base_Cmd>(Arena*);
template<> ::pb::db::DB_Add_Recordset* Arena::CreateMaybeMessage<::pb::db::DB_Add_Recordset>(Arena*);
template<> ::pb::db::DB_DataFlag* Arena::CreateMaybeMessage<::pb::db::DB_DataFlag>(Arena*);
template<> ::pb::db::DB_Delete* Arena::CreateMaybeMessage<::pb::db::DB_Delete>(Arena*);
template<> ::pb::db::DB_EffectProp* Arena::CreateMaybeMessage<::pb::db::DB_EffectProp>(Arena*);
template<> ::pb::db::DB_Field* Arena::CreateMaybeMessage<::pb::db::DB_Field>(Arena*);
template<> ::pb::db::DB_FieldMeta* Arena::CreateMaybeMessage<::pb::db::DB_FieldMeta>(Arena*);
template<> ::pb::db::DB_Metas* Arena::CreateMaybeMessage<::pb::db::DB_Metas>(Arena*);
template<> ::pb::db::DB_OP_Condition* Arena::CreateMaybeMessage<::pb::db::DB_OP_Condition>(Arena*);
template<> ::pb::db::DB_OP_User* Arena::CreateMaybeMessage<::pb::db::DB_OP_User>(Arena*);
template<> ::pb::db::DB_Record* Arena::CreateMaybeMessage<::pb::db::DB_Record>(Arena*);
template<> ::pb::db::DB_Record_OP* Arena::CreateMaybeMessage<::pb::db::DB_Record_OP>(Arena*);
template<> ::pb::db::DB_Recordset* Arena::CreateMaybeMessage<::pb::db::DB_Recordset>(Arena*);
template<> ::pb::db::DB_TableMeta* Arena::CreateMaybeMessage<::pb::db::DB_TableMeta>(Arena*);
template<> ::pb::db::DB_Update* Arena::CreateMaybeMessage<::pb::db::DB_Update>(Arena*);
template<> ::pb::db::EffectProp* Arena::CreateMaybeMessage<::pb::db::EffectProp>(Arena*);
template<> ::pb::db::Key_Value* Arena::CreateMaybeMessage<::pb::db::Key_Value>(Arena*);
template<> ::pb::db::Query_Recordset* Arena::CreateMaybeMessage<::pb::db::Query_Recordset>(Arena*);
template<> ::pb::db::User_DB_Record_OPS* Arena::CreateMaybeMessage<::pb::db::User_DB_Record_OPS>(Arena*);
template<> ::pb::db::User_DB_Recordset* Arena::CreateMaybeMessage<::pb::db::User_DB_Recordset>(Arena*);
template<> ::pb::db::User_DB_Recordset_Ext* Arena::CreateMaybeMessage<::pb::db::User_DB_Recordset_Ext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace db {

enum DB_OP_User_Action : int {
  DB_OP_User_Action_QUERY_UserTblData = 0,
  DB_OP_User_Action_QUERY_FriendTblData = 1,
  DB_OP_User_Action_DB_OP_User_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DB_OP_User_Action_DB_OP_User_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DB_OP_User_Action_IsValid(int value);
constexpr DB_OP_User_Action DB_OP_User_Action_Action_MIN = DB_OP_User_Action_QUERY_UserTblData;
constexpr DB_OP_User_Action DB_OP_User_Action_Action_MAX = DB_OP_User_Action_QUERY_FriendTblData;
constexpr int DB_OP_User_Action_Action_ARRAYSIZE = DB_OP_User_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DB_OP_User_Action_descriptor();
template<typename T>
inline const std::string& DB_OP_User_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DB_OP_User_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DB_OP_User_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DB_OP_User_Action_descriptor(), enum_t_value);
}
inline bool DB_OP_User_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DB_OP_User_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DB_OP_User_Action>(
    DB_OP_User_Action_descriptor(), name, value);
}
enum DB_Record_OP_Action : int {
  DB_Record_OP_Action_UPDATE = 0,
  DB_Record_OP_Action_NEW = 1,
  DB_Record_OP_Action_REMOVE = 2,
  DB_Record_OP_Action_DB_Record_OP_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DB_Record_OP_Action_DB_Record_OP_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DB_Record_OP_Action_IsValid(int value);
constexpr DB_Record_OP_Action DB_Record_OP_Action_Action_MIN = DB_Record_OP_Action_UPDATE;
constexpr DB_Record_OP_Action DB_Record_OP_Action_Action_MAX = DB_Record_OP_Action_REMOVE;
constexpr int DB_Record_OP_Action_Action_ARRAYSIZE = DB_Record_OP_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DB_Record_OP_Action_descriptor();
template<typename T>
inline const std::string& DB_Record_OP_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DB_Record_OP_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DB_Record_OP_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DB_Record_OP_Action_descriptor(), enum_t_value);
}
inline bool DB_Record_OP_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DB_Record_OP_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DB_Record_OP_Action>(
    DB_Record_OP_Action_descriptor(), name, value);
}
enum E_Field_Type : int {
  E_Field_Type_Int = 0,
  E_Field_Type_String = 1,
  E_Field_Type_Double = 2,
  E_Field_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_Field_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_Field_Type_IsValid(int value);
constexpr E_Field_Type E_Field_Type_MIN = E_Field_Type_Int;
constexpr E_Field_Type E_Field_Type_MAX = E_Field_Type_Double;
constexpr int E_Field_Type_ARRAYSIZE = E_Field_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_Field_Type_descriptor();
template<typename T>
inline const std::string& E_Field_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_Field_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_Field_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_Field_Type_descriptor(), enum_t_value);
}
inline bool E_Field_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_Field_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_Field_Type>(
    E_Field_Type_descriptor(), name, value);
}
enum E_DB_Cmd : int {
  E_DB_Cmd_Update = 0,
  E_DB_Cmd_SynFileDB = 1,
  E_DB_Cmd_DelFileDB = 2,
  E_DB_Cmd_SynEffProp = 3,
  E_DB_Cmd_DataStart = 4,
  E_DB_Cmd_DataEnd = 5,
  E_DB_Cmd_QueryData = 6,
  E_DB_Cmd_GuildBattleReport = 7,
  E_DB_Cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E_DB_Cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E_DB_Cmd_IsValid(int value);
constexpr E_DB_Cmd E_DB_Cmd_MIN = E_DB_Cmd_Update;
constexpr E_DB_Cmd E_DB_Cmd_MAX = E_DB_Cmd_GuildBattleReport;
constexpr int E_DB_Cmd_ARRAYSIZE = E_DB_Cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_DB_Cmd_descriptor();
template<typename T>
inline const std::string& E_DB_Cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_DB_Cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_DB_Cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_DB_Cmd_descriptor(), enum_t_value);
}
inline bool E_DB_Cmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E_DB_Cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_DB_Cmd>(
    E_DB_Cmd_descriptor(), name, value);
}
// ===================================================================

class DB_OP_Condition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_OP_Condition) */ {
 public:
  inline DB_OP_Condition() : DB_OP_Condition(nullptr) {}
  ~DB_OP_Condition() override;
  explicit PROTOBUF_CONSTEXPR DB_OP_Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_OP_Condition(const DB_OP_Condition& from);
  DB_OP_Condition(DB_OP_Condition&& from) noexcept
    : DB_OP_Condition() {
    *this = ::std::move(from);
  }

  inline DB_OP_Condition& operator=(const DB_OP_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_OP_Condition& operator=(DB_OP_Condition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_OP_Condition& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_OP_Condition* internal_default_instance() {
    return reinterpret_cast<const DB_OP_Condition*>(
               &_DB_OP_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DB_OP_Condition& a, DB_OP_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_OP_Condition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_OP_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_OP_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_OP_Condition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_OP_Condition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_OP_Condition& from) {
    DB_OP_Condition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_OP_Condition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_OP_Condition";
  }
  protected:
  explicit DB_OP_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIdxFieldNumber = 1,
    kOpFieldNumber = 2,
    kI64ValFieldNumber = 4,
    kNextLogicOpFieldNumber = 5,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 idx = 1;
  void clear_idx();
  uint32_t idx() const;
  void set_idx(uint32_t value);
  private:
  uint32_t _internal_idx() const;
  void _internal_set_idx(uint32_t value);
  public:

  // uint32 op = 2;
  void clear_op();
  uint32_t op() const;
  void set_op(uint32_t value);
  private:
  uint32_t _internal_op() const;
  void _internal_set_op(uint32_t value);
  public:

  // int64 i64val = 4;
  void clear_i64val();
  int64_t i64val() const;
  void set_i64val(int64_t value);
  private:
  int64_t _internal_i64val() const;
  void _internal_set_i64val(int64_t value);
  public:

  // uint32 next_logic_op = 5;
  void clear_next_logic_op();
  uint32_t next_logic_op() const;
  void set_next_logic_op(uint32_t value);
  private:
  uint32_t _internal_next_logic_op() const;
  void _internal_set_next_logic_op(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_OP_Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    uint32_t idx_;
    uint32_t op_;
    int64_t i64val_;
    uint32_t next_logic_op_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_OP_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_OP_User) */ {
 public:
  inline DB_OP_User() : DB_OP_User(nullptr) {}
  ~DB_OP_User() override;
  explicit PROTOBUF_CONSTEXPR DB_OP_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_OP_User(const DB_OP_User& from);
  DB_OP_User(DB_OP_User&& from) noexcept
    : DB_OP_User() {
    *this = ::std::move(from);
  }

  inline DB_OP_User& operator=(const DB_OP_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_OP_User& operator=(DB_OP_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_OP_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_OP_User* internal_default_instance() {
    return reinterpret_cast<const DB_OP_User*>(
               &_DB_OP_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DB_OP_User& a, DB_OP_User& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_OP_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_OP_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_OP_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_OP_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_OP_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_OP_User& from) {
    DB_OP_User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_OP_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_OP_User";
  }
  protected:
  explicit DB_OP_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DB_OP_User_Action Action;
  static constexpr Action QUERY_UserTblData =
    DB_OP_User_Action_QUERY_UserTblData;
  static constexpr Action QUERY_FriendTblData =
    DB_OP_User_Action_QUERY_FriendTblData;
  static inline bool Action_IsValid(int value) {
    return DB_OP_User_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    DB_OP_User_Action_Action_MIN;
  static constexpr Action Action_MAX =
    DB_OP_User_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    DB_OP_User_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return DB_OP_User_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return DB_OP_User_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return DB_OP_User_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFailFunctionNameFieldNumber = 5,
    kUserIdFieldNumber = 2,
    kGameIdFieldNumber = 3,
    kActionFieldNumber = 1,
    kTblTypeFieldNumber = 4,
  };
  // string fail_function_name = 5;
  void clear_fail_function_name();
  const std::string& fail_function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_function_name();
  PROTOBUF_NODISCARD std::string* release_fail_function_name();
  void set_allocated_fail_function_name(std::string* fail_function_name);
  private:
  const std::string& _internal_fail_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_function_name(const std::string& value);
  std::string* _internal_mutable_fail_function_name();
  public:

  // .pb.db.DB_OP_Condition user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const ::pb::db::DB_OP_Condition& user_id() const;
  PROTOBUF_NODISCARD ::pb::db::DB_OP_Condition* release_user_id();
  ::pb::db::DB_OP_Condition* mutable_user_id();
  void set_allocated_user_id(::pb::db::DB_OP_Condition* user_id);
  private:
  const ::pb::db::DB_OP_Condition& _internal_user_id() const;
  ::pb::db::DB_OP_Condition* _internal_mutable_user_id();
  public:
  void unsafe_arena_set_allocated_user_id(
      ::pb::db::DB_OP_Condition* user_id);
  ::pb::db::DB_OP_Condition* unsafe_arena_release_user_id();

  // .pb.db.DB_OP_Condition game_id = 3;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  const ::pb::db::DB_OP_Condition& game_id() const;
  PROTOBUF_NODISCARD ::pb::db::DB_OP_Condition* release_game_id();
  ::pb::db::DB_OP_Condition* mutable_game_id();
  void set_allocated_game_id(::pb::db::DB_OP_Condition* game_id);
  private:
  const ::pb::db::DB_OP_Condition& _internal_game_id() const;
  ::pb::db::DB_OP_Condition* _internal_mutable_game_id();
  public:
  void unsafe_arena_set_allocated_game_id(
      ::pb::db::DB_OP_Condition* game_id);
  ::pb::db::DB_OP_Condition* unsafe_arena_release_game_id();

  // .pb.db.DB_OP_User.Action action = 1;
  void clear_action();
  ::pb::db::DB_OP_User_Action action() const;
  void set_action(::pb::db::DB_OP_User_Action value);
  private:
  ::pb::db::DB_OP_User_Action _internal_action() const;
  void _internal_set_action(::pb::db::DB_OP_User_Action value);
  public:

  // uint32 tbl_type = 4;
  void clear_tbl_type();
  uint32_t tbl_type() const;
  void set_tbl_type(uint32_t value);
  private:
  uint32_t _internal_tbl_type() const;
  void _internal_set_tbl_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_OP_User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_function_name_;
    ::pb::db::DB_OP_Condition* user_id_;
    ::pb::db::DB_OP_Condition* game_id_;
    int action_;
    uint32_t tbl_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class Base_Cmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.Base_Cmd) */ {
 public:
  inline Base_Cmd() : Base_Cmd(nullptr) {}
  ~Base_Cmd() override;
  explicit PROTOBUF_CONSTEXPR Base_Cmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Base_Cmd(const Base_Cmd& from);
  Base_Cmd(Base_Cmd&& from) noexcept
    : Base_Cmd() {
    *this = ::std::move(from);
  }

  inline Base_Cmd& operator=(const Base_Cmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Base_Cmd& operator=(Base_Cmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Base_Cmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const Base_Cmd* internal_default_instance() {
    return reinterpret_cast<const Base_Cmd*>(
               &_Base_Cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Base_Cmd& a, Base_Cmd& b) {
    a.Swap(&b);
  }
  inline void Swap(Base_Cmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Base_Cmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Base_Cmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Base_Cmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Base_Cmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Base_Cmd& from) {
    Base_Cmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Base_Cmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.Base_Cmd";
  }
  protected:
  explicit Base_Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // .pb.db.E_DB_Cmd cmd = 1;
  void clear_cmd();
  ::pb::db::E_DB_Cmd cmd() const;
  void set_cmd(::pb::db::E_DB_Cmd value);
  private:
  ::pb::db::E_DB_Cmd _internal_cmd() const;
  void _internal_set_cmd(::pb::db::E_DB_Cmd value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.Base_Cmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Field final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Field) */ {
 public:
  inline DB_Field() : DB_Field(nullptr) {}
  ~DB_Field() override;
  explicit PROTOBUF_CONSTEXPR DB_Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Field(const DB_Field& from);
  DB_Field(DB_Field&& from) noexcept
    : DB_Field() {
    *this = ::std::move(from);
  }

  inline DB_Field& operator=(const DB_Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Field& operator=(DB_Field&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Field* internal_default_instance() {
    return reinterpret_cast<const DB_Field*>(
               &_DB_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DB_Field& a, DB_Field& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Field* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Field>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Field& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Field& from) {
    DB_Field::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Field* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Field";
  }
  protected:
  explicit DB_Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrvalFieldNumber = 3,
    kI64ValFieldNumber = 2,
    kIdxFieldNumber = 1,
    kFieldTypeFieldNumber = 5,
    kDvalFieldNumber = 4,
  };
  // bytes strval = 3;
  void clear_strval();
  const std::string& strval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strval();
  PROTOBUF_NODISCARD std::string* release_strval();
  void set_allocated_strval(std::string* strval);
  private:
  const std::string& _internal_strval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strval(const std::string& value);
  std::string* _internal_mutable_strval();
  public:

  // int64 i64val = 2;
  void clear_i64val();
  int64_t i64val() const;
  void set_i64val(int64_t value);
  private:
  int64_t _internal_i64val() const;
  void _internal_set_i64val(int64_t value);
  public:

  // uint32 idx = 1;
  void clear_idx();
  uint32_t idx() const;
  void set_idx(uint32_t value);
  private:
  uint32_t _internal_idx() const;
  void _internal_set_idx(uint32_t value);
  public:

  // .pb.db.E_Field_Type field_type = 5;
  void clear_field_type();
  ::pb::db::E_Field_Type field_type() const;
  void set_field_type(::pb::db::E_Field_Type value);
  private:
  ::pb::db::E_Field_Type _internal_field_type() const;
  void _internal_set_field_type(::pb::db::E_Field_Type value);
  public:

  // double dval = 4;
  void clear_dval();
  double dval() const;
  void set_dval(double value);
  private:
  double _internal_dval() const;
  void _internal_set_dval(double value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_Field)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strval_;
    int64_t i64val_;
    uint32_t idx_;
    int field_type_;
    double dval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Record) */ {
 public:
  inline DB_Record() : DB_Record(nullptr) {}
  ~DB_Record() override;
  explicit PROTOBUF_CONSTEXPR DB_Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Record(const DB_Record& from);
  DB_Record(DB_Record&& from) noexcept
    : DB_Record() {
    *this = ::std::move(from);
  }

  inline DB_Record& operator=(const DB_Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Record& operator=(DB_Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Record* internal_default_instance() {
    return reinterpret_cast<const DB_Record*>(
               &_DB_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DB_Record& a, DB_Record& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Record& from) {
    DB_Record::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Record";
  }
  protected:
  explicit DB_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldsFieldNumber = 1,
  };
  // repeated .pb.db.DB_Field vec_fields = 1;
  int vec_fields_size() const;
  private:
  int _internal_vec_fields_size() const;
  public:
  void clear_vec_fields();
  ::pb::db::DB_Field* mutable_vec_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Field >*
      mutable_vec_fields();
  private:
  const ::pb::db::DB_Field& _internal_vec_fields(int index) const;
  ::pb::db::DB_Field* _internal_add_vec_fields();
  public:
  const ::pb::db::DB_Field& vec_fields(int index) const;
  ::pb::db::DB_Field* add_vec_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Field >&
      vec_fields() const;

  // @@protoc_insertion_point(class_scope:pb.db.DB_Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Field > vec_fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Recordset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Recordset) */ {
 public:
  inline DB_Recordset() : DB_Recordset(nullptr) {}
  ~DB_Recordset() override;
  explicit PROTOBUF_CONSTEXPR DB_Recordset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Recordset(const DB_Recordset& from);
  DB_Recordset(DB_Recordset&& from) noexcept
    : DB_Recordset() {
    *this = ::std::move(from);
  }

  inline DB_Recordset& operator=(const DB_Recordset& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Recordset& operator=(DB_Recordset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Recordset& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Recordset* internal_default_instance() {
    return reinterpret_cast<const DB_Recordset*>(
               &_DB_Recordset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DB_Recordset& a, DB_Recordset& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Recordset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Recordset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Recordset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Recordset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Recordset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Recordset& from) {
    DB_Recordset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Recordset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Recordset";
  }
  protected:
  explicit DB_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecRecordsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdTableFieldNumber = 1,
  };
  // repeated .pb.db.DB_Record vec_records = 3;
  int vec_records_size() const;
  private:
  int _internal_vec_records_size() const;
  public:
  void clear_vec_records();
  ::pb::db::DB_Record* mutable_vec_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >*
      mutable_vec_records();
  private:
  const ::pb::db::DB_Record& _internal_vec_records(int index) const;
  ::pb::db::DB_Record* _internal_add_vec_records();
  public:
  const ::pb::db::DB_Record& vec_records(int index) const;
  ::pb::db::DB_Record* add_vec_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >&
      vec_records() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id_table = 1;
  void clear_id_table();
  uint32_t id_table() const;
  void set_id_table(uint32_t value);
  private:
  uint32_t _internal_id_table() const;
  void _internal_set_id_table(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_Recordset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record > vec_records_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t id_table_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Record_OP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Record_OP) */ {
 public:
  inline DB_Record_OP() : DB_Record_OP(nullptr) {}
  ~DB_Record_OP() override;
  explicit PROTOBUF_CONSTEXPR DB_Record_OP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Record_OP(const DB_Record_OP& from);
  DB_Record_OP(DB_Record_OP&& from) noexcept
    : DB_Record_OP() {
    *this = ::std::move(from);
  }

  inline DB_Record_OP& operator=(const DB_Record_OP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Record_OP& operator=(DB_Record_OP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Record_OP& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Record_OP* internal_default_instance() {
    return reinterpret_cast<const DB_Record_OP*>(
               &_DB_Record_OP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DB_Record_OP& a, DB_Record_OP& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Record_OP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Record_OP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Record_OP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Record_OP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Record_OP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Record_OP& from) {
    DB_Record_OP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Record_OP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Record_OP";
  }
  protected:
  explicit DB_Record_OP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DB_Record_OP_Action Action;
  static constexpr Action UPDATE =
    DB_Record_OP_Action_UPDATE;
  static constexpr Action NEW =
    DB_Record_OP_Action_NEW;
  static constexpr Action REMOVE =
    DB_Record_OP_Action_REMOVE;
  static inline bool Action_IsValid(int value) {
    return DB_Record_OP_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    DB_Record_OP_Action_Action_MIN;
  static constexpr Action Action_MAX =
    DB_Record_OP_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    DB_Record_OP_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return DB_Record_OP_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return DB_Record_OP_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return DB_Record_OP_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRecordFieldNumber = 4,
    kActionFieldNumber = 1,
    kTblIdFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pb.db.DB_Record record = 4;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::pb::db::DB_Record& record() const;
  PROTOBUF_NODISCARD ::pb::db::DB_Record* release_record();
  ::pb::db::DB_Record* mutable_record();
  void set_allocated_record(::pb::db::DB_Record* record);
  private:
  const ::pb::db::DB_Record& _internal_record() const;
  ::pb::db::DB_Record* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::pb::db::DB_Record* record);
  ::pb::db::DB_Record* unsafe_arena_release_record();

  // .pb.db.DB_Record_OP.Action action = 1;
  void clear_action();
  ::pb::db::DB_Record_OP_Action action() const;
  void set_action(::pb::db::DB_Record_OP_Action value);
  private:
  ::pb::db::DB_Record_OP_Action _internal_action() const;
  void _internal_set_action(::pb::db::DB_Record_OP_Action value);
  public:

  // uint32 tbl_id = 3;
  void clear_tbl_id();
  uint32_t tbl_id() const;
  void set_tbl_id(uint32_t value);
  private:
  uint32_t _internal_tbl_id() const;
  void _internal_set_tbl_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_Record_OP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::pb::db::DB_Record* record_;
    int action_;
    uint32_t tbl_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class User_DB_Record_OPS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.User_DB_Record_OPS) */ {
 public:
  inline User_DB_Record_OPS() : User_DB_Record_OPS(nullptr) {}
  ~User_DB_Record_OPS() override;
  explicit PROTOBUF_CONSTEXPR User_DB_Record_OPS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_DB_Record_OPS(const User_DB_Record_OPS& from);
  User_DB_Record_OPS(User_DB_Record_OPS&& from) noexcept
    : User_DB_Record_OPS() {
    *this = ::std::move(from);
  }

  inline User_DB_Record_OPS& operator=(const User_DB_Record_OPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_DB_Record_OPS& operator=(User_DB_Record_OPS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_DB_Record_OPS& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_DB_Record_OPS* internal_default_instance() {
    return reinterpret_cast<const User_DB_Record_OPS*>(
               &_User_DB_Record_OPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(User_DB_Record_OPS& a, User_DB_Record_OPS& b) {
    a.Swap(&b);
  }
  inline void Swap(User_DB_Record_OPS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_DB_Record_OPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_DB_Record_OPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_DB_Record_OPS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_DB_Record_OPS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User_DB_Record_OPS& from) {
    User_DB_Record_OPS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_DB_Record_OPS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.User_DB_Record_OPS";
  }
  protected:
  explicit User_DB_Record_OPS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordOpsFieldNumber = 1,
  };
  // repeated .pb.db.DB_Record_OP record_ops = 1;
  int record_ops_size() const;
  private:
  int _internal_record_ops_size() const;
  public:
  void clear_record_ops();
  ::pb::db::DB_Record_OP* mutable_record_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record_OP >*
      mutable_record_ops();
  private:
  const ::pb::db::DB_Record_OP& _internal_record_ops(int index) const;
  ::pb::db::DB_Record_OP* _internal_add_record_ops();
  public:
  const ::pb::db::DB_Record_OP& record_ops(int index) const;
  ::pb::db::DB_Record_OP* add_record_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record_OP >&
      record_ops() const;

  // @@protoc_insertion_point(class_scope:pb.db.User_DB_Record_OPS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record_OP > record_ops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class User_DB_Recordset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.User_DB_Recordset) */ {
 public:
  inline User_DB_Recordset() : User_DB_Recordset(nullptr) {}
  ~User_DB_Recordset() override;
  explicit PROTOBUF_CONSTEXPR User_DB_Recordset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_DB_Recordset(const User_DB_Recordset& from);
  User_DB_Recordset(User_DB_Recordset&& from) noexcept
    : User_DB_Recordset() {
    *this = ::std::move(from);
  }

  inline User_DB_Recordset& operator=(const User_DB_Recordset& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_DB_Recordset& operator=(User_DB_Recordset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_DB_Recordset& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_DB_Recordset* internal_default_instance() {
    return reinterpret_cast<const User_DB_Recordset*>(
               &_User_DB_Recordset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(User_DB_Recordset& a, User_DB_Recordset& b) {
    a.Swap(&b);
  }
  inline void Swap(User_DB_Recordset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_DB_Recordset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_DB_Recordset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_DB_Recordset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_DB_Recordset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User_DB_Recordset& from) {
    User_DB_Recordset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_DB_Recordset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.User_DB_Recordset";
  }
  protected:
  explicit User_DB_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSetFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // .pb.db.DB_Recordset data_set = 3;
  bool has_data_set() const;
  private:
  bool _internal_has_data_set() const;
  public:
  void clear_data_set();
  const ::pb::db::DB_Recordset& data_set() const;
  PROTOBUF_NODISCARD ::pb::db::DB_Recordset* release_data_set();
  ::pb::db::DB_Recordset* mutable_data_set();
  void set_allocated_data_set(::pb::db::DB_Recordset* data_set);
  private:
  const ::pb::db::DB_Recordset& _internal_data_set() const;
  ::pb::db::DB_Recordset* _internal_mutable_data_set();
  public:
  void unsafe_arena_set_allocated_data_set(
      ::pb::db::DB_Recordset* data_set);
  ::pb::db::DB_Recordset* unsafe_arena_release_data_set();

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // uint32 game_id = 2;
  void clear_game_id();
  uint32_t game_id() const;
  void set_game_id(uint32_t value);
  private:
  uint32_t _internal_game_id() const;
  void _internal_set_game_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.User_DB_Recordset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::pb::db::DB_Recordset* data_set_;
    int64_t user_id_;
    uint32_t game_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class User_DB_Recordset_Ext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.User_DB_Recordset_Ext) */ {
 public:
  inline User_DB_Recordset_Ext() : User_DB_Recordset_Ext(nullptr) {}
  ~User_DB_Recordset_Ext() override;
  explicit PROTOBUF_CONSTEXPR User_DB_Recordset_Ext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_DB_Recordset_Ext(const User_DB_Recordset_Ext& from);
  User_DB_Recordset_Ext(User_DB_Recordset_Ext&& from) noexcept
    : User_DB_Recordset_Ext() {
    *this = ::std::move(from);
  }

  inline User_DB_Recordset_Ext& operator=(const User_DB_Recordset_Ext& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_DB_Recordset_Ext& operator=(User_DB_Recordset_Ext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_DB_Recordset_Ext& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_DB_Recordset_Ext* internal_default_instance() {
    return reinterpret_cast<const User_DB_Recordset_Ext*>(
               &_User_DB_Recordset_Ext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(User_DB_Recordset_Ext& a, User_DB_Recordset_Ext& b) {
    a.Swap(&b);
  }
  inline void Swap(User_DB_Recordset_Ext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_DB_Recordset_Ext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_DB_Recordset_Ext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_DB_Recordset_Ext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_DB_Recordset_Ext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User_DB_Recordset_Ext& from) {
    User_DB_Recordset_Ext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_DB_Recordset_Ext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.User_DB_Recordset_Ext";
  }
  protected:
  explicit User_DB_Recordset_Ext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSetFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // .pb.db.DB_Recordset data_set = 2;
  bool has_data_set() const;
  private:
  bool _internal_has_data_set() const;
  public:
  void clear_data_set();
  const ::pb::db::DB_Recordset& data_set() const;
  PROTOBUF_NODISCARD ::pb::db::DB_Recordset* release_data_set();
  ::pb::db::DB_Recordset* mutable_data_set();
  void set_allocated_data_set(::pb::db::DB_Recordset* data_set);
  private:
  const ::pb::db::DB_Recordset& _internal_data_set() const;
  ::pb::db::DB_Recordset* _internal_mutable_data_set();
  public:
  void unsafe_arena_set_allocated_data_set(
      ::pb::db::DB_Recordset* data_set);
  ::pb::db::DB_Recordset* unsafe_arena_release_data_set();

  // .pb.db.E_DB_Cmd cmd = 1;
  void clear_cmd();
  ::pb::db::E_DB_Cmd cmd() const;
  void set_cmd(::pb::db::E_DB_Cmd value);
  private:
  ::pb::db::E_DB_Cmd _internal_cmd() const;
  void _internal_set_cmd(::pb::db::E_DB_Cmd value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.User_DB_Recordset_Ext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::pb::db::DB_Recordset* data_set_;
    int cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_FieldMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_FieldMeta) */ {
 public:
  inline DB_FieldMeta() : DB_FieldMeta(nullptr) {}
  ~DB_FieldMeta() override;
  explicit PROTOBUF_CONSTEXPR DB_FieldMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_FieldMeta(const DB_FieldMeta& from);
  DB_FieldMeta(DB_FieldMeta&& from) noexcept
    : DB_FieldMeta() {
    *this = ::std::move(from);
  }

  inline DB_FieldMeta& operator=(const DB_FieldMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_FieldMeta& operator=(DB_FieldMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_FieldMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_FieldMeta* internal_default_instance() {
    return reinterpret_cast<const DB_FieldMeta*>(
               &_DB_FieldMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DB_FieldMeta& a, DB_FieldMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_FieldMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_FieldMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_FieldMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_FieldMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_FieldMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_FieldMeta& from) {
    DB_FieldMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_FieldMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_FieldMeta";
  }
  protected:
  explicit DB_FieldMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAttrFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 attr = 3;
  void clear_attr();
  uint32_t attr() const;
  void set_attr(uint32_t value);
  private:
  uint32_t _internal_attr() const;
  void _internal_set_attr(uint32_t value);
  public:

  // uint32 len = 4;
  void clear_len();
  uint32_t len() const;
  void set_len(uint32_t value);
  private:
  uint32_t _internal_len() const;
  void _internal_set_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_FieldMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t type_;
    uint32_t attr_;
    uint32_t len_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_TableMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_TableMeta) */ {
 public:
  inline DB_TableMeta() : DB_TableMeta(nullptr) {}
  ~DB_TableMeta() override;
  explicit PROTOBUF_CONSTEXPR DB_TableMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_TableMeta(const DB_TableMeta& from);
  DB_TableMeta(DB_TableMeta&& from) noexcept
    : DB_TableMeta() {
    *this = ::std::move(from);
  }

  inline DB_TableMeta& operator=(const DB_TableMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_TableMeta& operator=(DB_TableMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_TableMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_TableMeta* internal_default_instance() {
    return reinterpret_cast<const DB_TableMeta*>(
               &_DB_TableMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DB_TableMeta& a, DB_TableMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_TableMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_TableMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_TableMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_TableMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_TableMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_TableMeta& from) {
    DB_TableMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_TableMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_TableMeta";
  }
  protected:
  explicit DB_TableMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldsFieldNumber = 3,
    kNameFieldNumber = 1,
    kTblIdFieldNumber = 2,
  };
  // repeated .pb.db.DB_FieldMeta vec_fields = 3;
  int vec_fields_size() const;
  private:
  int _internal_vec_fields_size() const;
  public:
  void clear_vec_fields();
  ::pb::db::DB_FieldMeta* mutable_vec_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_FieldMeta >*
      mutable_vec_fields();
  private:
  const ::pb::db::DB_FieldMeta& _internal_vec_fields(int index) const;
  ::pb::db::DB_FieldMeta* _internal_add_vec_fields();
  public:
  const ::pb::db::DB_FieldMeta& vec_fields(int index) const;
  ::pb::db::DB_FieldMeta* add_vec_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_FieldMeta >&
      vec_fields() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 tbl_id = 2;
  void clear_tbl_id();
  uint32_t tbl_id() const;
  void set_tbl_id(uint32_t value);
  private:
  uint32_t _internal_tbl_id() const;
  void _internal_set_tbl_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_TableMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_FieldMeta > vec_fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t tbl_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Metas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Metas) */ {
 public:
  inline DB_Metas() : DB_Metas(nullptr) {}
  ~DB_Metas() override;
  explicit PROTOBUF_CONSTEXPR DB_Metas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Metas(const DB_Metas& from);
  DB_Metas(DB_Metas&& from) noexcept
    : DB_Metas() {
    *this = ::std::move(from);
  }

  inline DB_Metas& operator=(const DB_Metas& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Metas& operator=(DB_Metas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Metas& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Metas* internal_default_instance() {
    return reinterpret_cast<const DB_Metas*>(
               &_DB_Metas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DB_Metas& a, DB_Metas& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Metas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Metas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Metas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Metas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Metas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Metas& from) {
    DB_Metas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Metas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Metas";
  }
  protected:
  explicit DB_Metas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecTablesFieldNumber = 1,
  };
  // repeated .pb.db.DB_TableMeta vec_tables = 1;
  int vec_tables_size() const;
  private:
  int _internal_vec_tables_size() const;
  public:
  void clear_vec_tables();
  ::pb::db::DB_TableMeta* mutable_vec_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_TableMeta >*
      mutable_vec_tables();
  private:
  const ::pb::db::DB_TableMeta& _internal_vec_tables(int index) const;
  ::pb::db::DB_TableMeta* _internal_add_vec_tables();
  public:
  const ::pb::db::DB_TableMeta& vec_tables(int index) const;
  ::pb::db::DB_TableMeta* add_vec_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_TableMeta >&
      vec_tables() const;

  // @@protoc_insertion_point(class_scope:pb.db.DB_Metas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_TableMeta > vec_tables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Update final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Update) */ {
 public:
  inline DB_Update() : DB_Update(nullptr) {}
  ~DB_Update() override;
  explicit PROTOBUF_CONSTEXPR DB_Update(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Update(const DB_Update& from);
  DB_Update(DB_Update&& from) noexcept
    : DB_Update() {
    *this = ::std::move(from);
  }

  inline DB_Update& operator=(const DB_Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Update& operator=(DB_Update&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Update& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Update* internal_default_instance() {
    return reinterpret_cast<const DB_Update*>(
               &_DB_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DB_Update& a, DB_Update& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Update* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Update* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Update>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Update& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Update& from) {
    DB_Update::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Update* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Update";
  }
  protected:
  explicit DB_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSetFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // .pb.db.DB_Recordset data_set = 2;
  bool has_data_set() const;
  private:
  bool _internal_has_data_set() const;
  public:
  void clear_data_set();
  const ::pb::db::DB_Recordset& data_set() const;
  PROTOBUF_NODISCARD ::pb::db::DB_Recordset* release_data_set();
  ::pb::db::DB_Recordset* mutable_data_set();
  void set_allocated_data_set(::pb::db::DB_Recordset* data_set);
  private:
  const ::pb::db::DB_Recordset& _internal_data_set() const;
  ::pb::db::DB_Recordset* _internal_mutable_data_set();
  public:
  void unsafe_arena_set_allocated_data_set(
      ::pb::db::DB_Recordset* data_set);
  ::pb::db::DB_Recordset* unsafe_arena_release_data_set();

  // .pb.db.E_DB_Cmd cmd = 1;
  void clear_cmd();
  ::pb::db::E_DB_Cmd cmd() const;
  void set_cmd(::pb::db::E_DB_Cmd value);
  private:
  ::pb::db::E_DB_Cmd _internal_cmd() const;
  void _internal_set_cmd(::pb::db::E_DB_Cmd value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::pb::db::DB_Recordset* data_set_;
    int cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Delete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Delete) */ {
 public:
  inline DB_Delete() : DB_Delete(nullptr) {}
  ~DB_Delete() override;
  explicit PROTOBUF_CONSTEXPR DB_Delete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Delete(const DB_Delete& from);
  DB_Delete(DB_Delete&& from) noexcept
    : DB_Delete() {
    *this = ::std::move(from);
  }

  inline DB_Delete& operator=(const DB_Delete& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Delete& operator=(DB_Delete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Delete& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Delete* internal_default_instance() {
    return reinterpret_cast<const DB_Delete*>(
               &_DB_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DB_Delete& a, DB_Delete& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Delete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Delete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Delete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Delete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Delete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Delete& from) {
    DB_Delete::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Delete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Delete";
  }
  protected:
  explicit DB_Delete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecIdsFieldNumber = 3,
    kCmdFieldNumber = 1,
    kTblIdFieldNumber = 2,
  };
  // repeated uint64 vec_ids = 3;
  int vec_ids_size() const;
  private:
  int _internal_vec_ids_size() const;
  public:
  void clear_vec_ids();
  private:
  uint64_t _internal_vec_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_vec_ids() const;
  void _internal_add_vec_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_vec_ids();
  public:
  uint64_t vec_ids(int index) const;
  void set_vec_ids(int index, uint64_t value);
  void add_vec_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      vec_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_vec_ids();

  // .pb.db.E_DB_Cmd cmd = 1;
  void clear_cmd();
  ::pb::db::E_DB_Cmd cmd() const;
  void set_cmd(::pb::db::E_DB_Cmd value);
  private:
  ::pb::db::E_DB_Cmd _internal_cmd() const;
  void _internal_set_cmd(::pb::db::E_DB_Cmd value);
  public:

  // uint32 tbl_id = 2;
  void clear_tbl_id();
  uint32_t tbl_id() const;
  void set_tbl_id(uint32_t value);
  private:
  uint32_t _internal_tbl_id() const;
  void _internal_set_tbl_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_Delete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > vec_ids_;
    mutable std::atomic<int> _vec_ids_cached_byte_size_;
    int cmd_;
    uint32_t tbl_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class Key_Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.Key_Value) */ {
 public:
  inline Key_Value() : Key_Value(nullptr) {}
  ~Key_Value() override;
  explicit PROTOBUF_CONSTEXPR Key_Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Key_Value(const Key_Value& from);
  Key_Value(Key_Value&& from) noexcept
    : Key_Value() {
    *this = ::std::move(from);
  }

  inline Key_Value& operator=(const Key_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key_Value& operator=(Key_Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Key_Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Key_Value* internal_default_instance() {
    return reinterpret_cast<const Key_Value*>(
               &_Key_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Key_Value& a, Key_Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Key_Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Key_Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Key_Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Key_Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Key_Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Key_Value& from) {
    Key_Value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key_Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.Key_Value";
  }
  protected:
  explicit Key_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // int64 value = 2;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // uint32 key = 1;
  void clear_key();
  uint32_t key() const;
  void set_key(uint32_t value);
  private:
  uint32_t _internal_key() const;
  void _internal_set_key(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.Key_Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t value_;
    uint32_t key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class EffectProp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.EffectProp) */ {
 public:
  inline EffectProp() : EffectProp(nullptr) {}
  ~EffectProp() override;
  explicit PROTOBUF_CONSTEXPR EffectProp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EffectProp(const EffectProp& from);
  EffectProp(EffectProp&& from) noexcept
    : EffectProp() {
    *this = ::std::move(from);
  }

  inline EffectProp& operator=(const EffectProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectProp& operator=(EffectProp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EffectProp& default_instance() {
    return *internal_default_instance();
  }
  static inline const EffectProp* internal_default_instance() {
    return reinterpret_cast<const EffectProp*>(
               &_EffectProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EffectProp& a, EffectProp& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectProp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EffectProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EffectProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EffectProp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EffectProp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EffectProp& from) {
    EffectProp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectProp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.EffectProp";
  }
  protected:
  explicit EffectProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecEffectFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // repeated .pb.db.Key_Value vec_effect = 2;
  int vec_effect_size() const;
  private:
  int _internal_vec_effect_size() const;
  public:
  void clear_vec_effect();
  ::pb::db::Key_Value* mutable_vec_effect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::Key_Value >*
      mutable_vec_effect();
  private:
  const ::pb::db::Key_Value& _internal_vec_effect(int index) const;
  ::pb::db::Key_Value* _internal_add_vec_effect();
  public:
  const ::pb::db::Key_Value& vec_effect(int index) const;
  ::pb::db::Key_Value* add_vec_effect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::Key_Value >&
      vec_effect() const;

  // uint32 range = 1;
  void clear_range();
  uint32_t range() const;
  void set_range(uint32_t value);
  private:
  uint32_t _internal_range() const;
  void _internal_set_range(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.EffectProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::Key_Value > vec_effect_;
    uint32_t range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_EffectProp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_EffectProp) */ {
 public:
  inline DB_EffectProp() : DB_EffectProp(nullptr) {}
  ~DB_EffectProp() override;
  explicit PROTOBUF_CONSTEXPR DB_EffectProp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_EffectProp(const DB_EffectProp& from);
  DB_EffectProp(DB_EffectProp&& from) noexcept
    : DB_EffectProp() {
    *this = ::std::move(from);
  }

  inline DB_EffectProp& operator=(const DB_EffectProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_EffectProp& operator=(DB_EffectProp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_EffectProp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_EffectProp* internal_default_instance() {
    return reinterpret_cast<const DB_EffectProp*>(
               &_DB_EffectProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DB_EffectProp& a, DB_EffectProp& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_EffectProp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_EffectProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_EffectProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_EffectProp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_EffectProp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_EffectProp& from) {
    DB_EffectProp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_EffectProp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_EffectProp";
  }
  protected:
  explicit DB_EffectProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecPropFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // repeated .pb.db.EffectProp vec_prop = 2;
  int vec_prop_size() const;
  private:
  int _internal_vec_prop_size() const;
  public:
  void clear_vec_prop();
  ::pb::db::EffectProp* mutable_vec_prop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::EffectProp >*
      mutable_vec_prop();
  private:
  const ::pb::db::EffectProp& _internal_vec_prop(int index) const;
  ::pb::db::EffectProp* _internal_add_vec_prop();
  public:
  const ::pb::db::EffectProp& vec_prop(int index) const;
  ::pb::db::EffectProp* add_vec_prop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::EffectProp >&
      vec_prop() const;

  // .pb.db.E_DB_Cmd cmd = 1;
  void clear_cmd();
  ::pb::db::E_DB_Cmd cmd() const;
  void set_cmd(::pb::db::E_DB_Cmd value);
  private:
  ::pb::db::E_DB_Cmd _internal_cmd() const;
  void _internal_set_cmd(::pb::db::E_DB_Cmd value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_EffectProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::EffectProp > vec_prop_;
    int cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_Add_Recordset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_Add_Recordset) */ {
 public:
  inline DB_Add_Recordset() : DB_Add_Recordset(nullptr) {}
  ~DB_Add_Recordset() override;
  explicit PROTOBUF_CONSTEXPR DB_Add_Recordset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_Add_Recordset(const DB_Add_Recordset& from);
  DB_Add_Recordset(DB_Add_Recordset&& from) noexcept
    : DB_Add_Recordset() {
    *this = ::std::move(from);
  }

  inline DB_Add_Recordset& operator=(const DB_Add_Recordset& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_Add_Recordset& operator=(DB_Add_Recordset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_Add_Recordset& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_Add_Recordset* internal_default_instance() {
    return reinterpret_cast<const DB_Add_Recordset*>(
               &_DB_Add_Recordset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DB_Add_Recordset& a, DB_Add_Recordset& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_Add_Recordset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_Add_Recordset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_Add_Recordset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_Add_Recordset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_Add_Recordset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_Add_Recordset& from) {
    DB_Add_Recordset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_Add_Recordset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_Add_Recordset";
  }
  protected:
  explicit DB_Add_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kRecordFieldNumber = 5,
    kTargetIdFieldNumber = 1,
    kTargetGameIdFieldNumber = 2,
    kIdTableFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pb.db.DB_Record record = 5;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::pb::db::DB_Record& record() const;
  PROTOBUF_NODISCARD ::pb::db::DB_Record* release_record();
  ::pb::db::DB_Record* mutable_record();
  void set_allocated_record(::pb::db::DB_Record* record);
  private:
  const ::pb::db::DB_Record& _internal_record() const;
  ::pb::db::DB_Record* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::pb::db::DB_Record* record);
  ::pb::db::DB_Record* unsafe_arena_release_record();

  // int64 target_id = 1;
  void clear_target_id();
  int64_t target_id() const;
  void set_target_id(int64_t value);
  private:
  int64_t _internal_target_id() const;
  void _internal_set_target_id(int64_t value);
  public:

  // uint32 target_game_id = 2;
  void clear_target_game_id();
  uint32_t target_game_id() const;
  void set_target_game_id(uint32_t value);
  private:
  uint32_t _internal_target_game_id() const;
  void _internal_set_target_game_id(uint32_t value);
  public:

  // uint32 id_table = 3;
  void clear_id_table();
  uint32_t id_table() const;
  void set_id_table(uint32_t value);
  private:
  uint32_t _internal_id_table() const;
  void _internal_set_id_table(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_Add_Recordset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::pb::db::DB_Record* record_;
    int64_t target_id_;
    uint32_t target_game_id_;
    uint32_t id_table_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class DB_DataFlag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.DB_DataFlag) */ {
 public:
  inline DB_DataFlag() : DB_DataFlag(nullptr) {}
  ~DB_DataFlag() override;
  explicit PROTOBUF_CONSTEXPR DB_DataFlag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB_DataFlag(const DB_DataFlag& from);
  DB_DataFlag(DB_DataFlag&& from) noexcept
    : DB_DataFlag() {
    *this = ::std::move(from);
  }

  inline DB_DataFlag& operator=(const DB_DataFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_DataFlag& operator=(DB_DataFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB_DataFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB_DataFlag* internal_default_instance() {
    return reinterpret_cast<const DB_DataFlag*>(
               &_DB_DataFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DB_DataFlag& a, DB_DataFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_DataFlag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB_DataFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB_DataFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB_DataFlag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB_DataFlag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB_DataFlag& from) {
    DB_DataFlag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_DataFlag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.DB_DataFlag";
  }
  protected:
  explicit DB_DataFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // .pb.db.E_DB_Cmd cmd = 1;
  void clear_cmd();
  ::pb::db::E_DB_Cmd cmd() const;
  void set_cmd(::pb::db::E_DB_Cmd value);
  private:
  ::pb::db::E_DB_Cmd _internal_cmd() const;
  void _internal_set_cmd(::pb::db::E_DB_Cmd value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.DB_DataFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t user_id_;
    int cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class Query_Recordset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.db.Query_Recordset) */ {
 public:
  inline Query_Recordset() : Query_Recordset(nullptr) {}
  ~Query_Recordset() override;
  explicit PROTOBUF_CONSTEXPR Query_Recordset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_Recordset(const Query_Recordset& from);
  Query_Recordset(Query_Recordset&& from) noexcept
    : Query_Recordset() {
    *this = ::std::move(from);
  }

  inline Query_Recordset& operator=(const Query_Recordset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_Recordset& operator=(Query_Recordset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_Recordset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query_Recordset* internal_default_instance() {
    return reinterpret_cast<const Query_Recordset*>(
               &_Query_Recordset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Query_Recordset& a, Query_Recordset& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_Recordset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_Recordset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_Recordset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_Recordset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_Recordset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_Recordset& from) {
    Query_Recordset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_Recordset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.db.Query_Recordset";
  }
  protected:
  explicit Query_Recordset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldListFieldNumber = 3,
    kKeyListFieldNumber = 4,
    kVecRecordsFieldNumber = 5,
    kCmdFieldNumber = 1,
    kIdTableFieldNumber = 2,
  };
  // repeated uint32 field_list = 3;
  int field_list_size() const;
  private:
  int _internal_field_list_size() const;
  public:
  void clear_field_list();
  private:
  uint32_t _internal_field_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_field_list() const;
  void _internal_add_field_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_field_list();
  public:
  uint32_t field_list(int index) const;
  void set_field_list(int index, uint32_t value);
  void add_field_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      field_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_field_list();

  // repeated uint32 key_list = 4;
  int key_list_size() const;
  private:
  int _internal_key_list_size() const;
  public:
  void clear_key_list();
  private:
  uint32_t _internal_key_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_key_list() const;
  void _internal_add_key_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_key_list();
  public:
  uint32_t key_list(int index) const;
  void set_key_list(int index, uint32_t value);
  void add_key_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      key_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_key_list();

  // repeated .pb.db.DB_Record vec_records = 5;
  int vec_records_size() const;
  private:
  int _internal_vec_records_size() const;
  public:
  void clear_vec_records();
  ::pb::db::DB_Record* mutable_vec_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >*
      mutable_vec_records();
  private:
  const ::pb::db::DB_Record& _internal_vec_records(int index) const;
  ::pb::db::DB_Record* _internal_add_vec_records();
  public:
  const ::pb::db::DB_Record& vec_records(int index) const;
  ::pb::db::DB_Record* add_vec_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >&
      vec_records() const;

  // .pb.db.E_DB_Cmd cmd = 1;
  void clear_cmd();
  ::pb::db::E_DB_Cmd cmd() const;
  void set_cmd(::pb::db::E_DB_Cmd value);
  private:
  ::pb::db::E_DB_Cmd _internal_cmd() const;
  void _internal_set_cmd(::pb::db::E_DB_Cmd value);
  public:

  // uint32 id_table = 2;
  void clear_id_table();
  uint32_t id_table() const;
  void set_id_table(uint32_t value);
  private:
  uint32_t _internal_id_table() const;
  void _internal_set_id_table(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.db.Query_Recordset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > field_list_;
    mutable std::atomic<int> _field_list_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > key_list_;
    mutable std::atomic<int> _key_list_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record > vec_records_;
    int cmd_;
    uint32_t id_table_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DB_OP_Condition

// uint32 idx = 1;
inline void DB_OP_Condition::clear_idx() {
  _impl_.idx_ = 0u;
}
inline uint32_t DB_OP_Condition::_internal_idx() const {
  return _impl_.idx_;
}
inline uint32_t DB_OP_Condition::idx() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_Condition.idx)
  return _internal_idx();
}
inline void DB_OP_Condition::_internal_set_idx(uint32_t value) {
  
  _impl_.idx_ = value;
}
inline void DB_OP_Condition::set_idx(uint32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_Condition.idx)
}

// uint32 op = 2;
inline void DB_OP_Condition::clear_op() {
  _impl_.op_ = 0u;
}
inline uint32_t DB_OP_Condition::_internal_op() const {
  return _impl_.op_;
}
inline uint32_t DB_OP_Condition::op() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_Condition.op)
  return _internal_op();
}
inline void DB_OP_Condition::_internal_set_op(uint32_t value) {
  
  _impl_.op_ = value;
}
inline void DB_OP_Condition::set_op(uint32_t value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_Condition.op)
}

// string value = 3;
inline void DB_OP_Condition::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& DB_OP_Condition::value() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_Condition.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_OP_Condition::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_Condition.value)
}
inline std::string* DB_OP_Condition::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_OP_Condition.value)
  return _s;
}
inline const std::string& DB_OP_Condition::_internal_value() const {
  return _impl_.value_.Get();
}
inline void DB_OP_Condition::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_OP_Condition::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_OP_Condition::release_value() {
  // @@protoc_insertion_point(field_release:pb.db.DB_OP_Condition.value)
  return _impl_.value_.Release();
}
inline void DB_OP_Condition::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_OP_Condition.value)
}

// int64 i64val = 4;
inline void DB_OP_Condition::clear_i64val() {
  _impl_.i64val_ = int64_t{0};
}
inline int64_t DB_OP_Condition::_internal_i64val() const {
  return _impl_.i64val_;
}
inline int64_t DB_OP_Condition::i64val() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_Condition.i64val)
  return _internal_i64val();
}
inline void DB_OP_Condition::_internal_set_i64val(int64_t value) {
  
  _impl_.i64val_ = value;
}
inline void DB_OP_Condition::set_i64val(int64_t value) {
  _internal_set_i64val(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_Condition.i64val)
}

// uint32 next_logic_op = 5;
inline void DB_OP_Condition::clear_next_logic_op() {
  _impl_.next_logic_op_ = 0u;
}
inline uint32_t DB_OP_Condition::_internal_next_logic_op() const {
  return _impl_.next_logic_op_;
}
inline uint32_t DB_OP_Condition::next_logic_op() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_Condition.next_logic_op)
  return _internal_next_logic_op();
}
inline void DB_OP_Condition::_internal_set_next_logic_op(uint32_t value) {
  
  _impl_.next_logic_op_ = value;
}
inline void DB_OP_Condition::set_next_logic_op(uint32_t value) {
  _internal_set_next_logic_op(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_Condition.next_logic_op)
}

// -------------------------------------------------------------------

// DB_OP_User

// .pb.db.DB_OP_User.Action action = 1;
inline void DB_OP_User::clear_action() {
  _impl_.action_ = 0;
}
inline ::pb::db::DB_OP_User_Action DB_OP_User::_internal_action() const {
  return static_cast< ::pb::db::DB_OP_User_Action >(_impl_.action_);
}
inline ::pb::db::DB_OP_User_Action DB_OP_User::action() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_User.action)
  return _internal_action();
}
inline void DB_OP_User::_internal_set_action(::pb::db::DB_OP_User_Action value) {
  
  _impl_.action_ = value;
}
inline void DB_OP_User::set_action(::pb::db::DB_OP_User_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_User.action)
}

// .pb.db.DB_OP_Condition user_id = 2;
inline bool DB_OP_User::_internal_has_user_id() const {
  return this != internal_default_instance() && _impl_.user_id_ != nullptr;
}
inline bool DB_OP_User::has_user_id() const {
  return _internal_has_user_id();
}
inline void DB_OP_User::clear_user_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_id_ != nullptr) {
    delete _impl_.user_id_;
  }
  _impl_.user_id_ = nullptr;
}
inline const ::pb::db::DB_OP_Condition& DB_OP_User::_internal_user_id() const {
  const ::pb::db::DB_OP_Condition* p = _impl_.user_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::db::DB_OP_Condition&>(
      ::pb::db::_DB_OP_Condition_default_instance_);
}
inline const ::pb::db::DB_OP_Condition& DB_OP_User::user_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_User.user_id)
  return _internal_user_id();
}
inline void DB_OP_User::unsafe_arena_set_allocated_user_id(
    ::pb::db::DB_OP_Condition* user_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_id_);
  }
  _impl_.user_id_ = user_id;
  if (user_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.db.DB_OP_User.user_id)
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::release_user_id() {
  
  ::pb::db::DB_OP_Condition* temp = _impl_.user_id_;
  _impl_.user_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_release:pb.db.DB_OP_User.user_id)
  
  ::pb::db::DB_OP_Condition* temp = _impl_.user_id_;
  _impl_.user_id_ = nullptr;
  return temp;
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::_internal_mutable_user_id() {
  
  if (_impl_.user_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::db::DB_OP_Condition>(GetArenaForAllocation());
    _impl_.user_id_ = p;
  }
  return _impl_.user_id_;
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::mutable_user_id() {
  ::pb::db::DB_OP_Condition* _msg = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_OP_User.user_id)
  return _msg;
}
inline void DB_OP_User::set_allocated_user_id(::pb::db::DB_OP_Condition* user_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_id_;
  }
  if (user_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_id);
    if (message_arena != submessage_arena) {
      user_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_id_ = user_id;
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_OP_User.user_id)
}

// .pb.db.DB_OP_Condition game_id = 3;
inline bool DB_OP_User::_internal_has_game_id() const {
  return this != internal_default_instance() && _impl_.game_id_ != nullptr;
}
inline bool DB_OP_User::has_game_id() const {
  return _internal_has_game_id();
}
inline void DB_OP_User::clear_game_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_id_ != nullptr) {
    delete _impl_.game_id_;
  }
  _impl_.game_id_ = nullptr;
}
inline const ::pb::db::DB_OP_Condition& DB_OP_User::_internal_game_id() const {
  const ::pb::db::DB_OP_Condition* p = _impl_.game_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::db::DB_OP_Condition&>(
      ::pb::db::_DB_OP_Condition_default_instance_);
}
inline const ::pb::db::DB_OP_Condition& DB_OP_User::game_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_User.game_id)
  return _internal_game_id();
}
inline void DB_OP_User::unsafe_arena_set_allocated_game_id(
    ::pb::db::DB_OP_Condition* game_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_id_);
  }
  _impl_.game_id_ = game_id;
  if (game_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.db.DB_OP_User.game_id)
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::release_game_id() {
  
  ::pb::db::DB_OP_Condition* temp = _impl_.game_id_;
  _impl_.game_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::unsafe_arena_release_game_id() {
  // @@protoc_insertion_point(field_release:pb.db.DB_OP_User.game_id)
  
  ::pb::db::DB_OP_Condition* temp = _impl_.game_id_;
  _impl_.game_id_ = nullptr;
  return temp;
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::_internal_mutable_game_id() {
  
  if (_impl_.game_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::db::DB_OP_Condition>(GetArenaForAllocation());
    _impl_.game_id_ = p;
  }
  return _impl_.game_id_;
}
inline ::pb::db::DB_OP_Condition* DB_OP_User::mutable_game_id() {
  ::pb::db::DB_OP_Condition* _msg = _internal_mutable_game_id();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_OP_User.game_id)
  return _msg;
}
inline void DB_OP_User::set_allocated_game_id(::pb::db::DB_OP_Condition* game_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.game_id_;
  }
  if (game_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_id);
    if (message_arena != submessage_arena) {
      game_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.game_id_ = game_id;
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_OP_User.game_id)
}

// uint32 tbl_type = 4;
inline void DB_OP_User::clear_tbl_type() {
  _impl_.tbl_type_ = 0u;
}
inline uint32_t DB_OP_User::_internal_tbl_type() const {
  return _impl_.tbl_type_;
}
inline uint32_t DB_OP_User::tbl_type() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_User.tbl_type)
  return _internal_tbl_type();
}
inline void DB_OP_User::_internal_set_tbl_type(uint32_t value) {
  
  _impl_.tbl_type_ = value;
}
inline void DB_OP_User::set_tbl_type(uint32_t value) {
  _internal_set_tbl_type(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_User.tbl_type)
}

// string fail_function_name = 5;
inline void DB_OP_User::clear_fail_function_name() {
  _impl_.fail_function_name_.ClearToEmpty();
}
inline const std::string& DB_OP_User::fail_function_name() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_OP_User.fail_function_name)
  return _internal_fail_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_OP_User::set_fail_function_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fail_function_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_OP_User.fail_function_name)
}
inline std::string* DB_OP_User::mutable_fail_function_name() {
  std::string* _s = _internal_mutable_fail_function_name();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_OP_User.fail_function_name)
  return _s;
}
inline const std::string& DB_OP_User::_internal_fail_function_name() const {
  return _impl_.fail_function_name_.Get();
}
inline void DB_OP_User::_internal_set_fail_function_name(const std::string& value) {
  
  _impl_.fail_function_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_OP_User::_internal_mutable_fail_function_name() {
  
  return _impl_.fail_function_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_OP_User::release_fail_function_name() {
  // @@protoc_insertion_point(field_release:pb.db.DB_OP_User.fail_function_name)
  return _impl_.fail_function_name_.Release();
}
inline void DB_OP_User::set_allocated_fail_function_name(std::string* fail_function_name) {
  if (fail_function_name != nullptr) {
    
  } else {
    
  }
  _impl_.fail_function_name_.SetAllocated(fail_function_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fail_function_name_.IsDefault()) {
    _impl_.fail_function_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_OP_User.fail_function_name)
}

// -------------------------------------------------------------------

// Base_Cmd

// .pb.db.E_DB_Cmd cmd = 1;
inline void Base_Cmd::clear_cmd() {
  _impl_.cmd_ = 0;
}
inline ::pb::db::E_DB_Cmd Base_Cmd::_internal_cmd() const {
  return static_cast< ::pb::db::E_DB_Cmd >(_impl_.cmd_);
}
inline ::pb::db::E_DB_Cmd Base_Cmd::cmd() const {
  // @@protoc_insertion_point(field_get:pb.db.Base_Cmd.cmd)
  return _internal_cmd();
}
inline void Base_Cmd::_internal_set_cmd(::pb::db::E_DB_Cmd value) {
  
  _impl_.cmd_ = value;
}
inline void Base_Cmd::set_cmd(::pb::db::E_DB_Cmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.db.Base_Cmd.cmd)
}

// -------------------------------------------------------------------

// DB_Field

// uint32 idx = 1;
inline void DB_Field::clear_idx() {
  _impl_.idx_ = 0u;
}
inline uint32_t DB_Field::_internal_idx() const {
  return _impl_.idx_;
}
inline uint32_t DB_Field::idx() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Field.idx)
  return _internal_idx();
}
inline void DB_Field::_internal_set_idx(uint32_t value) {
  
  _impl_.idx_ = value;
}
inline void DB_Field::set_idx(uint32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Field.idx)
}

// int64 i64val = 2;
inline void DB_Field::clear_i64val() {
  _impl_.i64val_ = int64_t{0};
}
inline int64_t DB_Field::_internal_i64val() const {
  return _impl_.i64val_;
}
inline int64_t DB_Field::i64val() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Field.i64val)
  return _internal_i64val();
}
inline void DB_Field::_internal_set_i64val(int64_t value) {
  
  _impl_.i64val_ = value;
}
inline void DB_Field::set_i64val(int64_t value) {
  _internal_set_i64val(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Field.i64val)
}

// bytes strval = 3;
inline void DB_Field::clear_strval() {
  _impl_.strval_.ClearToEmpty();
}
inline const std::string& DB_Field::strval() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Field.strval)
  return _internal_strval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_Field::set_strval(ArgT0&& arg0, ArgT... args) {
 
 _impl_.strval_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_Field.strval)
}
inline std::string* DB_Field::mutable_strval() {
  std::string* _s = _internal_mutable_strval();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Field.strval)
  return _s;
}
inline const std::string& DB_Field::_internal_strval() const {
  return _impl_.strval_.Get();
}
inline void DB_Field::_internal_set_strval(const std::string& value) {
  
  _impl_.strval_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_Field::_internal_mutable_strval() {
  
  return _impl_.strval_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_Field::release_strval() {
  // @@protoc_insertion_point(field_release:pb.db.DB_Field.strval)
  return _impl_.strval_.Release();
}
inline void DB_Field::set_allocated_strval(std::string* strval) {
  if (strval != nullptr) {
    
  } else {
    
  }
  _impl_.strval_.SetAllocated(strval, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strval_.IsDefault()) {
    _impl_.strval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_Field.strval)
}

// double dval = 4;
inline void DB_Field::clear_dval() {
  _impl_.dval_ = 0;
}
inline double DB_Field::_internal_dval() const {
  return _impl_.dval_;
}
inline double DB_Field::dval() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Field.dval)
  return _internal_dval();
}
inline void DB_Field::_internal_set_dval(double value) {
  
  _impl_.dval_ = value;
}
inline void DB_Field::set_dval(double value) {
  _internal_set_dval(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Field.dval)
}

// .pb.db.E_Field_Type field_type = 5;
inline void DB_Field::clear_field_type() {
  _impl_.field_type_ = 0;
}
inline ::pb::db::E_Field_Type DB_Field::_internal_field_type() const {
  return static_cast< ::pb::db::E_Field_Type >(_impl_.field_type_);
}
inline ::pb::db::E_Field_Type DB_Field::field_type() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Field.field_type)
  return _internal_field_type();
}
inline void DB_Field::_internal_set_field_type(::pb::db::E_Field_Type value) {
  
  _impl_.field_type_ = value;
}
inline void DB_Field::set_field_type(::pb::db::E_Field_Type value) {
  _internal_set_field_type(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Field.field_type)
}

// -------------------------------------------------------------------

// DB_Record

// repeated .pb.db.DB_Field vec_fields = 1;
inline int DB_Record::_internal_vec_fields_size() const {
  return _impl_.vec_fields_.size();
}
inline int DB_Record::vec_fields_size() const {
  return _internal_vec_fields_size();
}
inline void DB_Record::clear_vec_fields() {
  _impl_.vec_fields_.Clear();
}
inline ::pb::db::DB_Field* DB_Record::mutable_vec_fields(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Record.vec_fields)
  return _impl_.vec_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Field >*
DB_Record::mutable_vec_fields() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.DB_Record.vec_fields)
  return &_impl_.vec_fields_;
}
inline const ::pb::db::DB_Field& DB_Record::_internal_vec_fields(int index) const {
  return _impl_.vec_fields_.Get(index);
}
inline const ::pb::db::DB_Field& DB_Record::vec_fields(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Record.vec_fields)
  return _internal_vec_fields(index);
}
inline ::pb::db::DB_Field* DB_Record::_internal_add_vec_fields() {
  return _impl_.vec_fields_.Add();
}
inline ::pb::db::DB_Field* DB_Record::add_vec_fields() {
  ::pb::db::DB_Field* _add = _internal_add_vec_fields();
  // @@protoc_insertion_point(field_add:pb.db.DB_Record.vec_fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Field >&
DB_Record::vec_fields() const {
  // @@protoc_insertion_point(field_list:pb.db.DB_Record.vec_fields)
  return _impl_.vec_fields_;
}

// -------------------------------------------------------------------

// DB_Recordset

// uint32 id_table = 1;
inline void DB_Recordset::clear_id_table() {
  _impl_.id_table_ = 0u;
}
inline uint32_t DB_Recordset::_internal_id_table() const {
  return _impl_.id_table_;
}
inline uint32_t DB_Recordset::id_table() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Recordset.id_table)
  return _internal_id_table();
}
inline void DB_Recordset::_internal_set_id_table(uint32_t value) {
  
  _impl_.id_table_ = value;
}
inline void DB_Recordset::set_id_table(uint32_t value) {
  _internal_set_id_table(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Recordset.id_table)
}

// string name = 2;
inline void DB_Recordset::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DB_Recordset::name() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Recordset.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_Recordset::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_Recordset.name)
}
inline std::string* DB_Recordset::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Recordset.name)
  return _s;
}
inline const std::string& DB_Recordset::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DB_Recordset::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_Recordset::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_Recordset::release_name() {
  // @@protoc_insertion_point(field_release:pb.db.DB_Recordset.name)
  return _impl_.name_.Release();
}
inline void DB_Recordset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_Recordset.name)
}

// repeated .pb.db.DB_Record vec_records = 3;
inline int DB_Recordset::_internal_vec_records_size() const {
  return _impl_.vec_records_.size();
}
inline int DB_Recordset::vec_records_size() const {
  return _internal_vec_records_size();
}
inline void DB_Recordset::clear_vec_records() {
  _impl_.vec_records_.Clear();
}
inline ::pb::db::DB_Record* DB_Recordset::mutable_vec_records(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Recordset.vec_records)
  return _impl_.vec_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >*
DB_Recordset::mutable_vec_records() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.DB_Recordset.vec_records)
  return &_impl_.vec_records_;
}
inline const ::pb::db::DB_Record& DB_Recordset::_internal_vec_records(int index) const {
  return _impl_.vec_records_.Get(index);
}
inline const ::pb::db::DB_Record& DB_Recordset::vec_records(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Recordset.vec_records)
  return _internal_vec_records(index);
}
inline ::pb::db::DB_Record* DB_Recordset::_internal_add_vec_records() {
  return _impl_.vec_records_.Add();
}
inline ::pb::db::DB_Record* DB_Recordset::add_vec_records() {
  ::pb::db::DB_Record* _add = _internal_add_vec_records();
  // @@protoc_insertion_point(field_add:pb.db.DB_Recordset.vec_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >&
DB_Recordset::vec_records() const {
  // @@protoc_insertion_point(field_list:pb.db.DB_Recordset.vec_records)
  return _impl_.vec_records_;
}

// -------------------------------------------------------------------

// DB_Record_OP

// .pb.db.DB_Record_OP.Action action = 1;
inline void DB_Record_OP::clear_action() {
  _impl_.action_ = 0;
}
inline ::pb::db::DB_Record_OP_Action DB_Record_OP::_internal_action() const {
  return static_cast< ::pb::db::DB_Record_OP_Action >(_impl_.action_);
}
inline ::pb::db::DB_Record_OP_Action DB_Record_OP::action() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Record_OP.action)
  return _internal_action();
}
inline void DB_Record_OP::_internal_set_action(::pb::db::DB_Record_OP_Action value) {
  
  _impl_.action_ = value;
}
inline void DB_Record_OP::set_action(::pb::db::DB_Record_OP_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Record_OP.action)
}

// string name = 2;
inline void DB_Record_OP::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DB_Record_OP::name() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Record_OP.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_Record_OP::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_Record_OP.name)
}
inline std::string* DB_Record_OP::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Record_OP.name)
  return _s;
}
inline const std::string& DB_Record_OP::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DB_Record_OP::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_Record_OP::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_Record_OP::release_name() {
  // @@protoc_insertion_point(field_release:pb.db.DB_Record_OP.name)
  return _impl_.name_.Release();
}
inline void DB_Record_OP::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_Record_OP.name)
}

// uint32 tbl_id = 3;
inline void DB_Record_OP::clear_tbl_id() {
  _impl_.tbl_id_ = 0u;
}
inline uint32_t DB_Record_OP::_internal_tbl_id() const {
  return _impl_.tbl_id_;
}
inline uint32_t DB_Record_OP::tbl_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Record_OP.tbl_id)
  return _internal_tbl_id();
}
inline void DB_Record_OP::_internal_set_tbl_id(uint32_t value) {
  
  _impl_.tbl_id_ = value;
}
inline void DB_Record_OP::set_tbl_id(uint32_t value) {
  _internal_set_tbl_id(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Record_OP.tbl_id)
}

// .pb.db.DB_Record record = 4;
inline bool DB_Record_OP::_internal_has_record() const {
  return this != internal_default_instance() && _impl_.record_ != nullptr;
}
inline bool DB_Record_OP::has_record() const {
  return _internal_has_record();
}
inline void DB_Record_OP::clear_record() {
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
}
inline const ::pb::db::DB_Record& DB_Record_OP::_internal_record() const {
  const ::pb::db::DB_Record* p = _impl_.record_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::db::DB_Record&>(
      ::pb::db::_DB_Record_default_instance_);
}
inline const ::pb::db::DB_Record& DB_Record_OP::record() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Record_OP.record)
  return _internal_record();
}
inline void DB_Record_OP::unsafe_arena_set_allocated_record(
    ::pb::db::DB_Record* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.record_);
  }
  _impl_.record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.db.DB_Record_OP.record)
}
inline ::pb::db::DB_Record* DB_Record_OP::release_record() {
  
  ::pb::db::DB_Record* temp = _impl_.record_;
  _impl_.record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::db::DB_Record* DB_Record_OP::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:pb.db.DB_Record_OP.record)
  
  ::pb::db::DB_Record* temp = _impl_.record_;
  _impl_.record_ = nullptr;
  return temp;
}
inline ::pb::db::DB_Record* DB_Record_OP::_internal_mutable_record() {
  
  if (_impl_.record_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::db::DB_Record>(GetArenaForAllocation());
    _impl_.record_ = p;
  }
  return _impl_.record_;
}
inline ::pb::db::DB_Record* DB_Record_OP::mutable_record() {
  ::pb::db::DB_Record* _msg = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Record_OP.record)
  return _msg;
}
inline void DB_Record_OP::set_allocated_record(::pb::db::DB_Record* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.record_ = record;
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_Record_OP.record)
}

// -------------------------------------------------------------------

// User_DB_Record_OPS

// repeated .pb.db.DB_Record_OP record_ops = 1;
inline int User_DB_Record_OPS::_internal_record_ops_size() const {
  return _impl_.record_ops_.size();
}
inline int User_DB_Record_OPS::record_ops_size() const {
  return _internal_record_ops_size();
}
inline void User_DB_Record_OPS::clear_record_ops() {
  _impl_.record_ops_.Clear();
}
inline ::pb::db::DB_Record_OP* User_DB_Record_OPS::mutable_record_ops(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.User_DB_Record_OPS.record_ops)
  return _impl_.record_ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record_OP >*
User_DB_Record_OPS::mutable_record_ops() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.User_DB_Record_OPS.record_ops)
  return &_impl_.record_ops_;
}
inline const ::pb::db::DB_Record_OP& User_DB_Record_OPS::_internal_record_ops(int index) const {
  return _impl_.record_ops_.Get(index);
}
inline const ::pb::db::DB_Record_OP& User_DB_Record_OPS::record_ops(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.User_DB_Record_OPS.record_ops)
  return _internal_record_ops(index);
}
inline ::pb::db::DB_Record_OP* User_DB_Record_OPS::_internal_add_record_ops() {
  return _impl_.record_ops_.Add();
}
inline ::pb::db::DB_Record_OP* User_DB_Record_OPS::add_record_ops() {
  ::pb::db::DB_Record_OP* _add = _internal_add_record_ops();
  // @@protoc_insertion_point(field_add:pb.db.User_DB_Record_OPS.record_ops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record_OP >&
User_DB_Record_OPS::record_ops() const {
  // @@protoc_insertion_point(field_list:pb.db.User_DB_Record_OPS.record_ops)
  return _impl_.record_ops_;
}

// -------------------------------------------------------------------

// User_DB_Recordset

// int64 user_id = 1;
inline void User_DB_Recordset::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t User_DB_Recordset::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t User_DB_Recordset::user_id() const {
  // @@protoc_insertion_point(field_get:pb.db.User_DB_Recordset.user_id)
  return _internal_user_id();
}
inline void User_DB_Recordset::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void User_DB_Recordset::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.db.User_DB_Recordset.user_id)
}

// uint32 game_id = 2;
inline void User_DB_Recordset::clear_game_id() {
  _impl_.game_id_ = 0u;
}
inline uint32_t User_DB_Recordset::_internal_game_id() const {
  return _impl_.game_id_;
}
inline uint32_t User_DB_Recordset::game_id() const {
  // @@protoc_insertion_point(field_get:pb.db.User_DB_Recordset.game_id)
  return _internal_game_id();
}
inline void User_DB_Recordset::_internal_set_game_id(uint32_t value) {
  
  _impl_.game_id_ = value;
}
inline void User_DB_Recordset::set_game_id(uint32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:pb.db.User_DB_Recordset.game_id)
}

// .pb.db.DB_Recordset data_set = 3;
inline bool User_DB_Recordset::_internal_has_data_set() const {
  return this != internal_default_instance() && _impl_.data_set_ != nullptr;
}
inline bool User_DB_Recordset::has_data_set() const {
  return _internal_has_data_set();
}
inline void User_DB_Recordset::clear_data_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_set_ != nullptr) {
    delete _impl_.data_set_;
  }
  _impl_.data_set_ = nullptr;
}
inline const ::pb::db::DB_Recordset& User_DB_Recordset::_internal_data_set() const {
  const ::pb::db::DB_Recordset* p = _impl_.data_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::db::DB_Recordset&>(
      ::pb::db::_DB_Recordset_default_instance_);
}
inline const ::pb::db::DB_Recordset& User_DB_Recordset::data_set() const {
  // @@protoc_insertion_point(field_get:pb.db.User_DB_Recordset.data_set)
  return _internal_data_set();
}
inline void User_DB_Recordset::unsafe_arena_set_allocated_data_set(
    ::pb::db::DB_Recordset* data_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_set_);
  }
  _impl_.data_set_ = data_set;
  if (data_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.db.User_DB_Recordset.data_set)
}
inline ::pb::db::DB_Recordset* User_DB_Recordset::release_data_set() {
  
  ::pb::db::DB_Recordset* temp = _impl_.data_set_;
  _impl_.data_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::db::DB_Recordset* User_DB_Recordset::unsafe_arena_release_data_set() {
  // @@protoc_insertion_point(field_release:pb.db.User_DB_Recordset.data_set)
  
  ::pb::db::DB_Recordset* temp = _impl_.data_set_;
  _impl_.data_set_ = nullptr;
  return temp;
}
inline ::pb::db::DB_Recordset* User_DB_Recordset::_internal_mutable_data_set() {
  
  if (_impl_.data_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::db::DB_Recordset>(GetArenaForAllocation());
    _impl_.data_set_ = p;
  }
  return _impl_.data_set_;
}
inline ::pb::db::DB_Recordset* User_DB_Recordset::mutable_data_set() {
  ::pb::db::DB_Recordset* _msg = _internal_mutable_data_set();
  // @@protoc_insertion_point(field_mutable:pb.db.User_DB_Recordset.data_set)
  return _msg;
}
inline void User_DB_Recordset::set_allocated_data_set(::pb::db::DB_Recordset* data_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_set_;
  }
  if (data_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_set);
    if (message_arena != submessage_arena) {
      data_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_set_ = data_set;
  // @@protoc_insertion_point(field_set_allocated:pb.db.User_DB_Recordset.data_set)
}

// -------------------------------------------------------------------

// User_DB_Recordset_Ext

// .pb.db.E_DB_Cmd cmd = 1;
inline void User_DB_Recordset_Ext::clear_cmd() {
  _impl_.cmd_ = 0;
}
inline ::pb::db::E_DB_Cmd User_DB_Recordset_Ext::_internal_cmd() const {
  return static_cast< ::pb::db::E_DB_Cmd >(_impl_.cmd_);
}
inline ::pb::db::E_DB_Cmd User_DB_Recordset_Ext::cmd() const {
  // @@protoc_insertion_point(field_get:pb.db.User_DB_Recordset_Ext.cmd)
  return _internal_cmd();
}
inline void User_DB_Recordset_Ext::_internal_set_cmd(::pb::db::E_DB_Cmd value) {
  
  _impl_.cmd_ = value;
}
inline void User_DB_Recordset_Ext::set_cmd(::pb::db::E_DB_Cmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.db.User_DB_Recordset_Ext.cmd)
}

// .pb.db.DB_Recordset data_set = 2;
inline bool User_DB_Recordset_Ext::_internal_has_data_set() const {
  return this != internal_default_instance() && _impl_.data_set_ != nullptr;
}
inline bool User_DB_Recordset_Ext::has_data_set() const {
  return _internal_has_data_set();
}
inline void User_DB_Recordset_Ext::clear_data_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_set_ != nullptr) {
    delete _impl_.data_set_;
  }
  _impl_.data_set_ = nullptr;
}
inline const ::pb::db::DB_Recordset& User_DB_Recordset_Ext::_internal_data_set() const {
  const ::pb::db::DB_Recordset* p = _impl_.data_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::db::DB_Recordset&>(
      ::pb::db::_DB_Recordset_default_instance_);
}
inline const ::pb::db::DB_Recordset& User_DB_Recordset_Ext::data_set() const {
  // @@protoc_insertion_point(field_get:pb.db.User_DB_Recordset_Ext.data_set)
  return _internal_data_set();
}
inline void User_DB_Recordset_Ext::unsafe_arena_set_allocated_data_set(
    ::pb::db::DB_Recordset* data_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_set_);
  }
  _impl_.data_set_ = data_set;
  if (data_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.db.User_DB_Recordset_Ext.data_set)
}
inline ::pb::db::DB_Recordset* User_DB_Recordset_Ext::release_data_set() {
  
  ::pb::db::DB_Recordset* temp = _impl_.data_set_;
  _impl_.data_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::db::DB_Recordset* User_DB_Recordset_Ext::unsafe_arena_release_data_set() {
  // @@protoc_insertion_point(field_release:pb.db.User_DB_Recordset_Ext.data_set)
  
  ::pb::db::DB_Recordset* temp = _impl_.data_set_;
  _impl_.data_set_ = nullptr;
  return temp;
}
inline ::pb::db::DB_Recordset* User_DB_Recordset_Ext::_internal_mutable_data_set() {
  
  if (_impl_.data_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::db::DB_Recordset>(GetArenaForAllocation());
    _impl_.data_set_ = p;
  }
  return _impl_.data_set_;
}
inline ::pb::db::DB_Recordset* User_DB_Recordset_Ext::mutable_data_set() {
  ::pb::db::DB_Recordset* _msg = _internal_mutable_data_set();
  // @@protoc_insertion_point(field_mutable:pb.db.User_DB_Recordset_Ext.data_set)
  return _msg;
}
inline void User_DB_Recordset_Ext::set_allocated_data_set(::pb::db::DB_Recordset* data_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_set_;
  }
  if (data_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_set);
    if (message_arena != submessage_arena) {
      data_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_set_ = data_set;
  // @@protoc_insertion_point(field_set_allocated:pb.db.User_DB_Recordset_Ext.data_set)
}

// -------------------------------------------------------------------

// DB_FieldMeta

// string name = 1;
inline void DB_FieldMeta::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DB_FieldMeta::name() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_FieldMeta.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_FieldMeta::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_FieldMeta.name)
}
inline std::string* DB_FieldMeta::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_FieldMeta.name)
  return _s;
}
inline const std::string& DB_FieldMeta::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DB_FieldMeta::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_FieldMeta::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_FieldMeta::release_name() {
  // @@protoc_insertion_point(field_release:pb.db.DB_FieldMeta.name)
  return _impl_.name_.Release();
}
inline void DB_FieldMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_FieldMeta.name)
}

// uint32 type = 2;
inline void DB_FieldMeta::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t DB_FieldMeta::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t DB_FieldMeta::type() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_FieldMeta.type)
  return _internal_type();
}
inline void DB_FieldMeta::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void DB_FieldMeta::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_FieldMeta.type)
}

// uint32 attr = 3;
inline void DB_FieldMeta::clear_attr() {
  _impl_.attr_ = 0u;
}
inline uint32_t DB_FieldMeta::_internal_attr() const {
  return _impl_.attr_;
}
inline uint32_t DB_FieldMeta::attr() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_FieldMeta.attr)
  return _internal_attr();
}
inline void DB_FieldMeta::_internal_set_attr(uint32_t value) {
  
  _impl_.attr_ = value;
}
inline void DB_FieldMeta::set_attr(uint32_t value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_FieldMeta.attr)
}

// uint32 len = 4;
inline void DB_FieldMeta::clear_len() {
  _impl_.len_ = 0u;
}
inline uint32_t DB_FieldMeta::_internal_len() const {
  return _impl_.len_;
}
inline uint32_t DB_FieldMeta::len() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_FieldMeta.len)
  return _internal_len();
}
inline void DB_FieldMeta::_internal_set_len(uint32_t value) {
  
  _impl_.len_ = value;
}
inline void DB_FieldMeta::set_len(uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_FieldMeta.len)
}

// -------------------------------------------------------------------

// DB_TableMeta

// string name = 1;
inline void DB_TableMeta::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DB_TableMeta::name() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_TableMeta.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_TableMeta::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_TableMeta.name)
}
inline std::string* DB_TableMeta::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_TableMeta.name)
  return _s;
}
inline const std::string& DB_TableMeta::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DB_TableMeta::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_TableMeta::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_TableMeta::release_name() {
  // @@protoc_insertion_point(field_release:pb.db.DB_TableMeta.name)
  return _impl_.name_.Release();
}
inline void DB_TableMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_TableMeta.name)
}

// uint32 tbl_id = 2;
inline void DB_TableMeta::clear_tbl_id() {
  _impl_.tbl_id_ = 0u;
}
inline uint32_t DB_TableMeta::_internal_tbl_id() const {
  return _impl_.tbl_id_;
}
inline uint32_t DB_TableMeta::tbl_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_TableMeta.tbl_id)
  return _internal_tbl_id();
}
inline void DB_TableMeta::_internal_set_tbl_id(uint32_t value) {
  
  _impl_.tbl_id_ = value;
}
inline void DB_TableMeta::set_tbl_id(uint32_t value) {
  _internal_set_tbl_id(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_TableMeta.tbl_id)
}

// repeated .pb.db.DB_FieldMeta vec_fields = 3;
inline int DB_TableMeta::_internal_vec_fields_size() const {
  return _impl_.vec_fields_.size();
}
inline int DB_TableMeta::vec_fields_size() const {
  return _internal_vec_fields_size();
}
inline void DB_TableMeta::clear_vec_fields() {
  _impl_.vec_fields_.Clear();
}
inline ::pb::db::DB_FieldMeta* DB_TableMeta::mutable_vec_fields(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.DB_TableMeta.vec_fields)
  return _impl_.vec_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_FieldMeta >*
DB_TableMeta::mutable_vec_fields() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.DB_TableMeta.vec_fields)
  return &_impl_.vec_fields_;
}
inline const ::pb::db::DB_FieldMeta& DB_TableMeta::_internal_vec_fields(int index) const {
  return _impl_.vec_fields_.Get(index);
}
inline const ::pb::db::DB_FieldMeta& DB_TableMeta::vec_fields(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.DB_TableMeta.vec_fields)
  return _internal_vec_fields(index);
}
inline ::pb::db::DB_FieldMeta* DB_TableMeta::_internal_add_vec_fields() {
  return _impl_.vec_fields_.Add();
}
inline ::pb::db::DB_FieldMeta* DB_TableMeta::add_vec_fields() {
  ::pb::db::DB_FieldMeta* _add = _internal_add_vec_fields();
  // @@protoc_insertion_point(field_add:pb.db.DB_TableMeta.vec_fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_FieldMeta >&
DB_TableMeta::vec_fields() const {
  // @@protoc_insertion_point(field_list:pb.db.DB_TableMeta.vec_fields)
  return _impl_.vec_fields_;
}

// -------------------------------------------------------------------

// DB_Metas

// repeated .pb.db.DB_TableMeta vec_tables = 1;
inline int DB_Metas::_internal_vec_tables_size() const {
  return _impl_.vec_tables_.size();
}
inline int DB_Metas::vec_tables_size() const {
  return _internal_vec_tables_size();
}
inline void DB_Metas::clear_vec_tables() {
  _impl_.vec_tables_.Clear();
}
inline ::pb::db::DB_TableMeta* DB_Metas::mutable_vec_tables(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Metas.vec_tables)
  return _impl_.vec_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_TableMeta >*
DB_Metas::mutable_vec_tables() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.DB_Metas.vec_tables)
  return &_impl_.vec_tables_;
}
inline const ::pb::db::DB_TableMeta& DB_Metas::_internal_vec_tables(int index) const {
  return _impl_.vec_tables_.Get(index);
}
inline const ::pb::db::DB_TableMeta& DB_Metas::vec_tables(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Metas.vec_tables)
  return _internal_vec_tables(index);
}
inline ::pb::db::DB_TableMeta* DB_Metas::_internal_add_vec_tables() {
  return _impl_.vec_tables_.Add();
}
inline ::pb::db::DB_TableMeta* DB_Metas::add_vec_tables() {
  ::pb::db::DB_TableMeta* _add = _internal_add_vec_tables();
  // @@protoc_insertion_point(field_add:pb.db.DB_Metas.vec_tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_TableMeta >&
DB_Metas::vec_tables() const {
  // @@protoc_insertion_point(field_list:pb.db.DB_Metas.vec_tables)
  return _impl_.vec_tables_;
}

// -------------------------------------------------------------------

// DB_Update

// .pb.db.E_DB_Cmd cmd = 1;
inline void DB_Update::clear_cmd() {
  _impl_.cmd_ = 0;
}
inline ::pb::db::E_DB_Cmd DB_Update::_internal_cmd() const {
  return static_cast< ::pb::db::E_DB_Cmd >(_impl_.cmd_);
}
inline ::pb::db::E_DB_Cmd DB_Update::cmd() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Update.cmd)
  return _internal_cmd();
}
inline void DB_Update::_internal_set_cmd(::pb::db::E_DB_Cmd value) {
  
  _impl_.cmd_ = value;
}
inline void DB_Update::set_cmd(::pb::db::E_DB_Cmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Update.cmd)
}

// .pb.db.DB_Recordset data_set = 2;
inline bool DB_Update::_internal_has_data_set() const {
  return this != internal_default_instance() && _impl_.data_set_ != nullptr;
}
inline bool DB_Update::has_data_set() const {
  return _internal_has_data_set();
}
inline void DB_Update::clear_data_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_set_ != nullptr) {
    delete _impl_.data_set_;
  }
  _impl_.data_set_ = nullptr;
}
inline const ::pb::db::DB_Recordset& DB_Update::_internal_data_set() const {
  const ::pb::db::DB_Recordset* p = _impl_.data_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::db::DB_Recordset&>(
      ::pb::db::_DB_Recordset_default_instance_);
}
inline const ::pb::db::DB_Recordset& DB_Update::data_set() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Update.data_set)
  return _internal_data_set();
}
inline void DB_Update::unsafe_arena_set_allocated_data_set(
    ::pb::db::DB_Recordset* data_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_set_);
  }
  _impl_.data_set_ = data_set;
  if (data_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.db.DB_Update.data_set)
}
inline ::pb::db::DB_Recordset* DB_Update::release_data_set() {
  
  ::pb::db::DB_Recordset* temp = _impl_.data_set_;
  _impl_.data_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::db::DB_Recordset* DB_Update::unsafe_arena_release_data_set() {
  // @@protoc_insertion_point(field_release:pb.db.DB_Update.data_set)
  
  ::pb::db::DB_Recordset* temp = _impl_.data_set_;
  _impl_.data_set_ = nullptr;
  return temp;
}
inline ::pb::db::DB_Recordset* DB_Update::_internal_mutable_data_set() {
  
  if (_impl_.data_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::db::DB_Recordset>(GetArenaForAllocation());
    _impl_.data_set_ = p;
  }
  return _impl_.data_set_;
}
inline ::pb::db::DB_Recordset* DB_Update::mutable_data_set() {
  ::pb::db::DB_Recordset* _msg = _internal_mutable_data_set();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Update.data_set)
  return _msg;
}
inline void DB_Update::set_allocated_data_set(::pb::db::DB_Recordset* data_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_set_;
  }
  if (data_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_set);
    if (message_arena != submessage_arena) {
      data_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_set_ = data_set;
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_Update.data_set)
}

// -------------------------------------------------------------------

// DB_Delete

// .pb.db.E_DB_Cmd cmd = 1;
inline void DB_Delete::clear_cmd() {
  _impl_.cmd_ = 0;
}
inline ::pb::db::E_DB_Cmd DB_Delete::_internal_cmd() const {
  return static_cast< ::pb::db::E_DB_Cmd >(_impl_.cmd_);
}
inline ::pb::db::E_DB_Cmd DB_Delete::cmd() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Delete.cmd)
  return _internal_cmd();
}
inline void DB_Delete::_internal_set_cmd(::pb::db::E_DB_Cmd value) {
  
  _impl_.cmd_ = value;
}
inline void DB_Delete::set_cmd(::pb::db::E_DB_Cmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Delete.cmd)
}

// uint32 tbl_id = 2;
inline void DB_Delete::clear_tbl_id() {
  _impl_.tbl_id_ = 0u;
}
inline uint32_t DB_Delete::_internal_tbl_id() const {
  return _impl_.tbl_id_;
}
inline uint32_t DB_Delete::tbl_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Delete.tbl_id)
  return _internal_tbl_id();
}
inline void DB_Delete::_internal_set_tbl_id(uint32_t value) {
  
  _impl_.tbl_id_ = value;
}
inline void DB_Delete::set_tbl_id(uint32_t value) {
  _internal_set_tbl_id(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Delete.tbl_id)
}

// repeated uint64 vec_ids = 3;
inline int DB_Delete::_internal_vec_ids_size() const {
  return _impl_.vec_ids_.size();
}
inline int DB_Delete::vec_ids_size() const {
  return _internal_vec_ids_size();
}
inline void DB_Delete::clear_vec_ids() {
  _impl_.vec_ids_.Clear();
}
inline uint64_t DB_Delete::_internal_vec_ids(int index) const {
  return _impl_.vec_ids_.Get(index);
}
inline uint64_t DB_Delete::vec_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Delete.vec_ids)
  return _internal_vec_ids(index);
}
inline void DB_Delete::set_vec_ids(int index, uint64_t value) {
  _impl_.vec_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Delete.vec_ids)
}
inline void DB_Delete::_internal_add_vec_ids(uint64_t value) {
  _impl_.vec_ids_.Add(value);
}
inline void DB_Delete::add_vec_ids(uint64_t value) {
  _internal_add_vec_ids(value);
  // @@protoc_insertion_point(field_add:pb.db.DB_Delete.vec_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
DB_Delete::_internal_vec_ids() const {
  return _impl_.vec_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
DB_Delete::vec_ids() const {
  // @@protoc_insertion_point(field_list:pb.db.DB_Delete.vec_ids)
  return _internal_vec_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
DB_Delete::_internal_mutable_vec_ids() {
  return &_impl_.vec_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
DB_Delete::mutable_vec_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.DB_Delete.vec_ids)
  return _internal_mutable_vec_ids();
}

// -------------------------------------------------------------------

// Key_Value

// uint32 key = 1;
inline void Key_Value::clear_key() {
  _impl_.key_ = 0u;
}
inline uint32_t Key_Value::_internal_key() const {
  return _impl_.key_;
}
inline uint32_t Key_Value::key() const {
  // @@protoc_insertion_point(field_get:pb.db.Key_Value.key)
  return _internal_key();
}
inline void Key_Value::_internal_set_key(uint32_t value) {
  
  _impl_.key_ = value;
}
inline void Key_Value::set_key(uint32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:pb.db.Key_Value.key)
}

// int64 value = 2;
inline void Key_Value::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t Key_Value::_internal_value() const {
  return _impl_.value_;
}
inline int64_t Key_Value::value() const {
  // @@protoc_insertion_point(field_get:pb.db.Key_Value.value)
  return _internal_value();
}
inline void Key_Value::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void Key_Value::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.db.Key_Value.value)
}

// -------------------------------------------------------------------

// EffectProp

// uint32 range = 1;
inline void EffectProp::clear_range() {
  _impl_.range_ = 0u;
}
inline uint32_t EffectProp::_internal_range() const {
  return _impl_.range_;
}
inline uint32_t EffectProp::range() const {
  // @@protoc_insertion_point(field_get:pb.db.EffectProp.range)
  return _internal_range();
}
inline void EffectProp::_internal_set_range(uint32_t value) {
  
  _impl_.range_ = value;
}
inline void EffectProp::set_range(uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:pb.db.EffectProp.range)
}

// repeated .pb.db.Key_Value vec_effect = 2;
inline int EffectProp::_internal_vec_effect_size() const {
  return _impl_.vec_effect_.size();
}
inline int EffectProp::vec_effect_size() const {
  return _internal_vec_effect_size();
}
inline void EffectProp::clear_vec_effect() {
  _impl_.vec_effect_.Clear();
}
inline ::pb::db::Key_Value* EffectProp::mutable_vec_effect(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.EffectProp.vec_effect)
  return _impl_.vec_effect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::Key_Value >*
EffectProp::mutable_vec_effect() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.EffectProp.vec_effect)
  return &_impl_.vec_effect_;
}
inline const ::pb::db::Key_Value& EffectProp::_internal_vec_effect(int index) const {
  return _impl_.vec_effect_.Get(index);
}
inline const ::pb::db::Key_Value& EffectProp::vec_effect(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.EffectProp.vec_effect)
  return _internal_vec_effect(index);
}
inline ::pb::db::Key_Value* EffectProp::_internal_add_vec_effect() {
  return _impl_.vec_effect_.Add();
}
inline ::pb::db::Key_Value* EffectProp::add_vec_effect() {
  ::pb::db::Key_Value* _add = _internal_add_vec_effect();
  // @@protoc_insertion_point(field_add:pb.db.EffectProp.vec_effect)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::Key_Value >&
EffectProp::vec_effect() const {
  // @@protoc_insertion_point(field_list:pb.db.EffectProp.vec_effect)
  return _impl_.vec_effect_;
}

// -------------------------------------------------------------------

// DB_EffectProp

// .pb.db.E_DB_Cmd cmd = 1;
inline void DB_EffectProp::clear_cmd() {
  _impl_.cmd_ = 0;
}
inline ::pb::db::E_DB_Cmd DB_EffectProp::_internal_cmd() const {
  return static_cast< ::pb::db::E_DB_Cmd >(_impl_.cmd_);
}
inline ::pb::db::E_DB_Cmd DB_EffectProp::cmd() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_EffectProp.cmd)
  return _internal_cmd();
}
inline void DB_EffectProp::_internal_set_cmd(::pb::db::E_DB_Cmd value) {
  
  _impl_.cmd_ = value;
}
inline void DB_EffectProp::set_cmd(::pb::db::E_DB_Cmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_EffectProp.cmd)
}

// repeated .pb.db.EffectProp vec_prop = 2;
inline int DB_EffectProp::_internal_vec_prop_size() const {
  return _impl_.vec_prop_.size();
}
inline int DB_EffectProp::vec_prop_size() const {
  return _internal_vec_prop_size();
}
inline void DB_EffectProp::clear_vec_prop() {
  _impl_.vec_prop_.Clear();
}
inline ::pb::db::EffectProp* DB_EffectProp::mutable_vec_prop(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.DB_EffectProp.vec_prop)
  return _impl_.vec_prop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::EffectProp >*
DB_EffectProp::mutable_vec_prop() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.DB_EffectProp.vec_prop)
  return &_impl_.vec_prop_;
}
inline const ::pb::db::EffectProp& DB_EffectProp::_internal_vec_prop(int index) const {
  return _impl_.vec_prop_.Get(index);
}
inline const ::pb::db::EffectProp& DB_EffectProp::vec_prop(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.DB_EffectProp.vec_prop)
  return _internal_vec_prop(index);
}
inline ::pb::db::EffectProp* DB_EffectProp::_internal_add_vec_prop() {
  return _impl_.vec_prop_.Add();
}
inline ::pb::db::EffectProp* DB_EffectProp::add_vec_prop() {
  ::pb::db::EffectProp* _add = _internal_add_vec_prop();
  // @@protoc_insertion_point(field_add:pb.db.DB_EffectProp.vec_prop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::EffectProp >&
DB_EffectProp::vec_prop() const {
  // @@protoc_insertion_point(field_list:pb.db.DB_EffectProp.vec_prop)
  return _impl_.vec_prop_;
}

// -------------------------------------------------------------------

// DB_Add_Recordset

// int64 target_id = 1;
inline void DB_Add_Recordset::clear_target_id() {
  _impl_.target_id_ = int64_t{0};
}
inline int64_t DB_Add_Recordset::_internal_target_id() const {
  return _impl_.target_id_;
}
inline int64_t DB_Add_Recordset::target_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Add_Recordset.target_id)
  return _internal_target_id();
}
inline void DB_Add_Recordset::_internal_set_target_id(int64_t value) {
  
  _impl_.target_id_ = value;
}
inline void DB_Add_Recordset::set_target_id(int64_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Add_Recordset.target_id)
}

// uint32 target_game_id = 2;
inline void DB_Add_Recordset::clear_target_game_id() {
  _impl_.target_game_id_ = 0u;
}
inline uint32_t DB_Add_Recordset::_internal_target_game_id() const {
  return _impl_.target_game_id_;
}
inline uint32_t DB_Add_Recordset::target_game_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Add_Recordset.target_game_id)
  return _internal_target_game_id();
}
inline void DB_Add_Recordset::_internal_set_target_game_id(uint32_t value) {
  
  _impl_.target_game_id_ = value;
}
inline void DB_Add_Recordset::set_target_game_id(uint32_t value) {
  _internal_set_target_game_id(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Add_Recordset.target_game_id)
}

// uint32 id_table = 3;
inline void DB_Add_Recordset::clear_id_table() {
  _impl_.id_table_ = 0u;
}
inline uint32_t DB_Add_Recordset::_internal_id_table() const {
  return _impl_.id_table_;
}
inline uint32_t DB_Add_Recordset::id_table() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Add_Recordset.id_table)
  return _internal_id_table();
}
inline void DB_Add_Recordset::_internal_set_id_table(uint32_t value) {
  
  _impl_.id_table_ = value;
}
inline void DB_Add_Recordset::set_id_table(uint32_t value) {
  _internal_set_id_table(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_Add_Recordset.id_table)
}

// string name = 4;
inline void DB_Add_Recordset::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DB_Add_Recordset::name() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Add_Recordset.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB_Add_Recordset::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.db.DB_Add_Recordset.name)
}
inline std::string* DB_Add_Recordset::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Add_Recordset.name)
  return _s;
}
inline const std::string& DB_Add_Recordset::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DB_Add_Recordset::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DB_Add_Recordset::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DB_Add_Recordset::release_name() {
  // @@protoc_insertion_point(field_release:pb.db.DB_Add_Recordset.name)
  return _impl_.name_.Release();
}
inline void DB_Add_Recordset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_Add_Recordset.name)
}

// .pb.db.DB_Record record = 5;
inline bool DB_Add_Recordset::_internal_has_record() const {
  return this != internal_default_instance() && _impl_.record_ != nullptr;
}
inline bool DB_Add_Recordset::has_record() const {
  return _internal_has_record();
}
inline void DB_Add_Recordset::clear_record() {
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
}
inline const ::pb::db::DB_Record& DB_Add_Recordset::_internal_record() const {
  const ::pb::db::DB_Record* p = _impl_.record_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::db::DB_Record&>(
      ::pb::db::_DB_Record_default_instance_);
}
inline const ::pb::db::DB_Record& DB_Add_Recordset::record() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_Add_Recordset.record)
  return _internal_record();
}
inline void DB_Add_Recordset::unsafe_arena_set_allocated_record(
    ::pb::db::DB_Record* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.record_);
  }
  _impl_.record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.db.DB_Add_Recordset.record)
}
inline ::pb::db::DB_Record* DB_Add_Recordset::release_record() {
  
  ::pb::db::DB_Record* temp = _impl_.record_;
  _impl_.record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::db::DB_Record* DB_Add_Recordset::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:pb.db.DB_Add_Recordset.record)
  
  ::pb::db::DB_Record* temp = _impl_.record_;
  _impl_.record_ = nullptr;
  return temp;
}
inline ::pb::db::DB_Record* DB_Add_Recordset::_internal_mutable_record() {
  
  if (_impl_.record_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::db::DB_Record>(GetArenaForAllocation());
    _impl_.record_ = p;
  }
  return _impl_.record_;
}
inline ::pb::db::DB_Record* DB_Add_Recordset::mutable_record() {
  ::pb::db::DB_Record* _msg = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:pb.db.DB_Add_Recordset.record)
  return _msg;
}
inline void DB_Add_Recordset::set_allocated_record(::pb::db::DB_Record* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.record_ = record;
  // @@protoc_insertion_point(field_set_allocated:pb.db.DB_Add_Recordset.record)
}

// -------------------------------------------------------------------

// DB_DataFlag

// .pb.db.E_DB_Cmd cmd = 1;
inline void DB_DataFlag::clear_cmd() {
  _impl_.cmd_ = 0;
}
inline ::pb::db::E_DB_Cmd DB_DataFlag::_internal_cmd() const {
  return static_cast< ::pb::db::E_DB_Cmd >(_impl_.cmd_);
}
inline ::pb::db::E_DB_Cmd DB_DataFlag::cmd() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_DataFlag.cmd)
  return _internal_cmd();
}
inline void DB_DataFlag::_internal_set_cmd(::pb::db::E_DB_Cmd value) {
  
  _impl_.cmd_ = value;
}
inline void DB_DataFlag::set_cmd(::pb::db::E_DB_Cmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_DataFlag.cmd)
}

// int64 user_id = 2;
inline void DB_DataFlag::clear_user_id() {
  _impl_.user_id_ = int64_t{0};
}
inline int64_t DB_DataFlag::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int64_t DB_DataFlag::user_id() const {
  // @@protoc_insertion_point(field_get:pb.db.DB_DataFlag.user_id)
  return _internal_user_id();
}
inline void DB_DataFlag::_internal_set_user_id(int64_t value) {
  
  _impl_.user_id_ = value;
}
inline void DB_DataFlag::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:pb.db.DB_DataFlag.user_id)
}

// -------------------------------------------------------------------

// Query_Recordset

// .pb.db.E_DB_Cmd cmd = 1;
inline void Query_Recordset::clear_cmd() {
  _impl_.cmd_ = 0;
}
inline ::pb::db::E_DB_Cmd Query_Recordset::_internal_cmd() const {
  return static_cast< ::pb::db::E_DB_Cmd >(_impl_.cmd_);
}
inline ::pb::db::E_DB_Cmd Query_Recordset::cmd() const {
  // @@protoc_insertion_point(field_get:pb.db.Query_Recordset.cmd)
  return _internal_cmd();
}
inline void Query_Recordset::_internal_set_cmd(::pb::db::E_DB_Cmd value) {
  
  _impl_.cmd_ = value;
}
inline void Query_Recordset::set_cmd(::pb::db::E_DB_Cmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb.db.Query_Recordset.cmd)
}

// uint32 id_table = 2;
inline void Query_Recordset::clear_id_table() {
  _impl_.id_table_ = 0u;
}
inline uint32_t Query_Recordset::_internal_id_table() const {
  return _impl_.id_table_;
}
inline uint32_t Query_Recordset::id_table() const {
  // @@protoc_insertion_point(field_get:pb.db.Query_Recordset.id_table)
  return _internal_id_table();
}
inline void Query_Recordset::_internal_set_id_table(uint32_t value) {
  
  _impl_.id_table_ = value;
}
inline void Query_Recordset::set_id_table(uint32_t value) {
  _internal_set_id_table(value);
  // @@protoc_insertion_point(field_set:pb.db.Query_Recordset.id_table)
}

// repeated uint32 field_list = 3;
inline int Query_Recordset::_internal_field_list_size() const {
  return _impl_.field_list_.size();
}
inline int Query_Recordset::field_list_size() const {
  return _internal_field_list_size();
}
inline void Query_Recordset::clear_field_list() {
  _impl_.field_list_.Clear();
}
inline uint32_t Query_Recordset::_internal_field_list(int index) const {
  return _impl_.field_list_.Get(index);
}
inline uint32_t Query_Recordset::field_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.Query_Recordset.field_list)
  return _internal_field_list(index);
}
inline void Query_Recordset::set_field_list(int index, uint32_t value) {
  _impl_.field_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.db.Query_Recordset.field_list)
}
inline void Query_Recordset::_internal_add_field_list(uint32_t value) {
  _impl_.field_list_.Add(value);
}
inline void Query_Recordset::add_field_list(uint32_t value) {
  _internal_add_field_list(value);
  // @@protoc_insertion_point(field_add:pb.db.Query_Recordset.field_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Query_Recordset::_internal_field_list() const {
  return _impl_.field_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Query_Recordset::field_list() const {
  // @@protoc_insertion_point(field_list:pb.db.Query_Recordset.field_list)
  return _internal_field_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Query_Recordset::_internal_mutable_field_list() {
  return &_impl_.field_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Query_Recordset::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.Query_Recordset.field_list)
  return _internal_mutable_field_list();
}

// repeated uint32 key_list = 4;
inline int Query_Recordset::_internal_key_list_size() const {
  return _impl_.key_list_.size();
}
inline int Query_Recordset::key_list_size() const {
  return _internal_key_list_size();
}
inline void Query_Recordset::clear_key_list() {
  _impl_.key_list_.Clear();
}
inline uint32_t Query_Recordset::_internal_key_list(int index) const {
  return _impl_.key_list_.Get(index);
}
inline uint32_t Query_Recordset::key_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.Query_Recordset.key_list)
  return _internal_key_list(index);
}
inline void Query_Recordset::set_key_list(int index, uint32_t value) {
  _impl_.key_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.db.Query_Recordset.key_list)
}
inline void Query_Recordset::_internal_add_key_list(uint32_t value) {
  _impl_.key_list_.Add(value);
}
inline void Query_Recordset::add_key_list(uint32_t value) {
  _internal_add_key_list(value);
  // @@protoc_insertion_point(field_add:pb.db.Query_Recordset.key_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Query_Recordset::_internal_key_list() const {
  return _impl_.key_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Query_Recordset::key_list() const {
  // @@protoc_insertion_point(field_list:pb.db.Query_Recordset.key_list)
  return _internal_key_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Query_Recordset::_internal_mutable_key_list() {
  return &_impl_.key_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Query_Recordset::mutable_key_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.Query_Recordset.key_list)
  return _internal_mutable_key_list();
}

// repeated .pb.db.DB_Record vec_records = 5;
inline int Query_Recordset::_internal_vec_records_size() const {
  return _impl_.vec_records_.size();
}
inline int Query_Recordset::vec_records_size() const {
  return _internal_vec_records_size();
}
inline void Query_Recordset::clear_vec_records() {
  _impl_.vec_records_.Clear();
}
inline ::pb::db::DB_Record* Query_Recordset::mutable_vec_records(int index) {
  // @@protoc_insertion_point(field_mutable:pb.db.Query_Recordset.vec_records)
  return _impl_.vec_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >*
Query_Recordset::mutable_vec_records() {
  // @@protoc_insertion_point(field_mutable_list:pb.db.Query_Recordset.vec_records)
  return &_impl_.vec_records_;
}
inline const ::pb::db::DB_Record& Query_Recordset::_internal_vec_records(int index) const {
  return _impl_.vec_records_.Get(index);
}
inline const ::pb::db::DB_Record& Query_Recordset::vec_records(int index) const {
  // @@protoc_insertion_point(field_get:pb.db.Query_Recordset.vec_records)
  return _internal_vec_records(index);
}
inline ::pb::db::DB_Record* Query_Recordset::_internal_add_vec_records() {
  return _impl_.vec_records_.Add();
}
inline ::pb::db::DB_Record* Query_Recordset::add_vec_records() {
  ::pb::db::DB_Record* _add = _internal_add_vec_records();
  // @@protoc_insertion_point(field_add:pb.db.Query_Recordset.vec_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::db::DB_Record >&
Query_Recordset::vec_records() const {
  // @@protoc_insertion_point(field_list:pb.db.Query_Recordset.vec_records)
  return _impl_.vec_records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::db::DB_OP_User_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::db::DB_OP_User_Action>() {
  return ::pb::db::DB_OP_User_Action_descriptor();
}
template <> struct is_proto_enum< ::pb::db::DB_Record_OP_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::db::DB_Record_OP_Action>() {
  return ::pb::db::DB_Record_OP_Action_descriptor();
}
template <> struct is_proto_enum< ::pb::db::E_Field_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::db::E_Field_Type>() {
  return ::pb::db::E_Field_Type_descriptor();
}
template <> struct is_proto_enum< ::pb::db::E_DB_Cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::db::E_DB_Cmd>() {
  return ::pb::db::E_DB_Cmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_2eproto
