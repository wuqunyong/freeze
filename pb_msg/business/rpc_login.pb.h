// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5flogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5flogin_2eproto;
namespace rpc_login {
class RPC_LoginPendingRequest;
class RPC_LoginPendingRequestDefaultTypeInternal;
extern RPC_LoginPendingRequestDefaultTypeInternal _RPC_LoginPendingRequest_default_instance_;
class RPC_LoginPendingResponse;
class RPC_LoginPendingResponseDefaultTypeInternal;
extern RPC_LoginPendingResponseDefaultTypeInternal _RPC_LoginPendingResponse_default_instance_;
}  // namespace rpc_login
PROTOBUF_NAMESPACE_OPEN
template<> ::rpc_login::RPC_LoginPendingRequest* Arena::CreateMaybeMessage<::rpc_login::RPC_LoginPendingRequest>(Arena*);
template<> ::rpc_login::RPC_LoginPendingResponse* Arena::CreateMaybeMessage<::rpc_login::RPC_LoginPendingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpc_login {

// ===================================================================

class RPC_LoginPendingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_login.RPC_LoginPendingRequest) */ {
 public:
  RPC_LoginPendingRequest();
  virtual ~RPC_LoginPendingRequest();

  RPC_LoginPendingRequest(const RPC_LoginPendingRequest& from);
  RPC_LoginPendingRequest(RPC_LoginPendingRequest&& from) noexcept
    : RPC_LoginPendingRequest() {
    *this = ::std::move(from);
  }

  inline RPC_LoginPendingRequest& operator=(const RPC_LoginPendingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_LoginPendingRequest& operator=(RPC_LoginPendingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC_LoginPendingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC_LoginPendingRequest* internal_default_instance() {
    return reinterpret_cast<const RPC_LoginPendingRequest*>(
               &_RPC_LoginPendingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPC_LoginPendingRequest& a, RPC_LoginPendingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC_LoginPendingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPC_LoginPendingRequest* New() const final {
    return CreateMaybeMessage<RPC_LoginPendingRequest>(nullptr);
  }

  RPC_LoginPendingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC_LoginPendingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC_LoginPendingRequest& from);
  void MergeFrom(const RPC_LoginPendingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_LoginPendingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_login.RPC_LoginPendingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5flogin_2eproto);
    return ::descriptor_table_rpc_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kVersionFieldNumber = 3,
    kDbIdFieldNumber = 4,
  };
  // string session_key = 2;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // uint64 account_id = 1;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 db_id = 4;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_login.RPC_LoginPendingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5flogin_2eproto;
};
// -------------------------------------------------------------------

class RPC_LoginPendingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_login.RPC_LoginPendingResponse) */ {
 public:
  RPC_LoginPendingResponse();
  virtual ~RPC_LoginPendingResponse();

  RPC_LoginPendingResponse(const RPC_LoginPendingResponse& from);
  RPC_LoginPendingResponse(RPC_LoginPendingResponse&& from) noexcept
    : RPC_LoginPendingResponse() {
    *this = ::std::move(from);
  }

  inline RPC_LoginPendingResponse& operator=(const RPC_LoginPendingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_LoginPendingResponse& operator=(RPC_LoginPendingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC_LoginPendingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC_LoginPendingResponse* internal_default_instance() {
    return reinterpret_cast<const RPC_LoginPendingResponse*>(
               &_RPC_LoginPendingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RPC_LoginPendingResponse& a, RPC_LoginPendingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC_LoginPendingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPC_LoginPendingResponse* New() const final {
    return CreateMaybeMessage<RPC_LoginPendingResponse>(nullptr);
  }

  RPC_LoginPendingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC_LoginPendingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC_LoginPendingResponse& from);
  void MergeFrom(const RPC_LoginPendingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_LoginPendingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_login.RPC_LoginPendingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5flogin_2eproto);
    return ::descriptor_table_rpc_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // uint64 account_id = 2;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_login.RPC_LoginPendingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPC_LoginPendingRequest

// uint64 account_id = 1;
inline void RPC_LoginPendingRequest::clear_account_id() {
  account_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPC_LoginPendingRequest::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPC_LoginPendingRequest::account_id() const {
  // @@protoc_insertion_point(field_get:rpc_login.RPC_LoginPendingRequest.account_id)
  return _internal_account_id();
}
inline void RPC_LoginPendingRequest::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_id_ = value;
}
inline void RPC_LoginPendingRequest::set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:rpc_login.RPC_LoginPendingRequest.account_id)
}

// string session_key = 2;
inline void RPC_LoginPendingRequest::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPC_LoginPendingRequest::session_key() const {
  // @@protoc_insertion_point(field_get:rpc_login.RPC_LoginPendingRequest.session_key)
  return _internal_session_key();
}
inline void RPC_LoginPendingRequest::set_session_key(const std::string& value) {
  _internal_set_session_key(value);
  // @@protoc_insertion_point(field_set:rpc_login.RPC_LoginPendingRequest.session_key)
}
inline std::string* RPC_LoginPendingRequest::mutable_session_key() {
  // @@protoc_insertion_point(field_mutable:rpc_login.RPC_LoginPendingRequest.session_key)
  return _internal_mutable_session_key();
}
inline const std::string& RPC_LoginPendingRequest::_internal_session_key() const {
  return session_key_.GetNoArena();
}
inline void RPC_LoginPendingRequest::_internal_set_session_key(const std::string& value) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPC_LoginPendingRequest::set_session_key(std::string&& value) {
  
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_login.RPC_LoginPendingRequest.session_key)
}
inline void RPC_LoginPendingRequest::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_login.RPC_LoginPendingRequest.session_key)
}
inline void RPC_LoginPendingRequest::set_session_key(const char* value, size_t size) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_login.RPC_LoginPendingRequest.session_key)
}
inline std::string* RPC_LoginPendingRequest::_internal_mutable_session_key() {
  
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPC_LoginPendingRequest::release_session_key() {
  // @@protoc_insertion_point(field_release:rpc_login.RPC_LoginPendingRequest.session_key)
  
  return session_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPC_LoginPendingRequest::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:rpc_login.RPC_LoginPendingRequest.session_key)
}

// int32 version = 3;
inline void RPC_LoginPendingRequest::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPC_LoginPendingRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPC_LoginPendingRequest::version() const {
  // @@protoc_insertion_point(field_get:rpc_login.RPC_LoginPendingRequest.version)
  return _internal_version();
}
inline void RPC_LoginPendingRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void RPC_LoginPendingRequest::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:rpc_login.RPC_LoginPendingRequest.version)
}

// uint32 db_id = 4;
inline void RPC_LoginPendingRequest::clear_db_id() {
  db_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPC_LoginPendingRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPC_LoginPendingRequest::db_id() const {
  // @@protoc_insertion_point(field_get:rpc_login.RPC_LoginPendingRequest.db_id)
  return _internal_db_id();
}
inline void RPC_LoginPendingRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  db_id_ = value;
}
inline void RPC_LoginPendingRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:rpc_login.RPC_LoginPendingRequest.db_id)
}

// -------------------------------------------------------------------

// RPC_LoginPendingResponse

// int32 status_code = 1;
inline void RPC_LoginPendingResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPC_LoginPendingResponse::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPC_LoginPendingResponse::status_code() const {
  // @@protoc_insertion_point(field_get:rpc_login.RPC_LoginPendingResponse.status_code)
  return _internal_status_code();
}
inline void RPC_LoginPendingResponse::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void RPC_LoginPendingResponse::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:rpc_login.RPC_LoginPendingResponse.status_code)
}

// uint64 account_id = 2;
inline void RPC_LoginPendingResponse::clear_account_id() {
  account_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPC_LoginPendingResponse::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPC_LoginPendingResponse::account_id() const {
  // @@protoc_insertion_point(field_get:rpc_login.RPC_LoginPendingResponse.account_id)
  return _internal_account_id();
}
inline void RPC_LoginPendingResponse::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_id_ = value;
}
inline void RPC_LoginPendingResponse::set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:rpc_login.RPC_LoginPendingResponse.account_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_login

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5flogin_2eproto
