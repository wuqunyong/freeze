// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_msg.proto

#include "login_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace login_msg {
PROTOBUF_CONSTEXPR HandshakeInitRequest::HandshakeInitRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_random_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeInitRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeInitRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeInitRequestDefaultTypeInternal() {}
  union {
    HandshakeInitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeInitRequestDefaultTypeInternal _HandshakeInitRequest_default_instance_;
PROTOBUF_CONSTEXPR HandshakeInitResponse::HandshakeInitResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_random_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeInitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeInitResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeInitResponseDefaultTypeInternal() {}
  union {
    HandshakeInitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeInitResponseDefaultTypeInternal _HandshakeInitResponse_default_instance_;
PROTOBUF_CONSTEXPR HandshakeEstablishedRequest::HandshakeEstablishedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeEstablishedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeEstablishedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeEstablishedRequestDefaultTypeInternal() {}
  union {
    HandshakeEstablishedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeEstablishedRequestDefaultTypeInternal _HandshakeEstablishedRequest_default_instance_;
PROTOBUF_CONSTEXPR HandshakeEstablishedResponse::HandshakeEstablishedResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeEstablishedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeEstablishedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeEstablishedResponseDefaultTypeInternal() {}
  union {
    HandshakeEstablishedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeEstablishedResponseDefaultTypeInternal _HandshakeEstablishedResponse_default_instance_;
PROTOBUF_CONSTEXPR AccountLoginRequest::AccountLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountLoginRequestDefaultTypeInternal() {}
  union {
    AccountLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountLoginRequestDefaultTypeInternal _AccountLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR AccountLoginResponse::AccountLoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountLoginResponseDefaultTypeInternal() {}
  union {
    AccountLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountLoginResponseDefaultTypeInternal _AccountLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR ClientLoginRequest::ClientLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientLoginRequestDefaultTypeInternal() {}
  union {
    ClientLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientLoginRequestDefaultTypeInternal _ClientLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientLoginResponse::ClientLoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.is_newbie_)*/false
  , /*decltype(_impl_.ammo_)*/0u
  , /*decltype(_impl_.grenades_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientLoginResponseDefaultTypeInternal() {}
  union {
    ClientLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientLoginResponseDefaultTypeInternal _ClientLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR EchoRequest::EchoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value1_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EchoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoRequestDefaultTypeInternal() {}
  union {
    EchoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
PROTOBUF_CONSTEXPR EchoResponse::EchoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value1_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EchoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoResponseDefaultTypeInternal() {}
  union {
    EchoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
}  // namespace login_msg
static ::_pb::Metadata file_level_metadata_login_5fmsg_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_login_5fmsg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_login_5fmsg_2eproto = nullptr;

const uint32_t TableStruct_login_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeInitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeInitRequest, _impl_.client_random_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeInitResponse, _impl_.status_code_),
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeInitResponse, _impl_.server_random_),
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeInitResponse, _impl_.public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeEstablishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeEstablishedRequest, _impl_.encrypted_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeEstablishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::HandshakeEstablishedResponse, _impl_.status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::AccountLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::AccountLoginRequest, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::AccountLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::AccountLoginResponse, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::login_msg::AccountLoginResponse, _impl_.session_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginRequest, _impl_.session_key_),
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginRequest, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginResponse, _impl_.status_code_),
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginResponse, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginResponse, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginResponse, _impl_.is_newbie_),
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginResponse, _impl_.ammo_),
  PROTOBUF_FIELD_OFFSET(::login_msg::ClientLoginResponse, _impl_.grenades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::EchoRequest, _impl_.value1_),
  PROTOBUF_FIELD_OFFSET(::login_msg::EchoRequest, _impl_.value2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_msg::EchoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_msg::EchoResponse, _impl_.value1_),
  PROTOBUF_FIELD_OFFSET(::login_msg::EchoResponse, _impl_.value2_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::login_msg::HandshakeInitRequest)},
  { 7, -1, -1, sizeof(::login_msg::HandshakeInitResponse)},
  { 16, -1, -1, sizeof(::login_msg::HandshakeEstablishedRequest)},
  { 23, -1, -1, sizeof(::login_msg::HandshakeEstablishedResponse)},
  { 30, -1, -1, sizeof(::login_msg::AccountLoginRequest)},
  { 37, -1, -1, sizeof(::login_msg::AccountLoginResponse)},
  { 45, -1, -1, sizeof(::login_msg::ClientLoginRequest)},
  { 54, -1, -1, sizeof(::login_msg::ClientLoginResponse)},
  { 66, -1, -1, sizeof(::login_msg::EchoRequest)},
  { 74, -1, -1, sizeof(::login_msg::EchoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::login_msg::_HandshakeInitRequest_default_instance_._instance,
  &::login_msg::_HandshakeInitResponse_default_instance_._instance,
  &::login_msg::_HandshakeEstablishedRequest_default_instance_._instance,
  &::login_msg::_HandshakeEstablishedResponse_default_instance_._instance,
  &::login_msg::_AccountLoginRequest_default_instance_._instance,
  &::login_msg::_AccountLoginResponse_default_instance_._instance,
  &::login_msg::_ClientLoginRequest_default_instance_._instance,
  &::login_msg::_ClientLoginResponse_default_instance_._instance,
  &::login_msg::_EchoRequest_default_instance_._instance,
  &::login_msg::_EchoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_login_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017login_msg.proto\022\tlogin_msg\"-\n\024Handshak"
  "eInitRequest\022\025\n\rclient_random\030\001 \001(\t\"W\n\025H"
  "andshakeInitResponse\022\023\n\013status_code\030\001 \001("
  "\005\022\025\n\rserver_random\030\002 \001(\t\022\022\n\npublic_key\030\003"
  " \001(\t\"4\n\033HandshakeEstablishedRequest\022\025\n\re"
  "ncrypted_key\030\001 \001(\014\"3\n\034HandshakeEstablish"
  "edResponse\022\023\n\013status_code\030\001 \001(\005\")\n\023Accou"
  "ntLoginRequest\022\022\n\naccount_id\030\001 \001(\004\"<\n\024Ac"
  "countLoginResponse\022\017\n\007user_id\030\001 \001(\004\022\023\n\013s"
  "ession_key\030\002 \001(\t\"K\n\022ClientLoginRequest\022\017"
  "\n\007user_id\030\001 \001(\004\022\023\n\013session_key\030\002 \001(\t\022\017\n\007"
  "version\030\003 \001(\005\"\177\n\023ClientLoginResponse\022\023\n\013"
  "status_code\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\004\022\017\n\007ve"
  "rsion\030\003 \001(\005\022\021\n\tis_newbie\030\004 \001(\010\022\014\n\004ammo\030\005"
  " \001(\r\022\020\n\010grenades\030\006 \001(\r\"-\n\013EchoRequest\022\016\n"
  "\006value1\030\001 \001(\004\022\016\n\006value2\030\002 \001(\t\".\n\014EchoRes"
  "ponse\022\016\n\006value1\030\001 \001(\004\022\016\n\006value2\030\002 \001(\tb\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_login_5fmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_login_5fmsg_2eproto = {
    false, false, 685, descriptor_table_protodef_login_5fmsg_2eproto,
    "login_msg.proto",
    &descriptor_table_login_5fmsg_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_login_5fmsg_2eproto::offsets,
    file_level_metadata_login_5fmsg_2eproto, file_level_enum_descriptors_login_5fmsg_2eproto,
    file_level_service_descriptors_login_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_login_5fmsg_2eproto_getter() {
  return &descriptor_table_login_5fmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_login_5fmsg_2eproto(&descriptor_table_login_5fmsg_2eproto);
namespace login_msg {

// ===================================================================

class HandshakeInitRequest::_Internal {
 public:
};

HandshakeInitRequest::HandshakeInitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.HandshakeInitRequest)
}
HandshakeInitRequest::HandshakeInitRequest(const HandshakeInitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeInitRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_random_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_random().empty()) {
    _this->_impl_.client_random_.Set(from._internal_client_random(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:login_msg.HandshakeInitRequest)
}

inline void HandshakeInitRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_random_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeInitRequest::~HandshakeInitRequest() {
  // @@protoc_insertion_point(destructor:login_msg.HandshakeInitRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeInitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_random_.Destroy();
}

void HandshakeInitRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeInitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.HandshakeInitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_random_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeInitRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_random = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_random();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "login_msg.HandshakeInitRequest.client_random"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeInitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.HandshakeInitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_random = 1;
  if (!this->_internal_client_random().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_random().data(), static_cast<int>(this->_internal_client_random().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.HandshakeInitRequest.client_random");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_random(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.HandshakeInitRequest)
  return target;
}

size_t HandshakeInitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.HandshakeInitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_random = 1;
  if (!this->_internal_client_random().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_random());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeInitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeInitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeInitRequest::GetClassData() const { return &_class_data_; }


void HandshakeInitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeInitRequest*>(&to_msg);
  auto& from = static_cast<const HandshakeInitRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.HandshakeInitRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_random().empty()) {
    _this->_internal_set_client_random(from._internal_client_random());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeInitRequest::CopyFrom(const HandshakeInitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.HandshakeInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeInitRequest::IsInitialized() const {
  return true;
}

void HandshakeInitRequest::InternalSwap(HandshakeInitRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_random_, lhs_arena,
      &other->_impl_.client_random_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeInitRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[0]);
}

// ===================================================================

class HandshakeInitResponse::_Internal {
 public:
};

HandshakeInitResponse::HandshakeInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.HandshakeInitResponse)
}
HandshakeInitResponse::HandshakeInitResponse(const HandshakeInitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeInitResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_random_){}
    , decltype(_impl_.public_key_){}
    , decltype(_impl_.status_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_random().empty()) {
    _this->_impl_.server_random_.Set(from._internal_server_random(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_code_ = from._impl_.status_code_;
  // @@protoc_insertion_point(copy_constructor:login_msg.HandshakeInitResponse)
}

inline void HandshakeInitResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_random_){}
    , decltype(_impl_.public_key_){}
    , decltype(_impl_.status_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeInitResponse::~HandshakeInitResponse() {
  // @@protoc_insertion_point(destructor:login_msg.HandshakeInitResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeInitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_random_.Destroy();
  _impl_.public_key_.Destroy();
}

void HandshakeInitResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.HandshakeInitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_random_.ClearToEmpty();
  _impl_.public_key_.ClearToEmpty();
  _impl_.status_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeInitResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string server_random = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_random();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "login_msg.HandshakeInitResponse.server_random"));
        } else
          goto handle_unusual;
        continue;
      // string public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "login_msg.HandshakeInitResponse.public_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeInitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.HandshakeInitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // string server_random = 2;
  if (!this->_internal_server_random().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_random().data(), static_cast<int>(this->_internal_server_random().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.HandshakeInitResponse.server_random");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_random(), target);
  }

  // string public_key = 3;
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.HandshakeInitResponse.public_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.HandshakeInitResponse)
  return target;
}

size_t HandshakeInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.HandshakeInitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_random = 2;
  if (!this->_internal_server_random().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_random());
  }

  // string public_key = 3;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeInitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeInitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeInitResponse::GetClassData() const { return &_class_data_; }


void HandshakeInitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeInitResponse*>(&to_msg);
  auto& from = static_cast<const HandshakeInitResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.HandshakeInitResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_random().empty()) {
    _this->_internal_set_server_random(from._internal_server_random());
  }
  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeInitResponse::CopyFrom(const HandshakeInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.HandshakeInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeInitResponse::IsInitialized() const {
  return true;
}

void HandshakeInitResponse::InternalSwap(HandshakeInitResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_random_, lhs_arena,
      &other->_impl_.server_random_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  swap(_impl_.status_code_, other->_impl_.status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeInitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[1]);
}

// ===================================================================

class HandshakeEstablishedRequest::_Internal {
 public:
};

HandshakeEstablishedRequest::HandshakeEstablishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.HandshakeEstablishedRequest)
}
HandshakeEstablishedRequest::HandshakeEstablishedRequest(const HandshakeEstablishedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeEstablishedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encrypted_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_key().empty()) {
    _this->_impl_.encrypted_key_.Set(from._internal_encrypted_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:login_msg.HandshakeEstablishedRequest)
}

inline void HandshakeEstablishedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encrypted_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeEstablishedRequest::~HandshakeEstablishedRequest() {
  // @@protoc_insertion_point(destructor:login_msg.HandshakeEstablishedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeEstablishedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_key_.Destroy();
}

void HandshakeEstablishedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeEstablishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.HandshakeEstablishedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeEstablishedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encrypted_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encrypted_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeEstablishedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.HandshakeEstablishedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encrypted_key = 1;
  if (!this->_internal_encrypted_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encrypted_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.HandshakeEstablishedRequest)
  return target;
}

size_t HandshakeEstablishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.HandshakeEstablishedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encrypted_key = 1;
  if (!this->_internal_encrypted_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeEstablishedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeEstablishedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeEstablishedRequest::GetClassData() const { return &_class_data_; }


void HandshakeEstablishedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeEstablishedRequest*>(&to_msg);
  auto& from = static_cast<const HandshakeEstablishedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.HandshakeEstablishedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encrypted_key().empty()) {
    _this->_internal_set_encrypted_key(from._internal_encrypted_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeEstablishedRequest::CopyFrom(const HandshakeEstablishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.HandshakeEstablishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeEstablishedRequest::IsInitialized() const {
  return true;
}

void HandshakeEstablishedRequest::InternalSwap(HandshakeEstablishedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_key_, lhs_arena,
      &other->_impl_.encrypted_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeEstablishedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[2]);
}

// ===================================================================

class HandshakeEstablishedResponse::_Internal {
 public:
};

HandshakeEstablishedResponse::HandshakeEstablishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.HandshakeEstablishedResponse)
}
HandshakeEstablishedResponse::HandshakeEstablishedResponse(const HandshakeEstablishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeEstablishedResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_code_ = from._impl_.status_code_;
  // @@protoc_insertion_point(copy_constructor:login_msg.HandshakeEstablishedResponse)
}

inline void HandshakeEstablishedResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandshakeEstablishedResponse::~HandshakeEstablishedResponse() {
  // @@protoc_insertion_point(destructor:login_msg.HandshakeEstablishedResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeEstablishedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandshakeEstablishedResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeEstablishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.HandshakeEstablishedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeEstablishedResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeEstablishedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.HandshakeEstablishedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.HandshakeEstablishedResponse)
  return target;
}

size_t HandshakeEstablishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.HandshakeEstablishedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeEstablishedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeEstablishedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeEstablishedResponse::GetClassData() const { return &_class_data_; }


void HandshakeEstablishedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeEstablishedResponse*>(&to_msg);
  auto& from = static_cast<const HandshakeEstablishedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.HandshakeEstablishedResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeEstablishedResponse::CopyFrom(const HandshakeEstablishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.HandshakeEstablishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeEstablishedResponse::IsInitialized() const {
  return true;
}

void HandshakeEstablishedResponse::InternalSwap(HandshakeEstablishedResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_code_, other->_impl_.status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeEstablishedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[3]);
}

// ===================================================================

class AccountLoginRequest::_Internal {
 public:
};

AccountLoginRequest::AccountLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.AccountLoginRequest)
}
AccountLoginRequest::AccountLoginRequest(const AccountLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:login_msg.AccountLoginRequest)
}

inline void AccountLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccountLoginRequest::~AccountLoginRequest() {
  // @@protoc_insertion_point(destructor:login_msg.AccountLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.AccountLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.AccountLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.AccountLoginRequest)
  return target;
}

size_t AccountLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.AccountLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountLoginRequest::GetClassData() const { return &_class_data_; }


void AccountLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountLoginRequest*>(&to_msg);
  auto& from = static_cast<const AccountLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.AccountLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountLoginRequest::CopyFrom(const AccountLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.AccountLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginRequest::IsInitialized() const {
  return true;
}

void AccountLoginRequest::InternalSwap(AccountLoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[4]);
}

// ===================================================================

class AccountLoginResponse::_Internal {
 public:
};

AccountLoginResponse::AccountLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.AccountLoginResponse)
}
AccountLoginResponse::AccountLoginResponse(const AccountLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountLoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_key().empty()) {
    _this->_impl_.session_key_.Set(from._internal_session_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:login_msg.AccountLoginResponse)
}

inline void AccountLoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_){}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountLoginResponse::~AccountLoginResponse() {
  // @@protoc_insertion_point(destructor:login_msg.AccountLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_key_.Destroy();
}

void AccountLoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.AccountLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_key_.ClearToEmpty();
  _impl_.user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "login_msg.AccountLoginResponse.session_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.AccountLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string session_key = 2;
  if (!this->_internal_session_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.AccountLoginResponse.session_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.AccountLoginResponse)
  return target;
}

size_t AccountLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.AccountLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_key = 2;
  if (!this->_internal_session_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountLoginResponse::GetClassData() const { return &_class_data_; }


void AccountLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountLoginResponse*>(&to_msg);
  auto& from = static_cast<const AccountLoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.AccountLoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_key().empty()) {
    _this->_internal_set_session_key(from._internal_session_key());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountLoginResponse::CopyFrom(const AccountLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.AccountLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginResponse::IsInitialized() const {
  return true;
}

void AccountLoginResponse::InternalSwap(AccountLoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_key_, lhs_arena,
      &other->_impl_.session_key_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[5]);
}

// ===================================================================

class ClientLoginRequest::_Internal {
 public:
};

ClientLoginRequest::ClientLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.ClientLoginRequest)
}
ClientLoginRequest::ClientLoginRequest(const ClientLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_key().empty()) {
    _this->_impl_.session_key_.Set(from._internal_session_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:login_msg.ClientLoginRequest)
}

inline void ClientLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_){}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientLoginRequest::~ClientLoginRequest() {
  // @@protoc_insertion_point(destructor:login_msg.ClientLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_key_.Destroy();
}

void ClientLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.ClientLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_key_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "login_msg.ClientLoginRequest.session_key"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.ClientLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string session_key = 2;
  if (!this->_internal_session_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.ClientLoginRequest.session_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_key(), target);
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.ClientLoginRequest)
  return target;
}

size_t ClientLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.ClientLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_key = 2;
  if (!this->_internal_session_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientLoginRequest::GetClassData() const { return &_class_data_; }


void ClientLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientLoginRequest*>(&to_msg);
  auto& from = static_cast<const ClientLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.ClientLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_key().empty()) {
    _this->_internal_set_session_key(from._internal_session_key());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientLoginRequest::CopyFrom(const ClientLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.ClientLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginRequest::IsInitialized() const {
  return true;
}

void ClientLoginRequest::InternalSwap(ClientLoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_key_, lhs_arena,
      &other->_impl_.session_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientLoginRequest, _impl_.version_)
      + sizeof(ClientLoginRequest::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(ClientLoginRequest, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[6]);
}

// ===================================================================

class ClientLoginResponse::_Internal {
 public:
};

ClientLoginResponse::ClientLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.ClientLoginResponse)
}
ClientLoginResponse::ClientLoginResponse(const ClientLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientLoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.status_code_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.is_newbie_){}
    , decltype(_impl_.ammo_){}
    , decltype(_impl_.grenades_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grenades_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.grenades_));
  // @@protoc_insertion_point(copy_constructor:login_msg.ClientLoginResponse)
}

inline void ClientLoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.status_code_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.is_newbie_){false}
    , decltype(_impl_.ammo_){0u}
    , decltype(_impl_.grenades_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientLoginResponse::~ClientLoginResponse() {
  // @@protoc_insertion_point(destructor:login_msg.ClientLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientLoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.ClientLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grenades_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.grenades_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_newbie = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_newbie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ammo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ammo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grenades = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grenades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.ClientLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // bool is_newbie = 4;
  if (this->_internal_is_newbie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_newbie(), target);
  }

  // uint32 ammo = 5;
  if (this->_internal_ammo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ammo(), target);
  }

  // uint32 grenades = 6;
  if (this->_internal_grenades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_grenades(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.ClientLoginResponse)
  return target;
}

size_t ClientLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.ClientLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status_code());
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // bool is_newbie = 4;
  if (this->_internal_is_newbie() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ammo = 5;
  if (this->_internal_ammo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ammo());
  }

  // uint32 grenades = 6;
  if (this->_internal_grenades() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grenades());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientLoginResponse::GetClassData() const { return &_class_data_; }


void ClientLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientLoginResponse*>(&to_msg);
  auto& from = static_cast<const ClientLoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.ClientLoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_is_newbie() != 0) {
    _this->_internal_set_is_newbie(from._internal_is_newbie());
  }
  if (from._internal_ammo() != 0) {
    _this->_internal_set_ammo(from._internal_ammo());
  }
  if (from._internal_grenades() != 0) {
    _this->_internal_set_grenades(from._internal_grenades());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientLoginResponse::CopyFrom(const ClientLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.ClientLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginResponse::IsInitialized() const {
  return true;
}

void ClientLoginResponse::InternalSwap(ClientLoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientLoginResponse, _impl_.grenades_)
      + sizeof(ClientLoginResponse::_impl_.grenades_)
      - PROTOBUF_FIELD_OFFSET(ClientLoginResponse, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[7]);
}

// ===================================================================

class EchoRequest::_Internal {
 public:
};

EchoRequest::EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EchoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value2().empty()) {
    _this->_impl_.value2_.Set(from._internal_value2(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value1_ = from._impl_.value1_;
  // @@protoc_insertion_point(copy_constructor:login_msg.EchoRequest)
}

inline void EchoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:login_msg.EchoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value2_.Destroy();
}

void EchoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.EchoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value2_.ClearToEmpty();
  _impl_.value1_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "login_msg.EchoRequest.value2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.EchoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value1(), target);
  }

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value2().data(), static_cast<int>(this->_internal_value2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.EchoRequest.value2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.EchoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value2());
  }

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EchoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoRequest::GetClassData() const { return &_class_data_; }


void EchoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EchoRequest*>(&to_msg);
  auto& from = static_cast<const EchoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.EchoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value2().empty()) {
    _this->_internal_set_value2(from._internal_value2());
  }
  if (from._internal_value1() != 0) {
    _this->_internal_set_value1(from._internal_value1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  return true;
}

void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value2_, lhs_arena,
      &other->_impl_.value2_, rhs_arena
  );
  swap(_impl_.value1_, other->_impl_.value1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[8]);
}

// ===================================================================

class EchoResponse::_Internal {
 public:
};

EchoResponse::EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:login_msg.EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EchoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value2().empty()) {
    _this->_impl_.value2_.Set(from._internal_value2(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value1_ = from._impl_.value1_;
  // @@protoc_insertion_point(copy_constructor:login_msg.EchoResponse)
}

inline void EchoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:login_msg.EchoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value2_.Destroy();
}

void EchoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:login_msg.EchoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value2_.ClearToEmpty();
  _impl_.value1_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "login_msg.EchoResponse.value2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_msg.EchoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value1(), target);
  }

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value2().data(), static_cast<int>(this->_internal_value2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "login_msg.EchoResponse.value2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_msg.EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_msg.EchoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value2());
  }

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EchoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoResponse::GetClassData() const { return &_class_data_; }


void EchoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EchoResponse*>(&to_msg);
  auto& from = static_cast<const EchoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:login_msg.EchoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value2().empty()) {
    _this->_internal_set_value2(from._internal_value2());
  }
  if (from._internal_value1() != 0) {
    _this->_internal_set_value1(from._internal_value1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_msg.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  return true;
}

void EchoResponse::InternalSwap(EchoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value2_, lhs_arena,
      &other->_impl_.value2_, rhs_arena
  );
  swap(_impl_.value1_, other->_impl_.value1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_login_5fmsg_2eproto_getter, &descriptor_table_login_5fmsg_2eproto_once,
      file_level_metadata_login_5fmsg_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace login_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::login_msg::HandshakeInitRequest*
Arena::CreateMaybeMessage< ::login_msg::HandshakeInitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::HandshakeInitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::HandshakeInitResponse*
Arena::CreateMaybeMessage< ::login_msg::HandshakeInitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::HandshakeInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::HandshakeEstablishedRequest*
Arena::CreateMaybeMessage< ::login_msg::HandshakeEstablishedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::HandshakeEstablishedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::HandshakeEstablishedResponse*
Arena::CreateMaybeMessage< ::login_msg::HandshakeEstablishedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::HandshakeEstablishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::AccountLoginRequest*
Arena::CreateMaybeMessage< ::login_msg::AccountLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::AccountLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::AccountLoginResponse*
Arena::CreateMaybeMessage< ::login_msg::AccountLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::AccountLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::ClientLoginRequest*
Arena::CreateMaybeMessage< ::login_msg::ClientLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::ClientLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::ClientLoginResponse*
Arena::CreateMaybeMessage< ::login_msg::ClientLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::ClientLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::EchoRequest*
Arena::CreateMaybeMessage< ::login_msg::EchoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::EchoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::login_msg::EchoResponse*
Arena::CreateMaybeMessage< ::login_msg::EchoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_msg::EchoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
