// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fmsg_2eproto;
namespace login_msg {
class AccountLoginRequest;
struct AccountLoginRequestDefaultTypeInternal;
extern AccountLoginRequestDefaultTypeInternal _AccountLoginRequest_default_instance_;
class AccountLoginResponse;
struct AccountLoginResponseDefaultTypeInternal;
extern AccountLoginResponseDefaultTypeInternal _AccountLoginResponse_default_instance_;
class ClientLoginRequest;
struct ClientLoginRequestDefaultTypeInternal;
extern ClientLoginRequestDefaultTypeInternal _ClientLoginRequest_default_instance_;
class ClientLoginResponse;
struct ClientLoginResponseDefaultTypeInternal;
extern ClientLoginResponseDefaultTypeInternal _ClientLoginResponse_default_instance_;
class EchoRequest;
struct EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
struct EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
class HandshakeEstablishedRequest;
struct HandshakeEstablishedRequestDefaultTypeInternal;
extern HandshakeEstablishedRequestDefaultTypeInternal _HandshakeEstablishedRequest_default_instance_;
class HandshakeEstablishedResponse;
struct HandshakeEstablishedResponseDefaultTypeInternal;
extern HandshakeEstablishedResponseDefaultTypeInternal _HandshakeEstablishedResponse_default_instance_;
class HandshakeInitRequest;
struct HandshakeInitRequestDefaultTypeInternal;
extern HandshakeInitRequestDefaultTypeInternal _HandshakeInitRequest_default_instance_;
class HandshakeInitResponse;
struct HandshakeInitResponseDefaultTypeInternal;
extern HandshakeInitResponseDefaultTypeInternal _HandshakeInitResponse_default_instance_;
}  // namespace login_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::login_msg::AccountLoginRequest* Arena::CreateMaybeMessage<::login_msg::AccountLoginRequest>(Arena*);
template<> ::login_msg::AccountLoginResponse* Arena::CreateMaybeMessage<::login_msg::AccountLoginResponse>(Arena*);
template<> ::login_msg::ClientLoginRequest* Arena::CreateMaybeMessage<::login_msg::ClientLoginRequest>(Arena*);
template<> ::login_msg::ClientLoginResponse* Arena::CreateMaybeMessage<::login_msg::ClientLoginResponse>(Arena*);
template<> ::login_msg::EchoRequest* Arena::CreateMaybeMessage<::login_msg::EchoRequest>(Arena*);
template<> ::login_msg::EchoResponse* Arena::CreateMaybeMessage<::login_msg::EchoResponse>(Arena*);
template<> ::login_msg::HandshakeEstablishedRequest* Arena::CreateMaybeMessage<::login_msg::HandshakeEstablishedRequest>(Arena*);
template<> ::login_msg::HandshakeEstablishedResponse* Arena::CreateMaybeMessage<::login_msg::HandshakeEstablishedResponse>(Arena*);
template<> ::login_msg::HandshakeInitRequest* Arena::CreateMaybeMessage<::login_msg::HandshakeInitRequest>(Arena*);
template<> ::login_msg::HandshakeInitResponse* Arena::CreateMaybeMessage<::login_msg::HandshakeInitResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace login_msg {

// ===================================================================

class HandshakeInitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.HandshakeInitRequest) */ {
 public:
  inline HandshakeInitRequest() : HandshakeInitRequest(nullptr) {}
  ~HandshakeInitRequest() override;
  explicit PROTOBUF_CONSTEXPR HandshakeInitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeInitRequest(const HandshakeInitRequest& from);
  HandshakeInitRequest(HandshakeInitRequest&& from) noexcept
    : HandshakeInitRequest() {
    *this = ::std::move(from);
  }

  inline HandshakeInitRequest& operator=(const HandshakeInitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeInitRequest& operator=(HandshakeInitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeInitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeInitRequest* internal_default_instance() {
    return reinterpret_cast<const HandshakeInitRequest*>(
               &_HandshakeInitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HandshakeInitRequest& a, HandshakeInitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeInitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeInitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeInitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeInitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandshakeInitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandshakeInitRequest& from) {
    HandshakeInitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeInitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.HandshakeInitRequest";
  }
  protected:
  explicit HandshakeInitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientRandomFieldNumber = 1,
  };
  // string client_random = 1;
  void clear_client_random();
  const std::string& client_random() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_random(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_random();
  PROTOBUF_NODISCARD std::string* release_client_random();
  void set_allocated_client_random(std::string* client_random);
  private:
  const std::string& _internal_client_random() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_random(const std::string& value);
  std::string* _internal_mutable_client_random();
  public:

  // @@protoc_insertion_point(class_scope:login_msg.HandshakeInitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_random_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class HandshakeInitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.HandshakeInitResponse) */ {
 public:
  inline HandshakeInitResponse() : HandshakeInitResponse(nullptr) {}
  ~HandshakeInitResponse() override;
  explicit PROTOBUF_CONSTEXPR HandshakeInitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeInitResponse(const HandshakeInitResponse& from);
  HandshakeInitResponse(HandshakeInitResponse&& from) noexcept
    : HandshakeInitResponse() {
    *this = ::std::move(from);
  }

  inline HandshakeInitResponse& operator=(const HandshakeInitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeInitResponse& operator=(HandshakeInitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeInitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeInitResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeInitResponse*>(
               &_HandshakeInitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandshakeInitResponse& a, HandshakeInitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeInitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeInitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeInitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeInitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandshakeInitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandshakeInitResponse& from) {
    HandshakeInitResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeInitResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.HandshakeInitResponse";
  }
  protected:
  explicit HandshakeInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerRandomFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kStatusCodeFieldNumber = 1,
  };
  // string server_random = 2;
  void clear_server_random();
  const std::string& server_random() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_random(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_random();
  PROTOBUF_NODISCARD std::string* release_server_random();
  void set_allocated_server_random(std::string* server_random);
  private:
  const std::string& _internal_server_random() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_random(const std::string& value);
  std::string* _internal_mutable_server_random();
  public:

  // string public_key = 3;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // int32 status_code = 1;
  void clear_status_code();
  int32_t status_code() const;
  void set_status_code(int32_t value);
  private:
  int32_t _internal_status_code() const;
  void _internal_set_status_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.HandshakeInitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_random_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    int32_t status_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class HandshakeEstablishedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.HandshakeEstablishedRequest) */ {
 public:
  inline HandshakeEstablishedRequest() : HandshakeEstablishedRequest(nullptr) {}
  ~HandshakeEstablishedRequest() override;
  explicit PROTOBUF_CONSTEXPR HandshakeEstablishedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeEstablishedRequest(const HandshakeEstablishedRequest& from);
  HandshakeEstablishedRequest(HandshakeEstablishedRequest&& from) noexcept
    : HandshakeEstablishedRequest() {
    *this = ::std::move(from);
  }

  inline HandshakeEstablishedRequest& operator=(const HandshakeEstablishedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeEstablishedRequest& operator=(HandshakeEstablishedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeEstablishedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeEstablishedRequest* internal_default_instance() {
    return reinterpret_cast<const HandshakeEstablishedRequest*>(
               &_HandshakeEstablishedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HandshakeEstablishedRequest& a, HandshakeEstablishedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeEstablishedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeEstablishedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeEstablishedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeEstablishedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandshakeEstablishedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandshakeEstablishedRequest& from) {
    HandshakeEstablishedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeEstablishedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.HandshakeEstablishedRequest";
  }
  protected:
  explicit HandshakeEstablishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedKeyFieldNumber = 1,
  };
  // bytes encrypted_key = 1;
  void clear_encrypted_key();
  const std::string& encrypted_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_key();
  PROTOBUF_NODISCARD std::string* release_encrypted_key();
  void set_allocated_encrypted_key(std::string* encrypted_key);
  private:
  const std::string& _internal_encrypted_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_key(const std::string& value);
  std::string* _internal_mutable_encrypted_key();
  public:

  // @@protoc_insertion_point(class_scope:login_msg.HandshakeEstablishedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class HandshakeEstablishedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.HandshakeEstablishedResponse) */ {
 public:
  inline HandshakeEstablishedResponse() : HandshakeEstablishedResponse(nullptr) {}
  ~HandshakeEstablishedResponse() override;
  explicit PROTOBUF_CONSTEXPR HandshakeEstablishedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeEstablishedResponse(const HandshakeEstablishedResponse& from);
  HandshakeEstablishedResponse(HandshakeEstablishedResponse&& from) noexcept
    : HandshakeEstablishedResponse() {
    *this = ::std::move(from);
  }

  inline HandshakeEstablishedResponse& operator=(const HandshakeEstablishedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeEstablishedResponse& operator=(HandshakeEstablishedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeEstablishedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeEstablishedResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeEstablishedResponse*>(
               &_HandshakeEstablishedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HandshakeEstablishedResponse& a, HandshakeEstablishedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeEstablishedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeEstablishedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeEstablishedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeEstablishedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandshakeEstablishedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HandshakeEstablishedResponse& from) {
    HandshakeEstablishedResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeEstablishedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.HandshakeEstablishedResponse";
  }
  protected:
  explicit HandshakeEstablishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // int32 status_code = 1;
  void clear_status_code();
  int32_t status_code() const;
  void set_status_code(int32_t value);
  private:
  int32_t _internal_status_code() const;
  void _internal_set_status_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.HandshakeEstablishedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class AccountLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.AccountLoginRequest) */ {
 public:
  inline AccountLoginRequest() : AccountLoginRequest(nullptr) {}
  ~AccountLoginRequest() override;
  explicit PROTOBUF_CONSTEXPR AccountLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountLoginRequest(const AccountLoginRequest& from);
  AccountLoginRequest(AccountLoginRequest&& from) noexcept
    : AccountLoginRequest() {
    *this = ::std::move(from);
  }

  inline AccountLoginRequest& operator=(const AccountLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginRequest& operator=(AccountLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountLoginRequest* internal_default_instance() {
    return reinterpret_cast<const AccountLoginRequest*>(
               &_AccountLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountLoginRequest& a, AccountLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountLoginRequest& from) {
    AccountLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.AccountLoginRequest";
  }
  protected:
  explicit AccountLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // uint64 account_id = 1;
  void clear_account_id();
  uint64_t account_id() const;
  void set_account_id(uint64_t value);
  private:
  uint64_t _internal_account_id() const;
  void _internal_set_account_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.AccountLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class AccountLoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.AccountLoginResponse) */ {
 public:
  inline AccountLoginResponse() : AccountLoginResponse(nullptr) {}
  ~AccountLoginResponse() override;
  explicit PROTOBUF_CONSTEXPR AccountLoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountLoginResponse(const AccountLoginResponse& from);
  AccountLoginResponse(AccountLoginResponse&& from) noexcept
    : AccountLoginResponse() {
    *this = ::std::move(from);
  }

  inline AccountLoginResponse& operator=(const AccountLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginResponse& operator=(AccountLoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountLoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountLoginResponse* internal_default_instance() {
    return reinterpret_cast<const AccountLoginResponse*>(
               &_AccountLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AccountLoginResponse& a, AccountLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountLoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountLoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountLoginResponse& from) {
    AccountLoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.AccountLoginResponse";
  }
  protected:
  explicit AccountLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string session_key = 2;
  void clear_session_key();
  const std::string& session_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_key();
  PROTOBUF_NODISCARD std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.AccountLoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
    uint64_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ClientLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.ClientLoginRequest) */ {
 public:
  inline ClientLoginRequest() : ClientLoginRequest(nullptr) {}
  ~ClientLoginRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientLoginRequest(const ClientLoginRequest& from);
  ClientLoginRequest(ClientLoginRequest&& from) noexcept
    : ClientLoginRequest() {
    *this = ::std::move(from);
  }

  inline ClientLoginRequest& operator=(const ClientLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLoginRequest& operator=(ClientLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLoginRequest* internal_default_instance() {
    return reinterpret_cast<const ClientLoginRequest*>(
               &_ClientLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientLoginRequest& a, ClientLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientLoginRequest& from) {
    ClientLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.ClientLoginRequest";
  }
  protected:
  explicit ClientLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // string session_key = 2;
  void clear_session_key();
  const std::string& session_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_key();
  PROTOBUF_NODISCARD std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.ClientLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
    uint64_t user_id_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ClientLoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.ClientLoginResponse) */ {
 public:
  inline ClientLoginResponse() : ClientLoginResponse(nullptr) {}
  ~ClientLoginResponse() override;
  explicit PROTOBUF_CONSTEXPR ClientLoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientLoginResponse(const ClientLoginResponse& from);
  ClientLoginResponse(ClientLoginResponse&& from) noexcept
    : ClientLoginResponse() {
    *this = ::std::move(from);
  }

  inline ClientLoginResponse& operator=(const ClientLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLoginResponse& operator=(ClientLoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLoginResponse* internal_default_instance() {
    return reinterpret_cast<const ClientLoginResponse*>(
               &_ClientLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClientLoginResponse& a, ClientLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientLoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientLoginResponse& from) {
    ClientLoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientLoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.ClientLoginResponse";
  }
  protected:
  explicit ClientLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kVersionFieldNumber = 3,
    kIsNewbieFieldNumber = 4,
    kAmmoFieldNumber = 5,
    kGrenadesFieldNumber = 6,
  };
  // uint64 user_id = 2;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // int32 status_code = 1;
  void clear_status_code();
  int32_t status_code() const;
  void set_status_code(int32_t value);
  private:
  int32_t _internal_status_code() const;
  void _internal_set_status_code(int32_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // bool is_newbie = 4;
  void clear_is_newbie();
  bool is_newbie() const;
  void set_is_newbie(bool value);
  private:
  bool _internal_is_newbie() const;
  void _internal_set_is_newbie(bool value);
  public:

  // uint32 ammo = 5;
  void clear_ammo();
  uint32_t ammo() const;
  void set_ammo(uint32_t value);
  private:
  uint32_t _internal_ammo() const;
  void _internal_set_ammo(uint32_t value);
  public:

  // uint32 grenades = 6;
  void clear_grenades();
  uint32_t grenades() const;
  void set_grenades(uint32_t value);
  private:
  uint32_t _internal_grenades() const;
  void _internal_set_grenades(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.ClientLoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t user_id_;
    int32_t status_code_;
    int32_t version_;
    bool is_newbie_;
    uint32_t ammo_;
    uint32_t grenades_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class EchoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {}
  ~EchoRequest() override;
  explicit PROTOBUF_CONSTEXPR EchoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EchoRequest& from) {
    EchoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value2();
  PROTOBUF_NODISCARD std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  uint64_t value1() const;
  void set_value1(uint64_t value);
  private:
  uint64_t _internal_value1() const;
  void _internal_set_value1(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.EchoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
    uint64_t value1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_msg.EchoResponse) */ {
 public:
  inline EchoResponse() : EchoResponse(nullptr) {}
  ~EchoResponse() override;
  explicit PROTOBUF_CONSTEXPR EchoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResponse(const EchoResponse& from);
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EchoResponse& from) {
    EchoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_msg.EchoResponse";
  }
  protected:
  explicit EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value2();
  PROTOBUF_NODISCARD std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  uint64_t value1() const;
  void set_value1(uint64_t value);
  private:
  uint64_t _internal_value1() const;
  void _internal_set_value1(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_msg.EchoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
    uint64_t value1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_login_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HandshakeInitRequest

// string client_random = 1;
inline void HandshakeInitRequest::clear_client_random() {
  _impl_.client_random_.ClearToEmpty();
}
inline const std::string& HandshakeInitRequest::client_random() const {
  // @@protoc_insertion_point(field_get:login_msg.HandshakeInitRequest.client_random)
  return _internal_client_random();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeInitRequest::set_client_random(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_random_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.HandshakeInitRequest.client_random)
}
inline std::string* HandshakeInitRequest::mutable_client_random() {
  std::string* _s = _internal_mutable_client_random();
  // @@protoc_insertion_point(field_mutable:login_msg.HandshakeInitRequest.client_random)
  return _s;
}
inline const std::string& HandshakeInitRequest::_internal_client_random() const {
  return _impl_.client_random_.Get();
}
inline void HandshakeInitRequest::_internal_set_client_random(const std::string& value) {
  
  _impl_.client_random_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeInitRequest::_internal_mutable_client_random() {
  
  return _impl_.client_random_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeInitRequest::release_client_random() {
  // @@protoc_insertion_point(field_release:login_msg.HandshakeInitRequest.client_random)
  return _impl_.client_random_.Release();
}
inline void HandshakeInitRequest::set_allocated_client_random(std::string* client_random) {
  if (client_random != nullptr) {
    
  } else {
    
  }
  _impl_.client_random_.SetAllocated(client_random, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_random_.IsDefault()) {
    _impl_.client_random_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.HandshakeInitRequest.client_random)
}

// -------------------------------------------------------------------

// HandshakeInitResponse

// int32 status_code = 1;
inline void HandshakeInitResponse::clear_status_code() {
  _impl_.status_code_ = 0;
}
inline int32_t HandshakeInitResponse::_internal_status_code() const {
  return _impl_.status_code_;
}
inline int32_t HandshakeInitResponse::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.HandshakeInitResponse.status_code)
  return _internal_status_code();
}
inline void HandshakeInitResponse::_internal_set_status_code(int32_t value) {
  
  _impl_.status_code_ = value;
}
inline void HandshakeInitResponse::set_status_code(int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.HandshakeInitResponse.status_code)
}

// string server_random = 2;
inline void HandshakeInitResponse::clear_server_random() {
  _impl_.server_random_.ClearToEmpty();
}
inline const std::string& HandshakeInitResponse::server_random() const {
  // @@protoc_insertion_point(field_get:login_msg.HandshakeInitResponse.server_random)
  return _internal_server_random();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeInitResponse::set_server_random(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_random_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.HandshakeInitResponse.server_random)
}
inline std::string* HandshakeInitResponse::mutable_server_random() {
  std::string* _s = _internal_mutable_server_random();
  // @@protoc_insertion_point(field_mutable:login_msg.HandshakeInitResponse.server_random)
  return _s;
}
inline const std::string& HandshakeInitResponse::_internal_server_random() const {
  return _impl_.server_random_.Get();
}
inline void HandshakeInitResponse::_internal_set_server_random(const std::string& value) {
  
  _impl_.server_random_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeInitResponse::_internal_mutable_server_random() {
  
  return _impl_.server_random_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeInitResponse::release_server_random() {
  // @@protoc_insertion_point(field_release:login_msg.HandshakeInitResponse.server_random)
  return _impl_.server_random_.Release();
}
inline void HandshakeInitResponse::set_allocated_server_random(std::string* server_random) {
  if (server_random != nullptr) {
    
  } else {
    
  }
  _impl_.server_random_.SetAllocated(server_random, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_random_.IsDefault()) {
    _impl_.server_random_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.HandshakeInitResponse.server_random)
}

// string public_key = 3;
inline void HandshakeInitResponse::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& HandshakeInitResponse::public_key() const {
  // @@protoc_insertion_point(field_get:login_msg.HandshakeInitResponse.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeInitResponse::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.HandshakeInitResponse.public_key)
}
inline std::string* HandshakeInitResponse::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:login_msg.HandshakeInitResponse.public_key)
  return _s;
}
inline const std::string& HandshakeInitResponse::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void HandshakeInitResponse::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeInitResponse::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeInitResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:login_msg.HandshakeInitResponse.public_key)
  return _impl_.public_key_.Release();
}
inline void HandshakeInitResponse::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.HandshakeInitResponse.public_key)
}

// -------------------------------------------------------------------

// HandshakeEstablishedRequest

// bytes encrypted_key = 1;
inline void HandshakeEstablishedRequest::clear_encrypted_key() {
  _impl_.encrypted_key_.ClearToEmpty();
}
inline const std::string& HandshakeEstablishedRequest::encrypted_key() const {
  // @@protoc_insertion_point(field_get:login_msg.HandshakeEstablishedRequest.encrypted_key)
  return _internal_encrypted_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeEstablishedRequest::set_encrypted_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encrypted_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.HandshakeEstablishedRequest.encrypted_key)
}
inline std::string* HandshakeEstablishedRequest::mutable_encrypted_key() {
  std::string* _s = _internal_mutable_encrypted_key();
  // @@protoc_insertion_point(field_mutable:login_msg.HandshakeEstablishedRequest.encrypted_key)
  return _s;
}
inline const std::string& HandshakeEstablishedRequest::_internal_encrypted_key() const {
  return _impl_.encrypted_key_.Get();
}
inline void HandshakeEstablishedRequest::_internal_set_encrypted_key(const std::string& value) {
  
  _impl_.encrypted_key_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeEstablishedRequest::_internal_mutable_encrypted_key() {
  
  return _impl_.encrypted_key_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeEstablishedRequest::release_encrypted_key() {
  // @@protoc_insertion_point(field_release:login_msg.HandshakeEstablishedRequest.encrypted_key)
  return _impl_.encrypted_key_.Release();
}
inline void HandshakeEstablishedRequest::set_allocated_encrypted_key(std::string* encrypted_key) {
  if (encrypted_key != nullptr) {
    
  } else {
    
  }
  _impl_.encrypted_key_.SetAllocated(encrypted_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encrypted_key_.IsDefault()) {
    _impl_.encrypted_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.HandshakeEstablishedRequest.encrypted_key)
}

// -------------------------------------------------------------------

// HandshakeEstablishedResponse

// int32 status_code = 1;
inline void HandshakeEstablishedResponse::clear_status_code() {
  _impl_.status_code_ = 0;
}
inline int32_t HandshakeEstablishedResponse::_internal_status_code() const {
  return _impl_.status_code_;
}
inline int32_t HandshakeEstablishedResponse::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.HandshakeEstablishedResponse.status_code)
  return _internal_status_code();
}
inline void HandshakeEstablishedResponse::_internal_set_status_code(int32_t value) {
  
  _impl_.status_code_ = value;
}
inline void HandshakeEstablishedResponse::set_status_code(int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.HandshakeEstablishedResponse.status_code)
}

// -------------------------------------------------------------------

// AccountLoginRequest

// uint64 account_id = 1;
inline void AccountLoginRequest::clear_account_id() {
  _impl_.account_id_ = uint64_t{0u};
}
inline uint64_t AccountLoginRequest::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint64_t AccountLoginRequest::account_id() const {
  // @@protoc_insertion_point(field_get:login_msg.AccountLoginRequest.account_id)
  return _internal_account_id();
}
inline void AccountLoginRequest::_internal_set_account_id(uint64_t value) {
  
  _impl_.account_id_ = value;
}
inline void AccountLoginRequest::set_account_id(uint64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:login_msg.AccountLoginRequest.account_id)
}

// -------------------------------------------------------------------

// AccountLoginResponse

// uint64 user_id = 1;
inline void AccountLoginResponse::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t AccountLoginResponse::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t AccountLoginResponse::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.AccountLoginResponse.user_id)
  return _internal_user_id();
}
inline void AccountLoginResponse::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void AccountLoginResponse::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.AccountLoginResponse.user_id)
}

// string session_key = 2;
inline void AccountLoginResponse::clear_session_key() {
  _impl_.session_key_.ClearToEmpty();
}
inline const std::string& AccountLoginResponse::session_key() const {
  // @@protoc_insertion_point(field_get:login_msg.AccountLoginResponse.session_key)
  return _internal_session_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginResponse::set_session_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.AccountLoginResponse.session_key)
}
inline std::string* AccountLoginResponse::mutable_session_key() {
  std::string* _s = _internal_mutable_session_key();
  // @@protoc_insertion_point(field_mutable:login_msg.AccountLoginResponse.session_key)
  return _s;
}
inline const std::string& AccountLoginResponse::_internal_session_key() const {
  return _impl_.session_key_.Get();
}
inline void AccountLoginResponse::_internal_set_session_key(const std::string& value) {
  
  _impl_.session_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginResponse::_internal_mutable_session_key() {
  
  return _impl_.session_key_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginResponse::release_session_key() {
  // @@protoc_insertion_point(field_release:login_msg.AccountLoginResponse.session_key)
  return _impl_.session_key_.Release();
}
inline void AccountLoginResponse::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  _impl_.session_key_.SetAllocated(session_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_key_.IsDefault()) {
    _impl_.session_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.AccountLoginResponse.session_key)
}

// -------------------------------------------------------------------

// ClientLoginRequest

// uint64 user_id = 1;
inline void ClientLoginRequest::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t ClientLoginRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t ClientLoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginRequest.user_id)
  return _internal_user_id();
}
inline void ClientLoginRequest::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void ClientLoginRequest::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginRequest.user_id)
}

// string session_key = 2;
inline void ClientLoginRequest::clear_session_key() {
  _impl_.session_key_.ClearToEmpty();
}
inline const std::string& ClientLoginRequest::session_key() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginRequest.session_key)
  return _internal_session_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientLoginRequest::set_session_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginRequest.session_key)
}
inline std::string* ClientLoginRequest::mutable_session_key() {
  std::string* _s = _internal_mutable_session_key();
  // @@protoc_insertion_point(field_mutable:login_msg.ClientLoginRequest.session_key)
  return _s;
}
inline const std::string& ClientLoginRequest::_internal_session_key() const {
  return _impl_.session_key_.Get();
}
inline void ClientLoginRequest::_internal_set_session_key(const std::string& value) {
  
  _impl_.session_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientLoginRequest::_internal_mutable_session_key() {
  
  return _impl_.session_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientLoginRequest::release_session_key() {
  // @@protoc_insertion_point(field_release:login_msg.ClientLoginRequest.session_key)
  return _impl_.session_key_.Release();
}
inline void ClientLoginRequest::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  _impl_.session_key_.SetAllocated(session_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_key_.IsDefault()) {
    _impl_.session_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.ClientLoginRequest.session_key)
}

// int32 version = 3;
inline void ClientLoginRequest::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t ClientLoginRequest::_internal_version() const {
  return _impl_.version_;
}
inline int32_t ClientLoginRequest::version() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginRequest.version)
  return _internal_version();
}
inline void ClientLoginRequest::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void ClientLoginRequest::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginRequest.version)
}

// -------------------------------------------------------------------

// ClientLoginResponse

// int32 status_code = 1;
inline void ClientLoginResponse::clear_status_code() {
  _impl_.status_code_ = 0;
}
inline int32_t ClientLoginResponse::_internal_status_code() const {
  return _impl_.status_code_;
}
inline int32_t ClientLoginResponse::status_code() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginResponse.status_code)
  return _internal_status_code();
}
inline void ClientLoginResponse::_internal_set_status_code(int32_t value) {
  
  _impl_.status_code_ = value;
}
inline void ClientLoginResponse::set_status_code(int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginResponse.status_code)
}

// uint64 user_id = 2;
inline void ClientLoginResponse::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t ClientLoginResponse::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t ClientLoginResponse::user_id() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginResponse.user_id)
  return _internal_user_id();
}
inline void ClientLoginResponse::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void ClientLoginResponse::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginResponse.user_id)
}

// int32 version = 3;
inline void ClientLoginResponse::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t ClientLoginResponse::_internal_version() const {
  return _impl_.version_;
}
inline int32_t ClientLoginResponse::version() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginResponse.version)
  return _internal_version();
}
inline void ClientLoginResponse::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void ClientLoginResponse::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginResponse.version)
}

// bool is_newbie = 4;
inline void ClientLoginResponse::clear_is_newbie() {
  _impl_.is_newbie_ = false;
}
inline bool ClientLoginResponse::_internal_is_newbie() const {
  return _impl_.is_newbie_;
}
inline bool ClientLoginResponse::is_newbie() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginResponse.is_newbie)
  return _internal_is_newbie();
}
inline void ClientLoginResponse::_internal_set_is_newbie(bool value) {
  
  _impl_.is_newbie_ = value;
}
inline void ClientLoginResponse::set_is_newbie(bool value) {
  _internal_set_is_newbie(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginResponse.is_newbie)
}

// uint32 ammo = 5;
inline void ClientLoginResponse::clear_ammo() {
  _impl_.ammo_ = 0u;
}
inline uint32_t ClientLoginResponse::_internal_ammo() const {
  return _impl_.ammo_;
}
inline uint32_t ClientLoginResponse::ammo() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginResponse.ammo)
  return _internal_ammo();
}
inline void ClientLoginResponse::_internal_set_ammo(uint32_t value) {
  
  _impl_.ammo_ = value;
}
inline void ClientLoginResponse::set_ammo(uint32_t value) {
  _internal_set_ammo(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginResponse.ammo)
}

// uint32 grenades = 6;
inline void ClientLoginResponse::clear_grenades() {
  _impl_.grenades_ = 0u;
}
inline uint32_t ClientLoginResponse::_internal_grenades() const {
  return _impl_.grenades_;
}
inline uint32_t ClientLoginResponse::grenades() const {
  // @@protoc_insertion_point(field_get:login_msg.ClientLoginResponse.grenades)
  return _internal_grenades();
}
inline void ClientLoginResponse::_internal_set_grenades(uint32_t value) {
  
  _impl_.grenades_ = value;
}
inline void ClientLoginResponse::set_grenades(uint32_t value) {
  _internal_set_grenades(value);
  // @@protoc_insertion_point(field_set:login_msg.ClientLoginResponse.grenades)
}

// -------------------------------------------------------------------

// EchoRequest

// uint64 value1 = 1;
inline void EchoRequest::clear_value1() {
  _impl_.value1_ = uint64_t{0u};
}
inline uint64_t EchoRequest::_internal_value1() const {
  return _impl_.value1_;
}
inline uint64_t EchoRequest::value1() const {
  // @@protoc_insertion_point(field_get:login_msg.EchoRequest.value1)
  return _internal_value1();
}
inline void EchoRequest::_internal_set_value1(uint64_t value) {
  
  _impl_.value1_ = value;
}
inline void EchoRequest::set_value1(uint64_t value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:login_msg.EchoRequest.value1)
}

// string value2 = 2;
inline void EchoRequest::clear_value2() {
  _impl_.value2_.ClearToEmpty();
}
inline const std::string& EchoRequest::value2() const {
  // @@protoc_insertion_point(field_get:login_msg.EchoRequest.value2)
  return _internal_value2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoRequest::set_value2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.EchoRequest.value2)
}
inline std::string* EchoRequest::mutable_value2() {
  std::string* _s = _internal_mutable_value2();
  // @@protoc_insertion_point(field_mutable:login_msg.EchoRequest.value2)
  return _s;
}
inline const std::string& EchoRequest::_internal_value2() const {
  return _impl_.value2_.Get();
}
inline void EchoRequest::_internal_set_value2(const std::string& value) {
  
  _impl_.value2_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoRequest::_internal_mutable_value2() {
  
  return _impl_.value2_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoRequest::release_value2() {
  // @@protoc_insertion_point(field_release:login_msg.EchoRequest.value2)
  return _impl_.value2_.Release();
}
inline void EchoRequest::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  _impl_.value2_.SetAllocated(value2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value2_.IsDefault()) {
    _impl_.value2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.EchoRequest.value2)
}

// -------------------------------------------------------------------

// EchoResponse

// uint64 value1 = 1;
inline void EchoResponse::clear_value1() {
  _impl_.value1_ = uint64_t{0u};
}
inline uint64_t EchoResponse::_internal_value1() const {
  return _impl_.value1_;
}
inline uint64_t EchoResponse::value1() const {
  // @@protoc_insertion_point(field_get:login_msg.EchoResponse.value1)
  return _internal_value1();
}
inline void EchoResponse::_internal_set_value1(uint64_t value) {
  
  _impl_.value1_ = value;
}
inline void EchoResponse::set_value1(uint64_t value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:login_msg.EchoResponse.value1)
}

// string value2 = 2;
inline void EchoResponse::clear_value2() {
  _impl_.value2_.ClearToEmpty();
}
inline const std::string& EchoResponse::value2() const {
  // @@protoc_insertion_point(field_get:login_msg.EchoResponse.value2)
  return _internal_value2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResponse::set_value2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:login_msg.EchoResponse.value2)
}
inline std::string* EchoResponse::mutable_value2() {
  std::string* _s = _internal_mutable_value2();
  // @@protoc_insertion_point(field_mutable:login_msg.EchoResponse.value2)
  return _s;
}
inline const std::string& EchoResponse::_internal_value2() const {
  return _impl_.value2_.Get();
}
inline void EchoResponse::_internal_set_value2(const std::string& value) {
  
  _impl_.value2_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResponse::_internal_mutable_value2() {
  
  return _impl_.value2_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResponse::release_value2() {
  // @@protoc_insertion_point(field_release:login_msg.EchoResponse.value2)
  return _impl_.value2_.Release();
}
inline void EchoResponse::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  _impl_.value2_.SetAllocated(value2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value2_.IsDefault()) {
    _impl_.value2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_msg.EchoResponse.value2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_5fmsg_2eproto
