// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_login.proto

#include "rpc_login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
namespace rpc {
PROTOBUF_CONSTEXPR RPC_LoginPendingRequest::RPC_LoginPendingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.db_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPC_LoginPendingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPC_LoginPendingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPC_LoginPendingRequestDefaultTypeInternal() {}
  union {
    RPC_LoginPendingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPC_LoginPendingRequestDefaultTypeInternal _RPC_LoginPendingRequest_default_instance_;
PROTOBUF_CONSTEXPR RPC_LoginPendingResponse::RPC_LoginPendingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/uint64_t{0u}
  , /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPC_LoginPendingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPC_LoginPendingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPC_LoginPendingResponseDefaultTypeInternal() {}
  union {
    RPC_LoginPendingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPC_LoginPendingResponseDefaultTypeInternal _RPC_LoginPendingResponse_default_instance_;
PROTOBUF_CONSTEXPR RPC_EchoTestRequest::RPC_EchoTestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value1_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPC_EchoTestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPC_EchoTestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPC_EchoTestRequestDefaultTypeInternal() {}
  union {
    RPC_EchoTestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPC_EchoTestRequestDefaultTypeInternal _RPC_EchoTestRequest_default_instance_;
PROTOBUF_CONSTEXPR RPC_EchoTestResponse::RPC_EchoTestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value1_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPC_EchoTestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPC_EchoTestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPC_EchoTestResponseDefaultTypeInternal() {}
  union {
    RPC_EchoTestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPC_EchoTestResponseDefaultTypeInternal _RPC_EchoTestResponse_default_instance_;
}  // namespace rpc
}  // namespace pb
static ::_pb::Metadata file_level_metadata_rpc_5flogin_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_5flogin_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5flogin_2eproto = nullptr;

const uint32_t TableStruct_rpc_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingRequest, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingRequest, _impl_.session_key_),
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingRequest, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingRequest, _impl_.db_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingResponse, _impl_.status_code_),
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_LoginPendingResponse, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_EchoTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_EchoTestRequest, _impl_.value1_),
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_EchoTestRequest, _impl_.value2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_EchoTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_EchoTestResponse, _impl_.value1_),
  PROTOBUF_FIELD_OFFSET(::pb::rpc::RPC_EchoTestResponse, _impl_.value2_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::rpc::RPC_LoginPendingRequest)},
  { 10, -1, -1, sizeof(::pb::rpc::RPC_LoginPendingResponse)},
  { 18, -1, -1, sizeof(::pb::rpc::RPC_EchoTestRequest)},
  { 26, -1, -1, sizeof(::pb::rpc::RPC_EchoTestResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::rpc::_RPC_LoginPendingRequest_default_instance_._instance,
  &::pb::rpc::_RPC_LoginPendingResponse_default_instance_._instance,
  &::pb::rpc::_RPC_EchoTestRequest_default_instance_._instance,
  &::pb::rpc::_RPC_EchoTestResponse_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5flogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017rpc_login.proto\022\006pb.rpc\"b\n\027RPC_LoginPe"
  "ndingRequest\022\022\n\naccount_id\030\001 \001(\004\022\023\n\013sess"
  "ion_key\030\002 \001(\t\022\017\n\007version\030\003 \001(\005\022\r\n\005db_id\030"
  "\004 \001(\r\"C\n\030RPC_LoginPendingResponse\022\023\n\013sta"
  "tus_code\030\001 \001(\005\022\022\n\naccount_id\030\002 \001(\004\"5\n\023RP"
  "C_EchoTestRequest\022\016\n\006value1\030\001 \001(\004\022\016\n\006val"
  "ue2\030\002 \001(\t\"6\n\024RPC_EchoTestResponse\022\016\n\006val"
  "ue1\030\001 \001(\004\022\016\n\006value2\030\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5flogin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5flogin_2eproto = {
    false, false, 313, descriptor_table_protodef_rpc_5flogin_2eproto,
    "rpc_login.proto",
    &descriptor_table_rpc_5flogin_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_rpc_5flogin_2eproto::offsets,
    file_level_metadata_rpc_5flogin_2eproto, file_level_enum_descriptors_rpc_5flogin_2eproto,
    file_level_service_descriptors_rpc_5flogin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5flogin_2eproto_getter() {
  return &descriptor_table_rpc_5flogin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5flogin_2eproto(&descriptor_table_rpc_5flogin_2eproto);
namespace pb {
namespace rpc {

// ===================================================================

class RPC_LoginPendingRequest::_Internal {
 public:
};

RPC_LoginPendingRequest::RPC_LoginPendingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.rpc.RPC_LoginPendingRequest)
}
RPC_LoginPendingRequest::RPC_LoginPendingRequest(const RPC_LoginPendingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPC_LoginPendingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.db_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_key().empty()) {
    _this->_impl_.session_key_.Set(from._internal_session_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.db_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.db_id_));
  // @@protoc_insertion_point(copy_constructor:pb.rpc.RPC_LoginPendingRequest)
}

inline void RPC_LoginPendingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_){}
    , decltype(_impl_.account_id_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.db_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPC_LoginPendingRequest::~RPC_LoginPendingRequest() {
  // @@protoc_insertion_point(destructor:pb.rpc.RPC_LoginPendingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPC_LoginPendingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_key_.Destroy();
}

void RPC_LoginPendingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPC_LoginPendingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.rpc.RPC_LoginPendingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_key_.ClearToEmpty();
  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.db_id_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.db_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPC_LoginPendingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.rpc.RPC_LoginPendingRequest.session_key"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 db_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.db_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPC_LoginPendingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.rpc.RPC_LoginPendingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_id(), target);
  }

  // string session_key = 2;
  if (!this->_internal_session_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.rpc.RPC_LoginPendingRequest.session_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_key(), target);
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // uint32 db_id = 4;
  if (this->_internal_db_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_db_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.rpc.RPC_LoginPendingRequest)
  return target;
}

size_t RPC_LoginPendingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.rpc.RPC_LoginPendingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_key = 2;
  if (!this->_internal_session_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  // uint64 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // uint32 db_id = 4;
  if (this->_internal_db_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_db_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPC_LoginPendingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPC_LoginPendingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPC_LoginPendingRequest::GetClassData() const { return &_class_data_; }


void RPC_LoginPendingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPC_LoginPendingRequest*>(&to_msg);
  auto& from = static_cast<const RPC_LoginPendingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.rpc.RPC_LoginPendingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_key().empty()) {
    _this->_internal_set_session_key(from._internal_session_key());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_db_id() != 0) {
    _this->_internal_set_db_id(from._internal_db_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPC_LoginPendingRequest::CopyFrom(const RPC_LoginPendingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.rpc.RPC_LoginPendingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_LoginPendingRequest::IsInitialized() const {
  return true;
}

void RPC_LoginPendingRequest::InternalSwap(RPC_LoginPendingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_key_, lhs_arena,
      &other->_impl_.session_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPC_LoginPendingRequest, _impl_.db_id_)
      + sizeof(RPC_LoginPendingRequest::_impl_.db_id_)
      - PROTOBUF_FIELD_OFFSET(RPC_LoginPendingRequest, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_LoginPendingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5flogin_2eproto_getter, &descriptor_table_rpc_5flogin_2eproto_once,
      file_level_metadata_rpc_5flogin_2eproto[0]);
}

// ===================================================================

class RPC_LoginPendingResponse::_Internal {
 public:
};

RPC_LoginPendingResponse::RPC_LoginPendingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.rpc.RPC_LoginPendingResponse)
}
RPC_LoginPendingResponse::RPC_LoginPendingResponse(const RPC_LoginPendingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPC_LoginPendingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.status_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_code_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.status_code_));
  // @@protoc_insertion_point(copy_constructor:pb.rpc.RPC_LoginPendingResponse)
}

inline void RPC_LoginPendingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){uint64_t{0u}}
    , decltype(_impl_.status_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RPC_LoginPendingResponse::~RPC_LoginPendingResponse() {
  // @@protoc_insertion_point(destructor:pb.rpc.RPC_LoginPendingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPC_LoginPendingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RPC_LoginPendingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPC_LoginPendingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.rpc.RPC_LoginPendingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_code_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPC_LoginPendingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPC_LoginPendingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.rpc.RPC_LoginPendingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // uint64 account_id = 2;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.rpc.RPC_LoginPendingResponse)
  return target;
}

size_t RPC_LoginPendingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.rpc.RPC_LoginPendingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 account_id = 2;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_id());
  }

  // int32 status_code = 1;
  if (this->_internal_status_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPC_LoginPendingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPC_LoginPendingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPC_LoginPendingResponse::GetClassData() const { return &_class_data_; }


void RPC_LoginPendingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPC_LoginPendingResponse*>(&to_msg);
  auto& from = static_cast<const RPC_LoginPendingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.rpc.RPC_LoginPendingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPC_LoginPendingResponse::CopyFrom(const RPC_LoginPendingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.rpc.RPC_LoginPendingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_LoginPendingResponse::IsInitialized() const {
  return true;
}

void RPC_LoginPendingResponse::InternalSwap(RPC_LoginPendingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPC_LoginPendingResponse, _impl_.status_code_)
      + sizeof(RPC_LoginPendingResponse::_impl_.status_code_)
      - PROTOBUF_FIELD_OFFSET(RPC_LoginPendingResponse, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_LoginPendingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5flogin_2eproto_getter, &descriptor_table_rpc_5flogin_2eproto_once,
      file_level_metadata_rpc_5flogin_2eproto[1]);
}

// ===================================================================

class RPC_EchoTestRequest::_Internal {
 public:
};

RPC_EchoTestRequest::RPC_EchoTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.rpc.RPC_EchoTestRequest)
}
RPC_EchoTestRequest::RPC_EchoTestRequest(const RPC_EchoTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPC_EchoTestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value2().empty()) {
    _this->_impl_.value2_.Set(from._internal_value2(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value1_ = from._impl_.value1_;
  // @@protoc_insertion_point(copy_constructor:pb.rpc.RPC_EchoTestRequest)
}

inline void RPC_EchoTestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPC_EchoTestRequest::~RPC_EchoTestRequest() {
  // @@protoc_insertion_point(destructor:pb.rpc.RPC_EchoTestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPC_EchoTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value2_.Destroy();
}

void RPC_EchoTestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPC_EchoTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.rpc.RPC_EchoTestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value2_.ClearToEmpty();
  _impl_.value1_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPC_EchoTestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.rpc.RPC_EchoTestRequest.value2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPC_EchoTestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.rpc.RPC_EchoTestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value1(), target);
  }

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value2().data(), static_cast<int>(this->_internal_value2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.rpc.RPC_EchoTestRequest.value2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.rpc.RPC_EchoTestRequest)
  return target;
}

size_t RPC_EchoTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.rpc.RPC_EchoTestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value2());
  }

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPC_EchoTestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPC_EchoTestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPC_EchoTestRequest::GetClassData() const { return &_class_data_; }


void RPC_EchoTestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPC_EchoTestRequest*>(&to_msg);
  auto& from = static_cast<const RPC_EchoTestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.rpc.RPC_EchoTestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value2().empty()) {
    _this->_internal_set_value2(from._internal_value2());
  }
  if (from._internal_value1() != 0) {
    _this->_internal_set_value1(from._internal_value1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPC_EchoTestRequest::CopyFrom(const RPC_EchoTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.rpc.RPC_EchoTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_EchoTestRequest::IsInitialized() const {
  return true;
}

void RPC_EchoTestRequest::InternalSwap(RPC_EchoTestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value2_, lhs_arena,
      &other->_impl_.value2_, rhs_arena
  );
  swap(_impl_.value1_, other->_impl_.value1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_EchoTestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5flogin_2eproto_getter, &descriptor_table_rpc_5flogin_2eproto_once,
      file_level_metadata_rpc_5flogin_2eproto[2]);
}

// ===================================================================

class RPC_EchoTestResponse::_Internal {
 public:
};

RPC_EchoTestResponse::RPC_EchoTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.rpc.RPC_EchoTestResponse)
}
RPC_EchoTestResponse::RPC_EchoTestResponse(const RPC_EchoTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPC_EchoTestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value2().empty()) {
    _this->_impl_.value2_.Set(from._internal_value2(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value1_ = from._impl_.value1_;
  // @@protoc_insertion_point(copy_constructor:pb.rpc.RPC_EchoTestResponse)
}

inline void RPC_EchoTestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value2_){}
    , decltype(_impl_.value1_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPC_EchoTestResponse::~RPC_EchoTestResponse() {
  // @@protoc_insertion_point(destructor:pb.rpc.RPC_EchoTestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPC_EchoTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value2_.Destroy();
}

void RPC_EchoTestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPC_EchoTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.rpc.RPC_EchoTestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value2_.ClearToEmpty();
  _impl_.value1_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPC_EchoTestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.rpc.RPC_EchoTestResponse.value2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPC_EchoTestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.rpc.RPC_EchoTestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value1(), target);
  }

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value2().data(), static_cast<int>(this->_internal_value2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.rpc.RPC_EchoTestResponse.value2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.rpc.RPC_EchoTestResponse)
  return target;
}

size_t RPC_EchoTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.rpc.RPC_EchoTestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value2 = 2;
  if (!this->_internal_value2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value2());
  }

  // uint64 value1 = 1;
  if (this->_internal_value1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPC_EchoTestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPC_EchoTestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPC_EchoTestResponse::GetClassData() const { return &_class_data_; }


void RPC_EchoTestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPC_EchoTestResponse*>(&to_msg);
  auto& from = static_cast<const RPC_EchoTestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.rpc.RPC_EchoTestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value2().empty()) {
    _this->_internal_set_value2(from._internal_value2());
  }
  if (from._internal_value1() != 0) {
    _this->_internal_set_value1(from._internal_value1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPC_EchoTestResponse::CopyFrom(const RPC_EchoTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.rpc.RPC_EchoTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_EchoTestResponse::IsInitialized() const {
  return true;
}

void RPC_EchoTestResponse::InternalSwap(RPC_EchoTestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value2_, lhs_arena,
      &other->_impl_.value2_, rhs_arena
  );
  swap(_impl_.value1_, other->_impl_.value1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_EchoTestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5flogin_2eproto_getter, &descriptor_table_rpc_5flogin_2eproto_once,
      file_level_metadata_rpc_5flogin_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::rpc::RPC_LoginPendingRequest*
Arena::CreateMaybeMessage< ::pb::rpc::RPC_LoginPendingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::rpc::RPC_LoginPendingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::rpc::RPC_LoginPendingResponse*
Arena::CreateMaybeMessage< ::pb::rpc::RPC_LoginPendingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::rpc::RPC_LoginPendingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::rpc::RPC_EchoTestRequest*
Arena::CreateMaybeMessage< ::pb::rpc::RPC_EchoTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::rpc::RPC_EchoTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::rpc::RPC_EchoTestResponse*
Arena::CreateMaybeMessage< ::pb::rpc::RPC_EchoTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::rpc::RPC_EchoTestResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
