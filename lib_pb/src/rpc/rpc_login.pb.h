// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5flogin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5flogin_2eproto;
namespace pb {
namespace rpc {
class RPC_LoginPendingRequest;
struct RPC_LoginPendingRequestDefaultTypeInternal;
extern RPC_LoginPendingRequestDefaultTypeInternal _RPC_LoginPendingRequest_default_instance_;
class RPC_LoginPendingResponse;
struct RPC_LoginPendingResponseDefaultTypeInternal;
extern RPC_LoginPendingResponseDefaultTypeInternal _RPC_LoginPendingResponse_default_instance_;
}  // namespace rpc
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::rpc::RPC_LoginPendingRequest* Arena::CreateMaybeMessage<::pb::rpc::RPC_LoginPendingRequest>(Arena*);
template<> ::pb::rpc::RPC_LoginPendingResponse* Arena::CreateMaybeMessage<::pb::rpc::RPC_LoginPendingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace rpc {

// ===================================================================

class RPC_LoginPendingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.rpc.RPC_LoginPendingRequest) */ {
 public:
  inline RPC_LoginPendingRequest() : RPC_LoginPendingRequest(nullptr) {}
  ~RPC_LoginPendingRequest() override;
  explicit PROTOBUF_CONSTEXPR RPC_LoginPendingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPC_LoginPendingRequest(const RPC_LoginPendingRequest& from);
  RPC_LoginPendingRequest(RPC_LoginPendingRequest&& from) noexcept
    : RPC_LoginPendingRequest() {
    *this = ::std::move(from);
  }

  inline RPC_LoginPendingRequest& operator=(const RPC_LoginPendingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_LoginPendingRequest& operator=(RPC_LoginPendingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPC_LoginPendingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPC_LoginPendingRequest* internal_default_instance() {
    return reinterpret_cast<const RPC_LoginPendingRequest*>(
               &_RPC_LoginPendingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPC_LoginPendingRequest& a, RPC_LoginPendingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC_LoginPendingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPC_LoginPendingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPC_LoginPendingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPC_LoginPendingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPC_LoginPendingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RPC_LoginPendingRequest& from) {
    RPC_LoginPendingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_LoginPendingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.rpc.RPC_LoginPendingRequest";
  }
  protected:
  explicit RPC_LoginPendingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kVersionFieldNumber = 3,
    kDbIdFieldNumber = 4,
  };
  // string session_key = 2;
  void clear_session_key();
  const std::string& session_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_key();
  PROTOBUF_NODISCARD std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // uint64 account_id = 1;
  void clear_account_id();
  uint64_t account_id() const;
  void set_account_id(uint64_t value);
  private:
  uint64_t _internal_account_id() const;
  void _internal_set_account_id(uint64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // uint32 db_id = 4;
  void clear_db_id();
  uint32_t db_id() const;
  void set_db_id(uint32_t value);
  private:
  uint32_t _internal_db_id() const;
  void _internal_set_db_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.rpc.RPC_LoginPendingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
    uint64_t account_id_;
    int32_t version_;
    uint32_t db_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5flogin_2eproto;
};
// -------------------------------------------------------------------

class RPC_LoginPendingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.rpc.RPC_LoginPendingResponse) */ {
 public:
  inline RPC_LoginPendingResponse() : RPC_LoginPendingResponse(nullptr) {}
  ~RPC_LoginPendingResponse() override;
  explicit PROTOBUF_CONSTEXPR RPC_LoginPendingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPC_LoginPendingResponse(const RPC_LoginPendingResponse& from);
  RPC_LoginPendingResponse(RPC_LoginPendingResponse&& from) noexcept
    : RPC_LoginPendingResponse() {
    *this = ::std::move(from);
  }

  inline RPC_LoginPendingResponse& operator=(const RPC_LoginPendingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_LoginPendingResponse& operator=(RPC_LoginPendingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPC_LoginPendingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPC_LoginPendingResponse* internal_default_instance() {
    return reinterpret_cast<const RPC_LoginPendingResponse*>(
               &_RPC_LoginPendingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RPC_LoginPendingResponse& a, RPC_LoginPendingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC_LoginPendingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPC_LoginPendingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPC_LoginPendingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPC_LoginPendingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPC_LoginPendingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RPC_LoginPendingResponse& from) {
    RPC_LoginPendingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_LoginPendingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.rpc.RPC_LoginPendingResponse";
  }
  protected:
  explicit RPC_LoginPendingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // uint64 account_id = 2;
  void clear_account_id();
  uint64_t account_id() const;
  void set_account_id(uint64_t value);
  private:
  uint64_t _internal_account_id() const;
  void _internal_set_account_id(uint64_t value);
  public:

  // int32 status_code = 1;
  void clear_status_code();
  int32_t status_code() const;
  void set_status_code(int32_t value);
  private:
  int32_t _internal_status_code() const;
  void _internal_set_status_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.rpc.RPC_LoginPendingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t account_id_;
    int32_t status_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPC_LoginPendingRequest

// uint64 account_id = 1;
inline void RPC_LoginPendingRequest::clear_account_id() {
  _impl_.account_id_ = uint64_t{0u};
}
inline uint64_t RPC_LoginPendingRequest::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint64_t RPC_LoginPendingRequest::account_id() const {
  // @@protoc_insertion_point(field_get:pb.rpc.RPC_LoginPendingRequest.account_id)
  return _internal_account_id();
}
inline void RPC_LoginPendingRequest::_internal_set_account_id(uint64_t value) {
  
  _impl_.account_id_ = value;
}
inline void RPC_LoginPendingRequest::set_account_id(uint64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:pb.rpc.RPC_LoginPendingRequest.account_id)
}

// string session_key = 2;
inline void RPC_LoginPendingRequest::clear_session_key() {
  _impl_.session_key_.ClearToEmpty();
}
inline const std::string& RPC_LoginPendingRequest::session_key() const {
  // @@protoc_insertion_point(field_get:pb.rpc.RPC_LoginPendingRequest.session_key)
  return _internal_session_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPC_LoginPendingRequest::set_session_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.rpc.RPC_LoginPendingRequest.session_key)
}
inline std::string* RPC_LoginPendingRequest::mutable_session_key() {
  std::string* _s = _internal_mutable_session_key();
  // @@protoc_insertion_point(field_mutable:pb.rpc.RPC_LoginPendingRequest.session_key)
  return _s;
}
inline const std::string& RPC_LoginPendingRequest::_internal_session_key() const {
  return _impl_.session_key_.Get();
}
inline void RPC_LoginPendingRequest::_internal_set_session_key(const std::string& value) {
  
  _impl_.session_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RPC_LoginPendingRequest::_internal_mutable_session_key() {
  
  return _impl_.session_key_.Mutable(GetArenaForAllocation());
}
inline std::string* RPC_LoginPendingRequest::release_session_key() {
  // @@protoc_insertion_point(field_release:pb.rpc.RPC_LoginPendingRequest.session_key)
  return _impl_.session_key_.Release();
}
inline void RPC_LoginPendingRequest::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  _impl_.session_key_.SetAllocated(session_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_key_.IsDefault()) {
    _impl_.session_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.rpc.RPC_LoginPendingRequest.session_key)
}

// int32 version = 3;
inline void RPC_LoginPendingRequest::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t RPC_LoginPendingRequest::_internal_version() const {
  return _impl_.version_;
}
inline int32_t RPC_LoginPendingRequest::version() const {
  // @@protoc_insertion_point(field_get:pb.rpc.RPC_LoginPendingRequest.version)
  return _internal_version();
}
inline void RPC_LoginPendingRequest::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void RPC_LoginPendingRequest::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.rpc.RPC_LoginPendingRequest.version)
}

// uint32 db_id = 4;
inline void RPC_LoginPendingRequest::clear_db_id() {
  _impl_.db_id_ = 0u;
}
inline uint32_t RPC_LoginPendingRequest::_internal_db_id() const {
  return _impl_.db_id_;
}
inline uint32_t RPC_LoginPendingRequest::db_id() const {
  // @@protoc_insertion_point(field_get:pb.rpc.RPC_LoginPendingRequest.db_id)
  return _internal_db_id();
}
inline void RPC_LoginPendingRequest::_internal_set_db_id(uint32_t value) {
  
  _impl_.db_id_ = value;
}
inline void RPC_LoginPendingRequest::set_db_id(uint32_t value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:pb.rpc.RPC_LoginPendingRequest.db_id)
}

// -------------------------------------------------------------------

// RPC_LoginPendingResponse

// int32 status_code = 1;
inline void RPC_LoginPendingResponse::clear_status_code() {
  _impl_.status_code_ = 0;
}
inline int32_t RPC_LoginPendingResponse::_internal_status_code() const {
  return _impl_.status_code_;
}
inline int32_t RPC_LoginPendingResponse::status_code() const {
  // @@protoc_insertion_point(field_get:pb.rpc.RPC_LoginPendingResponse.status_code)
  return _internal_status_code();
}
inline void RPC_LoginPendingResponse::_internal_set_status_code(int32_t value) {
  
  _impl_.status_code_ = value;
}
inline void RPC_LoginPendingResponse::set_status_code(int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:pb.rpc.RPC_LoginPendingResponse.status_code)
}

// uint64 account_id = 2;
inline void RPC_LoginPendingResponse::clear_account_id() {
  _impl_.account_id_ = uint64_t{0u};
}
inline uint64_t RPC_LoginPendingResponse::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint64_t RPC_LoginPendingResponse::account_id() const {
  // @@protoc_insertion_point(field_get:pb.rpc.RPC_LoginPendingResponse.account_id)
  return _internal_account_id();
}
inline void RPC_LoginPendingResponse::_internal_set_account_id(uint64_t value) {
  
  _impl_.account_id_ = value;
}
inline void RPC_LoginPendingResponse::set_account_id(uint64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:pb.rpc.RPC_LoginPendingResponse.account_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5flogin_2eproto
