// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pub_sub_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pub_5fsub_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pub_5fsub_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pub_5fsub_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pub_5fsub_5ftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pub_5fsub_5ftest_2eproto;
namespace pb {
namespace pub_sub {
class PubSub_TestTopic;
struct PubSub_TestTopicDefaultTypeInternal;
extern PubSub_TestTopicDefaultTypeInternal _PubSub_TestTopic_default_instance_;
}  // namespace pub_sub
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::pub_sub::PubSub_TestTopic* Arena::CreateMaybeMessage<::pb::pub_sub::PubSub_TestTopic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace pub_sub {

// ===================================================================

class PubSub_TestTopic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.pub_sub.PubSub_TestTopic) */ {
 public:
  inline PubSub_TestTopic() : PubSub_TestTopic(nullptr) {}
  ~PubSub_TestTopic() override;
  explicit PROTOBUF_CONSTEXPR PubSub_TestTopic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PubSub_TestTopic(const PubSub_TestTopic& from);
  PubSub_TestTopic(PubSub_TestTopic&& from) noexcept
    : PubSub_TestTopic() {
    *this = ::std::move(from);
  }

  inline PubSub_TestTopic& operator=(const PubSub_TestTopic& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubSub_TestTopic& operator=(PubSub_TestTopic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PubSub_TestTopic& default_instance() {
    return *internal_default_instance();
  }
  static inline const PubSub_TestTopic* internal_default_instance() {
    return reinterpret_cast<const PubSub_TestTopic*>(
               &_PubSub_TestTopic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PubSub_TestTopic& a, PubSub_TestTopic& b) {
    a.Swap(&b);
  }
  inline void Swap(PubSub_TestTopic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubSub_TestTopic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PubSub_TestTopic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PubSub_TestTopic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PubSub_TestTopic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PubSub_TestTopic& from) {
    PubSub_TestTopic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubSub_TestTopic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.pub_sub.PubSub_TestTopic";
  }
  protected:
  explicit PubSub_TestTopic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value2();
  PROTOBUF_NODISCARD std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  uint64_t value1() const;
  void set_value1(uint64_t value);
  private:
  uint64_t _internal_value1() const;
  void _internal_set_value1(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.pub_sub.PubSub_TestTopic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
    uint64_t value1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pub_5fsub_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PubSub_TestTopic

// uint64 value1 = 1;
inline void PubSub_TestTopic::clear_value1() {
  _impl_.value1_ = uint64_t{0u};
}
inline uint64_t PubSub_TestTopic::_internal_value1() const {
  return _impl_.value1_;
}
inline uint64_t PubSub_TestTopic::value1() const {
  // @@protoc_insertion_point(field_get:pb.pub_sub.PubSub_TestTopic.value1)
  return _internal_value1();
}
inline void PubSub_TestTopic::_internal_set_value1(uint64_t value) {
  
  _impl_.value1_ = value;
}
inline void PubSub_TestTopic::set_value1(uint64_t value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:pb.pub_sub.PubSub_TestTopic.value1)
}

// string value2 = 2;
inline void PubSub_TestTopic::clear_value2() {
  _impl_.value2_.ClearToEmpty();
}
inline const std::string& PubSub_TestTopic::value2() const {
  // @@protoc_insertion_point(field_get:pb.pub_sub.PubSub_TestTopic.value2)
  return _internal_value2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PubSub_TestTopic::set_value2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.pub_sub.PubSub_TestTopic.value2)
}
inline std::string* PubSub_TestTopic::mutable_value2() {
  std::string* _s = _internal_mutable_value2();
  // @@protoc_insertion_point(field_mutable:pb.pub_sub.PubSub_TestTopic.value2)
  return _s;
}
inline const std::string& PubSub_TestTopic::_internal_value2() const {
  return _impl_.value2_.Get();
}
inline void PubSub_TestTopic::_internal_set_value2(const std::string& value) {
  
  _impl_.value2_.Set(value, GetArenaForAllocation());
}
inline std::string* PubSub_TestTopic::_internal_mutable_value2() {
  
  return _impl_.value2_.Mutable(GetArenaForAllocation());
}
inline std::string* PubSub_TestTopic::release_value2() {
  // @@protoc_insertion_point(field_release:pb.pub_sub.PubSub_TestTopic.value2)
  return _impl_.value2_.Release();
}
inline void PubSub_TestTopic::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  _impl_.value2_.SetAllocated(value2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value2_.IsDefault()) {
    _impl_.value2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.pub_sub.PubSub_TestTopic.value2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pub_sub
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pub_5fsub_5ftest_2eproto
