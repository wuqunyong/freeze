// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY SCRIPT, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// Source: apie_account.account
// ---------------------------------------------------------------------

#pragma once

#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <map>
#include <memory>
#include <string>
#include <tuple>
#include <vector>

#include "apie.h"

namespace apie {
namespace dbt_account {

class account_AutoGen : public DeclarativeBase,
                        public std::enable_shared_from_this<account_AutoGen> {

  using InsertCB =
      std::function<void(apie::status::Status, bool, uint64_t, uint64_t)>;
  using UpdateCB = std::function<void(apie::status::Status, bool, uint64_t)>;
  using DeleteCB = std::function<void(apie::status::Status, bool, uint64_t)>;

private:
  struct db_fields {
    uint64_t account_id;
    uint32_t db_id;
    int64_t register_time;
    int64_t modified_time;
  };

  virtual std::string getFieldName(uint32_t iIndex) override {

    static std::map<uint32_t, std::string> kFieldNameMap = {
        {account_AutoGen::account_id, "account_id"},
        {account_AutoGen::db_id, "db_id"},
        {account_AutoGen::register_time, "register_time"},
        {account_AutoGen::modified_time, "modified_time"}};

    return kFieldNameMap[iIndex];
  }

public:
  enum Fields {
    account_id = 0,
    db_id = 1,
    register_time = 2,
    modified_time = 3,
  };

  static std::shared_ptr<account_AutoGen> Create(uint64_t account_id) {
    return std::shared_ptr<account_AutoGen>(new account_AutoGen(account_id));
  }

  account_AutoGen(uint64_t account_id) {
    this->fields.account_id = account_id;

    this->bindTable(DeclarativeBase::DBType::DBT_Account, getFactoryName());
  }

  virtual ~account_AutoGen() {}

  void set_account_id(uint64_t account_id) {
    this->fields.account_id = account_id;
    this->markDirty({account_AutoGen::account_id});
  }

  uint64_t get_account_id() const { return this->fields.account_id; }

  void set_db_id(uint32_t db_id) {
    this->fields.db_id = db_id;
    this->markDirty({account_AutoGen::db_id});
  }

  uint32_t get_db_id() const { return this->fields.db_id; }

  void set_register_time(int64_t register_time) {
    this->fields.register_time = register_time;
    this->markDirty({account_AutoGen::register_time});
  }

  int64_t get_register_time() const { return this->fields.register_time; }

  void set_modified_time(int64_t modified_time) {
    this->fields.modified_time = modified_time;
    this->markDirty({account_AutoGen::modified_time});
  }

  int64_t get_modified_time() const { return this->fields.modified_time; }

public:
  void SetDbProxyServer(::rpc_msg::CHANNEL server) { m_optServer = server; }

  void Insert(InsertCB cb = nullptr) {
    if (!m_optServer.has_value()) {
      ASYNC_PIE_LOG(
          PIE_ERROR,
          "DBOpreateError | Insert | isBind:{} | dbName:{} | tableName:{}",
          isBind(), getgDbName(), getTableName());
      return;
    }

    auto channel = m_optServer.value();
    InsertToDb(channel, *this, cb);
  }

  void Update(UpdateCB cb = nullptr) {
    if (!m_optServer.has_value()) {
      ASYNC_PIE_LOG(
          PIE_ERROR,
          "DBOpreateError | Update | isBind:{} | dbName:{} | tableName:{}",
          isBind(), getgDbName(), getTableName());
      return;
    }

    auto channel = m_optServer.value();
    UpdateToDb(channel, *this, cb);
  }

  void Delete(DeleteCB cb = nullptr) {
    if (!m_optServer.has_value()) {
      ASYNC_PIE_LOG(
          PIE_ERROR,
          "DBOpreateError | Delete | isBind:{} | dbName:{} | tableName:{}",
          isBind(), getgDbName(), getTableName());
      return;
    }

    auto channel = m_optServer.value();
    DeleteFromDb(channel, *this, cb);
  }

  DAO_DEFINE_TYPE_INTRUSIVE_MACRO(account_AutoGen, db_fields, account);
};

} // namespace dbt_account

APIE_REGISTER_TABLE(DeclarativeBase::DBType::DBT_Account,
                    apie::dbt_account::account_AutoGen, account)

} // namespace apie
