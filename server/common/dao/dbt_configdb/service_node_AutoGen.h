// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY SCRIPT, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// Source: config_db.service_node
// ---------------------------------------------------------------------

#pragma once

#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <map>
#include <memory>
#include <string>
#include <tuple>
#include <vector>

#include "apie.h"

namespace apie {
namespace dbt_configdb {

class service_node_AutoGen
    : public DeclarativeBase,
      public std::enable_shared_from_this<service_node_AutoGen> {
private:
  struct db_fields {
    uint32_t service_realm;
    uint32_t service_type;
    uint32_t service_id;
    std::string ip = "";
    uint32_t port = 0;
    std::string listeners_config = "";
    std::string mysql_config = "";
    std::string nats_config = "";
    std::string redis_config = "";
  };

  enum Fields {
    service_realm = 0,
    service_type = 1,
    service_id = 2,
    ip = 3,
    port = 4,
    listeners_config = 5,
    mysql_config = 6,
    nats_config = 7,
    redis_config = 8,
  };

  virtual std::string getFieldName(uint32_t iIndex) override {

    static std::map<uint32_t, std::string> kFieldNameMap = {
        {service_node_AutoGen::service_realm, "service_realm"},
        {service_node_AutoGen::service_type, "service_type"},
        {service_node_AutoGen::service_id, "service_id"},
        {service_node_AutoGen::ip, "ip"},
        {service_node_AutoGen::port, "port"},
        {service_node_AutoGen::listeners_config, "listeners_config"},
        {service_node_AutoGen::mysql_config, "mysql_config"},
        {service_node_AutoGen::nats_config, "nats_config"},
        {service_node_AutoGen::redis_config, "redis_config"}};

    return kFieldNameMap[iIndex];
  }

public:
  static std::shared_ptr<service_node_AutoGen>
  Create(uint32_t service_realm, uint32_t service_type, uint32_t service_id) {
    return std::shared_ptr<service_node_AutoGen>(
        new service_node_AutoGen(service_realm, service_type, service_id));
  }

  service_node_AutoGen(uint32_t service_realm, uint32_t service_type,
                       uint32_t service_id) {
    this->fields.service_realm = service_realm;
    this->fields.service_type = service_type;
    this->fields.service_id = service_id;

    this->bindTable(DeclarativeBase::DBType::DBT_ConfigDb, getFactoryName());
  }

  void set_service_realm(uint32_t service_realm) {
    this->fields.service_realm = service_realm;
    this->markDirty({service_node_AutoGen::service_realm});
  }

  uint32_t get_service_realm() { return this->fields.service_realm; }

  void set_service_type(uint32_t service_type) {
    this->fields.service_type = service_type;
    this->markDirty({service_node_AutoGen::service_type});
  }

  uint32_t get_service_type() { return this->fields.service_type; }

  void set_service_id(uint32_t service_id) {
    this->fields.service_id = service_id;
    this->markDirty({service_node_AutoGen::service_id});
  }

  uint32_t get_service_id() { return this->fields.service_id; }

  void set_ip(std::string ip) {
    this->fields.ip = ip;
    this->markDirty({service_node_AutoGen::ip});
  }

  std::string get_ip() { return this->fields.ip; }

  void set_port(uint32_t port) {
    this->fields.port = port;
    this->markDirty({service_node_AutoGen::port});
  }

  uint32_t get_port() { return this->fields.port; }

  void set_listeners_config(std::string listeners_config) {
    this->fields.listeners_config = listeners_config;
    this->markDirty({service_node_AutoGen::listeners_config});
  }

  std::string get_listeners_config() { return this->fields.listeners_config; }

  void set_mysql_config(std::string mysql_config) {
    this->fields.mysql_config = mysql_config;
    this->markDirty({service_node_AutoGen::mysql_config});
  }

  std::string get_mysql_config() { return this->fields.mysql_config; }

  void set_nats_config(std::string nats_config) {
    this->fields.nats_config = nats_config;
    this->markDirty({service_node_AutoGen::nats_config});
  }

  std::string get_nats_config() { return this->fields.nats_config; }

  void set_redis_config(std::string redis_config) {
    this->fields.redis_config = redis_config;
    this->markDirty({service_node_AutoGen::redis_config});
  }

  std::string get_redis_config() { return this->fields.redis_config; }

  DAO_DEFINE_TYPE_INTRUSIVE_MACRO(service_node_AutoGen, db_fields,
                                  service_node);
};

} // namespace dbt_configdb

APIE_REGISTER_TABLE(DeclarativeBase::DBType::DBT_ConfigDb,
                    apie::dbt_configdb::service_node_AutoGen, service_node)

} // namespace apie
