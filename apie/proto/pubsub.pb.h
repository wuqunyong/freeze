// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsub.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pubsub_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pubsub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "service_discovery.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pubsub_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pubsub_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pubsub_2eproto;
namespace pubsub {
class CLIENT_PEER_CLOSE;
struct CLIENT_PEER_CLOSEDefaultTypeInternal;
extern CLIENT_PEER_CLOSEDefaultTypeInternal _CLIENT_PEER_CLOSE_default_instance_;
class DISCOVERY_NOTICE;
struct DISCOVERY_NOTICEDefaultTypeInternal;
extern DISCOVERY_NOTICEDefaultTypeInternal _DISCOVERY_NOTICE_default_instance_;
class LOGIC_CMD;
struct LOGIC_CMDDefaultTypeInternal;
extern LOGIC_CMDDefaultTypeInternal _LOGIC_CMD_default_instance_;
class SERVER_PEER_CLOSE;
struct SERVER_PEER_CLOSEDefaultTypeInternal;
extern SERVER_PEER_CLOSEDefaultTypeInternal _SERVER_PEER_CLOSE_default_instance_;
class TEST_CMD;
struct TEST_CMDDefaultTypeInternal;
extern TEST_CMDDefaultTypeInternal _TEST_CMD_default_instance_;
}  // namespace pubsub
PROTOBUF_NAMESPACE_OPEN
template<> ::pubsub::CLIENT_PEER_CLOSE* Arena::CreateMaybeMessage<::pubsub::CLIENT_PEER_CLOSE>(Arena*);
template<> ::pubsub::DISCOVERY_NOTICE* Arena::CreateMaybeMessage<::pubsub::DISCOVERY_NOTICE>(Arena*);
template<> ::pubsub::LOGIC_CMD* Arena::CreateMaybeMessage<::pubsub::LOGIC_CMD>(Arena*);
template<> ::pubsub::SERVER_PEER_CLOSE* Arena::CreateMaybeMessage<::pubsub::SERVER_PEER_CLOSE>(Arena*);
template<> ::pubsub::TEST_CMD* Arena::CreateMaybeMessage<::pubsub::TEST_CMD>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pubsub {

enum PUB_TOPIC : int {
  PT_None = 0,
  PT_LogicCmd = 100,
  PT_ClientPeerClose = 200,
  PT_ServerPeerClose = 201,
  PT_DiscoveryNotice = 301,
  PUB_TOPIC_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PUB_TOPIC_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PUB_TOPIC_IsValid(int value);
constexpr PUB_TOPIC PUB_TOPIC_MIN = PT_None;
constexpr PUB_TOPIC PUB_TOPIC_MAX = PT_DiscoveryNotice;
constexpr int PUB_TOPIC_ARRAYSIZE = PUB_TOPIC_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUB_TOPIC_descriptor();
template<typename T>
inline const std::string& PUB_TOPIC_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PUB_TOPIC>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PUB_TOPIC_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PUB_TOPIC_descriptor(), enum_t_value);
}
inline bool PUB_TOPIC_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PUB_TOPIC* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PUB_TOPIC>(
    PUB_TOPIC_descriptor(), name, value);
}
// ===================================================================

class LOGIC_CMD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.LOGIC_CMD) */ {
 public:
  inline LOGIC_CMD() : LOGIC_CMD(nullptr) {}
  ~LOGIC_CMD() override;
  explicit PROTOBUF_CONSTEXPR LOGIC_CMD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LOGIC_CMD(const LOGIC_CMD& from);
  LOGIC_CMD(LOGIC_CMD&& from) noexcept
    : LOGIC_CMD() {
    *this = ::std::move(from);
  }

  inline LOGIC_CMD& operator=(const LOGIC_CMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOGIC_CMD& operator=(LOGIC_CMD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LOGIC_CMD& default_instance() {
    return *internal_default_instance();
  }
  static inline const LOGIC_CMD* internal_default_instance() {
    return reinterpret_cast<const LOGIC_CMD*>(
               &_LOGIC_CMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LOGIC_CMD& a, LOGIC_CMD& b) {
    a.Swap(&b);
  }
  inline void Swap(LOGIC_CMD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LOGIC_CMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LOGIC_CMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LOGIC_CMD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LOGIC_CMD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LOGIC_CMD& from) {
    LOGIC_CMD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOGIC_CMD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.LOGIC_CMD";
  }
  protected:
  explicit LOGIC_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // repeated string params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  const std::string& params(int index) const;
  std::string* mutable_params(int index);
  void set_params(int index, const std::string& value);
  void set_params(int index, std::string&& value);
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  std::string* add_params();
  void add_params(const std::string& value);
  void add_params(std::string&& value);
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_params();
  private:
  const std::string& _internal_params(int index) const;
  std::string* _internal_add_params();
  public:

  // string cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.LOGIC_CMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pubsub_2eproto;
};
// -------------------------------------------------------------------

class TEST_CMD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.TEST_CMD) */ {
 public:
  inline TEST_CMD() : TEST_CMD(nullptr) {}
  ~TEST_CMD() override;
  explicit PROTOBUF_CONSTEXPR TEST_CMD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TEST_CMD(const TEST_CMD& from);
  TEST_CMD(TEST_CMD&& from) noexcept
    : TEST_CMD() {
    *this = ::std::move(from);
  }

  inline TEST_CMD& operator=(const TEST_CMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline TEST_CMD& operator=(TEST_CMD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TEST_CMD& default_instance() {
    return *internal_default_instance();
  }
  static inline const TEST_CMD* internal_default_instance() {
    return reinterpret_cast<const TEST_CMD*>(
               &_TEST_CMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TEST_CMD& a, TEST_CMD& b) {
    a.Swap(&b);
  }
  inline void Swap(TEST_CMD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TEST_CMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TEST_CMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TEST_CMD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TEST_CMD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TEST_CMD& from) {
    TEST_CMD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEST_CMD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.TEST_CMD";
  }
  protected:
  explicit TEST_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kModuleNameFieldNumber = 1,
    kCmdFieldNumber = 2,
  };
  // repeated string params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  const std::string& params(int index) const;
  std::string* mutable_params(int index);
  void set_params(int index, const std::string& value);
  void set_params(int index, std::string&& value);
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  std::string* add_params();
  void add_params(const std::string& value);
  void add_params(std::string&& value);
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_params();
  private:
  const std::string& _internal_params(int index) const;
  std::string* _internal_add_params();
  public:

  // string module_name = 1;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // string cmd = 2;
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.TEST_CMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pubsub_2eproto;
};
// -------------------------------------------------------------------

class CLIENT_PEER_CLOSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.CLIENT_PEER_CLOSE) */ {
 public:
  inline CLIENT_PEER_CLOSE() : CLIENT_PEER_CLOSE(nullptr) {}
  ~CLIENT_PEER_CLOSE() override;
  explicit PROTOBUF_CONSTEXPR CLIENT_PEER_CLOSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLIENT_PEER_CLOSE(const CLIENT_PEER_CLOSE& from);
  CLIENT_PEER_CLOSE(CLIENT_PEER_CLOSE&& from) noexcept
    : CLIENT_PEER_CLOSE() {
    *this = ::std::move(from);
  }

  inline CLIENT_PEER_CLOSE& operator=(const CLIENT_PEER_CLOSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLIENT_PEER_CLOSE& operator=(CLIENT_PEER_CLOSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLIENT_PEER_CLOSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLIENT_PEER_CLOSE* internal_default_instance() {
    return reinterpret_cast<const CLIENT_PEER_CLOSE*>(
               &_CLIENT_PEER_CLOSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CLIENT_PEER_CLOSE& a, CLIENT_PEER_CLOSE& b) {
    a.Swap(&b);
  }
  inline void Swap(CLIENT_PEER_CLOSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLIENT_PEER_CLOSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLIENT_PEER_CLOSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLIENT_PEER_CLOSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLIENT_PEER_CLOSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CLIENT_PEER_CLOSE& from) {
    CLIENT_PEER_CLOSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLIENT_PEER_CLOSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.CLIENT_PEER_CLOSE";
  }
  protected:
  explicit CLIENT_PEER_CLOSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 3,
    kSerialNumFieldNumber = 1,
    kResultFieldNumber = 2,
    kActiveFieldNumber = 4,
  };
  // string info = 3;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // uint64 serial_num = 1;
  void clear_serial_num();
  uint64_t serial_num() const;
  void set_serial_num(uint64_t value);
  private:
  uint64_t _internal_serial_num() const;
  void _internal_set_serial_num(uint64_t value);
  public:

  // uint32 result = 2;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // uint32 active = 4;
  void clear_active();
  uint32_t active() const;
  void set_active(uint32_t value);
  private:
  uint32_t _internal_active() const;
  void _internal_set_active(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pubsub.CLIENT_PEER_CLOSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    uint64_t serial_num_;
    uint32_t result_;
    uint32_t active_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pubsub_2eproto;
};
// -------------------------------------------------------------------

class SERVER_PEER_CLOSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.SERVER_PEER_CLOSE) */ {
 public:
  inline SERVER_PEER_CLOSE() : SERVER_PEER_CLOSE(nullptr) {}
  ~SERVER_PEER_CLOSE() override;
  explicit PROTOBUF_CONSTEXPR SERVER_PEER_CLOSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SERVER_PEER_CLOSE(const SERVER_PEER_CLOSE& from);
  SERVER_PEER_CLOSE(SERVER_PEER_CLOSE&& from) noexcept
    : SERVER_PEER_CLOSE() {
    *this = ::std::move(from);
  }

  inline SERVER_PEER_CLOSE& operator=(const SERVER_PEER_CLOSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SERVER_PEER_CLOSE& operator=(SERVER_PEER_CLOSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SERVER_PEER_CLOSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SERVER_PEER_CLOSE* internal_default_instance() {
    return reinterpret_cast<const SERVER_PEER_CLOSE*>(
               &_SERVER_PEER_CLOSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SERVER_PEER_CLOSE& a, SERVER_PEER_CLOSE& b) {
    a.Swap(&b);
  }
  inline void Swap(SERVER_PEER_CLOSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SERVER_PEER_CLOSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SERVER_PEER_CLOSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SERVER_PEER_CLOSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SERVER_PEER_CLOSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SERVER_PEER_CLOSE& from) {
    SERVER_PEER_CLOSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SERVER_PEER_CLOSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.SERVER_PEER_CLOSE";
  }
  protected:
  explicit SERVER_PEER_CLOSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 3,
    kSerialNumFieldNumber = 1,
    kResultFieldNumber = 2,
    kActiveFieldNumber = 4,
  };
  // string info = 3;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // uint64 serial_num = 1;
  void clear_serial_num();
  uint64_t serial_num() const;
  void set_serial_num(uint64_t value);
  private:
  uint64_t _internal_serial_num() const;
  void _internal_set_serial_num(uint64_t value);
  public:

  // uint32 result = 2;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // uint32 active = 4;
  void clear_active();
  uint32_t active() const;
  void set_active(uint32_t value);
  private:
  uint32_t _internal_active() const;
  void _internal_set_active(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pubsub.SERVER_PEER_CLOSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    uint64_t serial_num_;
    uint32_t result_;
    uint32_t active_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pubsub_2eproto;
};
// -------------------------------------------------------------------

class DISCOVERY_NOTICE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.DISCOVERY_NOTICE) */ {
 public:
  inline DISCOVERY_NOTICE() : DISCOVERY_NOTICE(nullptr) {}
  ~DISCOVERY_NOTICE() override;
  explicit PROTOBUF_CONSTEXPR DISCOVERY_NOTICE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DISCOVERY_NOTICE(const DISCOVERY_NOTICE& from);
  DISCOVERY_NOTICE(DISCOVERY_NOTICE&& from) noexcept
    : DISCOVERY_NOTICE() {
    *this = ::std::move(from);
  }

  inline DISCOVERY_NOTICE& operator=(const DISCOVERY_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline DISCOVERY_NOTICE& operator=(DISCOVERY_NOTICE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DISCOVERY_NOTICE& default_instance() {
    return *internal_default_instance();
  }
  static inline const DISCOVERY_NOTICE* internal_default_instance() {
    return reinterpret_cast<const DISCOVERY_NOTICE*>(
               &_DISCOVERY_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DISCOVERY_NOTICE& a, DISCOVERY_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(DISCOVERY_NOTICE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DISCOVERY_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DISCOVERY_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DISCOVERY_NOTICE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DISCOVERY_NOTICE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DISCOVERY_NOTICE& from) {
    DISCOVERY_NOTICE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DISCOVERY_NOTICE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.DISCOVERY_NOTICE";
  }
  protected:
  explicit DISCOVERY_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticeFieldNumber = 1,
  };
  // .service_discovery.MSG_NOTICE_INSTANCE notice = 1;
  bool has_notice() const;
  private:
  bool _internal_has_notice() const;
  public:
  void clear_notice();
  const ::service_discovery::MSG_NOTICE_INSTANCE& notice() const;
  PROTOBUF_NODISCARD ::service_discovery::MSG_NOTICE_INSTANCE* release_notice();
  ::service_discovery::MSG_NOTICE_INSTANCE* mutable_notice();
  void set_allocated_notice(::service_discovery::MSG_NOTICE_INSTANCE* notice);
  private:
  const ::service_discovery::MSG_NOTICE_INSTANCE& _internal_notice() const;
  ::service_discovery::MSG_NOTICE_INSTANCE* _internal_mutable_notice();
  public:
  void unsafe_arena_set_allocated_notice(
      ::service_discovery::MSG_NOTICE_INSTANCE* notice);
  ::service_discovery::MSG_NOTICE_INSTANCE* unsafe_arena_release_notice();

  // @@protoc_insertion_point(class_scope:pubsub.DISCOVERY_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::service_discovery::MSG_NOTICE_INSTANCE* notice_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pubsub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LOGIC_CMD

// string cmd = 1;
inline void LOGIC_CMD::clear_cmd() {
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& LOGIC_CMD::cmd() const {
  // @@protoc_insertion_point(field_get:pubsub.LOGIC_CMD.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LOGIC_CMD::set_cmd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cmd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pubsub.LOGIC_CMD.cmd)
}
inline std::string* LOGIC_CMD::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:pubsub.LOGIC_CMD.cmd)
  return _s;
}
inline const std::string& LOGIC_CMD::_internal_cmd() const {
  return _impl_.cmd_.Get();
}
inline void LOGIC_CMD::_internal_set_cmd(const std::string& value) {
  
  _impl_.cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* LOGIC_CMD::_internal_mutable_cmd() {
  
  return _impl_.cmd_.Mutable(GetArenaForAllocation());
}
inline std::string* LOGIC_CMD::release_cmd() {
  // @@protoc_insertion_point(field_release:pubsub.LOGIC_CMD.cmd)
  return _impl_.cmd_.Release();
}
inline void LOGIC_CMD::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  _impl_.cmd_.SetAllocated(cmd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cmd_.IsDefault()) {
    _impl_.cmd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pubsub.LOGIC_CMD.cmd)
}

// repeated string params = 2;
inline int LOGIC_CMD::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int LOGIC_CMD::params_size() const {
  return _internal_params_size();
}
inline void LOGIC_CMD::clear_params() {
  _impl_.params_.Clear();
}
inline std::string* LOGIC_CMD::add_params() {
  std::string* _s = _internal_add_params();
  // @@protoc_insertion_point(field_add_mutable:pubsub.LOGIC_CMD.params)
  return _s;
}
inline const std::string& LOGIC_CMD::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const std::string& LOGIC_CMD::params(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.LOGIC_CMD.params)
  return _internal_params(index);
}
inline std::string* LOGIC_CMD::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.LOGIC_CMD.params)
  return _impl_.params_.Mutable(index);
}
inline void LOGIC_CMD::set_params(int index, const std::string& value) {
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.LOGIC_CMD.params)
}
inline void LOGIC_CMD::set_params(int index, std::string&& value) {
  _impl_.params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pubsub.LOGIC_CMD.params)
}
inline void LOGIC_CMD::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.LOGIC_CMD.params)
}
inline void LOGIC_CMD::set_params(int index, const char* value, size_t size) {
  _impl_.params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.LOGIC_CMD.params)
}
inline std::string* LOGIC_CMD::_internal_add_params() {
  return _impl_.params_.Add();
}
inline void LOGIC_CMD::add_params(const std::string& value) {
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pubsub.LOGIC_CMD.params)
}
inline void LOGIC_CMD::add_params(std::string&& value) {
  _impl_.params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pubsub.LOGIC_CMD.params)
}
inline void LOGIC_CMD::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pubsub.LOGIC_CMD.params)
}
inline void LOGIC_CMD::add_params(const char* value, size_t size) {
  _impl_.params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pubsub.LOGIC_CMD.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LOGIC_CMD::params() const {
  // @@protoc_insertion_point(field_list:pubsub.LOGIC_CMD.params)
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LOGIC_CMD::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.LOGIC_CMD.params)
  return &_impl_.params_;
}

// -------------------------------------------------------------------

// TEST_CMD

// string module_name = 1;
inline void TEST_CMD::clear_module_name() {
  _impl_.module_name_.ClearToEmpty();
}
inline const std::string& TEST_CMD::module_name() const {
  // @@protoc_insertion_point(field_get:pubsub.TEST_CMD.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TEST_CMD::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.module_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pubsub.TEST_CMD.module_name)
}
inline std::string* TEST_CMD::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:pubsub.TEST_CMD.module_name)
  return _s;
}
inline const std::string& TEST_CMD::_internal_module_name() const {
  return _impl_.module_name_.Get();
}
inline void TEST_CMD::_internal_set_module_name(const std::string& value) {
  
  _impl_.module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TEST_CMD::_internal_mutable_module_name() {
  
  return _impl_.module_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TEST_CMD::release_module_name() {
  // @@protoc_insertion_point(field_release:pubsub.TEST_CMD.module_name)
  return _impl_.module_name_.Release();
}
inline void TEST_CMD::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  _impl_.module_name_.SetAllocated(module_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.module_name_.IsDefault()) {
    _impl_.module_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pubsub.TEST_CMD.module_name)
}

// string cmd = 2;
inline void TEST_CMD::clear_cmd() {
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& TEST_CMD::cmd() const {
  // @@protoc_insertion_point(field_get:pubsub.TEST_CMD.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TEST_CMD::set_cmd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cmd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pubsub.TEST_CMD.cmd)
}
inline std::string* TEST_CMD::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:pubsub.TEST_CMD.cmd)
  return _s;
}
inline const std::string& TEST_CMD::_internal_cmd() const {
  return _impl_.cmd_.Get();
}
inline void TEST_CMD::_internal_set_cmd(const std::string& value) {
  
  _impl_.cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* TEST_CMD::_internal_mutable_cmd() {
  
  return _impl_.cmd_.Mutable(GetArenaForAllocation());
}
inline std::string* TEST_CMD::release_cmd() {
  // @@protoc_insertion_point(field_release:pubsub.TEST_CMD.cmd)
  return _impl_.cmd_.Release();
}
inline void TEST_CMD::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  _impl_.cmd_.SetAllocated(cmd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cmd_.IsDefault()) {
    _impl_.cmd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pubsub.TEST_CMD.cmd)
}

// repeated string params = 3;
inline int TEST_CMD::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int TEST_CMD::params_size() const {
  return _internal_params_size();
}
inline void TEST_CMD::clear_params() {
  _impl_.params_.Clear();
}
inline std::string* TEST_CMD::add_params() {
  std::string* _s = _internal_add_params();
  // @@protoc_insertion_point(field_add_mutable:pubsub.TEST_CMD.params)
  return _s;
}
inline const std::string& TEST_CMD::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const std::string& TEST_CMD::params(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.TEST_CMD.params)
  return _internal_params(index);
}
inline std::string* TEST_CMD::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.TEST_CMD.params)
  return _impl_.params_.Mutable(index);
}
inline void TEST_CMD::set_params(int index, const std::string& value) {
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.TEST_CMD.params)
}
inline void TEST_CMD::set_params(int index, std::string&& value) {
  _impl_.params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pubsub.TEST_CMD.params)
}
inline void TEST_CMD::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.TEST_CMD.params)
}
inline void TEST_CMD::set_params(int index, const char* value, size_t size) {
  _impl_.params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.TEST_CMD.params)
}
inline std::string* TEST_CMD::_internal_add_params() {
  return _impl_.params_.Add();
}
inline void TEST_CMD::add_params(const std::string& value) {
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pubsub.TEST_CMD.params)
}
inline void TEST_CMD::add_params(std::string&& value) {
  _impl_.params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pubsub.TEST_CMD.params)
}
inline void TEST_CMD::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pubsub.TEST_CMD.params)
}
inline void TEST_CMD::add_params(const char* value, size_t size) {
  _impl_.params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pubsub.TEST_CMD.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TEST_CMD::params() const {
  // @@protoc_insertion_point(field_list:pubsub.TEST_CMD.params)
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TEST_CMD::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.TEST_CMD.params)
  return &_impl_.params_;
}

// -------------------------------------------------------------------

// CLIENT_PEER_CLOSE

// uint64 serial_num = 1;
inline void CLIENT_PEER_CLOSE::clear_serial_num() {
  _impl_.serial_num_ = uint64_t{0u};
}
inline uint64_t CLIENT_PEER_CLOSE::_internal_serial_num() const {
  return _impl_.serial_num_;
}
inline uint64_t CLIENT_PEER_CLOSE::serial_num() const {
  // @@protoc_insertion_point(field_get:pubsub.CLIENT_PEER_CLOSE.serial_num)
  return _internal_serial_num();
}
inline void CLIENT_PEER_CLOSE::_internal_set_serial_num(uint64_t value) {
  
  _impl_.serial_num_ = value;
}
inline void CLIENT_PEER_CLOSE::set_serial_num(uint64_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:pubsub.CLIENT_PEER_CLOSE.serial_num)
}

// uint32 result = 2;
inline void CLIENT_PEER_CLOSE::clear_result() {
  _impl_.result_ = 0u;
}
inline uint32_t CLIENT_PEER_CLOSE::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t CLIENT_PEER_CLOSE::result() const {
  // @@protoc_insertion_point(field_get:pubsub.CLIENT_PEER_CLOSE.result)
  return _internal_result();
}
inline void CLIENT_PEER_CLOSE::_internal_set_result(uint32_t value) {
  
  _impl_.result_ = value;
}
inline void CLIENT_PEER_CLOSE::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pubsub.CLIENT_PEER_CLOSE.result)
}

// string info = 3;
inline void CLIENT_PEER_CLOSE::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& CLIENT_PEER_CLOSE::info() const {
  // @@protoc_insertion_point(field_get:pubsub.CLIENT_PEER_CLOSE.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLIENT_PEER_CLOSE::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pubsub.CLIENT_PEER_CLOSE.info)
}
inline std::string* CLIENT_PEER_CLOSE::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:pubsub.CLIENT_PEER_CLOSE.info)
  return _s;
}
inline const std::string& CLIENT_PEER_CLOSE::_internal_info() const {
  return _impl_.info_.Get();
}
inline void CLIENT_PEER_CLOSE::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* CLIENT_PEER_CLOSE::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* CLIENT_PEER_CLOSE::release_info() {
  // @@protoc_insertion_point(field_release:pubsub.CLIENT_PEER_CLOSE.info)
  return _impl_.info_.Release();
}
inline void CLIENT_PEER_CLOSE::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pubsub.CLIENT_PEER_CLOSE.info)
}

// uint32 active = 4;
inline void CLIENT_PEER_CLOSE::clear_active() {
  _impl_.active_ = 0u;
}
inline uint32_t CLIENT_PEER_CLOSE::_internal_active() const {
  return _impl_.active_;
}
inline uint32_t CLIENT_PEER_CLOSE::active() const {
  // @@protoc_insertion_point(field_get:pubsub.CLIENT_PEER_CLOSE.active)
  return _internal_active();
}
inline void CLIENT_PEER_CLOSE::_internal_set_active(uint32_t value) {
  
  _impl_.active_ = value;
}
inline void CLIENT_PEER_CLOSE::set_active(uint32_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:pubsub.CLIENT_PEER_CLOSE.active)
}

// -------------------------------------------------------------------

// SERVER_PEER_CLOSE

// uint64 serial_num = 1;
inline void SERVER_PEER_CLOSE::clear_serial_num() {
  _impl_.serial_num_ = uint64_t{0u};
}
inline uint64_t SERVER_PEER_CLOSE::_internal_serial_num() const {
  return _impl_.serial_num_;
}
inline uint64_t SERVER_PEER_CLOSE::serial_num() const {
  // @@protoc_insertion_point(field_get:pubsub.SERVER_PEER_CLOSE.serial_num)
  return _internal_serial_num();
}
inline void SERVER_PEER_CLOSE::_internal_set_serial_num(uint64_t value) {
  
  _impl_.serial_num_ = value;
}
inline void SERVER_PEER_CLOSE::set_serial_num(uint64_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:pubsub.SERVER_PEER_CLOSE.serial_num)
}

// uint32 result = 2;
inline void SERVER_PEER_CLOSE::clear_result() {
  _impl_.result_ = 0u;
}
inline uint32_t SERVER_PEER_CLOSE::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t SERVER_PEER_CLOSE::result() const {
  // @@protoc_insertion_point(field_get:pubsub.SERVER_PEER_CLOSE.result)
  return _internal_result();
}
inline void SERVER_PEER_CLOSE::_internal_set_result(uint32_t value) {
  
  _impl_.result_ = value;
}
inline void SERVER_PEER_CLOSE::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pubsub.SERVER_PEER_CLOSE.result)
}

// string info = 3;
inline void SERVER_PEER_CLOSE::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& SERVER_PEER_CLOSE::info() const {
  // @@protoc_insertion_point(field_get:pubsub.SERVER_PEER_CLOSE.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SERVER_PEER_CLOSE::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pubsub.SERVER_PEER_CLOSE.info)
}
inline std::string* SERVER_PEER_CLOSE::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:pubsub.SERVER_PEER_CLOSE.info)
  return _s;
}
inline const std::string& SERVER_PEER_CLOSE::_internal_info() const {
  return _impl_.info_.Get();
}
inline void SERVER_PEER_CLOSE::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* SERVER_PEER_CLOSE::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* SERVER_PEER_CLOSE::release_info() {
  // @@protoc_insertion_point(field_release:pubsub.SERVER_PEER_CLOSE.info)
  return _impl_.info_.Release();
}
inline void SERVER_PEER_CLOSE::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pubsub.SERVER_PEER_CLOSE.info)
}

// uint32 active = 4;
inline void SERVER_PEER_CLOSE::clear_active() {
  _impl_.active_ = 0u;
}
inline uint32_t SERVER_PEER_CLOSE::_internal_active() const {
  return _impl_.active_;
}
inline uint32_t SERVER_PEER_CLOSE::active() const {
  // @@protoc_insertion_point(field_get:pubsub.SERVER_PEER_CLOSE.active)
  return _internal_active();
}
inline void SERVER_PEER_CLOSE::_internal_set_active(uint32_t value) {
  
  _impl_.active_ = value;
}
inline void SERVER_PEER_CLOSE::set_active(uint32_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:pubsub.SERVER_PEER_CLOSE.active)
}

// -------------------------------------------------------------------

// DISCOVERY_NOTICE

// .service_discovery.MSG_NOTICE_INSTANCE notice = 1;
inline bool DISCOVERY_NOTICE::_internal_has_notice() const {
  return this != internal_default_instance() && _impl_.notice_ != nullptr;
}
inline bool DISCOVERY_NOTICE::has_notice() const {
  return _internal_has_notice();
}
inline const ::service_discovery::MSG_NOTICE_INSTANCE& DISCOVERY_NOTICE::_internal_notice() const {
  const ::service_discovery::MSG_NOTICE_INSTANCE* p = _impl_.notice_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_discovery::MSG_NOTICE_INSTANCE&>(
      ::service_discovery::_MSG_NOTICE_INSTANCE_default_instance_);
}
inline const ::service_discovery::MSG_NOTICE_INSTANCE& DISCOVERY_NOTICE::notice() const {
  // @@protoc_insertion_point(field_get:pubsub.DISCOVERY_NOTICE.notice)
  return _internal_notice();
}
inline void DISCOVERY_NOTICE::unsafe_arena_set_allocated_notice(
    ::service_discovery::MSG_NOTICE_INSTANCE* notice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notice_);
  }
  _impl_.notice_ = notice;
  if (notice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pubsub.DISCOVERY_NOTICE.notice)
}
inline ::service_discovery::MSG_NOTICE_INSTANCE* DISCOVERY_NOTICE::release_notice() {
  
  ::service_discovery::MSG_NOTICE_INSTANCE* temp = _impl_.notice_;
  _impl_.notice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_discovery::MSG_NOTICE_INSTANCE* DISCOVERY_NOTICE::unsafe_arena_release_notice() {
  // @@protoc_insertion_point(field_release:pubsub.DISCOVERY_NOTICE.notice)
  
  ::service_discovery::MSG_NOTICE_INSTANCE* temp = _impl_.notice_;
  _impl_.notice_ = nullptr;
  return temp;
}
inline ::service_discovery::MSG_NOTICE_INSTANCE* DISCOVERY_NOTICE::_internal_mutable_notice() {
  
  if (_impl_.notice_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_discovery::MSG_NOTICE_INSTANCE>(GetArenaForAllocation());
    _impl_.notice_ = p;
  }
  return _impl_.notice_;
}
inline ::service_discovery::MSG_NOTICE_INSTANCE* DISCOVERY_NOTICE::mutable_notice() {
  ::service_discovery::MSG_NOTICE_INSTANCE* _msg = _internal_mutable_notice();
  // @@protoc_insertion_point(field_mutable:pubsub.DISCOVERY_NOTICE.notice)
  return _msg;
}
inline void DISCOVERY_NOTICE::set_allocated_notice(::service_discovery::MSG_NOTICE_INSTANCE* notice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notice_);
  }
  if (notice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notice));
    if (message_arena != submessage_arena) {
      notice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.notice_ = notice;
  // @@protoc_insertion_point(field_set_allocated:pubsub.DISCOVERY_NOTICE.notice)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pubsub

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pubsub::PUB_TOPIC> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pubsub::PUB_TOPIC>() {
  return ::pubsub::PUB_TOPIC_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pubsub_2eproto
