// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_proxy_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysql_5fproxy_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysql_5fproxy_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysql_5fproxy_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysql_5fproxy_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mysql_5fproxy_5fmsg_2eproto;
namespace mysql_proxy_msg {
class MysqlDeleteRequest;
struct MysqlDeleteRequestDefaultTypeInternal;
extern MysqlDeleteRequestDefaultTypeInternal _MysqlDeleteRequest_default_instance_;
class MysqlDeleteResponse;
struct MysqlDeleteResponseDefaultTypeInternal;
extern MysqlDeleteResponseDefaultTypeInternal _MysqlDeleteResponse_default_instance_;
class MysqlDescField;
struct MysqlDescFieldDefaultTypeInternal;
extern MysqlDescFieldDefaultTypeInternal _MysqlDescField_default_instance_;
class MysqlDescTable;
struct MysqlDescTableDefaultTypeInternal;
extern MysqlDescTableDefaultTypeInternal _MysqlDescTable_default_instance_;
class MysqlDescribeRequest;
struct MysqlDescribeRequestDefaultTypeInternal;
extern MysqlDescribeRequestDefaultTypeInternal _MysqlDescribeRequest_default_instance_;
class MysqlDescribeResponse;
struct MysqlDescribeResponseDefaultTypeInternal;
extern MysqlDescribeResponseDefaultTypeInternal _MysqlDescribeResponse_default_instance_;
class MysqlDescribeResponse_TablesEntry_DoNotUse;
struct MysqlDescribeResponse_TablesEntry_DoNotUseDefaultTypeInternal;
extern MysqlDescribeResponse_TablesEntry_DoNotUseDefaultTypeInternal _MysqlDescribeResponse_TablesEntry_DoNotUse_default_instance_;
class MysqlField;
struct MysqlFieldDefaultTypeInternal;
extern MysqlFieldDefaultTypeInternal _MysqlField_default_instance_;
class MysqlInsertRequest;
struct MysqlInsertRequestDefaultTypeInternal;
extern MysqlInsertRequestDefaultTypeInternal _MysqlInsertRequest_default_instance_;
class MysqlInsertResponse;
struct MysqlInsertResponseDefaultTypeInternal;
extern MysqlInsertResponseDefaultTypeInternal _MysqlInsertResponse_default_instance_;
class MysqlMulitQueryResponse;
struct MysqlMulitQueryResponseDefaultTypeInternal;
extern MysqlMulitQueryResponseDefaultTypeInternal _MysqlMulitQueryResponse_default_instance_;
class MysqlMultiQueryRequest;
struct MysqlMultiQueryRequestDefaultTypeInternal;
extern MysqlMultiQueryRequestDefaultTypeInternal _MysqlMultiQueryRequest_default_instance_;
class MysqlQueryAllRequest;
struct MysqlQueryAllRequestDefaultTypeInternal;
extern MysqlQueryAllRequestDefaultTypeInternal _MysqlQueryAllRequest_default_instance_;
class MysqlQueryAllResponse;
struct MysqlQueryAllResponseDefaultTypeInternal;
extern MysqlQueryAllResponseDefaultTypeInternal _MysqlQueryAllResponse_default_instance_;
class MysqlQueryByFilterRequest;
struct MysqlQueryByFilterRequestDefaultTypeInternal;
extern MysqlQueryByFilterRequestDefaultTypeInternal _MysqlQueryByFilterRequest_default_instance_;
class MysqlQueryRequest;
struct MysqlQueryRequestDefaultTypeInternal;
extern MysqlQueryRequestDefaultTypeInternal _MysqlQueryRequest_default_instance_;
class MysqlQueryResponse;
struct MysqlQueryResponseDefaultTypeInternal;
extern MysqlQueryResponseDefaultTypeInternal _MysqlQueryResponse_default_instance_;
class MysqlRow;
struct MysqlRowDefaultTypeInternal;
extern MysqlRowDefaultTypeInternal _MysqlRow_default_instance_;
class MysqlTable;
struct MysqlTableDefaultTypeInternal;
extern MysqlTableDefaultTypeInternal _MysqlTable_default_instance_;
class MysqlUpdateRequest;
struct MysqlUpdateRequestDefaultTypeInternal;
extern MysqlUpdateRequestDefaultTypeInternal _MysqlUpdateRequest_default_instance_;
class MysqlUpdateResponse;
struct MysqlUpdateResponseDefaultTypeInternal;
extern MysqlUpdateResponseDefaultTypeInternal _MysqlUpdateResponse_default_instance_;
class MysqlValue;
struct MysqlValueDefaultTypeInternal;
extern MysqlValueDefaultTypeInternal _MysqlValue_default_instance_;
}  // namespace mysql_proxy_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::mysql_proxy_msg::MysqlDeleteRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlDeleteRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlDeleteResponse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlDeleteResponse>(Arena*);
template<> ::mysql_proxy_msg::MysqlDescField* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlDescField>(Arena*);
template<> ::mysql_proxy_msg::MysqlDescTable* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlDescTable>(Arena*);
template<> ::mysql_proxy_msg::MysqlDescribeRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlDescribeRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlDescribeResponse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlDescribeResponse>(Arena*);
template<> ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse>(Arena*);
template<> ::mysql_proxy_msg::MysqlField* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlField>(Arena*);
template<> ::mysql_proxy_msg::MysqlInsertRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlInsertRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlInsertResponse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlInsertResponse>(Arena*);
template<> ::mysql_proxy_msg::MysqlMulitQueryResponse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlMulitQueryResponse>(Arena*);
template<> ::mysql_proxy_msg::MysqlMultiQueryRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlMultiQueryRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlQueryAllRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlQueryAllRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlQueryAllResponse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlQueryAllResponse>(Arena*);
template<> ::mysql_proxy_msg::MysqlQueryByFilterRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlQueryByFilterRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlQueryRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlQueryRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlQueryResponse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlQueryResponse>(Arena*);
template<> ::mysql_proxy_msg::MysqlRow* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlRow>(Arena*);
template<> ::mysql_proxy_msg::MysqlTable* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlTable>(Arena*);
template<> ::mysql_proxy_msg::MysqlUpdateRequest* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlUpdateRequest>(Arena*);
template<> ::mysql_proxy_msg::MysqlUpdateResponse* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlUpdateResponse>(Arena*);
template<> ::mysql_proxy_msg::MysqlValue* Arena::CreateMaybeMessage<::mysql_proxy_msg::MysqlValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mysql_proxy_msg {

enum MysqlScalarValueTypes : int {
  MSVT_None = 0,
  MSVT_INT32 = 1,
  MSVT_INT64 = 2,
  MSVT_UINT32 = 3,
  MSVT_UINT64 = 4,
  MSVT_STRING = 5,
  MSVT_BYTES = 6,
  MSVT_FLOAT = 7,
  MSVT_DOUBLE = 8,
  MysqlScalarValueTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MysqlScalarValueTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MysqlScalarValueTypes_IsValid(int value);
constexpr MysqlScalarValueTypes MysqlScalarValueTypes_MIN = MSVT_None;
constexpr MysqlScalarValueTypes MysqlScalarValueTypes_MAX = MSVT_DOUBLE;
constexpr int MysqlScalarValueTypes_ARRAYSIZE = MysqlScalarValueTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlScalarValueTypes_descriptor();
template<typename T>
inline const std::string& MysqlScalarValueTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MysqlScalarValueTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MysqlScalarValueTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MysqlScalarValueTypes_descriptor(), enum_t_value);
}
inline bool MysqlScalarValueTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MysqlScalarValueTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MysqlScalarValueTypes>(
    MysqlScalarValueTypes_descriptor(), name, value);
}
enum MysqlDataManipulation : int {
  MDM_None = 0,
  MDM_SELECT = 1,
  MDM_UPDATE = 2,
  MDM_DELETE = 3,
  MDM_INSERT = 4,
  MDM_QUERY_BY_FILTER = 5,
  MDM_QUERY_ALL = 6,
  MysqlDataManipulation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MysqlDataManipulation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MysqlDataManipulation_IsValid(int value);
constexpr MysqlDataManipulation MysqlDataManipulation_MIN = MDM_None;
constexpr MysqlDataManipulation MysqlDataManipulation_MAX = MDM_QUERY_ALL;
constexpr int MysqlDataManipulation_ARRAYSIZE = MysqlDataManipulation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlDataManipulation_descriptor();
template<typename T>
inline const std::string& MysqlDataManipulation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MysqlDataManipulation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MysqlDataManipulation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MysqlDataManipulation_descriptor(), enum_t_value);
}
inline bool MysqlDataManipulation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MysqlDataManipulation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MysqlDataManipulation>(
    MysqlDataManipulation_descriptor(), name, value);
}
// ===================================================================

class MysqlValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlValue) */ {
 public:
  inline MysqlValue() : MysqlValue(nullptr) {}
  ~MysqlValue() override;
  explicit PROTOBUF_CONSTEXPR MysqlValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlValue(const MysqlValue& from);
  MysqlValue(MysqlValue&& from) noexcept
    : MysqlValue() {
    *this = ::std::move(from);
  }

  inline MysqlValue& operator=(const MysqlValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlValue& operator=(MysqlValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlValue& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kInt32V = 101,
    kInt64V = 102,
    kUint32V = 103,
    kUint64V = 104,
    kStringV = 105,
    kBytesV = 106,
    kFloatV = 107,
    kDoubleV = 108,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const MysqlValue* internal_default_instance() {
    return reinterpret_cast<const MysqlValue*>(
               &_MysqlValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MysqlValue& a, MysqlValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlValue& from) {
    MysqlValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlValue";
  }
  protected:
  explicit MysqlValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbTypeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kInt32VFieldNumber = 101,
    kInt64VFieldNumber = 102,
    kUint32VFieldNumber = 103,
    kUint64VFieldNumber = 104,
    kStringVFieldNumber = 105,
    kBytesVFieldNumber = 106,
    kFloatVFieldNumber = 107,
    kDoubleVFieldNumber = 108,
  };
  // int32 db_type = 1;
  void clear_db_type();
  int32_t db_type() const;
  void set_db_type(int32_t value);
  private:
  int32_t _internal_db_type() const;
  void _internal_set_db_type(int32_t value);
  public:

  // .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
  void clear_type();
  ::mysql_proxy_msg::MysqlScalarValueTypes type() const;
  void set_type(::mysql_proxy_msg::MysqlScalarValueTypes value);
  private:
  ::mysql_proxy_msg::MysqlScalarValueTypes _internal_type() const;
  void _internal_set_type(::mysql_proxy_msg::MysqlScalarValueTypes value);
  public:

  // int32 int32_v = 101;
  bool has_int32_v() const;
  private:
  bool _internal_has_int32_v() const;
  public:
  void clear_int32_v();
  int32_t int32_v() const;
  void set_int32_v(int32_t value);
  private:
  int32_t _internal_int32_v() const;
  void _internal_set_int32_v(int32_t value);
  public:

  // int64 int64_v = 102;
  bool has_int64_v() const;
  private:
  bool _internal_has_int64_v() const;
  public:
  void clear_int64_v();
  int64_t int64_v() const;
  void set_int64_v(int64_t value);
  private:
  int64_t _internal_int64_v() const;
  void _internal_set_int64_v(int64_t value);
  public:

  // uint32 uint32_v = 103;
  bool has_uint32_v() const;
  private:
  bool _internal_has_uint32_v() const;
  public:
  void clear_uint32_v();
  uint32_t uint32_v() const;
  void set_uint32_v(uint32_t value);
  private:
  uint32_t _internal_uint32_v() const;
  void _internal_set_uint32_v(uint32_t value);
  public:

  // uint64 uint64_v = 104;
  bool has_uint64_v() const;
  private:
  bool _internal_has_uint64_v() const;
  public:
  void clear_uint64_v();
  uint64_t uint64_v() const;
  void set_uint64_v(uint64_t value);
  private:
  uint64_t _internal_uint64_v() const;
  void _internal_set_uint64_v(uint64_t value);
  public:

  // string string_v = 105;
  bool has_string_v() const;
  private:
  bool _internal_has_string_v() const;
  public:
  void clear_string_v();
  const std::string& string_v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_v();
  PROTOBUF_NODISCARD std::string* release_string_v();
  void set_allocated_string_v(std::string* string_v);
  private:
  const std::string& _internal_string_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_v(const std::string& value);
  std::string* _internal_mutable_string_v();
  public:

  // bytes bytes_v = 106;
  bool has_bytes_v() const;
  private:
  bool _internal_has_bytes_v() const;
  public:
  void clear_bytes_v();
  const std::string& bytes_v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_v();
  PROTOBUF_NODISCARD std::string* release_bytes_v();
  void set_allocated_bytes_v(std::string* bytes_v);
  private:
  const std::string& _internal_bytes_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_v(const std::string& value);
  std::string* _internal_mutable_bytes_v();
  public:

  // float float_v = 107;
  bool has_float_v() const;
  private:
  bool _internal_has_float_v() const;
  public:
  void clear_float_v();
  float float_v() const;
  void set_float_v(float value);
  private:
  float _internal_float_v() const;
  void _internal_set_float_v(float value);
  public:

  // double double_v = 108;
  bool has_double_v() const;
  private:
  bool _internal_has_double_v() const;
  public:
  void clear_double_v();
  double double_v() const;
  void set_double_v(double value);
  private:
  double _internal_double_v() const;
  void _internal_set_double_v(double value);
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlValue)
 private:
  class _Internal;
  void set_has_int32_v();
  void set_has_int64_v();
  void set_has_uint32_v();
  void set_has_uint64_v();
  void set_has_string_v();
  void set_has_bytes_v();
  void set_has_float_v();
  void set_has_double_v();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t db_type_;
    int type_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t int32_v_;
      int64_t int64_v_;
      uint32_t uint32_v_;
      uint64_t uint64_v_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_v_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_v_;
      float float_v_;
      double double_v_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlField) */ {
 public:
  inline MysqlField() : MysqlField(nullptr) {}
  ~MysqlField() override;
  explicit PROTOBUF_CONSTEXPR MysqlField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlField(const MysqlField& from);
  MysqlField(MysqlField&& from) noexcept
    : MysqlField() {
    *this = ::std::move(from);
  }

  inline MysqlField& operator=(const MysqlField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlField& operator=(MysqlField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlField& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlField* internal_default_instance() {
    return reinterpret_cast<const MysqlField*>(
               &_MysqlField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MysqlField& a, MysqlField& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlField& from) {
    MysqlField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlField";
  }
  protected:
  explicit MysqlField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .mysql_proxy_msg.MysqlValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mysql_proxy_msg::MysqlValue& value() const;
  PROTOBUF_NODISCARD ::mysql_proxy_msg::MysqlValue* release_value();
  ::mysql_proxy_msg::MysqlValue* mutable_value();
  void set_allocated_value(::mysql_proxy_msg::MysqlValue* value);
  private:
  const ::mysql_proxy_msg::MysqlValue& _internal_value() const;
  ::mysql_proxy_msg::MysqlValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mysql_proxy_msg::MysqlValue* value);
  ::mysql_proxy_msg::MysqlValue* unsafe_arena_release_value();

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mysql_proxy_msg::MysqlValue* value_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlRow) */ {
 public:
  inline MysqlRow() : MysqlRow(nullptr) {}
  ~MysqlRow() override;
  explicit PROTOBUF_CONSTEXPR MysqlRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlRow(const MysqlRow& from);
  MysqlRow(MysqlRow&& from) noexcept
    : MysqlRow() {
    *this = ::std::move(from);
  }

  inline MysqlRow& operator=(const MysqlRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlRow& operator=(MysqlRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlRow* internal_default_instance() {
    return reinterpret_cast<const MysqlRow*>(
               &_MysqlRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MysqlRow& a, MysqlRow& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlRow& from) {
    MysqlRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlRow";
  }
  protected:
  explicit MysqlRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .mysql_proxy_msg.MysqlField fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::mysql_proxy_msg::MysqlField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
      mutable_fields();
  private:
  const ::mysql_proxy_msg::MysqlField& _internal_fields(int index) const;
  ::mysql_proxy_msg::MysqlField* _internal_add_fields();
  public:
  const ::mysql_proxy_msg::MysqlField& fields(int index) const;
  ::mysql_proxy_msg::MysqlField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
      fields() const;

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlTable) */ {
 public:
  inline MysqlTable() : MysqlTable(nullptr) {}
  ~MysqlTable() override;
  explicit PROTOBUF_CONSTEXPR MysqlTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlTable(const MysqlTable& from);
  MysqlTable(MysqlTable&& from) noexcept
    : MysqlTable() {
    *this = ::std::move(from);
  }

  inline MysqlTable& operator=(const MysqlTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlTable& operator=(MysqlTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlTable* internal_default_instance() {
    return reinterpret_cast<const MysqlTable*>(
               &_MysqlTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MysqlTable& a, MysqlTable& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlTable& from) {
    MysqlTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlTable";
  }
  protected:
  explicit MysqlTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 3,
    kDbFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .mysql_proxy_msg.MysqlRow rows = 3;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::mysql_proxy_msg::MysqlRow* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlRow >*
      mutable_rows();
  private:
  const ::mysql_proxy_msg::MysqlRow& _internal_rows(int index) const;
  ::mysql_proxy_msg::MysqlRow* _internal_add_rows();
  public:
  const ::mysql_proxy_msg::MysqlRow& rows(int index) const;
  ::mysql_proxy_msg::MysqlRow* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlRow >&
      rows() const;

  // string db = 1;
  void clear_db();
  const std::string& db() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db();
  PROTOBUF_NODISCARD std::string* release_db();
  void set_allocated_db(std::string* db);
  private:
  const std::string& _internal_db() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db(const std::string& value);
  std::string* _internal_mutable_db();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlRow > rows_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlDescribeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlDescribeRequest) */ {
 public:
  inline MysqlDescribeRequest() : MysqlDescribeRequest(nullptr) {}
  ~MysqlDescribeRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlDescribeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlDescribeRequest(const MysqlDescribeRequest& from);
  MysqlDescribeRequest(MysqlDescribeRequest&& from) noexcept
    : MysqlDescribeRequest() {
    *this = ::std::move(from);
  }

  inline MysqlDescribeRequest& operator=(const MysqlDescribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlDescribeRequest& operator=(MysqlDescribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlDescribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlDescribeRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlDescribeRequest*>(
               &_MysqlDescribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MysqlDescribeRequest& a, MysqlDescribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlDescribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlDescribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlDescribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlDescribeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlDescribeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlDescribeRequest& from) {
    MysqlDescribeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlDescribeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlDescribeRequest";
  }
  protected:
  explicit MysqlDescribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlDescribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlDescField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlDescField) */ {
 public:
  inline MysqlDescField() : MysqlDescField(nullptr) {}
  ~MysqlDescField() override;
  explicit PROTOBUF_CONSTEXPR MysqlDescField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlDescField(const MysqlDescField& from);
  MysqlDescField(MysqlDescField&& from) noexcept
    : MysqlDescField() {
    *this = ::std::move(from);
  }

  inline MysqlDescField& operator=(const MysqlDescField& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlDescField& operator=(MysqlDescField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlDescField& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlDescField* internal_default_instance() {
    return reinterpret_cast<const MysqlDescField*>(
               &_MysqlDescField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MysqlDescField& a, MysqlDescField& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlDescField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlDescField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlDescField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlDescField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlDescField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlDescField& from) {
    MysqlDescField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlDescField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlDescField";
  }
  protected:
  explicit MysqlDescField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIndexFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kTypeFieldNumber = 4,
    kOffsetFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 type = 4;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 offset = 5;
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlDescField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t index_;
    uint32_t flags_;
    uint32_t type_;
    uint32_t offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlDescTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlDescTable) */ {
 public:
  inline MysqlDescTable() : MysqlDescTable(nullptr) {}
  ~MysqlDescTable() override;
  explicit PROTOBUF_CONSTEXPR MysqlDescTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlDescTable(const MysqlDescTable& from);
  MysqlDescTable(MysqlDescTable&& from) noexcept
    : MysqlDescTable() {
    *this = ::std::move(from);
  }

  inline MysqlDescTable& operator=(const MysqlDescTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlDescTable& operator=(MysqlDescTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlDescTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlDescTable* internal_default_instance() {
    return reinterpret_cast<const MysqlDescTable*>(
               &_MysqlDescTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MysqlDescTable& a, MysqlDescTable& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlDescTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlDescTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlDescTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlDescTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlDescTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlDescTable& from) {
    MysqlDescTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlDescTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlDescTable";
  }
  protected:
  explicit MysqlDescTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kResultFieldNumber = 4,
  };
  // repeated .mysql_proxy_msg.MysqlDescField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::mysql_proxy_msg::MysqlDescField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlDescField >*
      mutable_fields();
  private:
  const ::mysql_proxy_msg::MysqlDescField& _internal_fields(int index) const;
  ::mysql_proxy_msg::MysqlDescField* _internal_add_fields();
  public:
  const ::mysql_proxy_msg::MysqlDescField& fields(int index) const;
  ::mysql_proxy_msg::MysqlDescField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlDescField >&
      fields() const;

  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bool result = 4;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlDescTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlDescField > fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlDescribeResponse_TablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MysqlDescribeResponse_TablesEntry_DoNotUse, 
    std::string, ::mysql_proxy_msg::MysqlDescTable,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MysqlDescribeResponse_TablesEntry_DoNotUse, 
    std::string, ::mysql_proxy_msg::MysqlDescTable,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MysqlDescribeResponse_TablesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MysqlDescribeResponse_TablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MysqlDescribeResponse_TablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MysqlDescribeResponse_TablesEntry_DoNotUse& other);
  static const MysqlDescribeResponse_TablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MysqlDescribeResponse_TablesEntry_DoNotUse*>(&_MysqlDescribeResponse_TablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mysql_proxy_msg.MysqlDescribeResponse.TablesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};

// -------------------------------------------------------------------

class MysqlDescribeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlDescribeResponse) */ {
 public:
  inline MysqlDescribeResponse() : MysqlDescribeResponse(nullptr) {}
  ~MysqlDescribeResponse() override;
  explicit PROTOBUF_CONSTEXPR MysqlDescribeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlDescribeResponse(const MysqlDescribeResponse& from);
  MysqlDescribeResponse(MysqlDescribeResponse&& from) noexcept
    : MysqlDescribeResponse() {
    *this = ::std::move(from);
  }

  inline MysqlDescribeResponse& operator=(const MysqlDescribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlDescribeResponse& operator=(MysqlDescribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlDescribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlDescribeResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlDescribeResponse*>(
               &_MysqlDescribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MysqlDescribeResponse& a, MysqlDescribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlDescribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlDescribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlDescribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlDescribeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlDescribeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlDescribeResponse& from) {
    MysqlDescribeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlDescribeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlDescribeResponse";
  }
  protected:
  explicit MysqlDescribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 3,
    kErrorInfoFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >&
      _internal_tables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >*
      _internal_mutable_tables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >&
      tables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >*
      mutable_tables();

  // bytes error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_info();
  PROTOBUF_NODISCARD std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlDescribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MysqlDescribeResponse_TablesEntry_DoNotUse,
        std::string, ::mysql_proxy_msg::MysqlDescTable,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tables_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlQueryRequest) */ {
 public:
  inline MysqlQueryRequest() : MysqlQueryRequest(nullptr) {}
  ~MysqlQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlQueryRequest(const MysqlQueryRequest& from);
  MysqlQueryRequest(MysqlQueryRequest&& from) noexcept
    : MysqlQueryRequest() {
    *this = ::std::move(from);
  }

  inline MysqlQueryRequest& operator=(const MysqlQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlQueryRequest& operator=(MysqlQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlQueryRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlQueryRequest*>(
               &_MysqlQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MysqlQueryRequest& a, MysqlQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlQueryRequest& from) {
    MysqlQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlQueryRequest";
  }
  protected:
  explicit MysqlQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryKeyFieldNumber = 3,
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  int primary_key_size() const;
  private:
  int _internal_primary_key_size() const;
  public:
  void clear_primary_key();
  ::mysql_proxy_msg::MysqlField* mutable_primary_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
      mutable_primary_key();
  private:
  const ::mysql_proxy_msg::MysqlField& _internal_primary_key(int index) const;
  ::mysql_proxy_msg::MysqlField* _internal_add_primary_key();
  public:
  const ::mysql_proxy_msg::MysqlField& primary_key(int index) const;
  ::mysql_proxy_msg::MysqlField* add_primary_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
      primary_key() const;

  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField > primary_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlQueryResponse) */ {
 public:
  inline MysqlQueryResponse() : MysqlQueryResponse(nullptr) {}
  ~MysqlQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR MysqlQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlQueryResponse(const MysqlQueryResponse& from);
  MysqlQueryResponse(MysqlQueryResponse&& from) noexcept
    : MysqlQueryResponse() {
    *this = ::std::move(from);
  }

  inline MysqlQueryResponse& operator=(const MysqlQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlQueryResponse& operator=(MysqlQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlQueryResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlQueryResponse*>(
               &_MysqlQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MysqlQueryResponse& a, MysqlQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlQueryResponse& from) {
    MysqlQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlQueryResponse";
  }
  protected:
  explicit MysqlQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kSqlStatementFieldNumber = 4,
    kTableFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // bytes error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_info();
  PROTOBUF_NODISCARD std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bytes sql_statement = 4;
  void clear_sql_statement();
  const std::string& sql_statement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql_statement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql_statement();
  PROTOBUF_NODISCARD std::string* release_sql_statement();
  void set_allocated_sql_statement(std::string* sql_statement);
  private:
  const std::string& _internal_sql_statement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_statement(const std::string& value);
  std::string* _internal_mutable_sql_statement();
  public:

  // .mysql_proxy_msg.MysqlTable table = 3;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::mysql_proxy_msg::MysqlTable& table() const;
  PROTOBUF_NODISCARD ::mysql_proxy_msg::MysqlTable* release_table();
  ::mysql_proxy_msg::MysqlTable* mutable_table();
  void set_allocated_table(::mysql_proxy_msg::MysqlTable* table);
  private:
  const ::mysql_proxy_msg::MysqlTable& _internal_table() const;
  ::mysql_proxy_msg::MysqlTable* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::mysql_proxy_msg::MysqlTable* table);
  ::mysql_proxy_msg::MysqlTable* unsafe_arena_release_table();

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_statement_;
    ::mysql_proxy_msg::MysqlTable* table_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlMultiQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlMultiQueryRequest) */ {
 public:
  inline MysqlMultiQueryRequest() : MysqlMultiQueryRequest(nullptr) {}
  ~MysqlMultiQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlMultiQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlMultiQueryRequest(const MysqlMultiQueryRequest& from);
  MysqlMultiQueryRequest(MysqlMultiQueryRequest&& from) noexcept
    : MysqlMultiQueryRequest() {
    *this = ::std::move(from);
  }

  inline MysqlMultiQueryRequest& operator=(const MysqlMultiQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlMultiQueryRequest& operator=(MysqlMultiQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlMultiQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlMultiQueryRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlMultiQueryRequest*>(
               &_MysqlMultiQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MysqlMultiQueryRequest& a, MysqlMultiQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlMultiQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlMultiQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlMultiQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlMultiQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlMultiQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlMultiQueryRequest& from) {
    MysqlMultiQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlMultiQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlMultiQueryRequest";
  }
  protected:
  explicit MysqlMultiQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 1,
  };
  // repeated .mysql_proxy_msg.MysqlQueryRequest requests = 1;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::mysql_proxy_msg::MysqlQueryRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryRequest >*
      mutable_requests();
  private:
  const ::mysql_proxy_msg::MysqlQueryRequest& _internal_requests(int index) const;
  ::mysql_proxy_msg::MysqlQueryRequest* _internal_add_requests();
  public:
  const ::mysql_proxy_msg::MysqlQueryRequest& requests(int index) const;
  ::mysql_proxy_msg::MysqlQueryRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryRequest >&
      requests() const;

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlMultiQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryRequest > requests_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlMulitQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlMulitQueryResponse) */ {
 public:
  inline MysqlMulitQueryResponse() : MysqlMulitQueryResponse(nullptr) {}
  ~MysqlMulitQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR MysqlMulitQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlMulitQueryResponse(const MysqlMulitQueryResponse& from);
  MysqlMulitQueryResponse(MysqlMulitQueryResponse&& from) noexcept
    : MysqlMulitQueryResponse() {
    *this = ::std::move(from);
  }

  inline MysqlMulitQueryResponse& operator=(const MysqlMulitQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlMulitQueryResponse& operator=(MysqlMulitQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlMulitQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlMulitQueryResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlMulitQueryResponse*>(
               &_MysqlMulitQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MysqlMulitQueryResponse& a, MysqlMulitQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlMulitQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlMulitQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlMulitQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlMulitQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlMulitQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlMulitQueryResponse& from) {
    MysqlMulitQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlMulitQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlMulitQueryResponse";
  }
  protected:
  explicit MysqlMulitQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .mysql_proxy_msg.MysqlQueryResponse results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::mysql_proxy_msg::MysqlQueryResponse* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryResponse >*
      mutable_results();
  private:
  const ::mysql_proxy_msg::MysqlQueryResponse& _internal_results(int index) const;
  ::mysql_proxy_msg::MysqlQueryResponse* _internal_add_results();
  public:
  const ::mysql_proxy_msg::MysqlQueryResponse& results(int index) const;
  ::mysql_proxy_msg::MysqlQueryResponse* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryResponse >&
      results() const;

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlMulitQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryResponse > results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlInsertRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlInsertRequest) */ {
 public:
  inline MysqlInsertRequest() : MysqlInsertRequest(nullptr) {}
  ~MysqlInsertRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlInsertRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlInsertRequest(const MysqlInsertRequest& from);
  MysqlInsertRequest(MysqlInsertRequest&& from) noexcept
    : MysqlInsertRequest() {
    *this = ::std::move(from);
  }

  inline MysqlInsertRequest& operator=(const MysqlInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlInsertRequest& operator=(MysqlInsertRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlInsertRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlInsertRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlInsertRequest*>(
               &_MysqlInsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MysqlInsertRequest& a, MysqlInsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlInsertRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlInsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlInsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlInsertRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlInsertRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlInsertRequest& from) {
    MysqlInsertRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlInsertRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlInsertRequest";
  }
  protected:
  explicit MysqlInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::mysql_proxy_msg::MysqlField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
      mutable_fields();
  private:
  const ::mysql_proxy_msg::MysqlField& _internal_fields(int index) const;
  ::mysql_proxy_msg::MysqlField* _internal_add_fields();
  public:
  const ::mysql_proxy_msg::MysqlField& fields(int index) const;
  ::mysql_proxy_msg::MysqlField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
      fields() const;

  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlInsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField > fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlInsertResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlInsertResponse) */ {
 public:
  inline MysqlInsertResponse() : MysqlInsertResponse(nullptr) {}
  ~MysqlInsertResponse() override;
  explicit PROTOBUF_CONSTEXPR MysqlInsertResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlInsertResponse(const MysqlInsertResponse& from);
  MysqlInsertResponse(MysqlInsertResponse&& from) noexcept
    : MysqlInsertResponse() {
    *this = ::std::move(from);
  }

  inline MysqlInsertResponse& operator=(const MysqlInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlInsertResponse& operator=(MysqlInsertResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlInsertResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlInsertResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlInsertResponse*>(
               &_MysqlInsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MysqlInsertResponse& a, MysqlInsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlInsertResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlInsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlInsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlInsertResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlInsertResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlInsertResponse& from) {
    MysqlInsertResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlInsertResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlInsertResponse";
  }
  protected:
  explicit MysqlInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kSqlStatementFieldNumber = 5,
    kAffectedRowsFieldNumber = 3,
    kInsertIdFieldNumber = 4,
    kResultFieldNumber = 1,
  };
  // bytes error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_info();
  PROTOBUF_NODISCARD std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bytes sql_statement = 5;
  void clear_sql_statement();
  const std::string& sql_statement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql_statement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql_statement();
  PROTOBUF_NODISCARD std::string* release_sql_statement();
  void set_allocated_sql_statement(std::string* sql_statement);
  private:
  const std::string& _internal_sql_statement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_statement(const std::string& value);
  std::string* _internal_mutable_sql_statement();
  public:

  // uint64 affected_rows = 3;
  void clear_affected_rows();
  uint64_t affected_rows() const;
  void set_affected_rows(uint64_t value);
  private:
  uint64_t _internal_affected_rows() const;
  void _internal_set_affected_rows(uint64_t value);
  public:

  // uint64 insert_id = 4;
  void clear_insert_id();
  uint64_t insert_id() const;
  void set_insert_id(uint64_t value);
  private:
  uint64_t _internal_insert_id() const;
  void _internal_set_insert_id(uint64_t value);
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlInsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_statement_;
    uint64_t affected_rows_;
    uint64_t insert_id_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlUpdateRequest) */ {
 public:
  inline MysqlUpdateRequest() : MysqlUpdateRequest(nullptr) {}
  ~MysqlUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlUpdateRequest(const MysqlUpdateRequest& from);
  MysqlUpdateRequest(MysqlUpdateRequest&& from) noexcept
    : MysqlUpdateRequest() {
    *this = ::std::move(from);
  }

  inline MysqlUpdateRequest& operator=(const MysqlUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlUpdateRequest& operator=(MysqlUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlUpdateRequest*>(
               &_MysqlUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MysqlUpdateRequest& a, MysqlUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlUpdateRequest& from) {
    MysqlUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlUpdateRequest";
  }
  protected:
  explicit MysqlUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kPrimaryKeyFieldNumber = 4,
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::mysql_proxy_msg::MysqlField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
      mutable_fields();
  private:
  const ::mysql_proxy_msg::MysqlField& _internal_fields(int index) const;
  ::mysql_proxy_msg::MysqlField* _internal_add_fields();
  public:
  const ::mysql_proxy_msg::MysqlField& fields(int index) const;
  ::mysql_proxy_msg::MysqlField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
      fields() const;

  // repeated .mysql_proxy_msg.MysqlField primary_key = 4;
  int primary_key_size() const;
  private:
  int _internal_primary_key_size() const;
  public:
  void clear_primary_key();
  ::mysql_proxy_msg::MysqlField* mutable_primary_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
      mutable_primary_key();
  private:
  const ::mysql_proxy_msg::MysqlField& _internal_primary_key(int index) const;
  ::mysql_proxy_msg::MysqlField* _internal_add_primary_key();
  public:
  const ::mysql_proxy_msg::MysqlField& primary_key(int index) const;
  ::mysql_proxy_msg::MysqlField* add_primary_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
      primary_key() const;

  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField > fields_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField > primary_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlUpdateResponse) */ {
 public:
  inline MysqlUpdateResponse() : MysqlUpdateResponse(nullptr) {}
  ~MysqlUpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR MysqlUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlUpdateResponse(const MysqlUpdateResponse& from);
  MysqlUpdateResponse(MysqlUpdateResponse&& from) noexcept
    : MysqlUpdateResponse() {
    *this = ::std::move(from);
  }

  inline MysqlUpdateResponse& operator=(const MysqlUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlUpdateResponse& operator=(MysqlUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlUpdateResponse*>(
               &_MysqlUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MysqlUpdateResponse& a, MysqlUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlUpdateResponse& from) {
    MysqlUpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlUpdateResponse";
  }
  protected:
  explicit MysqlUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kSqlStatementFieldNumber = 5,
    kAffectedRowsFieldNumber = 3,
    kInsertIdFieldNumber = 4,
    kResultFieldNumber = 1,
  };
  // bytes error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_info();
  PROTOBUF_NODISCARD std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bytes sql_statement = 5;
  void clear_sql_statement();
  const std::string& sql_statement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql_statement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql_statement();
  PROTOBUF_NODISCARD std::string* release_sql_statement();
  void set_allocated_sql_statement(std::string* sql_statement);
  private:
  const std::string& _internal_sql_statement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_statement(const std::string& value);
  std::string* _internal_mutable_sql_statement();
  public:

  // uint64 affected_rows = 3;
  void clear_affected_rows();
  uint64_t affected_rows() const;
  void set_affected_rows(uint64_t value);
  private:
  uint64_t _internal_affected_rows() const;
  void _internal_set_affected_rows(uint64_t value);
  public:

  // uint64 insert_id = 4;
  void clear_insert_id();
  uint64_t insert_id() const;
  void set_insert_id(uint64_t value);
  private:
  uint64_t _internal_insert_id() const;
  void _internal_set_insert_id(uint64_t value);
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_statement_;
    uint64_t affected_rows_;
    uint64_t insert_id_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlDeleteRequest) */ {
 public:
  inline MysqlDeleteRequest() : MysqlDeleteRequest(nullptr) {}
  ~MysqlDeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlDeleteRequest(const MysqlDeleteRequest& from);
  MysqlDeleteRequest(MysqlDeleteRequest&& from) noexcept
    : MysqlDeleteRequest() {
    *this = ::std::move(from);
  }

  inline MysqlDeleteRequest& operator=(const MysqlDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlDeleteRequest& operator=(MysqlDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlDeleteRequest*>(
               &_MysqlDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MysqlDeleteRequest& a, MysqlDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlDeleteRequest& from) {
    MysqlDeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlDeleteRequest";
  }
  protected:
  explicit MysqlDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryKeyFieldNumber = 3,
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  int primary_key_size() const;
  private:
  int _internal_primary_key_size() const;
  public:
  void clear_primary_key();
  ::mysql_proxy_msg::MysqlField* mutable_primary_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
      mutable_primary_key();
  private:
  const ::mysql_proxy_msg::MysqlField& _internal_primary_key(int index) const;
  ::mysql_proxy_msg::MysqlField* _internal_add_primary_key();
  public:
  const ::mysql_proxy_msg::MysqlField& primary_key(int index) const;
  ::mysql_proxy_msg::MysqlField* add_primary_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
      primary_key() const;

  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField > primary_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlDeleteResponse) */ {
 public:
  inline MysqlDeleteResponse() : MysqlDeleteResponse(nullptr) {}
  ~MysqlDeleteResponse() override;
  explicit PROTOBUF_CONSTEXPR MysqlDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlDeleteResponse(const MysqlDeleteResponse& from);
  MysqlDeleteResponse(MysqlDeleteResponse&& from) noexcept
    : MysqlDeleteResponse() {
    *this = ::std::move(from);
  }

  inline MysqlDeleteResponse& operator=(const MysqlDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlDeleteResponse& operator=(MysqlDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlDeleteResponse*>(
               &_MysqlDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MysqlDeleteResponse& a, MysqlDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlDeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlDeleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlDeleteResponse& from) {
    MysqlDeleteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlDeleteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlDeleteResponse";
  }
  protected:
  explicit MysqlDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kSqlStatementFieldNumber = 4,
    kAffectedRowsFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // bytes error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_info();
  PROTOBUF_NODISCARD std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bytes sql_statement = 4;
  void clear_sql_statement();
  const std::string& sql_statement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql_statement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql_statement();
  PROTOBUF_NODISCARD std::string* release_sql_statement();
  void set_allocated_sql_statement(std::string* sql_statement);
  private:
  const std::string& _internal_sql_statement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_statement(const std::string& value);
  std::string* _internal_mutable_sql_statement();
  public:

  // uint64 affected_rows = 3;
  void clear_affected_rows();
  uint64_t affected_rows() const;
  void set_affected_rows(uint64_t value);
  private:
  uint64_t _internal_affected_rows() const;
  void _internal_set_affected_rows(uint64_t value);
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_statement_;
    uint64_t affected_rows_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlQueryByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlQueryByFilterRequest) */ {
 public:
  inline MysqlQueryByFilterRequest() : MysqlQueryByFilterRequest(nullptr) {}
  ~MysqlQueryByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlQueryByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlQueryByFilterRequest(const MysqlQueryByFilterRequest& from);
  MysqlQueryByFilterRequest(MysqlQueryByFilterRequest&& from) noexcept
    : MysqlQueryByFilterRequest() {
    *this = ::std::move(from);
  }

  inline MysqlQueryByFilterRequest& operator=(const MysqlQueryByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlQueryByFilterRequest& operator=(MysqlQueryByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlQueryByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlQueryByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlQueryByFilterRequest*>(
               &_MysqlQueryByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MysqlQueryByFilterRequest& a, MysqlQueryByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlQueryByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlQueryByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlQueryByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlQueryByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlQueryByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlQueryByFilterRequest& from) {
    MysqlQueryByFilterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQueryByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlQueryByFilterRequest";
  }
  protected:
  explicit MysqlQueryByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // repeated .mysql_proxy_msg.MysqlField key = 3;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  ::mysql_proxy_msg::MysqlField* mutable_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
      mutable_key();
  private:
  const ::mysql_proxy_msg::MysqlField& _internal_key(int index) const;
  ::mysql_proxy_msg::MysqlField* _internal_add_key();
  public:
  const ::mysql_proxy_msg::MysqlField& key(int index) const;
  ::mysql_proxy_msg::MysqlField* add_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
      key() const;

  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlQueryByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField > key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlQueryAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlQueryAllRequest) */ {
 public:
  inline MysqlQueryAllRequest() : MysqlQueryAllRequest(nullptr) {}
  ~MysqlQueryAllRequest() override;
  explicit PROTOBUF_CONSTEXPR MysqlQueryAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlQueryAllRequest(const MysqlQueryAllRequest& from);
  MysqlQueryAllRequest(MysqlQueryAllRequest&& from) noexcept
    : MysqlQueryAllRequest() {
    *this = ::std::move(from);
  }

  inline MysqlQueryAllRequest& operator=(const MysqlQueryAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlQueryAllRequest& operator=(MysqlQueryAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlQueryAllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlQueryAllRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlQueryAllRequest*>(
               &_MysqlQueryAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MysqlQueryAllRequest& a, MysqlQueryAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlQueryAllRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlQueryAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlQueryAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlQueryAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlQueryAllRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlQueryAllRequest& from) {
    MysqlQueryAllRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQueryAllRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlQueryAllRequest";
  }
  protected:
  explicit MysqlQueryAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlQueryAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MysqlQueryAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysql_proxy_msg.MysqlQueryAllResponse) */ {
 public:
  inline MysqlQueryAllResponse() : MysqlQueryAllResponse(nullptr) {}
  ~MysqlQueryAllResponse() override;
  explicit PROTOBUF_CONSTEXPR MysqlQueryAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MysqlQueryAllResponse(const MysqlQueryAllResponse& from);
  MysqlQueryAllResponse(MysqlQueryAllResponse&& from) noexcept
    : MysqlQueryAllResponse() {
    *this = ::std::move(from);
  }

  inline MysqlQueryAllResponse& operator=(const MysqlQueryAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlQueryAllResponse& operator=(MysqlQueryAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MysqlQueryAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MysqlQueryAllResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlQueryAllResponse*>(
               &_MysqlQueryAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MysqlQueryAllResponse& a, MysqlQueryAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlQueryAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlQueryAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MysqlQueryAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MysqlQueryAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MysqlQueryAllResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MysqlQueryAllResponse& from) {
    MysqlQueryAllResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlQueryAllResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysql_proxy_msg.MysqlQueryAllResponse";
  }
  protected:
  explicit MysqlQueryAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kSqlStatementFieldNumber = 4,
    kTableFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // bytes error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_info();
  PROTOBUF_NODISCARD std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bytes sql_statement = 4;
  void clear_sql_statement();
  const std::string& sql_statement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql_statement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql_statement();
  PROTOBUF_NODISCARD std::string* release_sql_statement();
  void set_allocated_sql_statement(std::string* sql_statement);
  private:
  const std::string& _internal_sql_statement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_statement(const std::string& value);
  std::string* _internal_mutable_sql_statement();
  public:

  // .mysql_proxy_msg.MysqlTable table = 3;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::mysql_proxy_msg::MysqlTable& table() const;
  PROTOBUF_NODISCARD ::mysql_proxy_msg::MysqlTable* release_table();
  ::mysql_proxy_msg::MysqlTable* mutable_table();
  void set_allocated_table(::mysql_proxy_msg::MysqlTable* table);
  private:
  const ::mysql_proxy_msg::MysqlTable& _internal_table() const;
  ::mysql_proxy_msg::MysqlTable* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::mysql_proxy_msg::MysqlTable* table);
  ::mysql_proxy_msg::MysqlTable* unsafe_arena_release_table();

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysql_proxy_msg.MysqlQueryAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_statement_;
    ::mysql_proxy_msg::MysqlTable* table_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mysql_5fproxy_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MysqlValue

// int32 db_type = 1;
inline void MysqlValue::clear_db_type() {
  _impl_.db_type_ = 0;
}
inline int32_t MysqlValue::_internal_db_type() const {
  return _impl_.db_type_;
}
inline int32_t MysqlValue::db_type() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.db_type)
  return _internal_db_type();
}
inline void MysqlValue::_internal_set_db_type(int32_t value) {
  
  _impl_.db_type_ = value;
}
inline void MysqlValue::set_db_type(int32_t value) {
  _internal_set_db_type(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.db_type)
}

// .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
inline void MysqlValue::clear_type() {
  _impl_.type_ = 0;
}
inline ::mysql_proxy_msg::MysqlScalarValueTypes MysqlValue::_internal_type() const {
  return static_cast< ::mysql_proxy_msg::MysqlScalarValueTypes >(_impl_.type_);
}
inline ::mysql_proxy_msg::MysqlScalarValueTypes MysqlValue::type() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.type)
  return _internal_type();
}
inline void MysqlValue::_internal_set_type(::mysql_proxy_msg::MysqlScalarValueTypes value) {
  
  _impl_.type_ = value;
}
inline void MysqlValue::set_type(::mysql_proxy_msg::MysqlScalarValueTypes value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.type)
}

// int32 int32_v = 101;
inline bool MysqlValue::_internal_has_int32_v() const {
  return payload_case() == kInt32V;
}
inline bool MysqlValue::has_int32_v() const {
  return _internal_has_int32_v();
}
inline void MysqlValue::set_has_int32_v() {
  _impl_._oneof_case_[0] = kInt32V;
}
inline void MysqlValue::clear_int32_v() {
  if (_internal_has_int32_v()) {
    _impl_.payload_.int32_v_ = 0;
    clear_has_payload();
  }
}
inline int32_t MysqlValue::_internal_int32_v() const {
  if (_internal_has_int32_v()) {
    return _impl_.payload_.int32_v_;
  }
  return 0;
}
inline void MysqlValue::_internal_set_int32_v(int32_t value) {
  if (!_internal_has_int32_v()) {
    clear_payload();
    set_has_int32_v();
  }
  _impl_.payload_.int32_v_ = value;
}
inline int32_t MysqlValue::int32_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.int32_v)
  return _internal_int32_v();
}
inline void MysqlValue::set_int32_v(int32_t value) {
  _internal_set_int32_v(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.int32_v)
}

// int64 int64_v = 102;
inline bool MysqlValue::_internal_has_int64_v() const {
  return payload_case() == kInt64V;
}
inline bool MysqlValue::has_int64_v() const {
  return _internal_has_int64_v();
}
inline void MysqlValue::set_has_int64_v() {
  _impl_._oneof_case_[0] = kInt64V;
}
inline void MysqlValue::clear_int64_v() {
  if (_internal_has_int64_v()) {
    _impl_.payload_.int64_v_ = int64_t{0};
    clear_has_payload();
  }
}
inline int64_t MysqlValue::_internal_int64_v() const {
  if (_internal_has_int64_v()) {
    return _impl_.payload_.int64_v_;
  }
  return int64_t{0};
}
inline void MysqlValue::_internal_set_int64_v(int64_t value) {
  if (!_internal_has_int64_v()) {
    clear_payload();
    set_has_int64_v();
  }
  _impl_.payload_.int64_v_ = value;
}
inline int64_t MysqlValue::int64_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.int64_v)
  return _internal_int64_v();
}
inline void MysqlValue::set_int64_v(int64_t value) {
  _internal_set_int64_v(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.int64_v)
}

// uint32 uint32_v = 103;
inline bool MysqlValue::_internal_has_uint32_v() const {
  return payload_case() == kUint32V;
}
inline bool MysqlValue::has_uint32_v() const {
  return _internal_has_uint32_v();
}
inline void MysqlValue::set_has_uint32_v() {
  _impl_._oneof_case_[0] = kUint32V;
}
inline void MysqlValue::clear_uint32_v() {
  if (_internal_has_uint32_v()) {
    _impl_.payload_.uint32_v_ = 0u;
    clear_has_payload();
  }
}
inline uint32_t MysqlValue::_internal_uint32_v() const {
  if (_internal_has_uint32_v()) {
    return _impl_.payload_.uint32_v_;
  }
  return 0u;
}
inline void MysqlValue::_internal_set_uint32_v(uint32_t value) {
  if (!_internal_has_uint32_v()) {
    clear_payload();
    set_has_uint32_v();
  }
  _impl_.payload_.uint32_v_ = value;
}
inline uint32_t MysqlValue::uint32_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.uint32_v)
  return _internal_uint32_v();
}
inline void MysqlValue::set_uint32_v(uint32_t value) {
  _internal_set_uint32_v(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.uint32_v)
}

// uint64 uint64_v = 104;
inline bool MysqlValue::_internal_has_uint64_v() const {
  return payload_case() == kUint64V;
}
inline bool MysqlValue::has_uint64_v() const {
  return _internal_has_uint64_v();
}
inline void MysqlValue::set_has_uint64_v() {
  _impl_._oneof_case_[0] = kUint64V;
}
inline void MysqlValue::clear_uint64_v() {
  if (_internal_has_uint64_v()) {
    _impl_.payload_.uint64_v_ = uint64_t{0u};
    clear_has_payload();
  }
}
inline uint64_t MysqlValue::_internal_uint64_v() const {
  if (_internal_has_uint64_v()) {
    return _impl_.payload_.uint64_v_;
  }
  return uint64_t{0u};
}
inline void MysqlValue::_internal_set_uint64_v(uint64_t value) {
  if (!_internal_has_uint64_v()) {
    clear_payload();
    set_has_uint64_v();
  }
  _impl_.payload_.uint64_v_ = value;
}
inline uint64_t MysqlValue::uint64_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.uint64_v)
  return _internal_uint64_v();
}
inline void MysqlValue::set_uint64_v(uint64_t value) {
  _internal_set_uint64_v(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.uint64_v)
}

// string string_v = 105;
inline bool MysqlValue::_internal_has_string_v() const {
  return payload_case() == kStringV;
}
inline bool MysqlValue::has_string_v() const {
  return _internal_has_string_v();
}
inline void MysqlValue::set_has_string_v() {
  _impl_._oneof_case_[0] = kStringV;
}
inline void MysqlValue::clear_string_v() {
  if (_internal_has_string_v()) {
    _impl_.payload_.string_v_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& MysqlValue::string_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.string_v)
  return _internal_string_v();
}
template <typename ArgT0, typename... ArgT>
inline void MysqlValue::set_string_v(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_v()) {
    clear_payload();
    set_has_string_v();
    _impl_.payload_.string_v_.InitDefault();
  }
  _impl_.payload_.string_v_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.string_v)
}
inline std::string* MysqlValue::mutable_string_v() {
  std::string* _s = _internal_mutable_string_v();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlValue.string_v)
  return _s;
}
inline const std::string& MysqlValue::_internal_string_v() const {
  if (_internal_has_string_v()) {
    return _impl_.payload_.string_v_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MysqlValue::_internal_set_string_v(const std::string& value) {
  if (!_internal_has_string_v()) {
    clear_payload();
    set_has_string_v();
    _impl_.payload_.string_v_.InitDefault();
  }
  _impl_.payload_.string_v_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlValue::_internal_mutable_string_v() {
  if (!_internal_has_string_v()) {
    clear_payload();
    set_has_string_v();
    _impl_.payload_.string_v_.InitDefault();
  }
  return _impl_.payload_.string_v_.Mutable(      GetArenaForAllocation());
}
inline std::string* MysqlValue::release_string_v() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlValue.string_v)
  if (_internal_has_string_v()) {
    clear_has_payload();
    return _impl_.payload_.string_v_.Release();
  } else {
    return nullptr;
  }
}
inline void MysqlValue::set_allocated_string_v(std::string* string_v) {
  if (has_payload()) {
    clear_payload();
  }
  if (string_v != nullptr) {
    set_has_string_v();
    _impl_.payload_.string_v_.InitAllocated(string_v, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlValue.string_v)
}

// bytes bytes_v = 106;
inline bool MysqlValue::_internal_has_bytes_v() const {
  return payload_case() == kBytesV;
}
inline bool MysqlValue::has_bytes_v() const {
  return _internal_has_bytes_v();
}
inline void MysqlValue::set_has_bytes_v() {
  _impl_._oneof_case_[0] = kBytesV;
}
inline void MysqlValue::clear_bytes_v() {
  if (_internal_has_bytes_v()) {
    _impl_.payload_.bytes_v_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& MysqlValue::bytes_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.bytes_v)
  return _internal_bytes_v();
}
template <typename ArgT0, typename... ArgT>
inline void MysqlValue::set_bytes_v(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_v()) {
    clear_payload();
    set_has_bytes_v();
    _impl_.payload_.bytes_v_.InitDefault();
  }
  _impl_.payload_.bytes_v_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.bytes_v)
}
inline std::string* MysqlValue::mutable_bytes_v() {
  std::string* _s = _internal_mutable_bytes_v();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlValue.bytes_v)
  return _s;
}
inline const std::string& MysqlValue::_internal_bytes_v() const {
  if (_internal_has_bytes_v()) {
    return _impl_.payload_.bytes_v_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MysqlValue::_internal_set_bytes_v(const std::string& value) {
  if (!_internal_has_bytes_v()) {
    clear_payload();
    set_has_bytes_v();
    _impl_.payload_.bytes_v_.InitDefault();
  }
  _impl_.payload_.bytes_v_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlValue::_internal_mutable_bytes_v() {
  if (!_internal_has_bytes_v()) {
    clear_payload();
    set_has_bytes_v();
    _impl_.payload_.bytes_v_.InitDefault();
  }
  return _impl_.payload_.bytes_v_.Mutable(      GetArenaForAllocation());
}
inline std::string* MysqlValue::release_bytes_v() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlValue.bytes_v)
  if (_internal_has_bytes_v()) {
    clear_has_payload();
    return _impl_.payload_.bytes_v_.Release();
  } else {
    return nullptr;
  }
}
inline void MysqlValue::set_allocated_bytes_v(std::string* bytes_v) {
  if (has_payload()) {
    clear_payload();
  }
  if (bytes_v != nullptr) {
    set_has_bytes_v();
    _impl_.payload_.bytes_v_.InitAllocated(bytes_v, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlValue.bytes_v)
}

// float float_v = 107;
inline bool MysqlValue::_internal_has_float_v() const {
  return payload_case() == kFloatV;
}
inline bool MysqlValue::has_float_v() const {
  return _internal_has_float_v();
}
inline void MysqlValue::set_has_float_v() {
  _impl_._oneof_case_[0] = kFloatV;
}
inline void MysqlValue::clear_float_v() {
  if (_internal_has_float_v()) {
    _impl_.payload_.float_v_ = 0;
    clear_has_payload();
  }
}
inline float MysqlValue::_internal_float_v() const {
  if (_internal_has_float_v()) {
    return _impl_.payload_.float_v_;
  }
  return 0;
}
inline void MysqlValue::_internal_set_float_v(float value) {
  if (!_internal_has_float_v()) {
    clear_payload();
    set_has_float_v();
  }
  _impl_.payload_.float_v_ = value;
}
inline float MysqlValue::float_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.float_v)
  return _internal_float_v();
}
inline void MysqlValue::set_float_v(float value) {
  _internal_set_float_v(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.float_v)
}

// double double_v = 108;
inline bool MysqlValue::_internal_has_double_v() const {
  return payload_case() == kDoubleV;
}
inline bool MysqlValue::has_double_v() const {
  return _internal_has_double_v();
}
inline void MysqlValue::set_has_double_v() {
  _impl_._oneof_case_[0] = kDoubleV;
}
inline void MysqlValue::clear_double_v() {
  if (_internal_has_double_v()) {
    _impl_.payload_.double_v_ = 0;
    clear_has_payload();
  }
}
inline double MysqlValue::_internal_double_v() const {
  if (_internal_has_double_v()) {
    return _impl_.payload_.double_v_;
  }
  return 0;
}
inline void MysqlValue::_internal_set_double_v(double value) {
  if (!_internal_has_double_v()) {
    clear_payload();
    set_has_double_v();
  }
  _impl_.payload_.double_v_ = value;
}
inline double MysqlValue::double_v() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlValue.double_v)
  return _internal_double_v();
}
inline void MysqlValue::set_double_v(double value) {
  _internal_set_double_v(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlValue.double_v)
}

inline bool MysqlValue::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MysqlValue::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MysqlValue::PayloadCase MysqlValue::payload_case() const {
  return MysqlValue::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MysqlField

// uint32 index = 1;
inline void MysqlField::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t MysqlField::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t MysqlField::index() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlField.index)
  return _internal_index();
}
inline void MysqlField::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void MysqlField::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlField.index)
}

// .mysql_proxy_msg.MysqlValue value = 2;
inline bool MysqlField::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool MysqlField::has_value() const {
  return _internal_has_value();
}
inline void MysqlField::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::mysql_proxy_msg::MysqlValue& MysqlField::_internal_value() const {
  const ::mysql_proxy_msg::MysqlValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::mysql_proxy_msg::MysqlValue&>(
      ::mysql_proxy_msg::_MysqlValue_default_instance_);
}
inline const ::mysql_proxy_msg::MysqlValue& MysqlField::value() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlField.value)
  return _internal_value();
}
inline void MysqlField::unsafe_arena_set_allocated_value(
    ::mysql_proxy_msg::MysqlValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mysql_proxy_msg.MysqlField.value)
}
inline ::mysql_proxy_msg::MysqlValue* MysqlField::release_value() {
  
  ::mysql_proxy_msg::MysqlValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mysql_proxy_msg::MysqlValue* MysqlField::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlField.value)
  
  ::mysql_proxy_msg::MysqlValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::mysql_proxy_msg::MysqlValue* MysqlField::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mysql_proxy_msg::MysqlValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::mysql_proxy_msg::MysqlValue* MysqlField::mutable_value() {
  ::mysql_proxy_msg::MysqlValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlField.value)
  return _msg;
}
inline void MysqlField::set_allocated_value(::mysql_proxy_msg::MysqlValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlField.value)
}

// -------------------------------------------------------------------

// MysqlRow

// repeated .mysql_proxy_msg.MysqlField fields = 1;
inline int MysqlRow::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int MysqlRow::fields_size() const {
  return _internal_fields_size();
}
inline void MysqlRow::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::mysql_proxy_msg::MysqlField* MysqlRow::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlRow.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
MysqlRow::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlRow.fields)
  return &_impl_.fields_;
}
inline const ::mysql_proxy_msg::MysqlField& MysqlRow::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlField& MysqlRow::fields(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlRow.fields)
  return _internal_fields(index);
}
inline ::mysql_proxy_msg::MysqlField* MysqlRow::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::mysql_proxy_msg::MysqlField* MysqlRow::add_fields() {
  ::mysql_proxy_msg::MysqlField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlRow.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
MysqlRow::fields() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlRow.fields)
  return _impl_.fields_;
}

// -------------------------------------------------------------------

// MysqlTable

// string db = 1;
inline void MysqlTable::clear_db() {
  _impl_.db_.ClearToEmpty();
}
inline const std::string& MysqlTable::db() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlTable.db)
  return _internal_db();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlTable::set_db(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlTable.db)
}
inline std::string* MysqlTable::mutable_db() {
  std::string* _s = _internal_mutable_db();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlTable.db)
  return _s;
}
inline const std::string& MysqlTable::_internal_db() const {
  return _impl_.db_.Get();
}
inline void MysqlTable::_internal_set_db(const std::string& value) {
  
  _impl_.db_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlTable::_internal_mutable_db() {
  
  return _impl_.db_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlTable::release_db() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlTable.db)
  return _impl_.db_.Release();
}
inline void MysqlTable::set_allocated_db(std::string* db) {
  if (db != nullptr) {
    
  } else {
    
  }
  _impl_.db_.SetAllocated(db, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_.IsDefault()) {
    _impl_.db_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlTable.db)
}

// string name = 2;
inline void MysqlTable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MysqlTable::name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlTable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlTable.name)
}
inline std::string* MysqlTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlTable.name)
  return _s;
}
inline const std::string& MysqlTable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MysqlTable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlTable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlTable::release_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlTable.name)
  return _impl_.name_.Release();
}
inline void MysqlTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlTable.name)
}

// repeated .mysql_proxy_msg.MysqlRow rows = 3;
inline int MysqlTable::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int MysqlTable::rows_size() const {
  return _internal_rows_size();
}
inline void MysqlTable::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::mysql_proxy_msg::MysqlRow* MysqlTable::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlTable.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlRow >*
MysqlTable::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlTable.rows)
  return &_impl_.rows_;
}
inline const ::mysql_proxy_msg::MysqlRow& MysqlTable::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlRow& MysqlTable::rows(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlTable.rows)
  return _internal_rows(index);
}
inline ::mysql_proxy_msg::MysqlRow* MysqlTable::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::mysql_proxy_msg::MysqlRow* MysqlTable::add_rows() {
  ::mysql_proxy_msg::MysqlRow* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlTable.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlRow >&
MysqlTable::rows() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlTable.rows)
  return _impl_.rows_;
}

// -------------------------------------------------------------------

// MysqlDescribeRequest

// repeated string names = 1;
inline int MysqlDescribeRequest::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int MysqlDescribeRequest::names_size() const {
  return _internal_names_size();
}
inline void MysqlDescribeRequest::clear_names() {
  _impl_.names_.Clear();
}
inline std::string* MysqlDescribeRequest::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:mysql_proxy_msg.MysqlDescribeRequest.names)
  return _s;
}
inline const std::string& MysqlDescribeRequest::_internal_names(int index) const {
  return _impl_.names_.Get(index);
}
inline const std::string& MysqlDescribeRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescribeRequest.names)
  return _internal_names(index);
}
inline std::string* MysqlDescribeRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDescribeRequest.names)
  return _impl_.names_.Mutable(index);
}
inline void MysqlDescribeRequest::set_names(int index, const std::string& value) {
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline void MysqlDescribeRequest::set_names(int index, std::string&& value) {
  _impl_.names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline void MysqlDescribeRequest::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline void MysqlDescribeRequest::set_names(int index, const char* value, size_t size) {
  _impl_.names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline std::string* MysqlDescribeRequest::_internal_add_names() {
  return _impl_.names_.Add();
}
inline void MysqlDescribeRequest::add_names(const std::string& value) {
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline void MysqlDescribeRequest::add_names(std::string&& value) {
  _impl_.names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline void MysqlDescribeRequest::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline void MysqlDescribeRequest::add_names(const char* value, size_t size) {
  _impl_.names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mysql_proxy_msg.MysqlDescribeRequest.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MysqlDescribeRequest::names() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlDescribeRequest.names)
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MysqlDescribeRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlDescribeRequest.names)
  return &_impl_.names_;
}

// -------------------------------------------------------------------

// MysqlDescField

// uint32 index = 1;
inline void MysqlDescField::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t MysqlDescField::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t MysqlDescField::index() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescField.index)
  return _internal_index();
}
inline void MysqlDescField::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void MysqlDescField::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescField.index)
}

// string name = 2;
inline void MysqlDescField::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MysqlDescField::name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescField.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDescField::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescField.name)
}
inline std::string* MysqlDescField::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDescField.name)
  return _s;
}
inline const std::string& MysqlDescField::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MysqlDescField::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDescField::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDescField::release_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDescField.name)
  return _impl_.name_.Release();
}
inline void MysqlDescField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDescField.name)
}

// uint32 flags = 3;
inline void MysqlDescField::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t MysqlDescField::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t MysqlDescField::flags() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescField.flags)
  return _internal_flags();
}
inline void MysqlDescField::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void MysqlDescField::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescField.flags)
}

// uint32 type = 4;
inline void MysqlDescField::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t MysqlDescField::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t MysqlDescField::type() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescField.type)
  return _internal_type();
}
inline void MysqlDescField::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void MysqlDescField::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescField.type)
}

// uint32 offset = 5;
inline void MysqlDescField::clear_offset() {
  _impl_.offset_ = 0u;
}
inline uint32_t MysqlDescField::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t MysqlDescField::offset() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescField.offset)
  return _internal_offset();
}
inline void MysqlDescField::_internal_set_offset(uint32_t value) {
  
  _impl_.offset_ = value;
}
inline void MysqlDescField::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescField.offset)
}

// -------------------------------------------------------------------

// MysqlDescTable

// string db_name = 1;
inline void MysqlDescTable::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& MysqlDescTable::db_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescTable.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDescTable::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescTable.db_name)
}
inline std::string* MysqlDescTable::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDescTable.db_name)
  return _s;
}
inline const std::string& MysqlDescTable::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void MysqlDescTable::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDescTable::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDescTable::release_db_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDescTable.db_name)
  return _impl_.db_name_.Release();
}
inline void MysqlDescTable::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDescTable.db_name)
}

// string table_name = 2;
inline void MysqlDescTable::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MysqlDescTable::table_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescTable.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDescTable::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescTable.table_name)
}
inline std::string* MysqlDescTable::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDescTable.table_name)
  return _s;
}
inline const std::string& MysqlDescTable::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MysqlDescTable::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDescTable::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDescTable::release_table_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDescTable.table_name)
  return _impl_.table_name_.Release();
}
inline void MysqlDescTable::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDescTable.table_name)
}

// repeated .mysql_proxy_msg.MysqlDescField fields = 3;
inline int MysqlDescTable::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int MysqlDescTable::fields_size() const {
  return _internal_fields_size();
}
inline void MysqlDescTable::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::mysql_proxy_msg::MysqlDescField* MysqlDescTable::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDescTable.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlDescField >*
MysqlDescTable::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlDescTable.fields)
  return &_impl_.fields_;
}
inline const ::mysql_proxy_msg::MysqlDescField& MysqlDescTable::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlDescField& MysqlDescTable::fields(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescTable.fields)
  return _internal_fields(index);
}
inline ::mysql_proxy_msg::MysqlDescField* MysqlDescTable::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::mysql_proxy_msg::MysqlDescField* MysqlDescTable::add_fields() {
  ::mysql_proxy_msg::MysqlDescField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlDescTable.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlDescField >&
MysqlDescTable::fields() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlDescTable.fields)
  return _impl_.fields_;
}

// bool result = 4;
inline void MysqlDescTable::clear_result() {
  _impl_.result_ = false;
}
inline bool MysqlDescTable::_internal_result() const {
  return _impl_.result_;
}
inline bool MysqlDescTable::result() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescTable.result)
  return _internal_result();
}
inline void MysqlDescTable::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void MysqlDescTable::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescTable.result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MysqlDescribeResponse

// bool result = 1;
inline void MysqlDescribeResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool MysqlDescribeResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool MysqlDescribeResponse::result() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescribeResponse.result)
  return _internal_result();
}
inline void MysqlDescribeResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void MysqlDescribeResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescribeResponse.result)
}

// bytes error_info = 2;
inline void MysqlDescribeResponse::clear_error_info() {
  _impl_.error_info_.ClearToEmpty();
}
inline const std::string& MysqlDescribeResponse::error_info() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDescribeResponse.error_info)
  return _internal_error_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDescribeResponse::set_error_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDescribeResponse.error_info)
}
inline std::string* MysqlDescribeResponse::mutable_error_info() {
  std::string* _s = _internal_mutable_error_info();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDescribeResponse.error_info)
  return _s;
}
inline const std::string& MysqlDescribeResponse::_internal_error_info() const {
  return _impl_.error_info_.Get();
}
inline void MysqlDescribeResponse::_internal_set_error_info(const std::string& value) {
  
  _impl_.error_info_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDescribeResponse::_internal_mutable_error_info() {
  
  return _impl_.error_info_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDescribeResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDescribeResponse.error_info)
  return _impl_.error_info_.Release();
}
inline void MysqlDescribeResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  _impl_.error_info_.SetAllocated(error_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_info_.IsDefault()) {
    _impl_.error_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDescribeResponse.error_info)
}

// map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
inline int MysqlDescribeResponse::_internal_tables_size() const {
  return _impl_.tables_.size();
}
inline int MysqlDescribeResponse::tables_size() const {
  return _internal_tables_size();
}
inline void MysqlDescribeResponse::clear_tables() {
  _impl_.tables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >&
MysqlDescribeResponse::_internal_tables() const {
  return _impl_.tables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >&
MysqlDescribeResponse::tables() const {
  // @@protoc_insertion_point(field_map:mysql_proxy_msg.MysqlDescribeResponse.tables)
  return _internal_tables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >*
MysqlDescribeResponse::_internal_mutable_tables() {
  return _impl_.tables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >*
MysqlDescribeResponse::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_map:mysql_proxy_msg.MysqlDescribeResponse.tables)
  return _internal_mutable_tables();
}

// -------------------------------------------------------------------

// MysqlQueryRequest

// string db_name = 1;
inline void MysqlQueryRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& MysqlQueryRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryRequest.db_name)
}
inline std::string* MysqlQueryRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryRequest.db_name)
  return _s;
}
inline const std::string& MysqlQueryRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void MysqlQueryRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void MysqlQueryRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryRequest.db_name)
}

// string table_name = 2;
inline void MysqlQueryRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MysqlQueryRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryRequest.table_name)
}
inline std::string* MysqlQueryRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryRequest.table_name)
  return _s;
}
inline const std::string& MysqlQueryRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MysqlQueryRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MysqlQueryRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryRequest.table_name)
}

// repeated .mysql_proxy_msg.MysqlField primary_key = 3;
inline int MysqlQueryRequest::_internal_primary_key_size() const {
  return _impl_.primary_key_.size();
}
inline int MysqlQueryRequest::primary_key_size() const {
  return _internal_primary_key_size();
}
inline void MysqlQueryRequest::clear_primary_key() {
  _impl_.primary_key_.Clear();
}
inline ::mysql_proxy_msg::MysqlField* MysqlQueryRequest::mutable_primary_key(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryRequest.primary_key)
  return _impl_.primary_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
MysqlQueryRequest::mutable_primary_key() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlQueryRequest.primary_key)
  return &_impl_.primary_key_;
}
inline const ::mysql_proxy_msg::MysqlField& MysqlQueryRequest::_internal_primary_key(int index) const {
  return _impl_.primary_key_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlField& MysqlQueryRequest::primary_key(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryRequest.primary_key)
  return _internal_primary_key(index);
}
inline ::mysql_proxy_msg::MysqlField* MysqlQueryRequest::_internal_add_primary_key() {
  return _impl_.primary_key_.Add();
}
inline ::mysql_proxy_msg::MysqlField* MysqlQueryRequest::add_primary_key() {
  ::mysql_proxy_msg::MysqlField* _add = _internal_add_primary_key();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlQueryRequest.primary_key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
MysqlQueryRequest::primary_key() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlQueryRequest.primary_key)
  return _impl_.primary_key_;
}

// -------------------------------------------------------------------

// MysqlQueryResponse

// bool result = 1;
inline void MysqlQueryResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool MysqlQueryResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool MysqlQueryResponse::result() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryResponse.result)
  return _internal_result();
}
inline void MysqlQueryResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void MysqlQueryResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryResponse.result)
}

// bytes error_info = 2;
inline void MysqlQueryResponse::clear_error_info() {
  _impl_.error_info_.ClearToEmpty();
}
inline const std::string& MysqlQueryResponse::error_info() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryResponse.error_info)
  return _internal_error_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryResponse::set_error_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryResponse.error_info)
}
inline std::string* MysqlQueryResponse::mutable_error_info() {
  std::string* _s = _internal_mutable_error_info();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryResponse.error_info)
  return _s;
}
inline const std::string& MysqlQueryResponse::_internal_error_info() const {
  return _impl_.error_info_.Get();
}
inline void MysqlQueryResponse::_internal_set_error_info(const std::string& value) {
  
  _impl_.error_info_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryResponse::_internal_mutable_error_info() {
  
  return _impl_.error_info_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryResponse.error_info)
  return _impl_.error_info_.Release();
}
inline void MysqlQueryResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  _impl_.error_info_.SetAllocated(error_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_info_.IsDefault()) {
    _impl_.error_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryResponse.error_info)
}

// .mysql_proxy_msg.MysqlTable table = 3;
inline bool MysqlQueryResponse::_internal_has_table() const {
  return this != internal_default_instance() && _impl_.table_ != nullptr;
}
inline bool MysqlQueryResponse::has_table() const {
  return _internal_has_table();
}
inline void MysqlQueryResponse::clear_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
}
inline const ::mysql_proxy_msg::MysqlTable& MysqlQueryResponse::_internal_table() const {
  const ::mysql_proxy_msg::MysqlTable* p = _impl_.table_;
  return p != nullptr ? *p : reinterpret_cast<const ::mysql_proxy_msg::MysqlTable&>(
      ::mysql_proxy_msg::_MysqlTable_default_instance_);
}
inline const ::mysql_proxy_msg::MysqlTable& MysqlQueryResponse::table() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryResponse.table)
  return _internal_table();
}
inline void MysqlQueryResponse::unsafe_arena_set_allocated_table(
    ::mysql_proxy_msg::MysqlTable* table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_);
  }
  _impl_.table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mysql_proxy_msg.MysqlQueryResponse.table)
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryResponse::release_table() {
  
  ::mysql_proxy_msg::MysqlTable* temp = _impl_.table_;
  _impl_.table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryResponse::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryResponse.table)
  
  ::mysql_proxy_msg::MysqlTable* temp = _impl_.table_;
  _impl_.table_ = nullptr;
  return temp;
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryResponse::_internal_mutable_table() {
  
  if (_impl_.table_ == nullptr) {
    auto* p = CreateMaybeMessage<::mysql_proxy_msg::MysqlTable>(GetArenaForAllocation());
    _impl_.table_ = p;
  }
  return _impl_.table_;
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryResponse::mutable_table() {
  ::mysql_proxy_msg::MysqlTable* _msg = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryResponse.table)
  return _msg;
}
inline void MysqlQueryResponse::set_allocated_table(::mysql_proxy_msg::MysqlTable* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_ = table;
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryResponse.table)
}

// bytes sql_statement = 4;
inline void MysqlQueryResponse::clear_sql_statement() {
  _impl_.sql_statement_.ClearToEmpty();
}
inline const std::string& MysqlQueryResponse::sql_statement() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryResponse.sql_statement)
  return _internal_sql_statement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryResponse::set_sql_statement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sql_statement_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryResponse.sql_statement)
}
inline std::string* MysqlQueryResponse::mutable_sql_statement() {
  std::string* _s = _internal_mutable_sql_statement();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryResponse.sql_statement)
  return _s;
}
inline const std::string& MysqlQueryResponse::_internal_sql_statement() const {
  return _impl_.sql_statement_.Get();
}
inline void MysqlQueryResponse::_internal_set_sql_statement(const std::string& value) {
  
  _impl_.sql_statement_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryResponse::_internal_mutable_sql_statement() {
  
  return _impl_.sql_statement_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryResponse::release_sql_statement() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryResponse.sql_statement)
  return _impl_.sql_statement_.Release();
}
inline void MysqlQueryResponse::set_allocated_sql_statement(std::string* sql_statement) {
  if (sql_statement != nullptr) {
    
  } else {
    
  }
  _impl_.sql_statement_.SetAllocated(sql_statement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_statement_.IsDefault()) {
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryResponse.sql_statement)
}

// -------------------------------------------------------------------

// MysqlMultiQueryRequest

// repeated .mysql_proxy_msg.MysqlQueryRequest requests = 1;
inline int MysqlMultiQueryRequest::_internal_requests_size() const {
  return _impl_.requests_.size();
}
inline int MysqlMultiQueryRequest::requests_size() const {
  return _internal_requests_size();
}
inline void MysqlMultiQueryRequest::clear_requests() {
  _impl_.requests_.Clear();
}
inline ::mysql_proxy_msg::MysqlQueryRequest* MysqlMultiQueryRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlMultiQueryRequest.requests)
  return _impl_.requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryRequest >*
MysqlMultiQueryRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlMultiQueryRequest.requests)
  return &_impl_.requests_;
}
inline const ::mysql_proxy_msg::MysqlQueryRequest& MysqlMultiQueryRequest::_internal_requests(int index) const {
  return _impl_.requests_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlQueryRequest& MysqlMultiQueryRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlMultiQueryRequest.requests)
  return _internal_requests(index);
}
inline ::mysql_proxy_msg::MysqlQueryRequest* MysqlMultiQueryRequest::_internal_add_requests() {
  return _impl_.requests_.Add();
}
inline ::mysql_proxy_msg::MysqlQueryRequest* MysqlMultiQueryRequest::add_requests() {
  ::mysql_proxy_msg::MysqlQueryRequest* _add = _internal_add_requests();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlMultiQueryRequest.requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryRequest >&
MysqlMultiQueryRequest::requests() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlMultiQueryRequest.requests)
  return _impl_.requests_;
}

// -------------------------------------------------------------------

// MysqlMulitQueryResponse

// repeated .mysql_proxy_msg.MysqlQueryResponse results = 1;
inline int MysqlMulitQueryResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int MysqlMulitQueryResponse::results_size() const {
  return _internal_results_size();
}
inline void MysqlMulitQueryResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::mysql_proxy_msg::MysqlQueryResponse* MysqlMulitQueryResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlMulitQueryResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryResponse >*
MysqlMulitQueryResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlMulitQueryResponse.results)
  return &_impl_.results_;
}
inline const ::mysql_proxy_msg::MysqlQueryResponse& MysqlMulitQueryResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlQueryResponse& MysqlMulitQueryResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlMulitQueryResponse.results)
  return _internal_results(index);
}
inline ::mysql_proxy_msg::MysqlQueryResponse* MysqlMulitQueryResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::mysql_proxy_msg::MysqlQueryResponse* MysqlMulitQueryResponse::add_results() {
  ::mysql_proxy_msg::MysqlQueryResponse* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlMulitQueryResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlQueryResponse >&
MysqlMulitQueryResponse::results() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlMulitQueryResponse.results)
  return _impl_.results_;
}

// -------------------------------------------------------------------

// MysqlInsertRequest

// string db_name = 1;
inline void MysqlInsertRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& MysqlInsertRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlInsertRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlInsertRequest.db_name)
}
inline std::string* MysqlInsertRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlInsertRequest.db_name)
  return _s;
}
inline const std::string& MysqlInsertRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void MysqlInsertRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlInsertRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlInsertRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlInsertRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void MysqlInsertRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlInsertRequest.db_name)
}

// string table_name = 2;
inline void MysqlInsertRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MysqlInsertRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlInsertRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlInsertRequest.table_name)
}
inline std::string* MysqlInsertRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlInsertRequest.table_name)
  return _s;
}
inline const std::string& MysqlInsertRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MysqlInsertRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlInsertRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlInsertRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlInsertRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MysqlInsertRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlInsertRequest.table_name)
}

// repeated .mysql_proxy_msg.MysqlField fields = 3;
inline int MysqlInsertRequest::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int MysqlInsertRequest::fields_size() const {
  return _internal_fields_size();
}
inline void MysqlInsertRequest::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::mysql_proxy_msg::MysqlField* MysqlInsertRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlInsertRequest.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
MysqlInsertRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlInsertRequest.fields)
  return &_impl_.fields_;
}
inline const ::mysql_proxy_msg::MysqlField& MysqlInsertRequest::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlField& MysqlInsertRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertRequest.fields)
  return _internal_fields(index);
}
inline ::mysql_proxy_msg::MysqlField* MysqlInsertRequest::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::mysql_proxy_msg::MysqlField* MysqlInsertRequest::add_fields() {
  ::mysql_proxy_msg::MysqlField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlInsertRequest.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
MysqlInsertRequest::fields() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlInsertRequest.fields)
  return _impl_.fields_;
}

// -------------------------------------------------------------------

// MysqlInsertResponse

// bool result = 1;
inline void MysqlInsertResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool MysqlInsertResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool MysqlInsertResponse::result() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertResponse.result)
  return _internal_result();
}
inline void MysqlInsertResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void MysqlInsertResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlInsertResponse.result)
}

// bytes error_info = 2;
inline void MysqlInsertResponse::clear_error_info() {
  _impl_.error_info_.ClearToEmpty();
}
inline const std::string& MysqlInsertResponse::error_info() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertResponse.error_info)
  return _internal_error_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlInsertResponse::set_error_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlInsertResponse.error_info)
}
inline std::string* MysqlInsertResponse::mutable_error_info() {
  std::string* _s = _internal_mutable_error_info();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlInsertResponse.error_info)
  return _s;
}
inline const std::string& MysqlInsertResponse::_internal_error_info() const {
  return _impl_.error_info_.Get();
}
inline void MysqlInsertResponse::_internal_set_error_info(const std::string& value) {
  
  _impl_.error_info_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlInsertResponse::_internal_mutable_error_info() {
  
  return _impl_.error_info_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlInsertResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlInsertResponse.error_info)
  return _impl_.error_info_.Release();
}
inline void MysqlInsertResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  _impl_.error_info_.SetAllocated(error_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_info_.IsDefault()) {
    _impl_.error_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlInsertResponse.error_info)
}

// uint64 affected_rows = 3;
inline void MysqlInsertResponse::clear_affected_rows() {
  _impl_.affected_rows_ = uint64_t{0u};
}
inline uint64_t MysqlInsertResponse::_internal_affected_rows() const {
  return _impl_.affected_rows_;
}
inline uint64_t MysqlInsertResponse::affected_rows() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertResponse.affected_rows)
  return _internal_affected_rows();
}
inline void MysqlInsertResponse::_internal_set_affected_rows(uint64_t value) {
  
  _impl_.affected_rows_ = value;
}
inline void MysqlInsertResponse::set_affected_rows(uint64_t value) {
  _internal_set_affected_rows(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlInsertResponse.affected_rows)
}

// uint64 insert_id = 4;
inline void MysqlInsertResponse::clear_insert_id() {
  _impl_.insert_id_ = uint64_t{0u};
}
inline uint64_t MysqlInsertResponse::_internal_insert_id() const {
  return _impl_.insert_id_;
}
inline uint64_t MysqlInsertResponse::insert_id() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertResponse.insert_id)
  return _internal_insert_id();
}
inline void MysqlInsertResponse::_internal_set_insert_id(uint64_t value) {
  
  _impl_.insert_id_ = value;
}
inline void MysqlInsertResponse::set_insert_id(uint64_t value) {
  _internal_set_insert_id(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlInsertResponse.insert_id)
}

// bytes sql_statement = 5;
inline void MysqlInsertResponse::clear_sql_statement() {
  _impl_.sql_statement_.ClearToEmpty();
}
inline const std::string& MysqlInsertResponse::sql_statement() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlInsertResponse.sql_statement)
  return _internal_sql_statement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlInsertResponse::set_sql_statement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sql_statement_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlInsertResponse.sql_statement)
}
inline std::string* MysqlInsertResponse::mutable_sql_statement() {
  std::string* _s = _internal_mutable_sql_statement();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlInsertResponse.sql_statement)
  return _s;
}
inline const std::string& MysqlInsertResponse::_internal_sql_statement() const {
  return _impl_.sql_statement_.Get();
}
inline void MysqlInsertResponse::_internal_set_sql_statement(const std::string& value) {
  
  _impl_.sql_statement_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlInsertResponse::_internal_mutable_sql_statement() {
  
  return _impl_.sql_statement_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlInsertResponse::release_sql_statement() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlInsertResponse.sql_statement)
  return _impl_.sql_statement_.Release();
}
inline void MysqlInsertResponse::set_allocated_sql_statement(std::string* sql_statement) {
  if (sql_statement != nullptr) {
    
  } else {
    
  }
  _impl_.sql_statement_.SetAllocated(sql_statement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_statement_.IsDefault()) {
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlInsertResponse.sql_statement)
}

// -------------------------------------------------------------------

// MysqlUpdateRequest

// string db_name = 1;
inline void MysqlUpdateRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& MysqlUpdateRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlUpdateRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlUpdateRequest.db_name)
}
inline std::string* MysqlUpdateRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlUpdateRequest.db_name)
  return _s;
}
inline const std::string& MysqlUpdateRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void MysqlUpdateRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlUpdateRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlUpdateRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlUpdateRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void MysqlUpdateRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlUpdateRequest.db_name)
}

// string table_name = 2;
inline void MysqlUpdateRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MysqlUpdateRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlUpdateRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlUpdateRequest.table_name)
}
inline std::string* MysqlUpdateRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlUpdateRequest.table_name)
  return _s;
}
inline const std::string& MysqlUpdateRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MysqlUpdateRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlUpdateRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlUpdateRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlUpdateRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MysqlUpdateRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlUpdateRequest.table_name)
}

// repeated .mysql_proxy_msg.MysqlField fields = 3;
inline int MysqlUpdateRequest::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int MysqlUpdateRequest::fields_size() const {
  return _internal_fields_size();
}
inline void MysqlUpdateRequest::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::mysql_proxy_msg::MysqlField* MysqlUpdateRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlUpdateRequest.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
MysqlUpdateRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlUpdateRequest.fields)
  return &_impl_.fields_;
}
inline const ::mysql_proxy_msg::MysqlField& MysqlUpdateRequest::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlField& MysqlUpdateRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateRequest.fields)
  return _internal_fields(index);
}
inline ::mysql_proxy_msg::MysqlField* MysqlUpdateRequest::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::mysql_proxy_msg::MysqlField* MysqlUpdateRequest::add_fields() {
  ::mysql_proxy_msg::MysqlField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlUpdateRequest.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
MysqlUpdateRequest::fields() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlUpdateRequest.fields)
  return _impl_.fields_;
}

// repeated .mysql_proxy_msg.MysqlField primary_key = 4;
inline int MysqlUpdateRequest::_internal_primary_key_size() const {
  return _impl_.primary_key_.size();
}
inline int MysqlUpdateRequest::primary_key_size() const {
  return _internal_primary_key_size();
}
inline void MysqlUpdateRequest::clear_primary_key() {
  _impl_.primary_key_.Clear();
}
inline ::mysql_proxy_msg::MysqlField* MysqlUpdateRequest::mutable_primary_key(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlUpdateRequest.primary_key)
  return _impl_.primary_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
MysqlUpdateRequest::mutable_primary_key() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlUpdateRequest.primary_key)
  return &_impl_.primary_key_;
}
inline const ::mysql_proxy_msg::MysqlField& MysqlUpdateRequest::_internal_primary_key(int index) const {
  return _impl_.primary_key_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlField& MysqlUpdateRequest::primary_key(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateRequest.primary_key)
  return _internal_primary_key(index);
}
inline ::mysql_proxy_msg::MysqlField* MysqlUpdateRequest::_internal_add_primary_key() {
  return _impl_.primary_key_.Add();
}
inline ::mysql_proxy_msg::MysqlField* MysqlUpdateRequest::add_primary_key() {
  ::mysql_proxy_msg::MysqlField* _add = _internal_add_primary_key();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlUpdateRequest.primary_key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
MysqlUpdateRequest::primary_key() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlUpdateRequest.primary_key)
  return _impl_.primary_key_;
}

// -------------------------------------------------------------------

// MysqlUpdateResponse

// bool result = 1;
inline void MysqlUpdateResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool MysqlUpdateResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool MysqlUpdateResponse::result() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateResponse.result)
  return _internal_result();
}
inline void MysqlUpdateResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void MysqlUpdateResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlUpdateResponse.result)
}

// bytes error_info = 2;
inline void MysqlUpdateResponse::clear_error_info() {
  _impl_.error_info_.ClearToEmpty();
}
inline const std::string& MysqlUpdateResponse::error_info() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateResponse.error_info)
  return _internal_error_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlUpdateResponse::set_error_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlUpdateResponse.error_info)
}
inline std::string* MysqlUpdateResponse::mutable_error_info() {
  std::string* _s = _internal_mutable_error_info();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlUpdateResponse.error_info)
  return _s;
}
inline const std::string& MysqlUpdateResponse::_internal_error_info() const {
  return _impl_.error_info_.Get();
}
inline void MysqlUpdateResponse::_internal_set_error_info(const std::string& value) {
  
  _impl_.error_info_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlUpdateResponse::_internal_mutable_error_info() {
  
  return _impl_.error_info_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlUpdateResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlUpdateResponse.error_info)
  return _impl_.error_info_.Release();
}
inline void MysqlUpdateResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  _impl_.error_info_.SetAllocated(error_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_info_.IsDefault()) {
    _impl_.error_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlUpdateResponse.error_info)
}

// uint64 affected_rows = 3;
inline void MysqlUpdateResponse::clear_affected_rows() {
  _impl_.affected_rows_ = uint64_t{0u};
}
inline uint64_t MysqlUpdateResponse::_internal_affected_rows() const {
  return _impl_.affected_rows_;
}
inline uint64_t MysqlUpdateResponse::affected_rows() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateResponse.affected_rows)
  return _internal_affected_rows();
}
inline void MysqlUpdateResponse::_internal_set_affected_rows(uint64_t value) {
  
  _impl_.affected_rows_ = value;
}
inline void MysqlUpdateResponse::set_affected_rows(uint64_t value) {
  _internal_set_affected_rows(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlUpdateResponse.affected_rows)
}

// uint64 insert_id = 4;
inline void MysqlUpdateResponse::clear_insert_id() {
  _impl_.insert_id_ = uint64_t{0u};
}
inline uint64_t MysqlUpdateResponse::_internal_insert_id() const {
  return _impl_.insert_id_;
}
inline uint64_t MysqlUpdateResponse::insert_id() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateResponse.insert_id)
  return _internal_insert_id();
}
inline void MysqlUpdateResponse::_internal_set_insert_id(uint64_t value) {
  
  _impl_.insert_id_ = value;
}
inline void MysqlUpdateResponse::set_insert_id(uint64_t value) {
  _internal_set_insert_id(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlUpdateResponse.insert_id)
}

// bytes sql_statement = 5;
inline void MysqlUpdateResponse::clear_sql_statement() {
  _impl_.sql_statement_.ClearToEmpty();
}
inline const std::string& MysqlUpdateResponse::sql_statement() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlUpdateResponse.sql_statement)
  return _internal_sql_statement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlUpdateResponse::set_sql_statement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sql_statement_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlUpdateResponse.sql_statement)
}
inline std::string* MysqlUpdateResponse::mutable_sql_statement() {
  std::string* _s = _internal_mutable_sql_statement();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlUpdateResponse.sql_statement)
  return _s;
}
inline const std::string& MysqlUpdateResponse::_internal_sql_statement() const {
  return _impl_.sql_statement_.Get();
}
inline void MysqlUpdateResponse::_internal_set_sql_statement(const std::string& value) {
  
  _impl_.sql_statement_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlUpdateResponse::_internal_mutable_sql_statement() {
  
  return _impl_.sql_statement_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlUpdateResponse::release_sql_statement() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlUpdateResponse.sql_statement)
  return _impl_.sql_statement_.Release();
}
inline void MysqlUpdateResponse::set_allocated_sql_statement(std::string* sql_statement) {
  if (sql_statement != nullptr) {
    
  } else {
    
  }
  _impl_.sql_statement_.SetAllocated(sql_statement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_statement_.IsDefault()) {
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlUpdateResponse.sql_statement)
}

// -------------------------------------------------------------------

// MysqlDeleteRequest

// string db_name = 1;
inline void MysqlDeleteRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& MysqlDeleteRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDeleteRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDeleteRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDeleteRequest.db_name)
}
inline std::string* MysqlDeleteRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDeleteRequest.db_name)
  return _s;
}
inline const std::string& MysqlDeleteRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void MysqlDeleteRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDeleteRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDeleteRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDeleteRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void MysqlDeleteRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDeleteRequest.db_name)
}

// string table_name = 2;
inline void MysqlDeleteRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MysqlDeleteRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDeleteRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDeleteRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDeleteRequest.table_name)
}
inline std::string* MysqlDeleteRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDeleteRequest.table_name)
  return _s;
}
inline const std::string& MysqlDeleteRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MysqlDeleteRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDeleteRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDeleteRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDeleteRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MysqlDeleteRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDeleteRequest.table_name)
}

// repeated .mysql_proxy_msg.MysqlField primary_key = 3;
inline int MysqlDeleteRequest::_internal_primary_key_size() const {
  return _impl_.primary_key_.size();
}
inline int MysqlDeleteRequest::primary_key_size() const {
  return _internal_primary_key_size();
}
inline void MysqlDeleteRequest::clear_primary_key() {
  _impl_.primary_key_.Clear();
}
inline ::mysql_proxy_msg::MysqlField* MysqlDeleteRequest::mutable_primary_key(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDeleteRequest.primary_key)
  return _impl_.primary_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
MysqlDeleteRequest::mutable_primary_key() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlDeleteRequest.primary_key)
  return &_impl_.primary_key_;
}
inline const ::mysql_proxy_msg::MysqlField& MysqlDeleteRequest::_internal_primary_key(int index) const {
  return _impl_.primary_key_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlField& MysqlDeleteRequest::primary_key(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDeleteRequest.primary_key)
  return _internal_primary_key(index);
}
inline ::mysql_proxy_msg::MysqlField* MysqlDeleteRequest::_internal_add_primary_key() {
  return _impl_.primary_key_.Add();
}
inline ::mysql_proxy_msg::MysqlField* MysqlDeleteRequest::add_primary_key() {
  ::mysql_proxy_msg::MysqlField* _add = _internal_add_primary_key();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlDeleteRequest.primary_key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
MysqlDeleteRequest::primary_key() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlDeleteRequest.primary_key)
  return _impl_.primary_key_;
}

// -------------------------------------------------------------------

// MysqlDeleteResponse

// bool result = 1;
inline void MysqlDeleteResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool MysqlDeleteResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool MysqlDeleteResponse::result() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDeleteResponse.result)
  return _internal_result();
}
inline void MysqlDeleteResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void MysqlDeleteResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDeleteResponse.result)
}

// bytes error_info = 2;
inline void MysqlDeleteResponse::clear_error_info() {
  _impl_.error_info_.ClearToEmpty();
}
inline const std::string& MysqlDeleteResponse::error_info() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDeleteResponse.error_info)
  return _internal_error_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDeleteResponse::set_error_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDeleteResponse.error_info)
}
inline std::string* MysqlDeleteResponse::mutable_error_info() {
  std::string* _s = _internal_mutable_error_info();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDeleteResponse.error_info)
  return _s;
}
inline const std::string& MysqlDeleteResponse::_internal_error_info() const {
  return _impl_.error_info_.Get();
}
inline void MysqlDeleteResponse::_internal_set_error_info(const std::string& value) {
  
  _impl_.error_info_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDeleteResponse::_internal_mutable_error_info() {
  
  return _impl_.error_info_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDeleteResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDeleteResponse.error_info)
  return _impl_.error_info_.Release();
}
inline void MysqlDeleteResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  _impl_.error_info_.SetAllocated(error_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_info_.IsDefault()) {
    _impl_.error_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDeleteResponse.error_info)
}

// uint64 affected_rows = 3;
inline void MysqlDeleteResponse::clear_affected_rows() {
  _impl_.affected_rows_ = uint64_t{0u};
}
inline uint64_t MysqlDeleteResponse::_internal_affected_rows() const {
  return _impl_.affected_rows_;
}
inline uint64_t MysqlDeleteResponse::affected_rows() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDeleteResponse.affected_rows)
  return _internal_affected_rows();
}
inline void MysqlDeleteResponse::_internal_set_affected_rows(uint64_t value) {
  
  _impl_.affected_rows_ = value;
}
inline void MysqlDeleteResponse::set_affected_rows(uint64_t value) {
  _internal_set_affected_rows(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDeleteResponse.affected_rows)
}

// bytes sql_statement = 4;
inline void MysqlDeleteResponse::clear_sql_statement() {
  _impl_.sql_statement_.ClearToEmpty();
}
inline const std::string& MysqlDeleteResponse::sql_statement() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlDeleteResponse.sql_statement)
  return _internal_sql_statement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlDeleteResponse::set_sql_statement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sql_statement_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlDeleteResponse.sql_statement)
}
inline std::string* MysqlDeleteResponse::mutable_sql_statement() {
  std::string* _s = _internal_mutable_sql_statement();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlDeleteResponse.sql_statement)
  return _s;
}
inline const std::string& MysqlDeleteResponse::_internal_sql_statement() const {
  return _impl_.sql_statement_.Get();
}
inline void MysqlDeleteResponse::_internal_set_sql_statement(const std::string& value) {
  
  _impl_.sql_statement_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlDeleteResponse::_internal_mutable_sql_statement() {
  
  return _impl_.sql_statement_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlDeleteResponse::release_sql_statement() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlDeleteResponse.sql_statement)
  return _impl_.sql_statement_.Release();
}
inline void MysqlDeleteResponse::set_allocated_sql_statement(std::string* sql_statement) {
  if (sql_statement != nullptr) {
    
  } else {
    
  }
  _impl_.sql_statement_.SetAllocated(sql_statement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_statement_.IsDefault()) {
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlDeleteResponse.sql_statement)
}

// -------------------------------------------------------------------

// MysqlQueryByFilterRequest

// string db_name = 1;
inline void MysqlQueryByFilterRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& MysqlQueryByFilterRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryByFilterRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryByFilterRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryByFilterRequest.db_name)
}
inline std::string* MysqlQueryByFilterRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryByFilterRequest.db_name)
  return _s;
}
inline const std::string& MysqlQueryByFilterRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void MysqlQueryByFilterRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryByFilterRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryByFilterRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryByFilterRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void MysqlQueryByFilterRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryByFilterRequest.db_name)
}

// string table_name = 2;
inline void MysqlQueryByFilterRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MysqlQueryByFilterRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryByFilterRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryByFilterRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryByFilterRequest.table_name)
}
inline std::string* MysqlQueryByFilterRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryByFilterRequest.table_name)
  return _s;
}
inline const std::string& MysqlQueryByFilterRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MysqlQueryByFilterRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryByFilterRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryByFilterRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryByFilterRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MysqlQueryByFilterRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryByFilterRequest.table_name)
}

// repeated .mysql_proxy_msg.MysqlField key = 3;
inline int MysqlQueryByFilterRequest::_internal_key_size() const {
  return _impl_.key_.size();
}
inline int MysqlQueryByFilterRequest::key_size() const {
  return _internal_key_size();
}
inline void MysqlQueryByFilterRequest::clear_key() {
  _impl_.key_.Clear();
}
inline ::mysql_proxy_msg::MysqlField* MysqlQueryByFilterRequest::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryByFilterRequest.key)
  return _impl_.key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >*
MysqlQueryByFilterRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:mysql_proxy_msg.MysqlQueryByFilterRequest.key)
  return &_impl_.key_;
}
inline const ::mysql_proxy_msg::MysqlField& MysqlQueryByFilterRequest::_internal_key(int index) const {
  return _impl_.key_.Get(index);
}
inline const ::mysql_proxy_msg::MysqlField& MysqlQueryByFilterRequest::key(int index) const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryByFilterRequest.key)
  return _internal_key(index);
}
inline ::mysql_proxy_msg::MysqlField* MysqlQueryByFilterRequest::_internal_add_key() {
  return _impl_.key_.Add();
}
inline ::mysql_proxy_msg::MysqlField* MysqlQueryByFilterRequest::add_key() {
  ::mysql_proxy_msg::MysqlField* _add = _internal_add_key();
  // @@protoc_insertion_point(field_add:mysql_proxy_msg.MysqlQueryByFilterRequest.key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysql_proxy_msg::MysqlField >&
MysqlQueryByFilterRequest::key() const {
  // @@protoc_insertion_point(field_list:mysql_proxy_msg.MysqlQueryByFilterRequest.key)
  return _impl_.key_;
}

// -------------------------------------------------------------------

// MysqlQueryAllRequest

// string db_name = 1;
inline void MysqlQueryAllRequest::clear_db_name() {
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& MysqlQueryAllRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryAllRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryAllRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryAllRequest.db_name)
}
inline std::string* MysqlQueryAllRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryAllRequest.db_name)
  return _s;
}
inline const std::string& MysqlQueryAllRequest::_internal_db_name() const {
  return _impl_.db_name_.Get();
}
inline void MysqlQueryAllRequest::_internal_set_db_name(const std::string& value) {
  
  _impl_.db_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryAllRequest::_internal_mutable_db_name() {
  
  return _impl_.db_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryAllRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryAllRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void MysqlQueryAllRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  _impl_.db_name_.SetAllocated(db_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_name_.IsDefault()) {
    _impl_.db_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryAllRequest.db_name)
}

// string table_name = 2;
inline void MysqlQueryAllRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& MysqlQueryAllRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryAllRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryAllRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryAllRequest.table_name)
}
inline std::string* MysqlQueryAllRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryAllRequest.table_name)
  return _s;
}
inline const std::string& MysqlQueryAllRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void MysqlQueryAllRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryAllRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryAllRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryAllRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void MysqlQueryAllRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryAllRequest.table_name)
}

// -------------------------------------------------------------------

// MysqlQueryAllResponse

// bool result = 1;
inline void MysqlQueryAllResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool MysqlQueryAllResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool MysqlQueryAllResponse::result() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryAllResponse.result)
  return _internal_result();
}
inline void MysqlQueryAllResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void MysqlQueryAllResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryAllResponse.result)
}

// bytes error_info = 2;
inline void MysqlQueryAllResponse::clear_error_info() {
  _impl_.error_info_.ClearToEmpty();
}
inline const std::string& MysqlQueryAllResponse::error_info() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryAllResponse.error_info)
  return _internal_error_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryAllResponse::set_error_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryAllResponse.error_info)
}
inline std::string* MysqlQueryAllResponse::mutable_error_info() {
  std::string* _s = _internal_mutable_error_info();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryAllResponse.error_info)
  return _s;
}
inline const std::string& MysqlQueryAllResponse::_internal_error_info() const {
  return _impl_.error_info_.Get();
}
inline void MysqlQueryAllResponse::_internal_set_error_info(const std::string& value) {
  
  _impl_.error_info_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryAllResponse::_internal_mutable_error_info() {
  
  return _impl_.error_info_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryAllResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryAllResponse.error_info)
  return _impl_.error_info_.Release();
}
inline void MysqlQueryAllResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  _impl_.error_info_.SetAllocated(error_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_info_.IsDefault()) {
    _impl_.error_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryAllResponse.error_info)
}

// .mysql_proxy_msg.MysqlTable table = 3;
inline bool MysqlQueryAllResponse::_internal_has_table() const {
  return this != internal_default_instance() && _impl_.table_ != nullptr;
}
inline bool MysqlQueryAllResponse::has_table() const {
  return _internal_has_table();
}
inline void MysqlQueryAllResponse::clear_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
}
inline const ::mysql_proxy_msg::MysqlTable& MysqlQueryAllResponse::_internal_table() const {
  const ::mysql_proxy_msg::MysqlTable* p = _impl_.table_;
  return p != nullptr ? *p : reinterpret_cast<const ::mysql_proxy_msg::MysqlTable&>(
      ::mysql_proxy_msg::_MysqlTable_default_instance_);
}
inline const ::mysql_proxy_msg::MysqlTable& MysqlQueryAllResponse::table() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryAllResponse.table)
  return _internal_table();
}
inline void MysqlQueryAllResponse::unsafe_arena_set_allocated_table(
    ::mysql_proxy_msg::MysqlTable* table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_);
  }
  _impl_.table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mysql_proxy_msg.MysqlQueryAllResponse.table)
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryAllResponse::release_table() {
  
  ::mysql_proxy_msg::MysqlTable* temp = _impl_.table_;
  _impl_.table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryAllResponse::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryAllResponse.table)
  
  ::mysql_proxy_msg::MysqlTable* temp = _impl_.table_;
  _impl_.table_ = nullptr;
  return temp;
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryAllResponse::_internal_mutable_table() {
  
  if (_impl_.table_ == nullptr) {
    auto* p = CreateMaybeMessage<::mysql_proxy_msg::MysqlTable>(GetArenaForAllocation());
    _impl_.table_ = p;
  }
  return _impl_.table_;
}
inline ::mysql_proxy_msg::MysqlTable* MysqlQueryAllResponse::mutable_table() {
  ::mysql_proxy_msg::MysqlTable* _msg = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryAllResponse.table)
  return _msg;
}
inline void MysqlQueryAllResponse::set_allocated_table(::mysql_proxy_msg::MysqlTable* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_ = table;
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryAllResponse.table)
}

// bytes sql_statement = 4;
inline void MysqlQueryAllResponse::clear_sql_statement() {
  _impl_.sql_statement_.ClearToEmpty();
}
inline const std::string& MysqlQueryAllResponse::sql_statement() const {
  // @@protoc_insertion_point(field_get:mysql_proxy_msg.MysqlQueryAllResponse.sql_statement)
  return _internal_sql_statement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MysqlQueryAllResponse::set_sql_statement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sql_statement_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysql_proxy_msg.MysqlQueryAllResponse.sql_statement)
}
inline std::string* MysqlQueryAllResponse::mutable_sql_statement() {
  std::string* _s = _internal_mutable_sql_statement();
  // @@protoc_insertion_point(field_mutable:mysql_proxy_msg.MysqlQueryAllResponse.sql_statement)
  return _s;
}
inline const std::string& MysqlQueryAllResponse::_internal_sql_statement() const {
  return _impl_.sql_statement_.Get();
}
inline void MysqlQueryAllResponse::_internal_set_sql_statement(const std::string& value) {
  
  _impl_.sql_statement_.Set(value, GetArenaForAllocation());
}
inline std::string* MysqlQueryAllResponse::_internal_mutable_sql_statement() {
  
  return _impl_.sql_statement_.Mutable(GetArenaForAllocation());
}
inline std::string* MysqlQueryAllResponse::release_sql_statement() {
  // @@protoc_insertion_point(field_release:mysql_proxy_msg.MysqlQueryAllResponse.sql_statement)
  return _impl_.sql_statement_.Release();
}
inline void MysqlQueryAllResponse::set_allocated_sql_statement(std::string* sql_statement) {
  if (sql_statement != nullptr) {
    
  } else {
    
  }
  _impl_.sql_statement_.SetAllocated(sql_statement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_statement_.IsDefault()) {
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mysql_proxy_msg.MysqlQueryAllResponse.sql_statement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql_proxy_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mysql_proxy_msg::MysqlScalarValueTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysql_proxy_msg::MysqlScalarValueTypes>() {
  return ::mysql_proxy_msg::MysqlScalarValueTypes_descriptor();
}
template <> struct is_proto_enum< ::mysql_proxy_msg::MysqlDataManipulation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysql_proxy_msg::MysqlDataManipulation>() {
  return ::mysql_proxy_msg::MysqlDataManipulation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysql_5fproxy_5fmsg_2eproto
