// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_proxy_msg.proto

#include "mysql_proxy_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mysql_proxy_msg {
PROTOBUF_CONSTEXPR MysqlValue::MysqlValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_type_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MysqlValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlValueDefaultTypeInternal() {}
  union {
    MysqlValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlValueDefaultTypeInternal _MysqlValue_default_instance_;
PROTOBUF_CONSTEXPR MysqlField::MysqlField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlFieldDefaultTypeInternal() {}
  union {
    MysqlField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlFieldDefaultTypeInternal _MysqlField_default_instance_;
PROTOBUF_CONSTEXPR MysqlRow::MysqlRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlRowDefaultTypeInternal() {}
  union {
    MysqlRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlRowDefaultTypeInternal _MysqlRow_default_instance_;
PROTOBUF_CONSTEXPR MysqlTable::MysqlTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rows_)*/{}
  , /*decltype(_impl_.db_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlTableDefaultTypeInternal() {}
  union {
    MysqlTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlTableDefaultTypeInternal _MysqlTable_default_instance_;
PROTOBUF_CONSTEXPR MysqlDescribeRequest::MysqlDescribeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlDescribeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlDescribeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlDescribeRequestDefaultTypeInternal() {}
  union {
    MysqlDescribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlDescribeRequestDefaultTypeInternal _MysqlDescribeRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlDescField::MysqlDescField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlDescFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlDescFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlDescFieldDefaultTypeInternal() {}
  union {
    MysqlDescField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlDescFieldDefaultTypeInternal _MysqlDescField_default_instance_;
PROTOBUF_CONSTEXPR MysqlDescTable::MysqlDescTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlDescTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlDescTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlDescTableDefaultTypeInternal() {}
  union {
    MysqlDescTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlDescTableDefaultTypeInternal _MysqlDescTable_default_instance_;
PROTOBUF_CONSTEXPR MysqlDescribeResponse_TablesEntry_DoNotUse::MysqlDescribeResponse_TablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MysqlDescribeResponse_TablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlDescribeResponse_TablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlDescribeResponse_TablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MysqlDescribeResponse_TablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlDescribeResponse_TablesEntry_DoNotUseDefaultTypeInternal _MysqlDescribeResponse_TablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MysqlDescribeResponse::MysqlDescribeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.error_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlDescribeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlDescribeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlDescribeResponseDefaultTypeInternal() {}
  union {
    MysqlDescribeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlDescribeResponseDefaultTypeInternal _MysqlDescribeResponse_default_instance_;
PROTOBUF_CONSTEXPR MysqlQueryRequest::MysqlQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primary_key_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlQueryRequestDefaultTypeInternal() {}
  union {
    MysqlQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlQueryRequestDefaultTypeInternal _MysqlQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlQueryResponse::MysqlQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sql_statement_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlQueryResponseDefaultTypeInternal() {}
  union {
    MysqlQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlQueryResponseDefaultTypeInternal _MysqlQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR MysqlMultiQueryRequest::MysqlMultiQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlMultiQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlMultiQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlMultiQueryRequestDefaultTypeInternal() {}
  union {
    MysqlMultiQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlMultiQueryRequestDefaultTypeInternal _MysqlMultiQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlMulitQueryResponse::MysqlMulitQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlMulitQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlMulitQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlMulitQueryResponseDefaultTypeInternal() {}
  union {
    MysqlMulitQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlMulitQueryResponseDefaultTypeInternal _MysqlMulitQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR MysqlInsertRequest::MysqlInsertRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlInsertRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlInsertRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlInsertRequestDefaultTypeInternal() {}
  union {
    MysqlInsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlInsertRequestDefaultTypeInternal _MysqlInsertRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlInsertResponse::MysqlInsertResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sql_statement_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.affected_rows_)*/uint64_t{0u}
  , /*decltype(_impl_.insert_id_)*/uint64_t{0u}
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlInsertResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlInsertResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlInsertResponseDefaultTypeInternal() {}
  union {
    MysqlInsertResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlInsertResponseDefaultTypeInternal _MysqlInsertResponse_default_instance_;
PROTOBUF_CONSTEXPR MysqlUpdateRequest::MysqlUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.primary_key_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlUpdateRequestDefaultTypeInternal() {}
  union {
    MysqlUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlUpdateRequestDefaultTypeInternal _MysqlUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlUpdateResponse::MysqlUpdateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sql_statement_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.affected_rows_)*/uint64_t{0u}
  , /*decltype(_impl_.insert_id_)*/uint64_t{0u}
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlUpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlUpdateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlUpdateResponseDefaultTypeInternal() {}
  union {
    MysqlUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlUpdateResponseDefaultTypeInternal _MysqlUpdateResponse_default_instance_;
PROTOBUF_CONSTEXPR MysqlDeleteRequest::MysqlDeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primary_key_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlDeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlDeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlDeleteRequestDefaultTypeInternal() {}
  union {
    MysqlDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlDeleteRequestDefaultTypeInternal _MysqlDeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlDeleteResponse::MysqlDeleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sql_statement_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.affected_rows_)*/uint64_t{0u}
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlDeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlDeleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlDeleteResponseDefaultTypeInternal() {}
  union {
    MysqlDeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlDeleteResponseDefaultTypeInternal _MysqlDeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR MysqlQueryByFilterRequest::MysqlQueryByFilterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlQueryByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlQueryByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlQueryByFilterRequestDefaultTypeInternal() {}
  union {
    MysqlQueryByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlQueryByFilterRequestDefaultTypeInternal _MysqlQueryByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlQueryAllRequest::MysqlQueryAllRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlQueryAllRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlQueryAllRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlQueryAllRequestDefaultTypeInternal() {}
  union {
    MysqlQueryAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlQueryAllRequestDefaultTypeInternal _MysqlQueryAllRequest_default_instance_;
PROTOBUF_CONSTEXPR MysqlQueryAllResponse::MysqlQueryAllResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sql_statement_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MysqlQueryAllResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MysqlQueryAllResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MysqlQueryAllResponseDefaultTypeInternal() {}
  union {
    MysqlQueryAllResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MysqlQueryAllResponseDefaultTypeInternal _MysqlQueryAllResponse_default_instance_;
}  // namespace mysql_proxy_msg
static ::_pb::Metadata file_level_metadata_mysql_5fproxy_5fmsg_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mysql_5fproxy_5fmsg_2eproto = nullptr;

const uint32_t TableStruct_mysql_5fproxy_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _impl_.db_type_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlValue, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlField, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlRow, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, _impl_.db_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlTable, _impl_.rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeRequest, _impl_.names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescField, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescTable, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, _impl_.error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDescribeResponse, _impl_.tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryRequest, _impl_.primary_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, _impl_.error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryResponse, _impl_.sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlMultiQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlMultiQueryRequest, _impl_.requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlMulitQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlMulitQueryResponse, _impl_.results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertRequest, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, _impl_.error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, _impl_.affected_rows_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, _impl_.insert_id_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlInsertResponse, _impl_.sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateRequest, _impl_.primary_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, _impl_.error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, _impl_.affected_rows_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, _impl_.insert_id_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlUpdateResponse, _impl_.sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteRequest, _impl_.primary_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, _impl_.error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, _impl_.affected_rows_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlDeleteResponse, _impl_.sql_statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryByFilterRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryByFilterRequest, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryByFilterRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllRequest, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllRequest, _impl_.table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllResponse, _impl_.error_info_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllResponse, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::mysql_proxy_msg::MysqlQueryAllResponse, _impl_.sql_statement_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mysql_proxy_msg::MysqlValue)},
  { 17, -1, -1, sizeof(::mysql_proxy_msg::MysqlField)},
  { 25, -1, -1, sizeof(::mysql_proxy_msg::MysqlRow)},
  { 32, -1, -1, sizeof(::mysql_proxy_msg::MysqlTable)},
  { 41, -1, -1, sizeof(::mysql_proxy_msg::MysqlDescribeRequest)},
  { 48, -1, -1, sizeof(::mysql_proxy_msg::MysqlDescField)},
  { 59, -1, -1, sizeof(::mysql_proxy_msg::MysqlDescTable)},
  { 69, 77, -1, sizeof(::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse)},
  { 79, -1, -1, sizeof(::mysql_proxy_msg::MysqlDescribeResponse)},
  { 88, -1, -1, sizeof(::mysql_proxy_msg::MysqlQueryRequest)},
  { 97, -1, -1, sizeof(::mysql_proxy_msg::MysqlQueryResponse)},
  { 107, -1, -1, sizeof(::mysql_proxy_msg::MysqlMultiQueryRequest)},
  { 114, -1, -1, sizeof(::mysql_proxy_msg::MysqlMulitQueryResponse)},
  { 121, -1, -1, sizeof(::mysql_proxy_msg::MysqlInsertRequest)},
  { 130, -1, -1, sizeof(::mysql_proxy_msg::MysqlInsertResponse)},
  { 141, -1, -1, sizeof(::mysql_proxy_msg::MysqlUpdateRequest)},
  { 151, -1, -1, sizeof(::mysql_proxy_msg::MysqlUpdateResponse)},
  { 162, -1, -1, sizeof(::mysql_proxy_msg::MysqlDeleteRequest)},
  { 171, -1, -1, sizeof(::mysql_proxy_msg::MysqlDeleteResponse)},
  { 181, -1, -1, sizeof(::mysql_proxy_msg::MysqlQueryByFilterRequest)},
  { 190, -1, -1, sizeof(::mysql_proxy_msg::MysqlQueryAllRequest)},
  { 198, -1, -1, sizeof(::mysql_proxy_msg::MysqlQueryAllResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mysql_proxy_msg::_MysqlValue_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlField_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlRow_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlTable_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlDescribeRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlDescField_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlDescTable_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlDescribeResponse_TablesEntry_DoNotUse_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlDescribeResponse_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlQueryRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlQueryResponse_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlMultiQueryRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlMulitQueryResponse_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlInsertRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlInsertResponse_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlUpdateRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlUpdateResponse_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlDeleteRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlDeleteResponse_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlQueryByFilterRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlQueryAllRequest_default_instance_._instance,
  &::mysql_proxy_msg::_MysqlQueryAllResponse_default_instance_._instance,
};

const char descriptor_table_protodef_mysql_5fproxy_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025mysql_proxy_msg.proto\022\017mysql_proxy_msg"
  "\"\372\001\n\nMysqlValue\022\017\n\007db_type\030\001 \001(\005\0224\n\004type"
  "\030\002 \001(\0162&.mysql_proxy_msg.MysqlScalarValu"
  "eTypes\022\021\n\007int32_v\030e \001(\005H\000\022\021\n\007int64_v\030f \001"
  "(\003H\000\022\022\n\010uint32_v\030g \001(\rH\000\022\022\n\010uint64_v\030h \001"
  "(\004H\000\022\022\n\010string_v\030i \001(\tH\000\022\021\n\007bytes_v\030j \001("
  "\014H\000\022\021\n\007float_v\030k \001(\002H\000\022\022\n\010double_v\030l \001(\001"
  "H\000B\t\n\007payload\"G\n\nMysqlField\022\r\n\005index\030\001 \001"
  "(\r\022*\n\005value\030\002 \001(\0132\033.mysql_proxy_msg.Mysq"
  "lValue\"7\n\010MysqlRow\022+\n\006fields\030\001 \003(\0132\033.mys"
  "ql_proxy_msg.MysqlField\"O\n\nMysqlTable\022\n\n"
  "\002db\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\'\n\004rows\030\003 \003(\0132\031."
  "mysql_proxy_msg.MysqlRow\"%\n\024MysqlDescrib"
  "eRequest\022\r\n\005names\030\001 \003(\t\"Z\n\016MysqlDescFiel"
  "d\022\r\n\005index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005flags\030"
  "\003 \001(\r\022\014\n\004type\030\004 \001(\r\022\016\n\006offset\030\005 \001(\r\"v\n\016M"
  "ysqlDescTable\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_"
  "name\030\002 \001(\t\022/\n\006fields\030\003 \003(\0132\037.mysql_proxy"
  "_msg.MysqlDescField\022\016\n\006result\030\004 \001(\010\"\317\001\n\025"
  "MysqlDescribeResponse\022\016\n\006result\030\001 \001(\010\022\022\n"
  "\nerror_info\030\002 \001(\014\022B\n\006tables\030\003 \003(\01322.mysq"
  "l_proxy_msg.MysqlDescribeResponse.Tables"
  "Entry\032N\n\013TablesEntry\022\013\n\003key\030\001 \001(\t\022.\n\005val"
  "ue\030\002 \001(\0132\037.mysql_proxy_msg.MysqlDescTabl"
  "e:\0028\001\"j\n\021MysqlQueryRequest\022\017\n\007db_name\030\001 "
  "\001(\t\022\022\n\ntable_name\030\002 \001(\t\0220\n\013primary_key\030\003"
  " \003(\0132\033.mysql_proxy_msg.MysqlField\"{\n\022Mys"
  "qlQueryResponse\022\016\n\006result\030\001 \001(\010\022\022\n\nerror"
  "_info\030\002 \001(\014\022*\n\005table\030\003 \001(\0132\033.mysql_proxy"
  "_msg.MysqlTable\022\025\n\rsql_statement\030\004 \001(\014\"N"
  "\n\026MysqlMultiQueryRequest\0224\n\010requests\030\001 \003"
  "(\0132\".mysql_proxy_msg.MysqlQueryRequest\"O"
  "\n\027MysqlMulitQueryResponse\0224\n\007results\030\001 \003"
  "(\0132#.mysql_proxy_msg.MysqlQueryResponse\""
  "f\n\022MysqlInsertRequest\022\017\n\007db_name\030\001 \001(\t\022\022"
  "\n\ntable_name\030\002 \001(\t\022+\n\006fields\030\003 \003(\0132\033.mys"
  "ql_proxy_msg.MysqlField\"z\n\023MysqlInsertRe"
  "sponse\022\016\n\006result\030\001 \001(\010\022\022\n\nerror_info\030\002 \001"
  "(\014\022\025\n\raffected_rows\030\003 \001(\004\022\021\n\tinsert_id\030\004"
  " \001(\004\022\025\n\rsql_statement\030\005 \001(\014\"\230\001\n\022MysqlUpd"
  "ateRequest\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_nam"
  "e\030\002 \001(\t\022+\n\006fields\030\003 \003(\0132\033.mysql_proxy_ms"
  "g.MysqlField\0220\n\013primary_key\030\004 \003(\0132\033.mysq"
  "l_proxy_msg.MysqlField\"z\n\023MysqlUpdateRes"
  "ponse\022\016\n\006result\030\001 \001(\010\022\022\n\nerror_info\030\002 \001("
  "\014\022\025\n\raffected_rows\030\003 \001(\004\022\021\n\tinsert_id\030\004 "
  "\001(\004\022\025\n\rsql_statement\030\005 \001(\014\"k\n\022MysqlDelet"
  "eRequest\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_name\030"
  "\002 \001(\t\0220\n\013primary_key\030\003 \003(\0132\033.mysql_proxy"
  "_msg.MysqlField\"g\n\023MysqlDeleteResponse\022\016"
  "\n\006result\030\001 \001(\010\022\022\n\nerror_info\030\002 \001(\014\022\025\n\raf"
  "fected_rows\030\003 \001(\004\022\025\n\rsql_statement\030\004 \001(\014"
  "\"j\n\031MysqlQueryByFilterRequest\022\017\n\007db_name"
  "\030\001 \001(\t\022\022\n\ntable_name\030\002 \001(\t\022(\n\003key\030\003 \003(\0132"
  "\033.mysql_proxy_msg.MysqlField\";\n\024MysqlQue"
  "ryAllRequest\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_n"
  "ame\030\002 \001(\t\"~\n\025MysqlQueryAllResponse\022\016\n\006re"
  "sult\030\001 \001(\010\022\022\n\nerror_info\030\002 \001(\014\022*\n\005table\030"
  "\003 \001(\0132\033.mysql_proxy_msg.MysqlTable\022\025\n\rsq"
  "l_statement\030\004 \001(\014*\252\001\n\025MysqlScalarValueTy"
  "pes\022\r\n\tMSVT_None\020\000\022\016\n\nMSVT_INT32\020\001\022\016\n\nMS"
  "VT_INT64\020\002\022\017\n\013MSVT_UINT32\020\003\022\017\n\013MSVT_UINT"
  "64\020\004\022\017\n\013MSVT_STRING\020\005\022\016\n\nMSVT_BYTES\020\006\022\016\n"
  "\nMSVT_FLOAT\020\007\022\017\n\013MSVT_DOUBLE\020\010*\221\001\n\025Mysql"
  "DataManipulation\022\014\n\010MDM_None\020\000\022\016\n\nMDM_SE"
  "LECT\020\001\022\016\n\nMDM_UPDATE\020\002\022\016\n\nMDM_DELETE\020\003\022\016"
  "\n\nMDM_INSERT\020\004\022\027\n\023MDM_QUERY_BY_FILTER\020\005\022"
  "\021\n\rMDM_QUERY_ALL\020\006b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_mysql_5fproxy_5fmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mysql_5fproxy_5fmsg_2eproto = {
    false, false, 2706, descriptor_table_protodef_mysql_5fproxy_5fmsg_2eproto,
    "mysql_proxy_msg.proto",
    &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once, nullptr, 0, 22,
    schemas, file_default_instances, TableStruct_mysql_5fproxy_5fmsg_2eproto::offsets,
    file_level_metadata_mysql_5fproxy_5fmsg_2eproto, file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto,
    file_level_service_descriptors_mysql_5fproxy_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter() {
  return &descriptor_table_mysql_5fproxy_5fmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mysql_5fproxy_5fmsg_2eproto(&descriptor_table_mysql_5fproxy_5fmsg_2eproto);
namespace mysql_proxy_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlScalarValueTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto);
  return file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[0];
}
bool MysqlScalarValueTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MysqlDataManipulation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_5fproxy_5fmsg_2eproto);
  return file_level_enum_descriptors_mysql_5fproxy_5fmsg_2eproto[1];
}
bool MysqlDataManipulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MysqlValue::_Internal {
 public:
};

MysqlValue::MysqlValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlValue)
}
MysqlValue::MysqlValue(const MysqlValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_type_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.db_type_, &from._impl_.db_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.db_type_)) + sizeof(_impl_.type_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kInt32V: {
      _this->_internal_set_int32_v(from._internal_int32_v());
      break;
    }
    case kInt64V: {
      _this->_internal_set_int64_v(from._internal_int64_v());
      break;
    }
    case kUint32V: {
      _this->_internal_set_uint32_v(from._internal_uint32_v());
      break;
    }
    case kUint64V: {
      _this->_internal_set_uint64_v(from._internal_uint64_v());
      break;
    }
    case kStringV: {
      _this->_internal_set_string_v(from._internal_string_v());
      break;
    }
    case kBytesV: {
      _this->_internal_set_bytes_v(from._internal_bytes_v());
      break;
    }
    case kFloatV: {
      _this->_internal_set_float_v(from._internal_float_v());
      break;
    }
    case kDoubleV: {
      _this->_internal_set_double_v(from._internal_double_v());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlValue)
}

inline void MysqlValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_type_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

MysqlValue::~MysqlValue() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void MysqlValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlValue::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mysql_proxy_msg.MysqlValue)
  switch (payload_case()) {
    case kInt32V: {
      // No need to clear
      break;
    }
    case kInt64V: {
      // No need to clear
      break;
    }
    case kUint32V: {
      // No need to clear
      break;
    }
    case kUint64V: {
      // No need to clear
      break;
    }
    case kStringV: {
      _impl_.payload_.string_v_.Destroy();
      break;
    }
    case kBytesV: {
      _impl_.payload_.bytes_v_.Destroy();
      break;
    }
    case kFloatV: {
      // No need to clear
      break;
    }
    case kDoubleV: {
      // No need to clear
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void MysqlValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.db_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.db_type_)) + sizeof(_impl_.type_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 db_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.db_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mysql_proxy_msg::MysqlScalarValueTypes>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 int32_v = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_int32_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_v = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_int64_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uint32_v = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_uint32_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint64_v = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_uint64_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string string_v = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_string_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlValue.string_v"));
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_v = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_bytes_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_v = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _internal_set_float_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double double_v = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _internal_set_double_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 db_type = 1;
  if (this->_internal_db_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_db_type(), target);
  }

  // .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 int32_v = 101;
  if (_internal_has_int32_v()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(101, this->_internal_int32_v(), target);
  }

  // int64 int64_v = 102;
  if (_internal_has_int64_v()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(102, this->_internal_int64_v(), target);
  }

  // uint32 uint32_v = 103;
  if (_internal_has_uint32_v()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(103, this->_internal_uint32_v(), target);
  }

  // uint64 uint64_v = 104;
  if (_internal_has_uint64_v()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(104, this->_internal_uint64_v(), target);
  }

  // string string_v = 105;
  if (_internal_has_string_v()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_v().data(), static_cast<int>(this->_internal_string_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlValue.string_v");
    target = stream->WriteStringMaybeAliased(
        105, this->_internal_string_v(), target);
  }

  // bytes bytes_v = 106;
  if (_internal_has_bytes_v()) {
    target = stream->WriteBytesMaybeAliased(
        106, this->_internal_bytes_v(), target);
  }

  // float float_v = 107;
  if (_internal_has_float_v()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(107, this->_internal_float_v(), target);
  }

  // double double_v = 108;
  if (_internal_has_double_v()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(108, this->_internal_double_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlValue)
  return target;
}

size_t MysqlValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 db_type = 1;
  if (this->_internal_db_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_db_type());
  }

  // .mysql_proxy_msg.MysqlScalarValueTypes type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (payload_case()) {
    // int32 int32_v = 101;
    case kInt32V: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_int32_v());
      break;
    }
    // int64 int64_v = 102;
    case kInt64V: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_int64_v());
      break;
    }
    // uint32 uint32_v = 103;
    case kUint32V: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_uint32_v());
      break;
    }
    // uint64 uint64_v = 104;
    case kUint64V: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_uint64_v());
      break;
    }
    // string string_v = 105;
    case kStringV: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_v());
      break;
    }
    // bytes bytes_v = 106;
    case kBytesV: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_v());
      break;
    }
    // float float_v = 107;
    case kFloatV: {
      total_size += 2 + 4;
      break;
    }
    // double double_v = 108;
    case kDoubleV: {
      total_size += 2 + 8;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlValue::GetClassData() const { return &_class_data_; }


void MysqlValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlValue*>(&to_msg);
  auto& from = static_cast<const MysqlValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_db_type() != 0) {
    _this->_internal_set_db_type(from._internal_db_type());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.payload_case()) {
    case kInt32V: {
      _this->_internal_set_int32_v(from._internal_int32_v());
      break;
    }
    case kInt64V: {
      _this->_internal_set_int64_v(from._internal_int64_v());
      break;
    }
    case kUint32V: {
      _this->_internal_set_uint32_v(from._internal_uint32_v());
      break;
    }
    case kUint64V: {
      _this->_internal_set_uint64_v(from._internal_uint64_v());
      break;
    }
    case kStringV: {
      _this->_internal_set_string_v(from._internal_string_v());
      break;
    }
    case kBytesV: {
      _this->_internal_set_bytes_v(from._internal_bytes_v());
      break;
    }
    case kFloatV: {
      _this->_internal_set_float_v(from._internal_float_v());
      break;
    }
    case kDoubleV: {
      _this->_internal_set_double_v(from._internal_double_v());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlValue::CopyFrom(const MysqlValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlValue::IsInitialized() const {
  return true;
}

void MysqlValue::InternalSwap(MysqlValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlValue, _impl_.type_)
      + sizeof(MysqlValue::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MysqlValue, _impl_.db_type_)>(
          reinterpret_cast<char*>(&_impl_.db_type_),
          reinterpret_cast<char*>(&other->_impl_.db_type_));
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[0]);
}

// ===================================================================

class MysqlField::_Internal {
 public:
  static const ::mysql_proxy_msg::MysqlValue& value(const MysqlField* msg);
};

const ::mysql_proxy_msg::MysqlValue&
MysqlField::_Internal::value(const MysqlField* msg) {
  return *msg->_impl_.value_;
}
MysqlField::MysqlField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlField)
}
MysqlField::MysqlField(const MysqlField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::mysql_proxy_msg::MysqlValue(*from._impl_.value_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlField)
}

inline void MysqlField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MysqlField::~MysqlField() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
}

void MysqlField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlField::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .mysql_proxy_msg.MysqlValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlField)
  return target;
}

size_t MysqlField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mysql_proxy_msg.MysqlValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlField::GetClassData() const { return &_class_data_; }


void MysqlField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlField*>(&to_msg);
  auto& from = static_cast<const MysqlField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::mysql_proxy_msg::MysqlValue::MergeFrom(
        from._internal_value());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlField::CopyFrom(const MysqlField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlField::IsInitialized() const {
  return true;
}

void MysqlField::InternalSwap(MysqlField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlField, _impl_.index_)
      + sizeof(MysqlField::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(MysqlField, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[1]);
}

// ===================================================================

class MysqlRow::_Internal {
 public:
};

MysqlRow::MysqlRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlRow)
}
MysqlRow::MysqlRow(const MysqlRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlRow)
}

inline void MysqlRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MysqlRow::~MysqlRow() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
}

void MysqlRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlRow::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mysql_proxy_msg.MysqlField fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlRow)
  return target;
}

size_t MysqlRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlRow::GetClassData() const { return &_class_data_; }


void MysqlRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlRow*>(&to_msg);
  auto& from = static_cast<const MysqlRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlRow::CopyFrom(const MysqlRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlRow::IsInitialized() const {
  return true;
}

void MysqlRow::InternalSwap(MysqlRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[2]);
}

// ===================================================================

class MysqlTable::_Internal {
 public:
};

MysqlTable::MysqlTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlTable)
}
MysqlTable::MysqlTable(const MysqlTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rows_){from._impl_.rows_}
    , decltype(_impl_.db_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db().empty()) {
    _this->_impl_.db_.Set(from._internal_db(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlTable)
}

inline void MysqlTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rows_){arena}
    , decltype(_impl_.db_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlTable::~MysqlTable() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rows_.~RepeatedPtrField();
  _impl_.db_.Destroy();
  _impl_.name_.Destroy();
}

void MysqlTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlTable::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rows_.Clear();
  _impl_.db_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlTable.db"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlTable.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlRow rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1;
  if (!this->_internal_db().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db().data(), static_cast<int>(this->_internal_db().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlTable.db");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlTable.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlRow rows = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rows_size()); i < n; i++) {
    const auto& repfield = this->_internal_rows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlTable)
  return target;
}

size_t MysqlTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlRow rows = 3;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->_impl_.rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db = 1;
  if (!this->_internal_db().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlTable::GetClassData() const { return &_class_data_; }


void MysqlTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlTable*>(&to_msg);
  auto& from = static_cast<const MysqlTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rows_.MergeFrom(from._impl_.rows_);
  if (!from._internal_db().empty()) {
    _this->_internal_set_db(from._internal_db());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlTable::CopyFrom(const MysqlTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlTable::IsInitialized() const {
  return true;
}

void MysqlTable::InternalSwap(MysqlTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rows_.InternalSwap(&other->_impl_.rows_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_, lhs_arena,
      &other->_impl_.db_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[3]);
}

// ===================================================================

class MysqlDescribeRequest::_Internal {
 public:
};

MysqlDescribeRequest::MysqlDescribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlDescribeRequest)
}
MysqlDescribeRequest::MysqlDescribeRequest(const MysqlDescribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlDescribeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescribeRequest)
}

inline void MysqlDescribeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MysqlDescribeRequest::~MysqlDescribeRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescribeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlDescribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
}

void MysqlDescribeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlDescribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlDescribeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescribeRequest.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlDescribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescribeRequest.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescribeRequest)
  return target;
}

size_t MysqlDescribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlDescribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlDescribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlDescribeRequest::GetClassData() const { return &_class_data_; }


void MysqlDescribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlDescribeRequest*>(&to_msg);
  auto& from = static_cast<const MysqlDescribeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescribeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlDescribeRequest::CopyFrom(const MysqlDescribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescribeRequest::IsInitialized() const {
  return true;
}

void MysqlDescribeRequest::InternalSwap(MysqlDescribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescribeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[4]);
}

// ===================================================================

class MysqlDescField::_Internal {
 public:
};

MysqlDescField::MysqlDescField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlDescField)
}
MysqlDescField::MysqlDescField(const MysqlDescField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlDescField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescField)
}

inline void MysqlDescField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlDescField::~MysqlDescField() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlDescField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void MysqlDescField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlDescField::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlDescField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescField.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlDescField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescField.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // uint32 offset = 5;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescField)
  return target;
}

size_t MysqlDescField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 offset = 5;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlDescField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlDescField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlDescField::GetClassData() const { return &_class_data_; }


void MysqlDescField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlDescField*>(&to_msg);
  auto& from = static_cast<const MysqlDescField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlDescField::CopyFrom(const MysqlDescField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescField::IsInitialized() const {
  return true;
}

void MysqlDescField::InternalSwap(MysqlDescField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlDescField, _impl_.offset_)
      + sizeof(MysqlDescField::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(MysqlDescField, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[5]);
}

// ===================================================================

class MysqlDescTable::_Internal {
 public:
};

MysqlDescTable::MysqlDescTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlDescTable)
}
MysqlDescTable::MysqlDescTable(const MysqlDescTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlDescTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescTable)
}

inline void MysqlDescTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlDescTable::~MysqlDescTable() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlDescTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void MysqlDescTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlDescTable::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlDescTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescTable.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlDescTable.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlDescField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlDescTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescTable.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDescTable.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlDescField fields = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool result = 4;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescTable)
  return target;
}

size_t MysqlDescTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlDescField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // bool result = 4;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlDescTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlDescTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlDescTable::GetClassData() const { return &_class_data_; }


void MysqlDescTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlDescTable*>(&to_msg);
  auto& from = static_cast<const MysqlDescTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlDescTable::CopyFrom(const MysqlDescTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescTable::IsInitialized() const {
  return true;
}

void MysqlDescTable::InternalSwap(MysqlDescTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[6]);
}

// ===================================================================

MysqlDescribeResponse_TablesEntry_DoNotUse::MysqlDescribeResponse_TablesEntry_DoNotUse() {}
MysqlDescribeResponse_TablesEntry_DoNotUse::MysqlDescribeResponse_TablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MysqlDescribeResponse_TablesEntry_DoNotUse::MergeFrom(const MysqlDescribeResponse_TablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescribeResponse_TablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[7]);
}

// ===================================================================

class MysqlDescribeResponse::_Internal {
 public:
};

MysqlDescribeResponse::MysqlDescribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MysqlDescribeResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlDescribeResponse)
}
MysqlDescribeResponse::MysqlDescribeResponse(const MysqlDescribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlDescribeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tables_)*/{}
    , decltype(_impl_.error_info_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tables_.MergeFrom(from._impl_.tables_);
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_info().empty()) {
    _this->_impl_.error_info_.Set(from._internal_error_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDescribeResponse)
}

inline void MysqlDescribeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.error_info_){}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlDescribeResponse::~MysqlDescribeResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDescribeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MysqlDescribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tables_.Destruct();
  _impl_.tables_.~MapField();
  _impl_.error_info_.Destroy();
}

void MysqlDescribeResponse::ArenaDtor(void* object) {
  MysqlDescribeResponse* _this = reinterpret_cast< MysqlDescribeResponse* >(object);
  _this->_impl_.tables_.Destruct();
}
void MysqlDescribeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlDescribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDescribeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tables_.Clear();
  _impl_.error_info_.ClearToEmpty();
  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlDescribeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlDescribeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDescribeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
  if (!this->_internal_tables().empty()) {
    using MapType = ::_pb::Map<std::string, ::mysql_proxy_msg::MysqlDescTable>;
    using WireHelper = MysqlDescribeResponse_TablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "mysql_proxy_msg.MysqlDescribeResponse.TablesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDescribeResponse)
  return target;
}

size_t MysqlDescribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDescribeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mysql_proxy_msg.MysqlDescTable> tables = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mysql_proxy_msg::MysqlDescTable >::const_iterator
      it = this->_internal_tables().begin();
      it != this->_internal_tables().end(); ++it) {
    total_size += MysqlDescribeResponse_TablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlDescribeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlDescribeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlDescribeResponse::GetClassData() const { return &_class_data_; }


void MysqlDescribeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlDescribeResponse*>(&to_msg);
  auto& from = static_cast<const MysqlDescribeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDescribeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tables_.MergeFrom(from._impl_.tables_);
  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlDescribeResponse::CopyFrom(const MysqlDescribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDescribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDescribeResponse::IsInitialized() const {
  return true;
}

void MysqlDescribeResponse::InternalSwap(MysqlDescribeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tables_.InternalSwap(&other->_impl_.tables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_info_, lhs_arena,
      &other->_impl_.error_info_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDescribeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[8]);
}

// ===================================================================

class MysqlQueryRequest::_Internal {
 public:
};

MysqlQueryRequest::MysqlQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlQueryRequest)
}
MysqlQueryRequest::MysqlQueryRequest(const MysqlQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_key_){from._impl_.primary_key_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryRequest)
}

inline void MysqlQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_key_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlQueryRequest::~MysqlQueryRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.primary_key_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void MysqlQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.primary_key_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primary_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_primary_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_primary_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryRequest)
  return target;
}

size_t MysqlQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  total_size += 1UL * this->_internal_primary_key_size();
  for (const auto& msg : this->_impl_.primary_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlQueryRequest::GetClassData() const { return &_class_data_; }


void MysqlQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlQueryRequest*>(&to_msg);
  auto& from = static_cast<const MysqlQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.primary_key_.MergeFrom(from._impl_.primary_key_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlQueryRequest::CopyFrom(const MysqlQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryRequest::IsInitialized() const {
  return true;
}

void MysqlQueryRequest::InternalSwap(MysqlQueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.primary_key_.InternalSwap(&other->_impl_.primary_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[9]);
}

// ===================================================================

class MysqlQueryResponse::_Internal {
 public:
  static const ::mysql_proxy_msg::MysqlTable& table(const MysqlQueryResponse* msg);
};

const ::mysql_proxy_msg::MysqlTable&
MysqlQueryResponse::_Internal::table(const MysqlQueryResponse* msg) {
  return *msg->_impl_.table_;
}
MysqlQueryResponse::MysqlQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlQueryResponse)
}
MysqlQueryResponse::MysqlQueryResponse(const MysqlQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_info().empty()) {
    _this->_impl_.error_info_.Set(from._internal_error_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql_statement().empty()) {
    _this->_impl_.sql_statement_.Set(from._internal_sql_statement(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::mysql_proxy_msg::MysqlTable(*from._impl_.table_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryResponse)
}

inline void MysqlQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlQueryResponse::~MysqlQueryResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_info_.Destroy();
  _impl_.sql_statement_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_;
}

void MysqlQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_info_.ClearToEmpty();
  _impl_.sql_statement_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlTable table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sql_statement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // .mysql_proxy_msg.MysqlTable table = 3;
  if (this->_internal_has_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  // bytes sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryResponse)
  return target;
}

size_t MysqlQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // .mysql_proxy_msg.MysqlTable table = 3;
  if (this->_internal_has_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlQueryResponse::GetClassData() const { return &_class_data_; }


void MysqlQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlQueryResponse*>(&to_msg);
  auto& from = static_cast<const MysqlQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_sql_statement().empty()) {
    _this->_internal_set_sql_statement(from._internal_sql_statement());
  }
  if (from._internal_has_table()) {
    _this->_internal_mutable_table()->::mysql_proxy_msg::MysqlTable::MergeFrom(
        from._internal_table());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlQueryResponse::CopyFrom(const MysqlQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryResponse::IsInitialized() const {
  return true;
}

void MysqlQueryResponse::InternalSwap(MysqlQueryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_info_, lhs_arena,
      &other->_impl_.error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_statement_, lhs_arena,
      &other->_impl_.sql_statement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlQueryResponse, _impl_.result_)
      + sizeof(MysqlQueryResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(MysqlQueryResponse, _impl_.table_)>(
          reinterpret_cast<char*>(&_impl_.table_),
          reinterpret_cast<char*>(&other->_impl_.table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[10]);
}

// ===================================================================

class MysqlMultiQueryRequest::_Internal {
 public:
};

MysqlMultiQueryRequest::MysqlMultiQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlMultiQueryRequest)
}
MysqlMultiQueryRequest::MysqlMultiQueryRequest(const MysqlMultiQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlMultiQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){from._impl_.requests_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlMultiQueryRequest)
}

inline void MysqlMultiQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MysqlMultiQueryRequest::~MysqlMultiQueryRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlMultiQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlMultiQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requests_.~RepeatedPtrField();
}

void MysqlMultiQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlMultiQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlMultiQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlMultiQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mysql_proxy_msg.MysqlQueryRequest requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlMultiQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlMultiQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlQueryRequest requests = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_requests_size()); i < n; i++) {
    const auto& repfield = this->_internal_requests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlMultiQueryRequest)
  return target;
}

size_t MysqlMultiQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlMultiQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlQueryRequest requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->_impl_.requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlMultiQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlMultiQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlMultiQueryRequest::GetClassData() const { return &_class_data_; }


void MysqlMultiQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlMultiQueryRequest*>(&to_msg);
  auto& from = static_cast<const MysqlMultiQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlMultiQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.requests_.MergeFrom(from._impl_.requests_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlMultiQueryRequest::CopyFrom(const MysqlMultiQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlMultiQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlMultiQueryRequest::IsInitialized() const {
  return true;
}

void MysqlMultiQueryRequest::InternalSwap(MysqlMultiQueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.requests_.InternalSwap(&other->_impl_.requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlMultiQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[11]);
}

// ===================================================================

class MysqlMulitQueryResponse::_Internal {
 public:
};

MysqlMulitQueryResponse::MysqlMulitQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlMulitQueryResponse)
}
MysqlMulitQueryResponse::MysqlMulitQueryResponse(const MysqlMulitQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlMulitQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlMulitQueryResponse)
}

inline void MysqlMulitQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MysqlMulitQueryResponse::~MysqlMulitQueryResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlMulitQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlMulitQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
}

void MysqlMulitQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlMulitQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlMulitQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlMulitQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mysql_proxy_msg.MysqlQueryResponse results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlMulitQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlMulitQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlQueryResponse results = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlMulitQueryResponse)
  return target;
}

size_t MysqlMulitQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlMulitQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlQueryResponse results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlMulitQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlMulitQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlMulitQueryResponse::GetClassData() const { return &_class_data_; }


void MysqlMulitQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlMulitQueryResponse*>(&to_msg);
  auto& from = static_cast<const MysqlMulitQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlMulitQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlMulitQueryResponse::CopyFrom(const MysqlMulitQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlMulitQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlMulitQueryResponse::IsInitialized() const {
  return true;
}

void MysqlMulitQueryResponse::InternalSwap(MysqlMulitQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlMulitQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[12]);
}

// ===================================================================

class MysqlInsertRequest::_Internal {
 public:
};

MysqlInsertRequest::MysqlInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlInsertRequest)
}
MysqlInsertRequest::MysqlInsertRequest(const MysqlInsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlInsertRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlInsertRequest)
}

inline void MysqlInsertRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlInsertRequest::~MysqlInsertRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlInsertRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlInsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void MysqlInsertRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlInsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlInsertRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlInsertRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlInsertRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlInsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlInsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlInsertRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlInsertRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlInsertRequest)
  return target;
}

size_t MysqlInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlInsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlInsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlInsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlInsertRequest::GetClassData() const { return &_class_data_; }


void MysqlInsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlInsertRequest*>(&to_msg);
  auto& from = static_cast<const MysqlInsertRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlInsertRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlInsertRequest::CopyFrom(const MysqlInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlInsertRequest::IsInitialized() const {
  return true;
}

void MysqlInsertRequest::InternalSwap(MysqlInsertRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlInsertRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[13]);
}

// ===================================================================

class MysqlInsertResponse::_Internal {
 public:
};

MysqlInsertResponse::MysqlInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlInsertResponse)
}
MysqlInsertResponse::MysqlInsertResponse(const MysqlInsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlInsertResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.affected_rows_){}
    , decltype(_impl_.insert_id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_info().empty()) {
    _this->_impl_.error_info_.Set(from._internal_error_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql_statement().empty()) {
    _this->_impl_.sql_statement_.Set(from._internal_sql_statement(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.affected_rows_, &from._impl_.affected_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.affected_rows_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlInsertResponse)
}

inline void MysqlInsertResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.affected_rows_){uint64_t{0u}}
    , decltype(_impl_.insert_id_){uint64_t{0u}}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlInsertResponse::~MysqlInsertResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlInsertResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlInsertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_info_.Destroy();
  _impl_.sql_statement_.Destroy();
}

void MysqlInsertResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlInsertResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_info_.ClearToEmpty();
  _impl_.sql_statement_.ClearToEmpty();
  ::memset(&_impl_.affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.affected_rows_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlInsertResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 affected_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.affected_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 insert_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.insert_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sql_statement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlInsertResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlInsertResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // uint64 affected_rows = 3;
  if (this->_internal_affected_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_affected_rows(), target);
  }

  // uint64 insert_id = 4;
  if (this->_internal_insert_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_insert_id(), target);
  }

  // bytes sql_statement = 5;
  if (!this->_internal_sql_statement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlInsertResponse)
  return target;
}

size_t MysqlInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlInsertResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 5;
  if (!this->_internal_sql_statement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // uint64 affected_rows = 3;
  if (this->_internal_affected_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_affected_rows());
  }

  // uint64 insert_id = 4;
  if (this->_internal_insert_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_insert_id());
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlInsertResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlInsertResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlInsertResponse::GetClassData() const { return &_class_data_; }


void MysqlInsertResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlInsertResponse*>(&to_msg);
  auto& from = static_cast<const MysqlInsertResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlInsertResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_sql_statement().empty()) {
    _this->_internal_set_sql_statement(from._internal_sql_statement());
  }
  if (from._internal_affected_rows() != 0) {
    _this->_internal_set_affected_rows(from._internal_affected_rows());
  }
  if (from._internal_insert_id() != 0) {
    _this->_internal_set_insert_id(from._internal_insert_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlInsertResponse::CopyFrom(const MysqlInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlInsertResponse::IsInitialized() const {
  return true;
}

void MysqlInsertResponse::InternalSwap(MysqlInsertResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_info_, lhs_arena,
      &other->_impl_.error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_statement_, lhs_arena,
      &other->_impl_.sql_statement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlInsertResponse, _impl_.result_)
      + sizeof(MysqlInsertResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(MysqlInsertResponse, _impl_.affected_rows_)>(
          reinterpret_cast<char*>(&_impl_.affected_rows_),
          reinterpret_cast<char*>(&other->_impl_.affected_rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlInsertResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[14]);
}

// ===================================================================

class MysqlUpdateRequest::_Internal {
 public:
};

MysqlUpdateRequest::MysqlUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlUpdateRequest)
}
MysqlUpdateRequest::MysqlUpdateRequest(const MysqlUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.primary_key_){from._impl_.primary_key_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlUpdateRequest)
}

inline void MysqlUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , decltype(_impl_.primary_key_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlUpdateRequest::~MysqlUpdateRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
  _impl_.primary_key_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void MysqlUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _impl_.primary_key_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlUpdateRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlUpdateRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField primary_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primary_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlUpdateRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlUpdateRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_primary_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_primary_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlUpdateRequest)
  return target;
}

size_t MysqlUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 4;
  total_size += 1UL * this->_internal_primary_key_size();
  for (const auto& msg : this->_impl_.primary_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlUpdateRequest::GetClassData() const { return &_class_data_; }


void MysqlUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlUpdateRequest*>(&to_msg);
  auto& from = static_cast<const MysqlUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_impl_.primary_key_.MergeFrom(from._impl_.primary_key_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlUpdateRequest::CopyFrom(const MysqlUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlUpdateRequest::IsInitialized() const {
  return true;
}

void MysqlUpdateRequest::InternalSwap(MysqlUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  _impl_.primary_key_.InternalSwap(&other->_impl_.primary_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[15]);
}

// ===================================================================

class MysqlUpdateResponse::_Internal {
 public:
};

MysqlUpdateResponse::MysqlUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlUpdateResponse)
}
MysqlUpdateResponse::MysqlUpdateResponse(const MysqlUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlUpdateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.affected_rows_){}
    , decltype(_impl_.insert_id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_info().empty()) {
    _this->_impl_.error_info_.Set(from._internal_error_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql_statement().empty()) {
    _this->_impl_.sql_statement_.Set(from._internal_sql_statement(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.affected_rows_, &from._impl_.affected_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.affected_rows_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlUpdateResponse)
}

inline void MysqlUpdateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.affected_rows_){uint64_t{0u}}
    , decltype(_impl_.insert_id_){uint64_t{0u}}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlUpdateResponse::~MysqlUpdateResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlUpdateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlUpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_info_.Destroy();
  _impl_.sql_statement_.Destroy();
}

void MysqlUpdateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlUpdateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_info_.ClearToEmpty();
  _impl_.sql_statement_.ClearToEmpty();
  ::memset(&_impl_.affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.affected_rows_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlUpdateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 affected_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.affected_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 insert_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.insert_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sql_statement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlUpdateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlUpdateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // uint64 affected_rows = 3;
  if (this->_internal_affected_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_affected_rows(), target);
  }

  // uint64 insert_id = 4;
  if (this->_internal_insert_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_insert_id(), target);
  }

  // bytes sql_statement = 5;
  if (!this->_internal_sql_statement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlUpdateResponse)
  return target;
}

size_t MysqlUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlUpdateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 5;
  if (!this->_internal_sql_statement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // uint64 affected_rows = 3;
  if (this->_internal_affected_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_affected_rows());
  }

  // uint64 insert_id = 4;
  if (this->_internal_insert_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_insert_id());
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlUpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlUpdateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlUpdateResponse::GetClassData() const { return &_class_data_; }


void MysqlUpdateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlUpdateResponse*>(&to_msg);
  auto& from = static_cast<const MysqlUpdateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlUpdateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_sql_statement().empty()) {
    _this->_internal_set_sql_statement(from._internal_sql_statement());
  }
  if (from._internal_affected_rows() != 0) {
    _this->_internal_set_affected_rows(from._internal_affected_rows());
  }
  if (from._internal_insert_id() != 0) {
    _this->_internal_set_insert_id(from._internal_insert_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlUpdateResponse::CopyFrom(const MysqlUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlUpdateResponse::IsInitialized() const {
  return true;
}

void MysqlUpdateResponse::InternalSwap(MysqlUpdateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_info_, lhs_arena,
      &other->_impl_.error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_statement_, lhs_arena,
      &other->_impl_.sql_statement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlUpdateResponse, _impl_.result_)
      + sizeof(MysqlUpdateResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(MysqlUpdateResponse, _impl_.affected_rows_)>(
          reinterpret_cast<char*>(&_impl_.affected_rows_),
          reinterpret_cast<char*>(&other->_impl_.affected_rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlUpdateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[16]);
}

// ===================================================================

class MysqlDeleteRequest::_Internal {
 public:
};

MysqlDeleteRequest::MysqlDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlDeleteRequest)
}
MysqlDeleteRequest::MysqlDeleteRequest(const MysqlDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlDeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_key_){from._impl_.primary_key_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDeleteRequest)
}

inline void MysqlDeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_key_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlDeleteRequest::~MysqlDeleteRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.primary_key_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void MysqlDeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.primary_key_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlDeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlDeleteRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlDeleteRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primary_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDeleteRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlDeleteRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_primary_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_primary_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDeleteRequest)
  return target;
}

size_t MysqlDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField primary_key = 3;
  total_size += 1UL * this->_internal_primary_key_size();
  for (const auto& msg : this->_impl_.primary_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlDeleteRequest::GetClassData() const { return &_class_data_; }


void MysqlDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlDeleteRequest*>(&to_msg);
  auto& from = static_cast<const MysqlDeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.primary_key_.MergeFrom(from._impl_.primary_key_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlDeleteRequest::CopyFrom(const MysqlDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDeleteRequest::IsInitialized() const {
  return true;
}

void MysqlDeleteRequest::InternalSwap(MysqlDeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.primary_key_.InternalSwap(&other->_impl_.primary_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[17]);
}

// ===================================================================

class MysqlDeleteResponse::_Internal {
 public:
};

MysqlDeleteResponse::MysqlDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlDeleteResponse)
}
MysqlDeleteResponse::MysqlDeleteResponse(const MysqlDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlDeleteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.affected_rows_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_info().empty()) {
    _this->_impl_.error_info_.Set(from._internal_error_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql_statement().empty()) {
    _this->_impl_.sql_statement_.Set(from._internal_sql_statement(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.affected_rows_, &from._impl_.affected_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.affected_rows_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlDeleteResponse)
}

inline void MysqlDeleteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.affected_rows_){uint64_t{0u}}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlDeleteResponse::~MysqlDeleteResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlDeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_info_.Destroy();
  _impl_.sql_statement_.Destroy();
}

void MysqlDeleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlDeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_info_.ClearToEmpty();
  _impl_.sql_statement_.ClearToEmpty();
  ::memset(&_impl_.affected_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.affected_rows_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlDeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 affected_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.affected_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sql_statement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlDeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlDeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // uint64 affected_rows = 3;
  if (this->_internal_affected_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_affected_rows(), target);
  }

  // bytes sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlDeleteResponse)
  return target;
}

size_t MysqlDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlDeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // uint64 affected_rows = 3;
  if (this->_internal_affected_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_affected_rows());
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlDeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlDeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlDeleteResponse::GetClassData() const { return &_class_data_; }


void MysqlDeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlDeleteResponse*>(&to_msg);
  auto& from = static_cast<const MysqlDeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlDeleteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_sql_statement().empty()) {
    _this->_internal_set_sql_statement(from._internal_sql_statement());
  }
  if (from._internal_affected_rows() != 0) {
    _this->_internal_set_affected_rows(from._internal_affected_rows());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlDeleteResponse::CopyFrom(const MysqlDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlDeleteResponse::IsInitialized() const {
  return true;
}

void MysqlDeleteResponse::InternalSwap(MysqlDeleteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_info_, lhs_arena,
      &other->_impl_.error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_statement_, lhs_arena,
      &other->_impl_.sql_statement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlDeleteResponse, _impl_.result_)
      + sizeof(MysqlDeleteResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(MysqlDeleteResponse, _impl_.affected_rows_)>(
          reinterpret_cast<char*>(&_impl_.affected_rows_),
          reinterpret_cast<char*>(&other->_impl_.affected_rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlDeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[18]);
}

// ===================================================================

class MysqlQueryByFilterRequest::_Internal {
 public:
};

MysqlQueryByFilterRequest::MysqlQueryByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlQueryByFilterRequest)
}
MysqlQueryByFilterRequest::MysqlQueryByFilterRequest(const MysqlQueryByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlQueryByFilterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){from._impl_.key_}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryByFilterRequest)
}

inline void MysqlQueryByFilterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){arena}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlQueryByFilterRequest::~MysqlQueryByFilterRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlQueryByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.~RepeatedPtrField();
  _impl_.db_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void MysqlQueryByFilterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlQueryByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.Clear();
  _impl_.db_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlQueryByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryByFilterRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryByFilterRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mysql_proxy_msg.MysqlField key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlQueryByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryByFilterRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryByFilterRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .mysql_proxy_msg.MysqlField key = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryByFilterRequest)
  return target;
}

size_t MysqlQueryByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mysql_proxy_msg.MysqlField key = 3;
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->_impl_.key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlQueryByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlQueryByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlQueryByFilterRequest::GetClassData() const { return &_class_data_; }


void MysqlQueryByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlQueryByFilterRequest*>(&to_msg);
  auto& from = static_cast<const MysqlQueryByFilterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryByFilterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_.MergeFrom(from._impl_.key_);
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlQueryByFilterRequest::CopyFrom(const MysqlQueryByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryByFilterRequest::IsInitialized() const {
  return true;
}

void MysqlQueryByFilterRequest::InternalSwap(MysqlQueryByFilterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_.InternalSwap(&other->_impl_.key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[19]);
}

// ===================================================================

class MysqlQueryAllRequest::_Internal {
 public:
};

MysqlQueryAllRequest::MysqlQueryAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlQueryAllRequest)
}
MysqlQueryAllRequest::MysqlQueryAllRequest(const MysqlQueryAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlQueryAllRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryAllRequest)
}

inline void MysqlQueryAllRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.table_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlQueryAllRequest::~MysqlQueryAllRequest() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryAllRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlQueryAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.table_name_.Destroy();
}

void MysqlQueryAllRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlQueryAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryAllRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlQueryAllRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryAllRequest.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mysql_proxy_msg.MysqlQueryAllRequest.table_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlQueryAllRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryAllRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryAllRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mysql_proxy_msg.MysqlQueryAllRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryAllRequest)
  return target;
}

size_t MysqlQueryAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryAllRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlQueryAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlQueryAllRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlQueryAllRequest::GetClassData() const { return &_class_data_; }


void MysqlQueryAllRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlQueryAllRequest*>(&to_msg);
  auto& from = static_cast<const MysqlQueryAllRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryAllRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlQueryAllRequest::CopyFrom(const MysqlQueryAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryAllRequest::IsInitialized() const {
  return true;
}

void MysqlQueryAllRequest::InternalSwap(MysqlQueryAllRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryAllRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[20]);
}

// ===================================================================

class MysqlQueryAllResponse::_Internal {
 public:
  static const ::mysql_proxy_msg::MysqlTable& table(const MysqlQueryAllResponse* msg);
};

const ::mysql_proxy_msg::MysqlTable&
MysqlQueryAllResponse::_Internal::table(const MysqlQueryAllResponse* msg) {
  return *msg->_impl_.table_;
}
MysqlQueryAllResponse::MysqlQueryAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mysql_proxy_msg.MysqlQueryAllResponse)
}
MysqlQueryAllResponse::MysqlQueryAllResponse(const MysqlQueryAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MysqlQueryAllResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_info().empty()) {
    _this->_impl_.error_info_.Set(from._internal_error_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql_statement().empty()) {
    _this->_impl_.sql_statement_.Set(from._internal_sql_statement(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::mysql_proxy_msg::MysqlTable(*from._impl_.table_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mysql_proxy_msg.MysqlQueryAllResponse)
}

inline void MysqlQueryAllResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MysqlQueryAllResponse::~MysqlQueryAllResponse() {
  // @@protoc_insertion_point(destructor:mysql_proxy_msg.MysqlQueryAllResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MysqlQueryAllResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_info_.Destroy();
  _impl_.sql_statement_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_;
}

void MysqlQueryAllResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MysqlQueryAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mysql_proxy_msg.MysqlQueryAllResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_info_.ClearToEmpty();
  _impl_.sql_statement_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlQueryAllResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mysql_proxy_msg.MysqlTable table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sql_statement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MysqlQueryAllResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_proxy_msg.MysqlQueryAllResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  // .mysql_proxy_msg.MysqlTable table = 3;
  if (this->_internal_has_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  // bytes sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sql_statement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_proxy_msg.MysqlQueryAllResponse)
  return target;
}

size_t MysqlQueryAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mysql_proxy_msg.MysqlQueryAllResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_info = 2;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error_info());
  }

  // bytes sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sql_statement());
  }

  // .mysql_proxy_msg.MysqlTable table = 3;
  if (this->_internal_has_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MysqlQueryAllResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MysqlQueryAllResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MysqlQueryAllResponse::GetClassData() const { return &_class_data_; }


void MysqlQueryAllResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MysqlQueryAllResponse*>(&to_msg);
  auto& from = static_cast<const MysqlQueryAllResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mysql_proxy_msg.MysqlQueryAllResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_sql_statement().empty()) {
    _this->_internal_set_sql_statement(from._internal_sql_statement());
  }
  if (from._internal_has_table()) {
    _this->_internal_mutable_table()->::mysql_proxy_msg::MysqlTable::MergeFrom(
        from._internal_table());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MysqlQueryAllResponse::CopyFrom(const MysqlQueryAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mysql_proxy_msg.MysqlQueryAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlQueryAllResponse::IsInitialized() const {
  return true;
}

void MysqlQueryAllResponse::InternalSwap(MysqlQueryAllResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_info_, lhs_arena,
      &other->_impl_.error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_statement_, lhs_arena,
      &other->_impl_.sql_statement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MysqlQueryAllResponse, _impl_.result_)
      + sizeof(MysqlQueryAllResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(MysqlQueryAllResponse, _impl_.table_)>(
          reinterpret_cast<char*>(&_impl_.table_),
          reinterpret_cast<char*>(&other->_impl_.table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlQueryAllResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mysql_5fproxy_5fmsg_2eproto_getter, &descriptor_table_mysql_5fproxy_5fmsg_2eproto_once,
      file_level_metadata_mysql_5fproxy_5fmsg_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mysql_proxy_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlValue*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlField*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlField >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlRow*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlRow >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlTable*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlTable >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescribeRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlDescribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescField*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlDescField >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescTable*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlDescTable >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlDescribeResponse_TablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDescribeResponse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDescribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlDescribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryResponse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlMultiQueryRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlMultiQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlMultiQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlMulitQueryResponse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlMulitQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlMulitQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlInsertRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlInsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlInsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlInsertResponse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlInsertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlInsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlUpdateRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlUpdateResponse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDeleteRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlDeleteResponse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryByFilterRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlQueryByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryAllRequest*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlQueryAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mysql_proxy_msg::MysqlQueryAllResponse*
Arena::CreateMaybeMessage< ::mysql_proxy_msg::MysqlQueryAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mysql_proxy_msg::MysqlQueryAllResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
