// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fmsg_2eproto;
namespace rpc_msg {
class CHANNEL;
class CHANNELDefaultTypeInternal;
extern CHANNELDefaultTypeInternal _CHANNEL_default_instance_;
class CLIENT_IDENTIFIER;
class CLIENT_IDENTIFIERDefaultTypeInternal;
extern CLIENT_IDENTIFIERDefaultTypeInternal _CLIENT_IDENTIFIER_default_instance_;
class CONTROLLER;
class CONTROLLERDefaultTypeInternal;
extern CONTROLLERDefaultTypeInternal _CONTROLLER_default_instance_;
class MSG_RPC_REQUEST_ECHO;
class MSG_RPC_REQUEST_ECHODefaultTypeInternal;
extern MSG_RPC_REQUEST_ECHODefaultTypeInternal _MSG_RPC_REQUEST_ECHO_default_instance_;
class MSG_RPC_RESPONSE_ECHO;
class MSG_RPC_RESPONSE_ECHODefaultTypeInternal;
extern MSG_RPC_RESPONSE_ECHODefaultTypeInternal _MSG_RPC_RESPONSE_ECHO_default_instance_;
class PRC_DeMultiplexer_Forward;
class PRC_DeMultiplexer_ForwardDefaultTypeInternal;
extern PRC_DeMultiplexer_ForwardDefaultTypeInternal _PRC_DeMultiplexer_Forward_default_instance_;
class PRC_Multiplexer_Forward;
class PRC_Multiplexer_ForwardDefaultTypeInternal;
extern PRC_Multiplexer_ForwardDefaultTypeInternal _PRC_Multiplexer_Forward_default_instance_;
class RPC_REQUEST;
class RPC_REQUESTDefaultTypeInternal;
extern RPC_REQUESTDefaultTypeInternal _RPC_REQUEST_default_instance_;
class RPC_RESPONSE;
class RPC_RESPONSEDefaultTypeInternal;
extern RPC_RESPONSEDefaultTypeInternal _RPC_RESPONSE_default_instance_;
class RoleIdentifier;
class RoleIdentifierDefaultTypeInternal;
extern RoleIdentifierDefaultTypeInternal _RoleIdentifier_default_instance_;
class SERVER_IDENTIFIER;
class SERVER_IDENTIFIERDefaultTypeInternal;
extern SERVER_IDENTIFIERDefaultTypeInternal _SERVER_IDENTIFIER_default_instance_;
class STATUS;
class STATUSDefaultTypeInternal;
extern STATUSDefaultTypeInternal _STATUS_default_instance_;
}  // namespace rpc_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::rpc_msg::CHANNEL* Arena::CreateMaybeMessage<::rpc_msg::CHANNEL>(Arena*);
template<> ::rpc_msg::CLIENT_IDENTIFIER* Arena::CreateMaybeMessage<::rpc_msg::CLIENT_IDENTIFIER>(Arena*);
template<> ::rpc_msg::CONTROLLER* Arena::CreateMaybeMessage<::rpc_msg::CONTROLLER>(Arena*);
template<> ::rpc_msg::MSG_RPC_REQUEST_ECHO* Arena::CreateMaybeMessage<::rpc_msg::MSG_RPC_REQUEST_ECHO>(Arena*);
template<> ::rpc_msg::MSG_RPC_RESPONSE_ECHO* Arena::CreateMaybeMessage<::rpc_msg::MSG_RPC_RESPONSE_ECHO>(Arena*);
template<> ::rpc_msg::PRC_DeMultiplexer_Forward* Arena::CreateMaybeMessage<::rpc_msg::PRC_DeMultiplexer_Forward>(Arena*);
template<> ::rpc_msg::PRC_Multiplexer_Forward* Arena::CreateMaybeMessage<::rpc_msg::PRC_Multiplexer_Forward>(Arena*);
template<> ::rpc_msg::RPC_REQUEST* Arena::CreateMaybeMessage<::rpc_msg::RPC_REQUEST>(Arena*);
template<> ::rpc_msg::RPC_RESPONSE* Arena::CreateMaybeMessage<::rpc_msg::RPC_RESPONSE>(Arena*);
template<> ::rpc_msg::RoleIdentifier* Arena::CreateMaybeMessage<::rpc_msg::RoleIdentifier>(Arena*);
template<> ::rpc_msg::SERVER_IDENTIFIER* Arena::CreateMaybeMessage<::rpc_msg::SERVER_IDENTIFIER>(Arena*);
template<> ::rpc_msg::STATUS* Arena::CreateMaybeMessage<::rpc_msg::STATUS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpc_msg {

enum RPC_OPCODES : int {
  RPC_None = 0,
  RPC_EchoTest = 1,
  RPC_MysqlDescTable = 401,
  RPC_MysqlQuery = 402,
  RPC_MysqlInsert = 403,
  RPC_MysqlUpdate = 404,
  RPC_MysqlDelete = 405,
  RPC_MysqlQueryByFilter = 406,
  RPC_MysqlMultiQuery = 407,
  RPC_L2G_LoginPending = 1001,
  RPC_OPCODES_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RPC_OPCODES_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RPC_OPCODES_IsValid(int value);
constexpr RPC_OPCODES RPC_OPCODES_MIN = RPC_None;
constexpr RPC_OPCODES RPC_OPCODES_MAX = RPC_L2G_LoginPending;
constexpr int RPC_OPCODES_ARRAYSIZE = RPC_OPCODES_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_OPCODES_descriptor();
template<typename T>
inline const std::string& RPC_OPCODES_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RPC_OPCODES>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RPC_OPCODES_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RPC_OPCODES_descriptor(), enum_t_value);
}
inline bool RPC_OPCODES_Parse(
    const std::string& name, RPC_OPCODES* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RPC_OPCODES>(
    RPC_OPCODES_descriptor(), name, value);
}
enum RPC_CODE : int {
  CODE_Ok = 0,
  CODE_Ok_Async = 1,
  CODE_Timeout = 100,
  CODE_Unregister = 101,
  CODE_ParseError = 102,
  CODE_ErrorServerPost = 103,
  CODE_RouteNotLinkToServer = 104,
  CODE_RouteSendToServerError = 105,
  CODE_OpcodeUnregister = 106,
  CODE_CreateMsgError = 107,
  CODE_LogicThreadNull = 108,
  CODE_NotReceivedReply = 109,
  CODE_NotSend = 110,
  CODE_LoadFromDbError = 111,
  CODE_DirtyFlagZero = 112,
  CODE_QueryError = 113,
  CODE_TableNameNotExistError = 114,
  CODE_GenerateQuerySQLError = 115,
  CODE_NotMatchedResultError = 116,
  RPC_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RPC_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RPC_CODE_IsValid(int value);
constexpr RPC_CODE RPC_CODE_MIN = CODE_Ok;
constexpr RPC_CODE RPC_CODE_MAX = CODE_NotMatchedResultError;
constexpr int RPC_CODE_ARRAYSIZE = RPC_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_CODE_descriptor();
template<typename T>
inline const std::string& RPC_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RPC_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RPC_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RPC_CODE_descriptor(), enum_t_value);
}
inline bool RPC_CODE_Parse(
    const std::string& name, RPC_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RPC_CODE>(
    RPC_CODE_descriptor(), name, value);
}
// ===================================================================

class CHANNEL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.CHANNEL) */ {
 public:
  CHANNEL();
  virtual ~CHANNEL();

  CHANNEL(const CHANNEL& from);
  CHANNEL(CHANNEL&& from) noexcept
    : CHANNEL() {
    *this = ::std::move(from);
  }

  inline CHANNEL& operator=(const CHANNEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHANNEL& operator=(CHANNEL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHANNEL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHANNEL* internal_default_instance() {
    return reinterpret_cast<const CHANNEL*>(
               &_CHANNEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHANNEL& a, CHANNEL& b) {
    a.Swap(&b);
  }
  inline void Swap(CHANNEL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHANNEL* New() const final {
    return CreateMaybeMessage<CHANNEL>(nullptr);
  }

  CHANNEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHANNEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHANNEL& from);
  void MergeFrom(const CHANNEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHANNEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.CHANNEL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealmFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // uint32 realm = 1;
  void clear_realm();
  ::PROTOBUF_NAMESPACE_ID::uint32 realm() const;
  void set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_realm() const;
  void _internal_set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.CHANNEL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 realm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CONTROLLER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.CONTROLLER) */ {
 public:
  CONTROLLER();
  virtual ~CONTROLLER();

  CONTROLLER(const CONTROLLER& from);
  CONTROLLER(CONTROLLER&& from) noexcept
    : CONTROLLER() {
    *this = ::std::move(from);
  }

  inline CONTROLLER& operator=(const CONTROLLER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CONTROLLER& operator=(CONTROLLER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CONTROLLER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CONTROLLER* internal_default_instance() {
    return reinterpret_cast<const CONTROLLER*>(
               &_CONTROLLER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CONTROLLER& a, CONTROLLER& b) {
    a.Swap(&b);
  }
  inline void Swap(CONTROLLER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CONTROLLER* New() const final {
    return CreateMaybeMessage<CONTROLLER>(nullptr);
  }

  CONTROLLER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CONTROLLER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CONTROLLER& from);
  void MergeFrom(const CONTROLLER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CONTROLLER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.CONTROLLER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqIdFieldNumber = 1,
    kTimeoutMsFieldNumber = 2,
    kServerStreamFieldNumber = 3,
  };
  // uint64 seq_id = 1;
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timeout_ms = 2;
  void clear_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_ms() const;
  void set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout_ms() const;
  void _internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool server_stream = 3;
  void clear_server_stream();
  bool server_stream() const;
  void set_server_stream(bool value);
  private:
  bool _internal_server_stream() const;
  void _internal_set_server_stream(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.CONTROLLER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_ms_;
  bool server_stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class RoleIdentifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.RoleIdentifier) */ {
 public:
  RoleIdentifier();
  virtual ~RoleIdentifier();

  RoleIdentifier(const RoleIdentifier& from);
  RoleIdentifier(RoleIdentifier&& from) noexcept
    : RoleIdentifier() {
    *this = ::std::move(from);
  }

  inline RoleIdentifier& operator=(const RoleIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleIdentifier& operator=(RoleIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleIdentifier* internal_default_instance() {
    return reinterpret_cast<const RoleIdentifier*>(
               &_RoleIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoleIdentifier& a, RoleIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleIdentifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleIdentifier* New() const final {
    return CreateMaybeMessage<RoleIdentifier>(nullptr);
  }

  RoleIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleIdentifier& from);
  void MergeFrom(const RoleIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.RoleIdentifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGwIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // .rpc_msg.CHANNEL gw_id = 2;
  bool has_gw_id() const;
  private:
  bool _internal_has_gw_id() const;
  public:
  void clear_gw_id();
  const ::rpc_msg::CHANNEL& gw_id() const;
  ::rpc_msg::CHANNEL* release_gw_id();
  ::rpc_msg::CHANNEL* mutable_gw_id();
  void set_allocated_gw_id(::rpc_msg::CHANNEL* gw_id);
  private:
  const ::rpc_msg::CHANNEL& _internal_gw_id() const;
  ::rpc_msg::CHANNEL* _internal_mutable_gw_id();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.RoleIdentifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::rpc_msg::CHANNEL* gw_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CLIENT_IDENTIFIER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.CLIENT_IDENTIFIER) */ {
 public:
  CLIENT_IDENTIFIER();
  virtual ~CLIENT_IDENTIFIER();

  CLIENT_IDENTIFIER(const CLIENT_IDENTIFIER& from);
  CLIENT_IDENTIFIER(CLIENT_IDENTIFIER&& from) noexcept
    : CLIENT_IDENTIFIER() {
    *this = ::std::move(from);
  }

  inline CLIENT_IDENTIFIER& operator=(const CLIENT_IDENTIFIER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLIENT_IDENTIFIER& operator=(CLIENT_IDENTIFIER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLIENT_IDENTIFIER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLIENT_IDENTIFIER* internal_default_instance() {
    return reinterpret_cast<const CLIENT_IDENTIFIER*>(
               &_CLIENT_IDENTIFIER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CLIENT_IDENTIFIER& a, CLIENT_IDENTIFIER& b) {
    a.Swap(&b);
  }
  inline void Swap(CLIENT_IDENTIFIER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLIENT_IDENTIFIER* New() const final {
    return CreateMaybeMessage<CLIENT_IDENTIFIER>(nullptr);
  }

  CLIENT_IDENTIFIER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLIENT_IDENTIFIER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLIENT_IDENTIFIER& from);
  void MergeFrom(const CLIENT_IDENTIFIER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLIENT_IDENTIFIER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.CLIENT_IDENTIFIER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStubFieldNumber = 1,
    kSeqIdFieldNumber = 2,
    kRequiredReplyFieldNumber = 3,
  };
  // .rpc_msg.CHANNEL stub = 1;
  bool has_stub() const;
  private:
  bool _internal_has_stub() const;
  public:
  void clear_stub();
  const ::rpc_msg::CHANNEL& stub() const;
  ::rpc_msg::CHANNEL* release_stub();
  ::rpc_msg::CHANNEL* mutable_stub();
  void set_allocated_stub(::rpc_msg::CHANNEL* stub);
  private:
  const ::rpc_msg::CHANNEL& _internal_stub() const;
  ::rpc_msg::CHANNEL* _internal_mutable_stub();
  public:

  // uint64 seq_id = 2;
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool required_reply = 3;
  void clear_required_reply();
  bool required_reply() const;
  void set_required_reply(bool value);
  private:
  bool _internal_required_reply() const;
  void _internal_set_required_reply(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.CLIENT_IDENTIFIER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::rpc_msg::CHANNEL* stub_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id_;
  bool required_reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class SERVER_IDENTIFIER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.SERVER_IDENTIFIER) */ {
 public:
  SERVER_IDENTIFIER();
  virtual ~SERVER_IDENTIFIER();

  SERVER_IDENTIFIER(const SERVER_IDENTIFIER& from);
  SERVER_IDENTIFIER(SERVER_IDENTIFIER&& from) noexcept
    : SERVER_IDENTIFIER() {
    *this = ::std::move(from);
  }

  inline SERVER_IDENTIFIER& operator=(const SERVER_IDENTIFIER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SERVER_IDENTIFIER& operator=(SERVER_IDENTIFIER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SERVER_IDENTIFIER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SERVER_IDENTIFIER* internal_default_instance() {
    return reinterpret_cast<const SERVER_IDENTIFIER*>(
               &_SERVER_IDENTIFIER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SERVER_IDENTIFIER& a, SERVER_IDENTIFIER& b) {
    a.Swap(&b);
  }
  inline void Swap(SERVER_IDENTIFIER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SERVER_IDENTIFIER* New() const final {
    return CreateMaybeMessage<SERVER_IDENTIFIER>(nullptr);
  }

  SERVER_IDENTIFIER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SERVER_IDENTIFIER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SERVER_IDENTIFIER& from);
  void MergeFrom(const SERVER_IDENTIFIER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SERVER_IDENTIFIER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.SERVER_IDENTIFIER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStubFieldNumber = 1,
  };
  // .rpc_msg.CHANNEL stub = 1;
  bool has_stub() const;
  private:
  bool _internal_has_stub() const;
  public:
  void clear_stub();
  const ::rpc_msg::CHANNEL& stub() const;
  ::rpc_msg::CHANNEL* release_stub();
  ::rpc_msg::CHANNEL* mutable_stub();
  void set_allocated_stub(::rpc_msg::CHANNEL* stub);
  private:
  const ::rpc_msg::CHANNEL& _internal_stub() const;
  ::rpc_msg::CHANNEL* _internal_mutable_stub();
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.SERVER_IDENTIFIER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::rpc_msg::CHANNEL* stub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class RPC_REQUEST :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.RPC_REQUEST) */ {
 public:
  RPC_REQUEST();
  virtual ~RPC_REQUEST();

  RPC_REQUEST(const RPC_REQUEST& from);
  RPC_REQUEST(RPC_REQUEST&& from) noexcept
    : RPC_REQUEST() {
    *this = ::std::move(from);
  }

  inline RPC_REQUEST& operator=(const RPC_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_REQUEST& operator=(RPC_REQUEST&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC_REQUEST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC_REQUEST* internal_default_instance() {
    return reinterpret_cast<const RPC_REQUEST*>(
               &_RPC_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RPC_REQUEST& a, RPC_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC_REQUEST* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPC_REQUEST* New() const final {
    return CreateMaybeMessage<RPC_REQUEST>(nullptr);
  }

  RPC_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC_REQUEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC_REQUEST& from);
  void MergeFrom(const RPC_REQUEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_REQUEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.RPC_REQUEST";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsDataFieldNumber = 5,
    kClientFieldNumber = 1,
    kServerFieldNumber = 2,
    kServerStreamFieldNumber = 3,
    kOpcodesFieldNumber = 4,
  };
  // bytes args_data = 5;
  void clear_args_data();
  const std::string& args_data() const;
  void set_args_data(const std::string& value);
  void set_args_data(std::string&& value);
  void set_args_data(const char* value);
  void set_args_data(const void* value, size_t size);
  std::string* mutable_args_data();
  std::string* release_args_data();
  void set_allocated_args_data(std::string* args_data);
  private:
  const std::string& _internal_args_data() const;
  void _internal_set_args_data(const std::string& value);
  std::string* _internal_mutable_args_data();
  public:

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::rpc_msg::CLIENT_IDENTIFIER& client() const;
  ::rpc_msg::CLIENT_IDENTIFIER* release_client();
  ::rpc_msg::CLIENT_IDENTIFIER* mutable_client();
  void set_allocated_client(::rpc_msg::CLIENT_IDENTIFIER* client);
  private:
  const ::rpc_msg::CLIENT_IDENTIFIER& _internal_client() const;
  ::rpc_msg::CLIENT_IDENTIFIER* _internal_mutable_client();
  public:

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::rpc_msg::SERVER_IDENTIFIER& server() const;
  ::rpc_msg::SERVER_IDENTIFIER* release_server();
  ::rpc_msg::SERVER_IDENTIFIER* mutable_server();
  void set_allocated_server(::rpc_msg::SERVER_IDENTIFIER* server);
  private:
  const ::rpc_msg::SERVER_IDENTIFIER& _internal_server() const;
  ::rpc_msg::SERVER_IDENTIFIER* _internal_mutable_server();
  public:

  // bool server_stream = 3;
  void clear_server_stream();
  bool server_stream() const;
  void set_server_stream(bool value);
  private:
  bool _internal_server_stream() const;
  void _internal_set_server_stream(bool value);
  public:

  // .rpc_msg.RPC_OPCODES opcodes = 4;
  void clear_opcodes();
  ::rpc_msg::RPC_OPCODES opcodes() const;
  void set_opcodes(::rpc_msg::RPC_OPCODES value);
  private:
  ::rpc_msg::RPC_OPCODES _internal_opcodes() const;
  void _internal_set_opcodes(::rpc_msg::RPC_OPCODES value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.RPC_REQUEST)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_data_;
  ::rpc_msg::CLIENT_IDENTIFIER* client_;
  ::rpc_msg::SERVER_IDENTIFIER* server_;
  bool server_stream_;
  int opcodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class STATUS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.STATUS) */ {
 public:
  STATUS();
  virtual ~STATUS();

  STATUS(const STATUS& from);
  STATUS(STATUS&& from) noexcept
    : STATUS() {
    *this = ::std::move(from);
  }

  inline STATUS& operator=(const STATUS& from) {
    CopyFrom(from);
    return *this;
  }
  inline STATUS& operator=(STATUS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STATUS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STATUS* internal_default_instance() {
    return reinterpret_cast<const STATUS*>(
               &_STATUS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(STATUS& a, STATUS& b) {
    a.Swap(&b);
  }
  inline void Swap(STATUS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STATUS* New() const final {
    return CreateMaybeMessage<STATUS>(nullptr);
  }

  STATUS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STATUS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STATUS& from);
  void MergeFrom(const STATUS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STATUS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.STATUS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.STATUS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class RPC_RESPONSE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.RPC_RESPONSE) */ {
 public:
  RPC_RESPONSE();
  virtual ~RPC_RESPONSE();

  RPC_RESPONSE(const RPC_RESPONSE& from);
  RPC_RESPONSE(RPC_RESPONSE&& from) noexcept
    : RPC_RESPONSE() {
    *this = ::std::move(from);
  }

  inline RPC_RESPONSE& operator=(const RPC_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_RESPONSE& operator=(RPC_RESPONSE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const RPC_RESPONSE*>(
               &_RPC_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RPC_RESPONSE& a, RPC_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC_RESPONSE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPC_RESPONSE* New() const final {
    return CreateMaybeMessage<RPC_RESPONSE>(nullptr);
  }

  RPC_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC_RESPONSE& from);
  void MergeFrom(const RPC_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.RPC_RESPONSE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultDataFieldNumber = 6,
    kClientFieldNumber = 1,
    kServerFieldNumber = 2,
    kStatusFieldNumber = 3,
    kHasMoreFieldNumber = 4,
    kOffsetFieldNumber = 5,
  };
  // bytes result_data = 6;
  void clear_result_data();
  const std::string& result_data() const;
  void set_result_data(const std::string& value);
  void set_result_data(std::string&& value);
  void set_result_data(const char* value);
  void set_result_data(const void* value, size_t size);
  std::string* mutable_result_data();
  std::string* release_result_data();
  void set_allocated_result_data(std::string* result_data);
  private:
  const std::string& _internal_result_data() const;
  void _internal_set_result_data(const std::string& value);
  std::string* _internal_mutable_result_data();
  public:

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::rpc_msg::CLIENT_IDENTIFIER& client() const;
  ::rpc_msg::CLIENT_IDENTIFIER* release_client();
  ::rpc_msg::CLIENT_IDENTIFIER* mutable_client();
  void set_allocated_client(::rpc_msg::CLIENT_IDENTIFIER* client);
  private:
  const ::rpc_msg::CLIENT_IDENTIFIER& _internal_client() const;
  ::rpc_msg::CLIENT_IDENTIFIER* _internal_mutable_client();
  public:

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::rpc_msg::SERVER_IDENTIFIER& server() const;
  ::rpc_msg::SERVER_IDENTIFIER* release_server();
  ::rpc_msg::SERVER_IDENTIFIER* mutable_server();
  void set_allocated_server(::rpc_msg::SERVER_IDENTIFIER* server);
  private:
  const ::rpc_msg::SERVER_IDENTIFIER& _internal_server() const;
  ::rpc_msg::SERVER_IDENTIFIER* _internal_mutable_server();
  public:

  // .rpc_msg.STATUS status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::rpc_msg::STATUS& status() const;
  ::rpc_msg::STATUS* release_status();
  ::rpc_msg::STATUS* mutable_status();
  void set_allocated_status(::rpc_msg::STATUS* status);
  private:
  const ::rpc_msg::STATUS& _internal_status() const;
  ::rpc_msg::STATUS* _internal_mutable_status();
  public:

  // bool has_more = 4;
  void clear_has_more();
  bool has_more() const;
  void set_has_more(bool value);
  private:
  bool _internal_has_more() const;
  void _internal_set_has_more(bool value);
  public:

  // uint32 offset = 5;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.RPC_RESPONSE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_data_;
  ::rpc_msg::CLIENT_IDENTIFIER* client_;
  ::rpc_msg::SERVER_IDENTIFIER* server_;
  ::rpc_msg::STATUS* status_;
  bool has_more_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class PRC_Multiplexer_Forward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.PRC_Multiplexer_Forward) */ {
 public:
  PRC_Multiplexer_Forward();
  virtual ~PRC_Multiplexer_Forward();

  PRC_Multiplexer_Forward(const PRC_Multiplexer_Forward& from);
  PRC_Multiplexer_Forward(PRC_Multiplexer_Forward&& from) noexcept
    : PRC_Multiplexer_Forward() {
    *this = ::std::move(from);
  }

  inline PRC_Multiplexer_Forward& operator=(const PRC_Multiplexer_Forward& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRC_Multiplexer_Forward& operator=(PRC_Multiplexer_Forward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PRC_Multiplexer_Forward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PRC_Multiplexer_Forward* internal_default_instance() {
    return reinterpret_cast<const PRC_Multiplexer_Forward*>(
               &_PRC_Multiplexer_Forward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PRC_Multiplexer_Forward& a, PRC_Multiplexer_Forward& b) {
    a.Swap(&b);
  }
  inline void Swap(PRC_Multiplexer_Forward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PRC_Multiplexer_Forward* New() const final {
    return CreateMaybeMessage<PRC_Multiplexer_Forward>(nullptr);
  }

  PRC_Multiplexer_Forward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PRC_Multiplexer_Forward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PRC_Multiplexer_Forward& from);
  void MergeFrom(const PRC_Multiplexer_Forward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRC_Multiplexer_Forward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.PRC_Multiplexer_Forward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyMsgFieldNumber = 3,
    kRoleFieldNumber = 1,
    kOpcodesFieldNumber = 2,
  };
  // bytes body_msg = 3;
  void clear_body_msg();
  const std::string& body_msg() const;
  void set_body_msg(const std::string& value);
  void set_body_msg(std::string&& value);
  void set_body_msg(const char* value);
  void set_body_msg(const void* value, size_t size);
  std::string* mutable_body_msg();
  std::string* release_body_msg();
  void set_allocated_body_msg(std::string* body_msg);
  private:
  const std::string& _internal_body_msg() const;
  void _internal_set_body_msg(const std::string& value);
  std::string* _internal_mutable_body_msg();
  public:

  // .rpc_msg.RoleIdentifier role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::rpc_msg::RoleIdentifier& role() const;
  ::rpc_msg::RoleIdentifier* release_role();
  ::rpc_msg::RoleIdentifier* mutable_role();
  void set_allocated_role(::rpc_msg::RoleIdentifier* role);
  private:
  const ::rpc_msg::RoleIdentifier& _internal_role() const;
  ::rpc_msg::RoleIdentifier* _internal_mutable_role();
  public:

  // uint32 opcodes = 2;
  void clear_opcodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcodes() const;
  void set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcodes() const;
  void _internal_set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.PRC_Multiplexer_Forward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_msg_;
  ::rpc_msg::RoleIdentifier* role_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class PRC_DeMultiplexer_Forward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.PRC_DeMultiplexer_Forward) */ {
 public:
  PRC_DeMultiplexer_Forward();
  virtual ~PRC_DeMultiplexer_Forward();

  PRC_DeMultiplexer_Forward(const PRC_DeMultiplexer_Forward& from);
  PRC_DeMultiplexer_Forward(PRC_DeMultiplexer_Forward&& from) noexcept
    : PRC_DeMultiplexer_Forward() {
    *this = ::std::move(from);
  }

  inline PRC_DeMultiplexer_Forward& operator=(const PRC_DeMultiplexer_Forward& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRC_DeMultiplexer_Forward& operator=(PRC_DeMultiplexer_Forward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PRC_DeMultiplexer_Forward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PRC_DeMultiplexer_Forward* internal_default_instance() {
    return reinterpret_cast<const PRC_DeMultiplexer_Forward*>(
               &_PRC_DeMultiplexer_Forward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PRC_DeMultiplexer_Forward& a, PRC_DeMultiplexer_Forward& b) {
    a.Swap(&b);
  }
  inline void Swap(PRC_DeMultiplexer_Forward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PRC_DeMultiplexer_Forward* New() const final {
    return CreateMaybeMessage<PRC_DeMultiplexer_Forward>(nullptr);
  }

  PRC_DeMultiplexer_Forward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PRC_DeMultiplexer_Forward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PRC_DeMultiplexer_Forward& from);
  void MergeFrom(const PRC_DeMultiplexer_Forward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRC_DeMultiplexer_Forward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.PRC_DeMultiplexer_Forward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyMsgFieldNumber = 3,
    kRoleFieldNumber = 1,
    kOpcodesFieldNumber = 2,
  };
  // bytes body_msg = 3;
  void clear_body_msg();
  const std::string& body_msg() const;
  void set_body_msg(const std::string& value);
  void set_body_msg(std::string&& value);
  void set_body_msg(const char* value);
  void set_body_msg(const void* value, size_t size);
  std::string* mutable_body_msg();
  std::string* release_body_msg();
  void set_allocated_body_msg(std::string* body_msg);
  private:
  const std::string& _internal_body_msg() const;
  void _internal_set_body_msg(const std::string& value);
  std::string* _internal_mutable_body_msg();
  public:

  // .rpc_msg.RoleIdentifier role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::rpc_msg::RoleIdentifier& role() const;
  ::rpc_msg::RoleIdentifier* release_role();
  ::rpc_msg::RoleIdentifier* mutable_role();
  void set_allocated_role(::rpc_msg::RoleIdentifier* role);
  private:
  const ::rpc_msg::RoleIdentifier& _internal_role() const;
  ::rpc_msg::RoleIdentifier* _internal_mutable_role();
  public:

  // uint32 opcodes = 2;
  void clear_opcodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcodes() const;
  void set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcodes() const;
  void _internal_set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.PRC_DeMultiplexer_Forward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_msg_;
  ::rpc_msg::RoleIdentifier* role_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RPC_REQUEST_ECHO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.MSG_RPC_REQUEST_ECHO) */ {
 public:
  MSG_RPC_REQUEST_ECHO();
  virtual ~MSG_RPC_REQUEST_ECHO();

  MSG_RPC_REQUEST_ECHO(const MSG_RPC_REQUEST_ECHO& from);
  MSG_RPC_REQUEST_ECHO(MSG_RPC_REQUEST_ECHO&& from) noexcept
    : MSG_RPC_REQUEST_ECHO() {
    *this = ::std::move(from);
  }

  inline MSG_RPC_REQUEST_ECHO& operator=(const MSG_RPC_REQUEST_ECHO& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RPC_REQUEST_ECHO& operator=(MSG_RPC_REQUEST_ECHO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RPC_REQUEST_ECHO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RPC_REQUEST_ECHO* internal_default_instance() {
    return reinterpret_cast<const MSG_RPC_REQUEST_ECHO*>(
               &_MSG_RPC_REQUEST_ECHO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_RPC_REQUEST_ECHO& a, MSG_RPC_REQUEST_ECHO& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RPC_REQUEST_ECHO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RPC_REQUEST_ECHO* New() const final {
    return CreateMaybeMessage<MSG_RPC_REQUEST_ECHO>(nullptr);
  }

  MSG_RPC_REQUEST_ECHO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RPC_REQUEST_ECHO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RPC_REQUEST_ECHO& from);
  void MergeFrom(const MSG_RPC_REQUEST_ECHO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RPC_REQUEST_ECHO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.MSG_RPC_REQUEST_ECHO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  void set_value2(const std::string& value);
  void set_value2(std::string&& value);
  void set_value2(const char* value);
  void set_value2(const char* value, size_t size);
  std::string* mutable_value2();
  std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::uint64 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.MSG_RPC_REQUEST_ECHO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RPC_RESPONSE_ECHO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc_msg.MSG_RPC_RESPONSE_ECHO) */ {
 public:
  MSG_RPC_RESPONSE_ECHO();
  virtual ~MSG_RPC_RESPONSE_ECHO();

  MSG_RPC_RESPONSE_ECHO(const MSG_RPC_RESPONSE_ECHO& from);
  MSG_RPC_RESPONSE_ECHO(MSG_RPC_RESPONSE_ECHO&& from) noexcept
    : MSG_RPC_RESPONSE_ECHO() {
    *this = ::std::move(from);
  }

  inline MSG_RPC_RESPONSE_ECHO& operator=(const MSG_RPC_RESPONSE_ECHO& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RPC_RESPONSE_ECHO& operator=(MSG_RPC_RESPONSE_ECHO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RPC_RESPONSE_ECHO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RPC_RESPONSE_ECHO* internal_default_instance() {
    return reinterpret_cast<const MSG_RPC_RESPONSE_ECHO*>(
               &_MSG_RPC_RESPONSE_ECHO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_RPC_RESPONSE_ECHO& a, MSG_RPC_RESPONSE_ECHO& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RPC_RESPONSE_ECHO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RPC_RESPONSE_ECHO* New() const final {
    return CreateMaybeMessage<MSG_RPC_RESPONSE_ECHO>(nullptr);
  }

  MSG_RPC_RESPONSE_ECHO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RPC_RESPONSE_ECHO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RPC_RESPONSE_ECHO& from);
  void MergeFrom(const MSG_RPC_RESPONSE_ECHO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RPC_RESPONSE_ECHO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc_msg.MSG_RPC_RESPONSE_ECHO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValue2FieldNumber = 2,
    kValue1FieldNumber = 1,
  };
  // string value2 = 2;
  void clear_value2();
  const std::string& value2() const;
  void set_value2(const std::string& value);
  void set_value2(std::string&& value);
  void set_value2(const char* value);
  void set_value2(const char* value, size_t size);
  std::string* mutable_value2();
  std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // uint64 value1 = 1;
  void clear_value1();
  ::PROTOBUF_NAMESPACE_ID::uint64 value1() const;
  void set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value1() const;
  void _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc_msg.MSG_RPC_RESPONSE_ECHO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHANNEL

// uint32 realm = 1;
inline void CHANNEL::clear_realm() {
  realm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CHANNEL::_internal_realm() const {
  return realm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CHANNEL::realm() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CHANNEL.realm)
  return _internal_realm();
}
inline void CHANNEL::_internal_set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  realm_ = value;
}
inline void CHANNEL::set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CHANNEL.realm)
}

// uint32 type = 2;
inline void CHANNEL::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CHANNEL::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CHANNEL::type() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CHANNEL.type)
  return _internal_type();
}
inline void CHANNEL::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void CHANNEL::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CHANNEL.type)
}

// uint32 id = 3;
inline void CHANNEL::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CHANNEL::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CHANNEL::id() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CHANNEL.id)
  return _internal_id();
}
inline void CHANNEL::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CHANNEL::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CHANNEL.id)
}

// -------------------------------------------------------------------

// CONTROLLER

// uint64 seq_id = 1;
inline void CONTROLLER::clear_seq_id() {
  seq_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CONTROLLER::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CONTROLLER::seq_id() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CONTROLLER.seq_id)
  return _internal_seq_id();
}
inline void CONTROLLER::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_id_ = value;
}
inline void CONTROLLER::set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CONTROLLER.seq_id)
}

// uint64 timeout_ms = 2;
inline void CONTROLLER::clear_timeout_ms() {
  timeout_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CONTROLLER::_internal_timeout_ms() const {
  return timeout_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CONTROLLER::timeout_ms() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CONTROLLER.timeout_ms)
  return _internal_timeout_ms();
}
inline void CONTROLLER::_internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeout_ms_ = value;
}
inline void CONTROLLER::set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CONTROLLER.timeout_ms)
}

// bool server_stream = 3;
inline void CONTROLLER::clear_server_stream() {
  server_stream_ = false;
}
inline bool CONTROLLER::_internal_server_stream() const {
  return server_stream_;
}
inline bool CONTROLLER::server_stream() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CONTROLLER.server_stream)
  return _internal_server_stream();
}
inline void CONTROLLER::_internal_set_server_stream(bool value) {
  
  server_stream_ = value;
}
inline void CONTROLLER::set_server_stream(bool value) {
  _internal_set_server_stream(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CONTROLLER.server_stream)
}

// -------------------------------------------------------------------

// RoleIdentifier

// uint64 user_id = 1;
inline void RoleIdentifier::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleIdentifier::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleIdentifier::user_id() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RoleIdentifier.user_id)
  return _internal_user_id();
}
inline void RoleIdentifier::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void RoleIdentifier::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:rpc_msg.RoleIdentifier.user_id)
}

// .rpc_msg.CHANNEL gw_id = 2;
inline bool RoleIdentifier::_internal_has_gw_id() const {
  return this != internal_default_instance() && gw_id_ != nullptr;
}
inline bool RoleIdentifier::has_gw_id() const {
  return _internal_has_gw_id();
}
inline void RoleIdentifier::clear_gw_id() {
  if (GetArenaNoVirtual() == nullptr && gw_id_ != nullptr) {
    delete gw_id_;
  }
  gw_id_ = nullptr;
}
inline const ::rpc_msg::CHANNEL& RoleIdentifier::_internal_gw_id() const {
  const ::rpc_msg::CHANNEL* p = gw_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::CHANNEL*>(
      &::rpc_msg::_CHANNEL_default_instance_);
}
inline const ::rpc_msg::CHANNEL& RoleIdentifier::gw_id() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RoleIdentifier.gw_id)
  return _internal_gw_id();
}
inline ::rpc_msg::CHANNEL* RoleIdentifier::release_gw_id() {
  // @@protoc_insertion_point(field_release:rpc_msg.RoleIdentifier.gw_id)
  
  ::rpc_msg::CHANNEL* temp = gw_id_;
  gw_id_ = nullptr;
  return temp;
}
inline ::rpc_msg::CHANNEL* RoleIdentifier::_internal_mutable_gw_id() {
  
  if (gw_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::CHANNEL>(GetArenaNoVirtual());
    gw_id_ = p;
  }
  return gw_id_;
}
inline ::rpc_msg::CHANNEL* RoleIdentifier::mutable_gw_id() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RoleIdentifier.gw_id)
  return _internal_mutable_gw_id();
}
inline void RoleIdentifier::set_allocated_gw_id(::rpc_msg::CHANNEL* gw_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gw_id_;
  }
  if (gw_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gw_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gw_id, submessage_arena);
    }
    
  } else {
    
  }
  gw_id_ = gw_id;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RoleIdentifier.gw_id)
}

// -------------------------------------------------------------------

// CLIENT_IDENTIFIER

// .rpc_msg.CHANNEL stub = 1;
inline bool CLIENT_IDENTIFIER::_internal_has_stub() const {
  return this != internal_default_instance() && stub_ != nullptr;
}
inline bool CLIENT_IDENTIFIER::has_stub() const {
  return _internal_has_stub();
}
inline void CLIENT_IDENTIFIER::clear_stub() {
  if (GetArenaNoVirtual() == nullptr && stub_ != nullptr) {
    delete stub_;
  }
  stub_ = nullptr;
}
inline const ::rpc_msg::CHANNEL& CLIENT_IDENTIFIER::_internal_stub() const {
  const ::rpc_msg::CHANNEL* p = stub_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::CHANNEL*>(
      &::rpc_msg::_CHANNEL_default_instance_);
}
inline const ::rpc_msg::CHANNEL& CLIENT_IDENTIFIER::stub() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CLIENT_IDENTIFIER.stub)
  return _internal_stub();
}
inline ::rpc_msg::CHANNEL* CLIENT_IDENTIFIER::release_stub() {
  // @@protoc_insertion_point(field_release:rpc_msg.CLIENT_IDENTIFIER.stub)
  
  ::rpc_msg::CHANNEL* temp = stub_;
  stub_ = nullptr;
  return temp;
}
inline ::rpc_msg::CHANNEL* CLIENT_IDENTIFIER::_internal_mutable_stub() {
  
  if (stub_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::CHANNEL>(GetArenaNoVirtual());
    stub_ = p;
  }
  return stub_;
}
inline ::rpc_msg::CHANNEL* CLIENT_IDENTIFIER::mutable_stub() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.CLIENT_IDENTIFIER.stub)
  return _internal_mutable_stub();
}
inline void CLIENT_IDENTIFIER::set_allocated_stub(::rpc_msg::CHANNEL* stub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stub_;
  }
  if (stub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stub, submessage_arena);
    }
    
  } else {
    
  }
  stub_ = stub;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.CLIENT_IDENTIFIER.stub)
}

// uint64 seq_id = 2;
inline void CLIENT_IDENTIFIER::clear_seq_id() {
  seq_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLIENT_IDENTIFIER::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLIENT_IDENTIFIER::seq_id() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CLIENT_IDENTIFIER.seq_id)
  return _internal_seq_id();
}
inline void CLIENT_IDENTIFIER::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_id_ = value;
}
inline void CLIENT_IDENTIFIER::set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CLIENT_IDENTIFIER.seq_id)
}

// bool required_reply = 3;
inline void CLIENT_IDENTIFIER::clear_required_reply() {
  required_reply_ = false;
}
inline bool CLIENT_IDENTIFIER::_internal_required_reply() const {
  return required_reply_;
}
inline bool CLIENT_IDENTIFIER::required_reply() const {
  // @@protoc_insertion_point(field_get:rpc_msg.CLIENT_IDENTIFIER.required_reply)
  return _internal_required_reply();
}
inline void CLIENT_IDENTIFIER::_internal_set_required_reply(bool value) {
  
  required_reply_ = value;
}
inline void CLIENT_IDENTIFIER::set_required_reply(bool value) {
  _internal_set_required_reply(value);
  // @@protoc_insertion_point(field_set:rpc_msg.CLIENT_IDENTIFIER.required_reply)
}

// -------------------------------------------------------------------

// SERVER_IDENTIFIER

// .rpc_msg.CHANNEL stub = 1;
inline bool SERVER_IDENTIFIER::_internal_has_stub() const {
  return this != internal_default_instance() && stub_ != nullptr;
}
inline bool SERVER_IDENTIFIER::has_stub() const {
  return _internal_has_stub();
}
inline void SERVER_IDENTIFIER::clear_stub() {
  if (GetArenaNoVirtual() == nullptr && stub_ != nullptr) {
    delete stub_;
  }
  stub_ = nullptr;
}
inline const ::rpc_msg::CHANNEL& SERVER_IDENTIFIER::_internal_stub() const {
  const ::rpc_msg::CHANNEL* p = stub_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::CHANNEL*>(
      &::rpc_msg::_CHANNEL_default_instance_);
}
inline const ::rpc_msg::CHANNEL& SERVER_IDENTIFIER::stub() const {
  // @@protoc_insertion_point(field_get:rpc_msg.SERVER_IDENTIFIER.stub)
  return _internal_stub();
}
inline ::rpc_msg::CHANNEL* SERVER_IDENTIFIER::release_stub() {
  // @@protoc_insertion_point(field_release:rpc_msg.SERVER_IDENTIFIER.stub)
  
  ::rpc_msg::CHANNEL* temp = stub_;
  stub_ = nullptr;
  return temp;
}
inline ::rpc_msg::CHANNEL* SERVER_IDENTIFIER::_internal_mutable_stub() {
  
  if (stub_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::CHANNEL>(GetArenaNoVirtual());
    stub_ = p;
  }
  return stub_;
}
inline ::rpc_msg::CHANNEL* SERVER_IDENTIFIER::mutable_stub() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.SERVER_IDENTIFIER.stub)
  return _internal_mutable_stub();
}
inline void SERVER_IDENTIFIER::set_allocated_stub(::rpc_msg::CHANNEL* stub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stub_;
  }
  if (stub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stub, submessage_arena);
    }
    
  } else {
    
  }
  stub_ = stub;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.SERVER_IDENTIFIER.stub)
}

// -------------------------------------------------------------------

// RPC_REQUEST

// .rpc_msg.CLIENT_IDENTIFIER client = 1;
inline bool RPC_REQUEST::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool RPC_REQUEST::has_client() const {
  return _internal_has_client();
}
inline void RPC_REQUEST::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::rpc_msg::CLIENT_IDENTIFIER& RPC_REQUEST::_internal_client() const {
  const ::rpc_msg::CLIENT_IDENTIFIER* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::CLIENT_IDENTIFIER*>(
      &::rpc_msg::_CLIENT_IDENTIFIER_default_instance_);
}
inline const ::rpc_msg::CLIENT_IDENTIFIER& RPC_REQUEST::client() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_REQUEST.client)
  return _internal_client();
}
inline ::rpc_msg::CLIENT_IDENTIFIER* RPC_REQUEST::release_client() {
  // @@protoc_insertion_point(field_release:rpc_msg.RPC_REQUEST.client)
  
  ::rpc_msg::CLIENT_IDENTIFIER* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::rpc_msg::CLIENT_IDENTIFIER* RPC_REQUEST::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::CLIENT_IDENTIFIER>(GetArenaNoVirtual());
    client_ = p;
  }
  return client_;
}
inline ::rpc_msg::CLIENT_IDENTIFIER* RPC_REQUEST::mutable_client() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RPC_REQUEST.client)
  return _internal_mutable_client();
}
inline void RPC_REQUEST::set_allocated_client(::rpc_msg::CLIENT_IDENTIFIER* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RPC_REQUEST.client)
}

// .rpc_msg.SERVER_IDENTIFIER server = 2;
inline bool RPC_REQUEST::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool RPC_REQUEST::has_server() const {
  return _internal_has_server();
}
inline void RPC_REQUEST::clear_server() {
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::rpc_msg::SERVER_IDENTIFIER& RPC_REQUEST::_internal_server() const {
  const ::rpc_msg::SERVER_IDENTIFIER* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::SERVER_IDENTIFIER*>(
      &::rpc_msg::_SERVER_IDENTIFIER_default_instance_);
}
inline const ::rpc_msg::SERVER_IDENTIFIER& RPC_REQUEST::server() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_REQUEST.server)
  return _internal_server();
}
inline ::rpc_msg::SERVER_IDENTIFIER* RPC_REQUEST::release_server() {
  // @@protoc_insertion_point(field_release:rpc_msg.RPC_REQUEST.server)
  
  ::rpc_msg::SERVER_IDENTIFIER* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::rpc_msg::SERVER_IDENTIFIER* RPC_REQUEST::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::SERVER_IDENTIFIER>(GetArenaNoVirtual());
    server_ = p;
  }
  return server_;
}
inline ::rpc_msg::SERVER_IDENTIFIER* RPC_REQUEST::mutable_server() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RPC_REQUEST.server)
  return _internal_mutable_server();
}
inline void RPC_REQUEST::set_allocated_server(::rpc_msg::SERVER_IDENTIFIER* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RPC_REQUEST.server)
}

// bool server_stream = 3;
inline void RPC_REQUEST::clear_server_stream() {
  server_stream_ = false;
}
inline bool RPC_REQUEST::_internal_server_stream() const {
  return server_stream_;
}
inline bool RPC_REQUEST::server_stream() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_REQUEST.server_stream)
  return _internal_server_stream();
}
inline void RPC_REQUEST::_internal_set_server_stream(bool value) {
  
  server_stream_ = value;
}
inline void RPC_REQUEST::set_server_stream(bool value) {
  _internal_set_server_stream(value);
  // @@protoc_insertion_point(field_set:rpc_msg.RPC_REQUEST.server_stream)
}

// .rpc_msg.RPC_OPCODES opcodes = 4;
inline void RPC_REQUEST::clear_opcodes() {
  opcodes_ = 0;
}
inline ::rpc_msg::RPC_OPCODES RPC_REQUEST::_internal_opcodes() const {
  return static_cast< ::rpc_msg::RPC_OPCODES >(opcodes_);
}
inline ::rpc_msg::RPC_OPCODES RPC_REQUEST::opcodes() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_REQUEST.opcodes)
  return _internal_opcodes();
}
inline void RPC_REQUEST::_internal_set_opcodes(::rpc_msg::RPC_OPCODES value) {
  
  opcodes_ = value;
}
inline void RPC_REQUEST::set_opcodes(::rpc_msg::RPC_OPCODES value) {
  _internal_set_opcodes(value);
  // @@protoc_insertion_point(field_set:rpc_msg.RPC_REQUEST.opcodes)
}

// bytes args_data = 5;
inline void RPC_REQUEST::clear_args_data() {
  args_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPC_REQUEST::args_data() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_REQUEST.args_data)
  return _internal_args_data();
}
inline void RPC_REQUEST::set_args_data(const std::string& value) {
  _internal_set_args_data(value);
  // @@protoc_insertion_point(field_set:rpc_msg.RPC_REQUEST.args_data)
}
inline std::string* RPC_REQUEST::mutable_args_data() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RPC_REQUEST.args_data)
  return _internal_mutable_args_data();
}
inline const std::string& RPC_REQUEST::_internal_args_data() const {
  return args_data_.GetNoArena();
}
inline void RPC_REQUEST::_internal_set_args_data(const std::string& value) {
  
  args_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPC_REQUEST::set_args_data(std::string&& value) {
  
  args_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_msg.RPC_REQUEST.args_data)
}
inline void RPC_REQUEST::set_args_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_msg.RPC_REQUEST.args_data)
}
inline void RPC_REQUEST::set_args_data(const void* value, size_t size) {
  
  args_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_msg.RPC_REQUEST.args_data)
}
inline std::string* RPC_REQUEST::_internal_mutable_args_data() {
  
  return args_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPC_REQUEST::release_args_data() {
  // @@protoc_insertion_point(field_release:rpc_msg.RPC_REQUEST.args_data)
  
  return args_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPC_REQUEST::set_allocated_args_data(std::string* args_data) {
  if (args_data != nullptr) {
    
  } else {
    
  }
  args_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args_data);
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RPC_REQUEST.args_data)
}

// -------------------------------------------------------------------

// STATUS

// uint32 code = 1;
inline void STATUS::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 STATUS::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 STATUS::code() const {
  // @@protoc_insertion_point(field_get:rpc_msg.STATUS.code)
  return _internal_code();
}
inline void STATUS::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void STATUS::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:rpc_msg.STATUS.code)
}

// string msg = 2;
inline void STATUS::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STATUS::msg() const {
  // @@protoc_insertion_point(field_get:rpc_msg.STATUS.msg)
  return _internal_msg();
}
inline void STATUS::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:rpc_msg.STATUS.msg)
}
inline std::string* STATUS::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.STATUS.msg)
  return _internal_mutable_msg();
}
inline const std::string& STATUS::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void STATUS::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void STATUS::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_msg.STATUS.msg)
}
inline void STATUS::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_msg.STATUS.msg)
}
inline void STATUS::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_msg.STATUS.msg)
}
inline std::string* STATUS::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STATUS::release_msg() {
  // @@protoc_insertion_point(field_release:rpc_msg.STATUS.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STATUS::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.STATUS.msg)
}

// -------------------------------------------------------------------

// RPC_RESPONSE

// .rpc_msg.CLIENT_IDENTIFIER client = 1;
inline bool RPC_RESPONSE::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool RPC_RESPONSE::has_client() const {
  return _internal_has_client();
}
inline void RPC_RESPONSE::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::rpc_msg::CLIENT_IDENTIFIER& RPC_RESPONSE::_internal_client() const {
  const ::rpc_msg::CLIENT_IDENTIFIER* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::CLIENT_IDENTIFIER*>(
      &::rpc_msg::_CLIENT_IDENTIFIER_default_instance_);
}
inline const ::rpc_msg::CLIENT_IDENTIFIER& RPC_RESPONSE::client() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_RESPONSE.client)
  return _internal_client();
}
inline ::rpc_msg::CLIENT_IDENTIFIER* RPC_RESPONSE::release_client() {
  // @@protoc_insertion_point(field_release:rpc_msg.RPC_RESPONSE.client)
  
  ::rpc_msg::CLIENT_IDENTIFIER* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::rpc_msg::CLIENT_IDENTIFIER* RPC_RESPONSE::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::CLIENT_IDENTIFIER>(GetArenaNoVirtual());
    client_ = p;
  }
  return client_;
}
inline ::rpc_msg::CLIENT_IDENTIFIER* RPC_RESPONSE::mutable_client() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RPC_RESPONSE.client)
  return _internal_mutable_client();
}
inline void RPC_RESPONSE::set_allocated_client(::rpc_msg::CLIENT_IDENTIFIER* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RPC_RESPONSE.client)
}

// .rpc_msg.SERVER_IDENTIFIER server = 2;
inline bool RPC_RESPONSE::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool RPC_RESPONSE::has_server() const {
  return _internal_has_server();
}
inline void RPC_RESPONSE::clear_server() {
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::rpc_msg::SERVER_IDENTIFIER& RPC_RESPONSE::_internal_server() const {
  const ::rpc_msg::SERVER_IDENTIFIER* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::SERVER_IDENTIFIER*>(
      &::rpc_msg::_SERVER_IDENTIFIER_default_instance_);
}
inline const ::rpc_msg::SERVER_IDENTIFIER& RPC_RESPONSE::server() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_RESPONSE.server)
  return _internal_server();
}
inline ::rpc_msg::SERVER_IDENTIFIER* RPC_RESPONSE::release_server() {
  // @@protoc_insertion_point(field_release:rpc_msg.RPC_RESPONSE.server)
  
  ::rpc_msg::SERVER_IDENTIFIER* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::rpc_msg::SERVER_IDENTIFIER* RPC_RESPONSE::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::SERVER_IDENTIFIER>(GetArenaNoVirtual());
    server_ = p;
  }
  return server_;
}
inline ::rpc_msg::SERVER_IDENTIFIER* RPC_RESPONSE::mutable_server() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RPC_RESPONSE.server)
  return _internal_mutable_server();
}
inline void RPC_RESPONSE::set_allocated_server(::rpc_msg::SERVER_IDENTIFIER* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RPC_RESPONSE.server)
}

// .rpc_msg.STATUS status = 3;
inline bool RPC_RESPONSE::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RPC_RESPONSE::has_status() const {
  return _internal_has_status();
}
inline void RPC_RESPONSE::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::rpc_msg::STATUS& RPC_RESPONSE::_internal_status() const {
  const ::rpc_msg::STATUS* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::STATUS*>(
      &::rpc_msg::_STATUS_default_instance_);
}
inline const ::rpc_msg::STATUS& RPC_RESPONSE::status() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_RESPONSE.status)
  return _internal_status();
}
inline ::rpc_msg::STATUS* RPC_RESPONSE::release_status() {
  // @@protoc_insertion_point(field_release:rpc_msg.RPC_RESPONSE.status)
  
  ::rpc_msg::STATUS* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::rpc_msg::STATUS* RPC_RESPONSE::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::STATUS>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::rpc_msg::STATUS* RPC_RESPONSE::mutable_status() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RPC_RESPONSE.status)
  return _internal_mutable_status();
}
inline void RPC_RESPONSE::set_allocated_status(::rpc_msg::STATUS* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RPC_RESPONSE.status)
}

// bool has_more = 4;
inline void RPC_RESPONSE::clear_has_more() {
  has_more_ = false;
}
inline bool RPC_RESPONSE::_internal_has_more() const {
  return has_more_;
}
inline bool RPC_RESPONSE::has_more() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_RESPONSE.has_more)
  return _internal_has_more();
}
inline void RPC_RESPONSE::_internal_set_has_more(bool value) {
  
  has_more_ = value;
}
inline void RPC_RESPONSE::set_has_more(bool value) {
  _internal_set_has_more(value);
  // @@protoc_insertion_point(field_set:rpc_msg.RPC_RESPONSE.has_more)
}

// uint32 offset = 5;
inline void RPC_RESPONSE::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPC_RESPONSE::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPC_RESPONSE::offset() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_RESPONSE.offset)
  return _internal_offset();
}
inline void RPC_RESPONSE::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void RPC_RESPONSE::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:rpc_msg.RPC_RESPONSE.offset)
}

// bytes result_data = 6;
inline void RPC_RESPONSE::clear_result_data() {
  result_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPC_RESPONSE::result_data() const {
  // @@protoc_insertion_point(field_get:rpc_msg.RPC_RESPONSE.result_data)
  return _internal_result_data();
}
inline void RPC_RESPONSE::set_result_data(const std::string& value) {
  _internal_set_result_data(value);
  // @@protoc_insertion_point(field_set:rpc_msg.RPC_RESPONSE.result_data)
}
inline std::string* RPC_RESPONSE::mutable_result_data() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.RPC_RESPONSE.result_data)
  return _internal_mutable_result_data();
}
inline const std::string& RPC_RESPONSE::_internal_result_data() const {
  return result_data_.GetNoArena();
}
inline void RPC_RESPONSE::_internal_set_result_data(const std::string& value) {
  
  result_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPC_RESPONSE::set_result_data(std::string&& value) {
  
  result_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_msg.RPC_RESPONSE.result_data)
}
inline void RPC_RESPONSE::set_result_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_msg.RPC_RESPONSE.result_data)
}
inline void RPC_RESPONSE::set_result_data(const void* value, size_t size) {
  
  result_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_msg.RPC_RESPONSE.result_data)
}
inline std::string* RPC_RESPONSE::_internal_mutable_result_data() {
  
  return result_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPC_RESPONSE::release_result_data() {
  // @@protoc_insertion_point(field_release:rpc_msg.RPC_RESPONSE.result_data)
  
  return result_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPC_RESPONSE::set_allocated_result_data(std::string* result_data) {
  if (result_data != nullptr) {
    
  } else {
    
  }
  result_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_data);
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.RPC_RESPONSE.result_data)
}

// -------------------------------------------------------------------

// PRC_Multiplexer_Forward

// .rpc_msg.RoleIdentifier role = 1;
inline bool PRC_Multiplexer_Forward::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool PRC_Multiplexer_Forward::has_role() const {
  return _internal_has_role();
}
inline void PRC_Multiplexer_Forward::clear_role() {
  if (GetArenaNoVirtual() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::rpc_msg::RoleIdentifier& PRC_Multiplexer_Forward::_internal_role() const {
  const ::rpc_msg::RoleIdentifier* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::RoleIdentifier*>(
      &::rpc_msg::_RoleIdentifier_default_instance_);
}
inline const ::rpc_msg::RoleIdentifier& PRC_Multiplexer_Forward::role() const {
  // @@protoc_insertion_point(field_get:rpc_msg.PRC_Multiplexer_Forward.role)
  return _internal_role();
}
inline ::rpc_msg::RoleIdentifier* PRC_Multiplexer_Forward::release_role() {
  // @@protoc_insertion_point(field_release:rpc_msg.PRC_Multiplexer_Forward.role)
  
  ::rpc_msg::RoleIdentifier* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::rpc_msg::RoleIdentifier* PRC_Multiplexer_Forward::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::RoleIdentifier>(GetArenaNoVirtual());
    role_ = p;
  }
  return role_;
}
inline ::rpc_msg::RoleIdentifier* PRC_Multiplexer_Forward::mutable_role() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.PRC_Multiplexer_Forward.role)
  return _internal_mutable_role();
}
inline void PRC_Multiplexer_Forward::set_allocated_role(::rpc_msg::RoleIdentifier* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.PRC_Multiplexer_Forward.role)
}

// uint32 opcodes = 2;
inline void PRC_Multiplexer_Forward::clear_opcodes() {
  opcodes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PRC_Multiplexer_Forward::_internal_opcodes() const {
  return opcodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PRC_Multiplexer_Forward::opcodes() const {
  // @@protoc_insertion_point(field_get:rpc_msg.PRC_Multiplexer_Forward.opcodes)
  return _internal_opcodes();
}
inline void PRC_Multiplexer_Forward::_internal_set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  opcodes_ = value;
}
inline void PRC_Multiplexer_Forward::set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcodes(value);
  // @@protoc_insertion_point(field_set:rpc_msg.PRC_Multiplexer_Forward.opcodes)
}

// bytes body_msg = 3;
inline void PRC_Multiplexer_Forward::clear_body_msg() {
  body_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PRC_Multiplexer_Forward::body_msg() const {
  // @@protoc_insertion_point(field_get:rpc_msg.PRC_Multiplexer_Forward.body_msg)
  return _internal_body_msg();
}
inline void PRC_Multiplexer_Forward::set_body_msg(const std::string& value) {
  _internal_set_body_msg(value);
  // @@protoc_insertion_point(field_set:rpc_msg.PRC_Multiplexer_Forward.body_msg)
}
inline std::string* PRC_Multiplexer_Forward::mutable_body_msg() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.PRC_Multiplexer_Forward.body_msg)
  return _internal_mutable_body_msg();
}
inline const std::string& PRC_Multiplexer_Forward::_internal_body_msg() const {
  return body_msg_.GetNoArena();
}
inline void PRC_Multiplexer_Forward::_internal_set_body_msg(const std::string& value) {
  
  body_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PRC_Multiplexer_Forward::set_body_msg(std::string&& value) {
  
  body_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_msg.PRC_Multiplexer_Forward.body_msg)
}
inline void PRC_Multiplexer_Forward::set_body_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_msg.PRC_Multiplexer_Forward.body_msg)
}
inline void PRC_Multiplexer_Forward::set_body_msg(const void* value, size_t size) {
  
  body_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_msg.PRC_Multiplexer_Forward.body_msg)
}
inline std::string* PRC_Multiplexer_Forward::_internal_mutable_body_msg() {
  
  return body_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PRC_Multiplexer_Forward::release_body_msg() {
  // @@protoc_insertion_point(field_release:rpc_msg.PRC_Multiplexer_Forward.body_msg)
  
  return body_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PRC_Multiplexer_Forward::set_allocated_body_msg(std::string* body_msg) {
  if (body_msg != nullptr) {
    
  } else {
    
  }
  body_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_msg);
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.PRC_Multiplexer_Forward.body_msg)
}

// -------------------------------------------------------------------

// PRC_DeMultiplexer_Forward

// .rpc_msg.RoleIdentifier role = 1;
inline bool PRC_DeMultiplexer_Forward::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool PRC_DeMultiplexer_Forward::has_role() const {
  return _internal_has_role();
}
inline void PRC_DeMultiplexer_Forward::clear_role() {
  if (GetArenaNoVirtual() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::rpc_msg::RoleIdentifier& PRC_DeMultiplexer_Forward::_internal_role() const {
  const ::rpc_msg::RoleIdentifier* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc_msg::RoleIdentifier*>(
      &::rpc_msg::_RoleIdentifier_default_instance_);
}
inline const ::rpc_msg::RoleIdentifier& PRC_DeMultiplexer_Forward::role() const {
  // @@protoc_insertion_point(field_get:rpc_msg.PRC_DeMultiplexer_Forward.role)
  return _internal_role();
}
inline ::rpc_msg::RoleIdentifier* PRC_DeMultiplexer_Forward::release_role() {
  // @@protoc_insertion_point(field_release:rpc_msg.PRC_DeMultiplexer_Forward.role)
  
  ::rpc_msg::RoleIdentifier* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::rpc_msg::RoleIdentifier* PRC_DeMultiplexer_Forward::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_msg::RoleIdentifier>(GetArenaNoVirtual());
    role_ = p;
  }
  return role_;
}
inline ::rpc_msg::RoleIdentifier* PRC_DeMultiplexer_Forward::mutable_role() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.PRC_DeMultiplexer_Forward.role)
  return _internal_mutable_role();
}
inline void PRC_DeMultiplexer_Forward::set_allocated_role(::rpc_msg::RoleIdentifier* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.PRC_DeMultiplexer_Forward.role)
}

// uint32 opcodes = 2;
inline void PRC_DeMultiplexer_Forward::clear_opcodes() {
  opcodes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PRC_DeMultiplexer_Forward::_internal_opcodes() const {
  return opcodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PRC_DeMultiplexer_Forward::opcodes() const {
  // @@protoc_insertion_point(field_get:rpc_msg.PRC_DeMultiplexer_Forward.opcodes)
  return _internal_opcodes();
}
inline void PRC_DeMultiplexer_Forward::_internal_set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  opcodes_ = value;
}
inline void PRC_DeMultiplexer_Forward::set_opcodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcodes(value);
  // @@protoc_insertion_point(field_set:rpc_msg.PRC_DeMultiplexer_Forward.opcodes)
}

// bytes body_msg = 3;
inline void PRC_DeMultiplexer_Forward::clear_body_msg() {
  body_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PRC_DeMultiplexer_Forward::body_msg() const {
  // @@protoc_insertion_point(field_get:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
  return _internal_body_msg();
}
inline void PRC_DeMultiplexer_Forward::set_body_msg(const std::string& value) {
  _internal_set_body_msg(value);
  // @@protoc_insertion_point(field_set:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
}
inline std::string* PRC_DeMultiplexer_Forward::mutable_body_msg() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
  return _internal_mutable_body_msg();
}
inline const std::string& PRC_DeMultiplexer_Forward::_internal_body_msg() const {
  return body_msg_.GetNoArena();
}
inline void PRC_DeMultiplexer_Forward::_internal_set_body_msg(const std::string& value) {
  
  body_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PRC_DeMultiplexer_Forward::set_body_msg(std::string&& value) {
  
  body_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
}
inline void PRC_DeMultiplexer_Forward::set_body_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
}
inline void PRC_DeMultiplexer_Forward::set_body_msg(const void* value, size_t size) {
  
  body_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
}
inline std::string* PRC_DeMultiplexer_Forward::_internal_mutable_body_msg() {
  
  return body_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PRC_DeMultiplexer_Forward::release_body_msg() {
  // @@protoc_insertion_point(field_release:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
  
  return body_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PRC_DeMultiplexer_Forward::set_allocated_body_msg(std::string* body_msg) {
  if (body_msg != nullptr) {
    
  } else {
    
  }
  body_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_msg);
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.PRC_DeMultiplexer_Forward.body_msg)
}

// -------------------------------------------------------------------

// MSG_RPC_REQUEST_ECHO

// uint64 value1 = 1;
inline void MSG_RPC_REQUEST_ECHO::clear_value1() {
  value1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RPC_REQUEST_ECHO::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RPC_REQUEST_ECHO::value1() const {
  // @@protoc_insertion_point(field_get:rpc_msg.MSG_RPC_REQUEST_ECHO.value1)
  return _internal_value1();
}
inline void MSG_RPC_REQUEST_ECHO::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value1_ = value;
}
inline void MSG_RPC_REQUEST_ECHO::set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:rpc_msg.MSG_RPC_REQUEST_ECHO.value1)
}

// string value2 = 2;
inline void MSG_RPC_REQUEST_ECHO::clear_value2() {
  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_RPC_REQUEST_ECHO::value2() const {
  // @@protoc_insertion_point(field_get:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
  return _internal_value2();
}
inline void MSG_RPC_REQUEST_ECHO::set_value2(const std::string& value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
}
inline std::string* MSG_RPC_REQUEST_ECHO::mutable_value2() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
  return _internal_mutable_value2();
}
inline const std::string& MSG_RPC_REQUEST_ECHO::_internal_value2() const {
  return value2_.GetNoArena();
}
inline void MSG_RPC_REQUEST_ECHO::_internal_set_value2(const std::string& value) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RPC_REQUEST_ECHO::set_value2(std::string&& value) {
  
  value2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
}
inline void MSG_RPC_REQUEST_ECHO::set_value2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
}
inline void MSG_RPC_REQUEST_ECHO::set_value2(const char* value, size_t size) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
}
inline std::string* MSG_RPC_REQUEST_ECHO::_internal_mutable_value2() {
  
  return value2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RPC_REQUEST_ECHO::release_value2() {
  // @@protoc_insertion_point(field_release:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
  
  return value2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RPC_REQUEST_ECHO::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  value2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.MSG_RPC_REQUEST_ECHO.value2)
}

// -------------------------------------------------------------------

// MSG_RPC_RESPONSE_ECHO

// uint64 value1 = 1;
inline void MSG_RPC_RESPONSE_ECHO::clear_value1() {
  value1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RPC_RESPONSE_ECHO::_internal_value1() const {
  return value1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_RPC_RESPONSE_ECHO::value1() const {
  // @@protoc_insertion_point(field_get:rpc_msg.MSG_RPC_RESPONSE_ECHO.value1)
  return _internal_value1();
}
inline void MSG_RPC_RESPONSE_ECHO::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value1_ = value;
}
inline void MSG_RPC_RESPONSE_ECHO::set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:rpc_msg.MSG_RPC_RESPONSE_ECHO.value1)
}

// string value2 = 2;
inline void MSG_RPC_RESPONSE_ECHO::clear_value2() {
  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_RPC_RESPONSE_ECHO::value2() const {
  // @@protoc_insertion_point(field_get:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
  return _internal_value2();
}
inline void MSG_RPC_RESPONSE_ECHO::set_value2(const std::string& value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
}
inline std::string* MSG_RPC_RESPONSE_ECHO::mutable_value2() {
  // @@protoc_insertion_point(field_mutable:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
  return _internal_mutable_value2();
}
inline const std::string& MSG_RPC_RESPONSE_ECHO::_internal_value2() const {
  return value2_.GetNoArena();
}
inline void MSG_RPC_RESPONSE_ECHO::_internal_set_value2(const std::string& value) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RPC_RESPONSE_ECHO::set_value2(std::string&& value) {
  
  value2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
}
inline void MSG_RPC_RESPONSE_ECHO::set_value2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
}
inline void MSG_RPC_RESPONSE_ECHO::set_value2(const char* value, size_t size) {
  
  value2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
}
inline std::string* MSG_RPC_RESPONSE_ECHO::_internal_mutable_value2() {
  
  return value2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RPC_RESPONSE_ECHO::release_value2() {
  // @@protoc_insertion_point(field_release:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
  
  return value2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RPC_RESPONSE_ECHO::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    
  } else {
    
  }
  value2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:rpc_msg.MSG_RPC_RESPONSE_ECHO.value2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rpc_msg::RPC_OPCODES> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc_msg::RPC_OPCODES>() {
  return ::rpc_msg::RPC_OPCODES_descriptor();
}
template <> struct is_proto_enum< ::rpc_msg::RPC_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc_msg::RPC_CODE>() {
  return ::rpc_msg::RPC_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fmsg_2eproto
