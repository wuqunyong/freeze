// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_msg.proto

#include "rpc_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rpc_msg {
PROTOBUF_CONSTEXPR CHANNEL::CHANNEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.realm_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CHANNELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CHANNELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CHANNELDefaultTypeInternal() {}
  union {
    CHANNEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CHANNELDefaultTypeInternal _CHANNEL_default_instance_;
PROTOBUF_CONSTEXPR CONTROLLER::CONTROLLER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seq_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timeout_ms_)*/uint64_t{0u}
  , /*decltype(_impl_.server_stream_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CONTROLLERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CONTROLLERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CONTROLLERDefaultTypeInternal() {}
  union {
    CONTROLLER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CONTROLLERDefaultTypeInternal _CONTROLLER_default_instance_;
PROTOBUF_CONSTEXPR ClientMessageInfo::ClientMessageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/uint64_t{0u}
  , /*decltype(_impl_.seq_num_)*/0u
  , /*decltype(_impl_.opcode_)*/0u
  , /*decltype(_impl_.response_opcode_)*/0u
  , /*decltype(_impl_.connetion_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientMessageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessageInfoDefaultTypeInternal() {}
  union {
    ClientMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessageInfoDefaultTypeInternal _ClientMessageInfo_default_instance_;
PROTOBUF_CONSTEXPR RoleIdentifier::RoleIdentifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gw_id_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleIdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleIdentifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleIdentifierDefaultTypeInternal() {}
  union {
    RoleIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleIdentifierDefaultTypeInternal _RoleIdentifier_default_instance_;
PROTOBUF_CONSTEXPR CLIENT_IDENTIFIER::CLIENT_IDENTIFIER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stub_)*/nullptr
  , /*decltype(_impl_.seq_id_)*/uint64_t{0u}
  , /*decltype(_impl_.required_reply_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CLIENT_IDENTIFIERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLIENT_IDENTIFIERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLIENT_IDENTIFIERDefaultTypeInternal() {}
  union {
    CLIENT_IDENTIFIER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLIENT_IDENTIFIERDefaultTypeInternal _CLIENT_IDENTIFIER_default_instance_;
PROTOBUF_CONSTEXPR SERVER_IDENTIFIER::SERVER_IDENTIFIER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stub_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SERVER_IDENTIFIERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SERVER_IDENTIFIERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SERVER_IDENTIFIERDefaultTypeInternal() {}
  union {
    SERVER_IDENTIFIER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SERVER_IDENTIFIERDefaultTypeInternal _SERVER_IDENTIFIER_default_instance_;
PROTOBUF_CONSTEXPR RPC_REQUEST::RPC_REQUEST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_)*/nullptr
  , /*decltype(_impl_.server_)*/nullptr
  , /*decltype(_impl_.server_stream_)*/false
  , /*decltype(_impl_.opcodes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPC_REQUESTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPC_REQUESTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPC_REQUESTDefaultTypeInternal() {}
  union {
    RPC_REQUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPC_REQUESTDefaultTypeInternal _RPC_REQUEST_default_instance_;
PROTOBUF_CONSTEXPR STATUS::STATUS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STATUSDefaultTypeInternal() {}
  union {
    STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STATUSDefaultTypeInternal _STATUS_default_instance_;
PROTOBUF_CONSTEXPR RPC_RESPONSE::RPC_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_)*/nullptr
  , /*decltype(_impl_.server_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.has_more_)*/false
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPC_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPC_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPC_RESPONSEDefaultTypeInternal() {}
  union {
    RPC_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPC_RESPONSEDefaultTypeInternal _RPC_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR RPC_Multiplexer_Forward::RPC_Multiplexer_Forward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPC_Multiplexer_ForwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPC_Multiplexer_ForwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPC_Multiplexer_ForwardDefaultTypeInternal() {}
  union {
    RPC_Multiplexer_Forward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPC_Multiplexer_ForwardDefaultTypeInternal _RPC_Multiplexer_Forward_default_instance_;
PROTOBUF_CONSTEXPR PRC_DeMultiplexer_Forward::PRC_DeMultiplexer_Forward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PRC_DeMultiplexer_ForwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRC_DeMultiplexer_ForwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRC_DeMultiplexer_ForwardDefaultTypeInternal() {}
  union {
    PRC_DeMultiplexer_Forward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRC_DeMultiplexer_ForwardDefaultTypeInternal _PRC_DeMultiplexer_Forward_default_instance_;
}  // namespace rpc_msg
static ::_pb::Metadata file_level_metadata_rpc_5fmsg_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rpc_5fmsg_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5fmsg_2eproto = nullptr;

const uint32_t TableStruct_rpc_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, _impl_.realm_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, _impl_.seq_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, _impl_.timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, _impl_.server_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, _impl_.seq_num_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, _impl_.opcode_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, _impl_.response_opcode_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, _impl_.connetion_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, _impl_.gw_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, _impl_.stub_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, _impl_.seq_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, _impl_.required_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::SERVER_IDENTIFIER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::SERVER_IDENTIFIER, _impl_.stub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _impl_.server_stream_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _impl_.opcodes_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _impl_.args_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _impl_.has_more_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _impl_.result_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, _impl_.body_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, _impl_.body_msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rpc_msg::CHANNEL)},
  { 9, -1, -1, sizeof(::rpc_msg::CONTROLLER)},
  { 18, -1, -1, sizeof(::rpc_msg::ClientMessageInfo)},
  { 29, -1, -1, sizeof(::rpc_msg::RoleIdentifier)},
  { 38, -1, -1, sizeof(::rpc_msg::CLIENT_IDENTIFIER)},
  { 47, -1, -1, sizeof(::rpc_msg::SERVER_IDENTIFIER)},
  { 54, -1, -1, sizeof(::rpc_msg::RPC_REQUEST)},
  { 65, -1, -1, sizeof(::rpc_msg::STATUS)},
  { 73, -1, -1, sizeof(::rpc_msg::RPC_RESPONSE)},
  { 85, -1, -1, sizeof(::rpc_msg::RPC_Multiplexer_Forward)},
  { 94, -1, -1, sizeof(::rpc_msg::PRC_DeMultiplexer_Forward)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rpc_msg::_CHANNEL_default_instance_._instance,
  &::rpc_msg::_CONTROLLER_default_instance_._instance,
  &::rpc_msg::_ClientMessageInfo_default_instance_._instance,
  &::rpc_msg::_RoleIdentifier_default_instance_._instance,
  &::rpc_msg::_CLIENT_IDENTIFIER_default_instance_._instance,
  &::rpc_msg::_SERVER_IDENTIFIER_default_instance_._instance,
  &::rpc_msg::_RPC_REQUEST_default_instance_._instance,
  &::rpc_msg::_STATUS_default_instance_._instance,
  &::rpc_msg::_RPC_RESPONSE_default_instance_._instance,
  &::rpc_msg::_RPC_Multiplexer_Forward_default_instance_._instance,
  &::rpc_msg::_PRC_DeMultiplexer_Forward_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rrpc_msg.proto\022\007rpc_msg\"2\n\007CHANNEL\022\r\n\005r"
  "ealm\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\"G\n\n"
  "CONTROLLER\022\016\n\006seq_id\030\001 \001(\004\022\022\n\ntimeout_ms"
  "\030\002 \001(\004\022\025\n\rserver_stream\030\003 \001(\010\"y\n\021ClientM"
  "essageInfo\022\022\n\nsession_id\030\001 \001(\004\022\017\n\007seq_nu"
  "m\030\002 \001(\r\022\016\n\006opcode\030\003 \001(\r\022\027\n\017response_opco"
  "de\030\004 \001(\r\022\026\n\016connetion_type\030\005 \001(\r\"l\n\016Role"
  "Identifier\022\017\n\007user_id\030\001 \001(\004\022\037\n\005gw_id\030\002 \001"
  "(\0132\020.rpc_msg.CHANNEL\022(\n\004info\030\003 \001(\0132\032.rpc"
  "_msg.ClientMessageInfo\"[\n\021CLIENT_IDENTIF"
  "IER\022\036\n\004stub\030\001 \001(\0132\020.rpc_msg.CHANNEL\022\016\n\006s"
  "eq_id\030\002 \001(\004\022\026\n\016required_reply\030\003 \001(\010\"3\n\021S"
  "ERVER_IDENTIFIER\022\036\n\004stub\030\001 \001(\0132\020.rpc_msg"
  ".CHANNEL\"\240\001\n\013RPC_REQUEST\022*\n\006client\030\001 \001(\013"
  "2\032.rpc_msg.CLIENT_IDENTIFIER\022*\n\006server\030\002"
  " \001(\0132\032.rpc_msg.SERVER_IDENTIFIER\022\025\n\rserv"
  "er_stream\030\003 \001(\010\022\017\n\007opcodes\030\004 \001(\r\022\021\n\targs"
  "_data\030\005 \001(\014\"#\n\006STATUS\022\014\n\004code\030\001 \001(\r\022\013\n\003m"
  "sg\030\002 \001(\t\"\276\001\n\014RPC_RESPONSE\022*\n\006client\030\001 \001("
  "\0132\032.rpc_msg.CLIENT_IDENTIFIER\022*\n\006server\030"
  "\002 \001(\0132\032.rpc_msg.SERVER_IDENTIFIER\022\037\n\006sta"
  "tus\030\003 \001(\0132\017.rpc_msg.STATUS\022\020\n\010has_more\030\004"
  " \001(\010\022\016\n\006offset\030\005 \001(\r\022\023\n\013result_data\030\006 \001("
  "\014\"|\n\027RPC_Multiplexer_Forward\022%\n\004role\030\001 \001"
  "(\0132\027.rpc_msg.RoleIdentifier\022(\n\004info\030\002 \001("
  "\0132\032.rpc_msg.ClientMessageInfo\022\020\n\010body_ms"
  "g\030\003 \001(\014\"~\n\031PRC_DeMultiplexer_Forward\022%\n\004"
  "role\030\001 \001(\0132\027.rpc_msg.RoleIdentifier\022(\n\004i"
  "nfo\030\002 \001(\0132\032.rpc_msg.ClientMessageInfo\022\020\n"
  "\010body_msg\030\003 \001(\014*\363\001\n\013RPC_OPCODES\022\014\n\010RPC_N"
  "one\020\000\022\027\n\022RPC_MysqlDescTable\020\221\003\022\023\n\016RPC_My"
  "sqlQuery\020\222\003\022\024\n\017RPC_MysqlInsert\020\223\003\022\024\n\017RPC"
  "_MysqlUpdate\020\224\003\022\024\n\017RPC_MysqlDelete\020\225\003\022\033\n"
  "\026RPC_MysqlQueryByFilter\020\226\003\022\030\n\023RPC_MysqlM"
  "ultiQuery\020\227\003\022\026\n\021RPC_MysqlQueryAll\020\230\003\022\027\n\022"
  "RPC_MysqlStatement\020\231\003*\343\003\n\010RPC_CODE\022\013\n\007CO"
  "DE_Ok\020\000\022\021\n\rCODE_Ok_Async\020\001\022\020\n\014CODE_Timeo"
  "ut\020d\022\023\n\017CODE_Unregister\020e\022\023\n\017CODE_ParseE"
  "rror\020f\022\030\n\024CODE_ErrorServerPost\020g\022\035\n\031CODE"
  "_RouteNotLinkToServer\020h\022\037\n\033CODE_RouteSen"
  "dToServerError\020i\022\031\n\025CODE_OpcodeUnregiste"
  "r\020j\022\027\n\023CODE_CreateMsgError\020k\022\030\n\024CODE_Log"
  "icThreadNull\020l\022\031\n\025CODE_NotReceivedReply\020"
  "m\022\020\n\014CODE_NotSend\020n\022\030\n\024CODE_LoadFromDbEr"
  "ror\020o\022\026\n\022CODE_DirtyFlagZero\020p\022\023\n\017CODE_Qu"
  "eryError\020q\022\037\n\033CODE_TableNameNotExistErro"
  "r\020r\022\036\n\032CODE_GenerateQuerySQLError\020s\022\036\n\032C"
  "ODE_NotMatchedResultError\020tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5fmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5fmsg_2eproto = {
    false, false, 1915, descriptor_table_protodef_rpc_5fmsg_2eproto,
    "rpc_msg.proto",
    &descriptor_table_rpc_5fmsg_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_rpc_5fmsg_2eproto::offsets,
    file_level_metadata_rpc_5fmsg_2eproto, file_level_enum_descriptors_rpc_5fmsg_2eproto,
    file_level_service_descriptors_rpc_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5fmsg_2eproto_getter() {
  return &descriptor_table_rpc_5fmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5fmsg_2eproto(&descriptor_table_rpc_5fmsg_2eproto);
namespace rpc_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_OPCODES_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmsg_2eproto);
  return file_level_enum_descriptors_rpc_5fmsg_2eproto[0];
}
bool RPC_OPCODES_IsValid(int value) {
  switch (value) {
    case 0:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmsg_2eproto);
  return file_level_enum_descriptors_rpc_5fmsg_2eproto[1];
}
bool RPC_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CHANNEL::_Internal {
 public:
};

CHANNEL::CHANNEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.CHANNEL)
}
CHANNEL::CHANNEL(const CHANNEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CHANNEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.realm_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.realm_, &from._impl_.realm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.realm_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CHANNEL)
}

inline void CHANNEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.realm_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CHANNEL::~CHANNEL() {
  // @@protoc_insertion_point(destructor:rpc_msg.CHANNEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CHANNEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CHANNEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CHANNEL::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CHANNEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.realm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.realm_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHANNEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 realm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CHANNEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CHANNEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 realm = 1;
  if (this->_internal_realm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_realm(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CHANNEL)
  return target;
}

size_t CHANNEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CHANNEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 realm = 1;
  if (this->_internal_realm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_realm());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CHANNEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CHANNEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CHANNEL::GetClassData() const { return &_class_data_; }


void CHANNEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CHANNEL*>(&to_msg);
  auto& from = static_cast<const CHANNEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CHANNEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_realm() != 0) {
    _this->_internal_set_realm(from._internal_realm());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CHANNEL::CopyFrom(const CHANNEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CHANNEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHANNEL::IsInitialized() const {
  return true;
}

void CHANNEL::InternalSwap(CHANNEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHANNEL, _impl_.id_)
      + sizeof(CHANNEL::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(CHANNEL, _impl_.realm_)>(
          reinterpret_cast<char*>(&_impl_.realm_),
          reinterpret_cast<char*>(&other->_impl_.realm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHANNEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[0]);
}

// ===================================================================

class CONTROLLER::_Internal {
 public:
};

CONTROLLER::CONTROLLER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.CONTROLLER)
}
CONTROLLER::CONTROLLER(const CONTROLLER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CONTROLLER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seq_id_){}
    , decltype(_impl_.timeout_ms_){}
    , decltype(_impl_.server_stream_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seq_id_, &from._impl_.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_stream_) -
    reinterpret_cast<char*>(&_impl_.seq_id_)) + sizeof(_impl_.server_stream_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CONTROLLER)
}

inline void CONTROLLER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seq_id_){uint64_t{0u}}
    , decltype(_impl_.timeout_ms_){uint64_t{0u}}
    , decltype(_impl_.server_stream_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CONTROLLER::~CONTROLLER() {
  // @@protoc_insertion_point(destructor:rpc_msg.CONTROLLER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CONTROLLER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CONTROLLER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CONTROLLER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CONTROLLER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_stream_) -
      reinterpret_cast<char*>(&_impl_.seq_id_)) + sizeof(_impl_.server_stream_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CONTROLLER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 seq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool server_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.server_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CONTROLLER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CONTROLLER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_id = 1;
  if (this->_internal_seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_id(), target);
  }

  // uint64 timeout_ms = 2;
  if (this->_internal_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout_ms(), target);
  }

  // bool server_stream = 3;
  if (this->_internal_server_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_server_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CONTROLLER)
  return target;
}

size_t CONTROLLER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CONTROLLER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seq_id = 1;
  if (this->_internal_seq_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq_id());
  }

  // uint64 timeout_ms = 2;
  if (this->_internal_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout_ms());
  }

  // bool server_stream = 3;
  if (this->_internal_server_stream() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CONTROLLER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CONTROLLER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CONTROLLER::GetClassData() const { return &_class_data_; }


void CONTROLLER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CONTROLLER*>(&to_msg);
  auto& from = static_cast<const CONTROLLER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CONTROLLER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq_id() != 0) {
    _this->_internal_set_seq_id(from._internal_seq_id());
  }
  if (from._internal_timeout_ms() != 0) {
    _this->_internal_set_timeout_ms(from._internal_timeout_ms());
  }
  if (from._internal_server_stream() != 0) {
    _this->_internal_set_server_stream(from._internal_server_stream());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CONTROLLER::CopyFrom(const CONTROLLER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CONTROLLER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONTROLLER::IsInitialized() const {
  return true;
}

void CONTROLLER::InternalSwap(CONTROLLER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CONTROLLER, _impl_.server_stream_)
      + sizeof(CONTROLLER::_impl_.server_stream_)
      - PROTOBUF_FIELD_OFFSET(CONTROLLER, _impl_.seq_id_)>(
          reinterpret_cast<char*>(&_impl_.seq_id_),
          reinterpret_cast<char*>(&other->_impl_.seq_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CONTROLLER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[1]);
}

// ===================================================================

class ClientMessageInfo::_Internal {
 public:
};

ClientMessageInfo::ClientMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.ClientMessageInfo)
}
ClientMessageInfo::ClientMessageInfo(const ClientMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMessageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.seq_num_){}
    , decltype(_impl_.opcode_){}
    , decltype(_impl_.response_opcode_){}
    , decltype(_impl_.connetion_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.connetion_type_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.connetion_type_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.ClientMessageInfo)
}

inline void ClientMessageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){uint64_t{0u}}
    , decltype(_impl_.seq_num_){0u}
    , decltype(_impl_.opcode_){0u}
    , decltype(_impl_.response_opcode_){0u}
    , decltype(_impl_.connetion_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientMessageInfo::~ClientMessageInfo() {
  // @@protoc_insertion_point(destructor:rpc_msg.ClientMessageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientMessageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.ClientMessageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.connetion_type_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.connetion_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 seq_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 opcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 response_opcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.response_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 connetion_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.connetion_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientMessageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.ClientMessageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // uint32 seq_num = 2;
  if (this->_internal_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seq_num(), target);
  }

  // uint32 opcode = 3;
  if (this->_internal_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_opcode(), target);
  }

  // uint32 response_opcode = 4;
  if (this->_internal_response_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_response_opcode(), target);
  }

  // uint32 connetion_type = 5;
  if (this->_internal_connetion_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_connetion_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.ClientMessageInfo)
  return target;
}

size_t ClientMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.ClientMessageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
  }

  // uint32 seq_num = 2;
  if (this->_internal_seq_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seq_num());
  }

  // uint32 opcode = 3;
  if (this->_internal_opcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opcode());
  }

  // uint32 response_opcode = 4;
  if (this->_internal_response_opcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_opcode());
  }

  // uint32 connetion_type = 5;
  if (this->_internal_connetion_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connetion_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMessageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessageInfo::GetClassData() const { return &_class_data_; }


void ClientMessageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMessageInfo*>(&to_msg);
  auto& from = static_cast<const ClientMessageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.ClientMessageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_seq_num() != 0) {
    _this->_internal_set_seq_num(from._internal_seq_num());
  }
  if (from._internal_opcode() != 0) {
    _this->_internal_set_opcode(from._internal_opcode());
  }
  if (from._internal_response_opcode() != 0) {
    _this->_internal_set_response_opcode(from._internal_response_opcode());
  }
  if (from._internal_connetion_type() != 0) {
    _this->_internal_set_connetion_type(from._internal_connetion_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMessageInfo::CopyFrom(const ClientMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.ClientMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessageInfo::IsInitialized() const {
  return true;
}

void ClientMessageInfo::InternalSwap(ClientMessageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientMessageInfo, _impl_.connetion_type_)
      + sizeof(ClientMessageInfo::_impl_.connetion_type_)
      - PROTOBUF_FIELD_OFFSET(ClientMessageInfo, _impl_.session_id_)>(
          reinterpret_cast<char*>(&_impl_.session_id_),
          reinterpret_cast<char*>(&other->_impl_.session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[2]);
}

// ===================================================================

class RoleIdentifier::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& gw_id(const RoleIdentifier* msg);
  static const ::rpc_msg::ClientMessageInfo& info(const RoleIdentifier* msg);
};

const ::rpc_msg::CHANNEL&
RoleIdentifier::_Internal::gw_id(const RoleIdentifier* msg) {
  return *msg->_impl_.gw_id_;
}
const ::rpc_msg::ClientMessageInfo&
RoleIdentifier::_Internal::info(const RoleIdentifier* msg) {
  return *msg->_impl_.info_;
}
RoleIdentifier::RoleIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.RoleIdentifier)
}
RoleIdentifier::RoleIdentifier(const RoleIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleIdentifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gw_id_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gw_id()) {
    _this->_impl_.gw_id_ = new ::rpc_msg::CHANNEL(*from._impl_.gw_id_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::rpc_msg::ClientMessageInfo(*from._impl_.info_);
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RoleIdentifier)
}

inline void RoleIdentifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gw_id_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleIdentifier::~RoleIdentifier() {
  // @@protoc_insertion_point(destructor:rpc_msg.RoleIdentifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gw_id_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void RoleIdentifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RoleIdentifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gw_id_ != nullptr) {
    delete _impl_.gw_id_;
  }
  _impl_.gw_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _impl_.user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleIdentifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rpc_msg.CHANNEL gw_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gw_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rpc_msg.ClientMessageInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleIdentifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RoleIdentifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .rpc_msg.CHANNEL gw_id = 2;
  if (this->_internal_has_gw_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gw_id(this),
        _Internal::gw_id(this).GetCachedSize(), target, stream);
  }

  // .rpc_msg.ClientMessageInfo info = 3;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RoleIdentifier)
  return target;
}

size_t RoleIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RoleIdentifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL gw_id = 2;
  if (this->_internal_has_gw_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gw_id_);
  }

  // .rpc_msg.ClientMessageInfo info = 3;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleIdentifier::GetClassData() const { return &_class_data_; }


void RoleIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleIdentifier*>(&to_msg);
  auto& from = static_cast<const RoleIdentifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RoleIdentifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gw_id()) {
    _this->_internal_mutable_gw_id()->::rpc_msg::CHANNEL::MergeFrom(
        from._internal_gw_id());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::rpc_msg::ClientMessageInfo::MergeFrom(
        from._internal_info());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleIdentifier::CopyFrom(const RoleIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RoleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleIdentifier::IsInitialized() const {
  return true;
}

void RoleIdentifier::InternalSwap(RoleIdentifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleIdentifier, _impl_.user_id_)
      + sizeof(RoleIdentifier::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(RoleIdentifier, _impl_.gw_id_)>(
          reinterpret_cast<char*>(&_impl_.gw_id_),
          reinterpret_cast<char*>(&other->_impl_.gw_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleIdentifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[3]);
}

// ===================================================================

class CLIENT_IDENTIFIER::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& stub(const CLIENT_IDENTIFIER* msg);
};

const ::rpc_msg::CHANNEL&
CLIENT_IDENTIFIER::_Internal::stub(const CLIENT_IDENTIFIER* msg) {
  return *msg->_impl_.stub_;
}
CLIENT_IDENTIFIER::CLIENT_IDENTIFIER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.CLIENT_IDENTIFIER)
}
CLIENT_IDENTIFIER::CLIENT_IDENTIFIER(const CLIENT_IDENTIFIER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CLIENT_IDENTIFIER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stub_){nullptr}
    , decltype(_impl_.seq_id_){}
    , decltype(_impl_.required_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stub()) {
    _this->_impl_.stub_ = new ::rpc_msg::CHANNEL(*from._impl_.stub_);
  }
  ::memcpy(&_impl_.seq_id_, &from._impl_.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.required_reply_) -
    reinterpret_cast<char*>(&_impl_.seq_id_)) + sizeof(_impl_.required_reply_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CLIENT_IDENTIFIER)
}

inline void CLIENT_IDENTIFIER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stub_){nullptr}
    , decltype(_impl_.seq_id_){uint64_t{0u}}
    , decltype(_impl_.required_reply_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CLIENT_IDENTIFIER::~CLIENT_IDENTIFIER() {
  // @@protoc_insertion_point(destructor:rpc_msg.CLIENT_IDENTIFIER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLIENT_IDENTIFIER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stub_;
}

void CLIENT_IDENTIFIER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CLIENT_IDENTIFIER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CLIENT_IDENTIFIER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stub_ != nullptr) {
    delete _impl_.stub_;
  }
  _impl_.stub_ = nullptr;
  ::memset(&_impl_.seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.required_reply_) -
      reinterpret_cast<char*>(&_impl_.seq_id_)) + sizeof(_impl_.required_reply_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLIENT_IDENTIFIER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rpc_msg.CHANNEL stub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stub(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seq_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool required_reply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.required_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLIENT_IDENTIFIER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CLIENT_IDENTIFIER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->_internal_has_stub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stub(this),
        _Internal::stub(this).GetCachedSize(), target, stream);
  }

  // uint64 seq_id = 2;
  if (this->_internal_seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq_id(), target);
  }

  // bool required_reply = 3;
  if (this->_internal_required_reply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_required_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CLIENT_IDENTIFIER)
  return target;
}

size_t CLIENT_IDENTIFIER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CLIENT_IDENTIFIER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->_internal_has_stub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stub_);
  }

  // uint64 seq_id = 2;
  if (this->_internal_seq_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq_id());
  }

  // bool required_reply = 3;
  if (this->_internal_required_reply() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLIENT_IDENTIFIER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CLIENT_IDENTIFIER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLIENT_IDENTIFIER::GetClassData() const { return &_class_data_; }


void CLIENT_IDENTIFIER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CLIENT_IDENTIFIER*>(&to_msg);
  auto& from = static_cast<const CLIENT_IDENTIFIER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CLIENT_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stub()) {
    _this->_internal_mutable_stub()->::rpc_msg::CHANNEL::MergeFrom(
        from._internal_stub());
  }
  if (from._internal_seq_id() != 0) {
    _this->_internal_set_seq_id(from._internal_seq_id());
  }
  if (from._internal_required_reply() != 0) {
    _this->_internal_set_required_reply(from._internal_required_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLIENT_IDENTIFIER::CopyFrom(const CLIENT_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CLIENT_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLIENT_IDENTIFIER::IsInitialized() const {
  return true;
}

void CLIENT_IDENTIFIER::InternalSwap(CLIENT_IDENTIFIER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLIENT_IDENTIFIER, _impl_.required_reply_)
      + sizeof(CLIENT_IDENTIFIER::_impl_.required_reply_)
      - PROTOBUF_FIELD_OFFSET(CLIENT_IDENTIFIER, _impl_.stub_)>(
          reinterpret_cast<char*>(&_impl_.stub_),
          reinterpret_cast<char*>(&other->_impl_.stub_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLIENT_IDENTIFIER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[4]);
}

// ===================================================================

class SERVER_IDENTIFIER::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& stub(const SERVER_IDENTIFIER* msg);
};

const ::rpc_msg::CHANNEL&
SERVER_IDENTIFIER::_Internal::stub(const SERVER_IDENTIFIER* msg) {
  return *msg->_impl_.stub_;
}
SERVER_IDENTIFIER::SERVER_IDENTIFIER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.SERVER_IDENTIFIER)
}
SERVER_IDENTIFIER::SERVER_IDENTIFIER(const SERVER_IDENTIFIER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SERVER_IDENTIFIER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stub_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stub()) {
    _this->_impl_.stub_ = new ::rpc_msg::CHANNEL(*from._impl_.stub_);
  }
  // @@protoc_insertion_point(copy_constructor:rpc_msg.SERVER_IDENTIFIER)
}

inline void SERVER_IDENTIFIER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stub_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SERVER_IDENTIFIER::~SERVER_IDENTIFIER() {
  // @@protoc_insertion_point(destructor:rpc_msg.SERVER_IDENTIFIER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SERVER_IDENTIFIER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stub_;
}

void SERVER_IDENTIFIER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SERVER_IDENTIFIER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.SERVER_IDENTIFIER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stub_ != nullptr) {
    delete _impl_.stub_;
  }
  _impl_.stub_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SERVER_IDENTIFIER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rpc_msg.CHANNEL stub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stub(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SERVER_IDENTIFIER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.SERVER_IDENTIFIER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->_internal_has_stub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stub(this),
        _Internal::stub(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.SERVER_IDENTIFIER)
  return target;
}

size_t SERVER_IDENTIFIER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.SERVER_IDENTIFIER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->_internal_has_stub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stub_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SERVER_IDENTIFIER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SERVER_IDENTIFIER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SERVER_IDENTIFIER::GetClassData() const { return &_class_data_; }


void SERVER_IDENTIFIER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SERVER_IDENTIFIER*>(&to_msg);
  auto& from = static_cast<const SERVER_IDENTIFIER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.SERVER_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stub()) {
    _this->_internal_mutable_stub()->::rpc_msg::CHANNEL::MergeFrom(
        from._internal_stub());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SERVER_IDENTIFIER::CopyFrom(const SERVER_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.SERVER_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SERVER_IDENTIFIER::IsInitialized() const {
  return true;
}

void SERVER_IDENTIFIER::InternalSwap(SERVER_IDENTIFIER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stub_, other->_impl_.stub_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SERVER_IDENTIFIER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[5]);
}

// ===================================================================

class RPC_REQUEST::_Internal {
 public:
  static const ::rpc_msg::CLIENT_IDENTIFIER& client(const RPC_REQUEST* msg);
  static const ::rpc_msg::SERVER_IDENTIFIER& server(const RPC_REQUEST* msg);
};

const ::rpc_msg::CLIENT_IDENTIFIER&
RPC_REQUEST::_Internal::client(const RPC_REQUEST* msg) {
  return *msg->_impl_.client_;
}
const ::rpc_msg::SERVER_IDENTIFIER&
RPC_REQUEST::_Internal::server(const RPC_REQUEST* msg) {
  return *msg->_impl_.server_;
}
RPC_REQUEST::RPC_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.RPC_REQUEST)
}
RPC_REQUEST::RPC_REQUEST(const RPC_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPC_REQUEST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_data_){}
    , decltype(_impl_.client_){nullptr}
    , decltype(_impl_.server_){nullptr}
    , decltype(_impl_.server_stream_){}
    , decltype(_impl_.opcodes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.args_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args_data().empty()) {
    _this->_impl_.args_data_.Set(from._internal_args_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_client()) {
    _this->_impl_.client_ = new ::rpc_msg::CLIENT_IDENTIFIER(*from._impl_.client_);
  }
  if (from._internal_has_server()) {
    _this->_impl_.server_ = new ::rpc_msg::SERVER_IDENTIFIER(*from._impl_.server_);
  }
  ::memcpy(&_impl_.server_stream_, &from._impl_.server_stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opcodes_) -
    reinterpret_cast<char*>(&_impl_.server_stream_)) + sizeof(_impl_.opcodes_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_REQUEST)
}

inline void RPC_REQUEST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_data_){}
    , decltype(_impl_.client_){nullptr}
    , decltype(_impl_.server_){nullptr}
    , decltype(_impl_.server_stream_){false}
    , decltype(_impl_.opcodes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.args_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPC_REQUEST::~RPC_REQUEST() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_REQUEST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPC_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.client_;
  if (this != internal_default_instance()) delete _impl_.server_;
}

void RPC_REQUEST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPC_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_REQUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_ != nullptr) {
    delete _impl_.server_;
  }
  _impl_.server_ = nullptr;
  ::memset(&_impl_.server_stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.opcodes_) -
      reinterpret_cast<char*>(&_impl_.server_stream_)) + sizeof(_impl_.opcodes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPC_REQUEST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rpc_msg.CLIENT_IDENTIFIER client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rpc_msg.SERVER_IDENTIFIER server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool server_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.server_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 opcodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.opcodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes args_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_args_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPC_REQUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_REQUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->_internal_has_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client(this),
        _Internal::client(this).GetCachedSize(), target, stream);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->_internal_has_server()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::server(this),
        _Internal::server(this).GetCachedSize(), target, stream);
  }

  // bool server_stream = 3;
  if (this->_internal_server_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_server_stream(), target);
  }

  // uint32 opcodes = 4;
  if (this->_internal_opcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_opcodes(), target);
  }

  // bytes args_data = 5;
  if (!this->_internal_args_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_args_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_REQUEST)
  return target;
}

size_t RPC_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_REQUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args_data = 5;
  if (!this->_internal_args_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args_data());
  }

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->_internal_has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_);
  }

  // bool server_stream = 3;
  if (this->_internal_server_stream() != 0) {
    total_size += 1 + 1;
  }

  // uint32 opcodes = 4;
  if (this->_internal_opcodes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opcodes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPC_REQUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPC_REQUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPC_REQUEST::GetClassData() const { return &_class_data_; }


void RPC_REQUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPC_REQUEST*>(&to_msg);
  auto& from = static_cast<const RPC_REQUEST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_REQUEST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_args_data().empty()) {
    _this->_internal_set_args_data(from._internal_args_data());
  }
  if (from._internal_has_client()) {
    _this->_internal_mutable_client()->::rpc_msg::CLIENT_IDENTIFIER::MergeFrom(
        from._internal_client());
  }
  if (from._internal_has_server()) {
    _this->_internal_mutable_server()->::rpc_msg::SERVER_IDENTIFIER::MergeFrom(
        from._internal_server());
  }
  if (from._internal_server_stream() != 0) {
    _this->_internal_set_server_stream(from._internal_server_stream());
  }
  if (from._internal_opcodes() != 0) {
    _this->_internal_set_opcodes(from._internal_opcodes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPC_REQUEST::CopyFrom(const RPC_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_REQUEST::IsInitialized() const {
  return true;
}

void RPC_REQUEST::InternalSwap(RPC_REQUEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_data_, lhs_arena,
      &other->_impl_.args_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPC_REQUEST, _impl_.opcodes_)
      + sizeof(RPC_REQUEST::_impl_.opcodes_)
      - PROTOBUF_FIELD_OFFSET(RPC_REQUEST, _impl_.client_)>(
          reinterpret_cast<char*>(&_impl_.client_),
          reinterpret_cast<char*>(&other->_impl_.client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_REQUEST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[6]);
}

// ===================================================================

class STATUS::_Internal {
 public:
};

STATUS::STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.STATUS)
}
STATUS::STATUS(const STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  STATUS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.STATUS)
}

inline void STATUS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

STATUS::~STATUS() {
  // @@protoc_insertion_point(destructor:rpc_msg.STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void STATUS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc_msg.STATUS.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc_msg.STATUS.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.STATUS)
  return target;
}

size_t STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STATUS::GetClassData() const { return &_class_data_; }


void STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<STATUS*>(&to_msg);
  auto& from = static_cast<const STATUS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.STATUS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STATUS::CopyFrom(const STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STATUS::IsInitialized() const {
  return true;
}

void STATUS::InternalSwap(STATUS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[7]);
}

// ===================================================================

class RPC_RESPONSE::_Internal {
 public:
  static const ::rpc_msg::CLIENT_IDENTIFIER& client(const RPC_RESPONSE* msg);
  static const ::rpc_msg::SERVER_IDENTIFIER& server(const RPC_RESPONSE* msg);
  static const ::rpc_msg::STATUS& status(const RPC_RESPONSE* msg);
};

const ::rpc_msg::CLIENT_IDENTIFIER&
RPC_RESPONSE::_Internal::client(const RPC_RESPONSE* msg) {
  return *msg->_impl_.client_;
}
const ::rpc_msg::SERVER_IDENTIFIER&
RPC_RESPONSE::_Internal::server(const RPC_RESPONSE* msg) {
  return *msg->_impl_.server_;
}
const ::rpc_msg::STATUS&
RPC_RESPONSE::_Internal::status(const RPC_RESPONSE* msg) {
  return *msg->_impl_.status_;
}
RPC_RESPONSE::RPC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.RPC_RESPONSE)
}
RPC_RESPONSE::RPC_RESPONSE(const RPC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPC_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_data_){}
    , decltype(_impl_.client_){nullptr}
    , decltype(_impl_.server_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.has_more_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_data().empty()) {
    _this->_impl_.result_data_.Set(from._internal_result_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_client()) {
    _this->_impl_.client_ = new ::rpc_msg::CLIENT_IDENTIFIER(*from._impl_.client_);
  }
  if (from._internal_has_server()) {
    _this->_impl_.server_ = new ::rpc_msg::SERVER_IDENTIFIER(*from._impl_.server_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::rpc_msg::STATUS(*from._impl_.status_);
  }
  ::memcpy(&_impl_.has_more_, &from._impl_.has_more_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.has_more_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_RESPONSE)
}

inline void RPC_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_data_){}
    , decltype(_impl_.client_){nullptr}
    , decltype(_impl_.server_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.has_more_){false}
    , decltype(_impl_.offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPC_RESPONSE::~RPC_RESPONSE() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.client_;
  if (this != internal_default_instance()) delete _impl_.server_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void RPC_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_ != nullptr) {
    delete _impl_.server_;
  }
  _impl_.server_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.has_more_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.has_more_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPC_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rpc_msg.CLIENT_IDENTIFIER client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rpc_msg.SERVER_IDENTIFIER server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rpc_msg.STATUS status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_more = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes result_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_result_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPC_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->_internal_has_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client(this),
        _Internal::client(this).GetCachedSize(), target, stream);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->_internal_has_server()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::server(this),
        _Internal::server(this).GetCachedSize(), target, stream);
  }

  // .rpc_msg.STATUS status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool has_more = 4;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_more(), target);
  }

  // uint32 offset = 5;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_offset(), target);
  }

  // bytes result_data = 6;
  if (!this->_internal_result_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_result_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_RESPONSE)
  return target;
}

size_t RPC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result_data = 6;
  if (!this->_internal_result_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result_data());
  }

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->_internal_has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_);
  }

  // .rpc_msg.STATUS status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool has_more = 4;
  if (this->_internal_has_more() != 0) {
    total_size += 1 + 1;
  }

  // uint32 offset = 5;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPC_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPC_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPC_RESPONSE::GetClassData() const { return &_class_data_; }


void RPC_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPC_RESPONSE*>(&to_msg);
  auto& from = static_cast<const RPC_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_data().empty()) {
    _this->_internal_set_result_data(from._internal_result_data());
  }
  if (from._internal_has_client()) {
    _this->_internal_mutable_client()->::rpc_msg::CLIENT_IDENTIFIER::MergeFrom(
        from._internal_client());
  }
  if (from._internal_has_server()) {
    _this->_internal_mutable_server()->::rpc_msg::SERVER_IDENTIFIER::MergeFrom(
        from._internal_server());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::rpc_msg::STATUS::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPC_RESPONSE::CopyFrom(const RPC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_RESPONSE::IsInitialized() const {
  return true;
}

void RPC_RESPONSE::InternalSwap(RPC_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_data_, lhs_arena,
      &other->_impl_.result_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPC_RESPONSE, _impl_.offset_)
      + sizeof(RPC_RESPONSE::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(RPC_RESPONSE, _impl_.client_)>(
          reinterpret_cast<char*>(&_impl_.client_),
          reinterpret_cast<char*>(&other->_impl_.client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[8]);
}

// ===================================================================

class RPC_Multiplexer_Forward::_Internal {
 public:
  static const ::rpc_msg::RoleIdentifier& role(const RPC_Multiplexer_Forward* msg);
  static const ::rpc_msg::ClientMessageInfo& info(const RPC_Multiplexer_Forward* msg);
};

const ::rpc_msg::RoleIdentifier&
RPC_Multiplexer_Forward::_Internal::role(const RPC_Multiplexer_Forward* msg) {
  return *msg->_impl_.role_;
}
const ::rpc_msg::ClientMessageInfo&
RPC_Multiplexer_Forward::_Internal::info(const RPC_Multiplexer_Forward* msg) {
  return *msg->_impl_.info_;
}
RPC_Multiplexer_Forward::RPC_Multiplexer_Forward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.RPC_Multiplexer_Forward)
}
RPC_Multiplexer_Forward::RPC_Multiplexer_Forward(const RPC_Multiplexer_Forward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPC_Multiplexer_Forward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_msg_){}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body_msg().empty()) {
    _this->_impl_.body_msg_.Set(from._internal_body_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    _this->_impl_.role_ = new ::rpc_msg::RoleIdentifier(*from._impl_.role_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::rpc_msg::ClientMessageInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_Multiplexer_Forward)
}

inline void RPC_Multiplexer_Forward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_msg_){}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPC_Multiplexer_Forward::~RPC_Multiplexer_Forward() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_Multiplexer_Forward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPC_Multiplexer_Forward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.role_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void RPC_Multiplexer_Forward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPC_Multiplexer_Forward::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_Multiplexer_Forward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPC_Multiplexer_Forward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rpc_msg.RoleIdentifier role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rpc_msg.ClientMessageInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes body_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPC_Multiplexer_Forward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_Multiplexer_Forward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // .rpc_msg.ClientMessageInfo info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // bytes body_msg = 3;
  if (!this->_internal_body_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_Multiplexer_Forward)
  return target;
}

size_t RPC_Multiplexer_Forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_Multiplexer_Forward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_msg = 3;
  if (!this->_internal_body_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_msg());
  }

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_);
  }

  // .rpc_msg.ClientMessageInfo info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPC_Multiplexer_Forward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPC_Multiplexer_Forward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPC_Multiplexer_Forward::GetClassData() const { return &_class_data_; }


void RPC_Multiplexer_Forward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPC_Multiplexer_Forward*>(&to_msg);
  auto& from = static_cast<const RPC_Multiplexer_Forward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_Multiplexer_Forward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body_msg().empty()) {
    _this->_internal_set_body_msg(from._internal_body_msg());
  }
  if (from._internal_has_role()) {
    _this->_internal_mutable_role()->::rpc_msg::RoleIdentifier::MergeFrom(
        from._internal_role());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::rpc_msg::ClientMessageInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPC_Multiplexer_Forward::CopyFrom(const RPC_Multiplexer_Forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_Multiplexer_Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_Multiplexer_Forward::IsInitialized() const {
  return true;
}

void RPC_Multiplexer_Forward::InternalSwap(RPC_Multiplexer_Forward* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_msg_, lhs_arena,
      &other->_impl_.body_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPC_Multiplexer_Forward, _impl_.info_)
      + sizeof(RPC_Multiplexer_Forward::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(RPC_Multiplexer_Forward, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_Multiplexer_Forward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[9]);
}

// ===================================================================

class PRC_DeMultiplexer_Forward::_Internal {
 public:
  static const ::rpc_msg::RoleIdentifier& role(const PRC_DeMultiplexer_Forward* msg);
  static const ::rpc_msg::ClientMessageInfo& info(const PRC_DeMultiplexer_Forward* msg);
};

const ::rpc_msg::RoleIdentifier&
PRC_DeMultiplexer_Forward::_Internal::role(const PRC_DeMultiplexer_Forward* msg) {
  return *msg->_impl_.role_;
}
const ::rpc_msg::ClientMessageInfo&
PRC_DeMultiplexer_Forward::_Internal::info(const PRC_DeMultiplexer_Forward* msg) {
  return *msg->_impl_.info_;
}
PRC_DeMultiplexer_Forward::PRC_DeMultiplexer_Forward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc_msg.PRC_DeMultiplexer_Forward)
}
PRC_DeMultiplexer_Forward::PRC_DeMultiplexer_Forward(const PRC_DeMultiplexer_Forward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PRC_DeMultiplexer_Forward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_msg_){}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body_msg().empty()) {
    _this->_impl_.body_msg_.Set(from._internal_body_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    _this->_impl_.role_ = new ::rpc_msg::RoleIdentifier(*from._impl_.role_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::rpc_msg::ClientMessageInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:rpc_msg.PRC_DeMultiplexer_Forward)
}

inline void PRC_DeMultiplexer_Forward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_msg_){}
    , decltype(_impl_.role_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PRC_DeMultiplexer_Forward::~PRC_DeMultiplexer_Forward() {
  // @@protoc_insertion_point(destructor:rpc_msg.PRC_DeMultiplexer_Forward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRC_DeMultiplexer_Forward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.role_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void PRC_DeMultiplexer_Forward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PRC_DeMultiplexer_Forward::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.PRC_DeMultiplexer_Forward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.role_ != nullptr) {
    delete _impl_.role_;
  }
  _impl_.role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRC_DeMultiplexer_Forward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rpc_msg.RoleIdentifier role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rpc_msg.ClientMessageInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes body_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PRC_DeMultiplexer_Forward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.PRC_DeMultiplexer_Forward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->_internal_has_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role(this),
        _Internal::role(this).GetCachedSize(), target, stream);
  }

  // .rpc_msg.ClientMessageInfo info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // bytes body_msg = 3;
  if (!this->_internal_body_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.PRC_DeMultiplexer_Forward)
  return target;
}

size_t PRC_DeMultiplexer_Forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.PRC_DeMultiplexer_Forward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_msg = 3;
  if (!this->_internal_body_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_msg());
  }

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_);
  }

  // .rpc_msg.ClientMessageInfo info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRC_DeMultiplexer_Forward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PRC_DeMultiplexer_Forward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRC_DeMultiplexer_Forward::GetClassData() const { return &_class_data_; }


void PRC_DeMultiplexer_Forward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PRC_DeMultiplexer_Forward*>(&to_msg);
  auto& from = static_cast<const PRC_DeMultiplexer_Forward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.PRC_DeMultiplexer_Forward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body_msg().empty()) {
    _this->_internal_set_body_msg(from._internal_body_msg());
  }
  if (from._internal_has_role()) {
    _this->_internal_mutable_role()->::rpc_msg::RoleIdentifier::MergeFrom(
        from._internal_role());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::rpc_msg::ClientMessageInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRC_DeMultiplexer_Forward::CopyFrom(const PRC_DeMultiplexer_Forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.PRC_DeMultiplexer_Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRC_DeMultiplexer_Forward::IsInitialized() const {
  return true;
}

void PRC_DeMultiplexer_Forward::InternalSwap(PRC_DeMultiplexer_Forward* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_msg_, lhs_arena,
      &other->_impl_.body_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRC_DeMultiplexer_Forward, _impl_.info_)
      + sizeof(PRC_DeMultiplexer_Forward::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(PRC_DeMultiplexer_Forward, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRC_DeMultiplexer_Forward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmsg_2eproto_getter, &descriptor_table_rpc_5fmsg_2eproto_once,
      file_level_metadata_rpc_5fmsg_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc_msg::CHANNEL*
Arena::CreateMaybeMessage< ::rpc_msg::CHANNEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::CHANNEL >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::CONTROLLER*
Arena::CreateMaybeMessage< ::rpc_msg::CONTROLLER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::CONTROLLER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::ClientMessageInfo*
Arena::CreateMaybeMessage< ::rpc_msg::ClientMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::ClientMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RoleIdentifier*
Arena::CreateMaybeMessage< ::rpc_msg::RoleIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::RoleIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::CLIENT_IDENTIFIER*
Arena::CreateMaybeMessage< ::rpc_msg::CLIENT_IDENTIFIER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::CLIENT_IDENTIFIER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::SERVER_IDENTIFIER*
Arena::CreateMaybeMessage< ::rpc_msg::SERVER_IDENTIFIER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::SERVER_IDENTIFIER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_REQUEST*
Arena::CreateMaybeMessage< ::rpc_msg::RPC_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::RPC_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::STATUS*
Arena::CreateMaybeMessage< ::rpc_msg::STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_RESPONSE*
Arena::CreateMaybeMessage< ::rpc_msg::RPC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::RPC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_Multiplexer_Forward*
Arena::CreateMaybeMessage< ::rpc_msg::RPC_Multiplexer_Forward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::RPC_Multiplexer_Forward >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::PRC_DeMultiplexer_Forward*
Arena::CreateMaybeMessage< ::rpc_msg::PRC_DeMultiplexer_Forward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc_msg::PRC_DeMultiplexer_Forward >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
