// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_msg.proto

#include "rpc_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHANNEL_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessageInfo_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoleIdentifier_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STATUS_rpc_5fmsg_2eproto;
namespace rpc_msg {
class CHANNELDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHANNEL> _instance;
} _CHANNEL_default_instance_;
class CONTROLLERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CONTROLLER> _instance;
} _CONTROLLER_default_instance_;
class ClientMessageInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessageInfo> _instance;
} _ClientMessageInfo_default_instance_;
class RoleIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleIdentifier> _instance;
} _RoleIdentifier_default_instance_;
class CLIENT_IDENTIFIERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLIENT_IDENTIFIER> _instance;
} _CLIENT_IDENTIFIER_default_instance_;
class SERVER_IDENTIFIERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SERVER_IDENTIFIER> _instance;
} _SERVER_IDENTIFIER_default_instance_;
class RPC_REQUESTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_REQUEST> _instance;
} _RPC_REQUEST_default_instance_;
class STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STATUS> _instance;
} _STATUS_default_instance_;
class RPC_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_RESPONSE> _instance;
} _RPC_RESPONSE_default_instance_;
class RPC_Multiplexer_ForwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_Multiplexer_Forward> _instance;
} _RPC_Multiplexer_Forward_default_instance_;
class PRC_DeMultiplexer_ForwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRC_DeMultiplexer_Forward> _instance;
} _PRC_DeMultiplexer_Forward_default_instance_;
class MSG_RPC_REQUEST_ECHODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RPC_REQUEST_ECHO> _instance;
} _MSG_RPC_REQUEST_ECHO_default_instance_;
class MSG_RPC_RESPONSE_ECHODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RPC_RESPONSE_ECHO> _instance;
} _MSG_RPC_RESPONSE_ECHO_default_instance_;
}  // namespace rpc_msg
static void InitDefaultsscc_info_CHANNEL_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_CHANNEL_default_instance_;
    new (ptr) ::rpc_msg::CHANNEL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::CHANNEL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHANNEL_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHANNEL_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_CLIENT_IDENTIFIER_default_instance_;
    new (ptr) ::rpc_msg::CLIENT_IDENTIFIER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::CLIENT_IDENTIFIER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto}, {
      &scc_info_CHANNEL_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_CONTROLLER_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_CONTROLLER_default_instance_;
    new (ptr) ::rpc_msg::CONTROLLER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::CONTROLLER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CONTROLLER_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CONTROLLER_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ClientMessageInfo_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_ClientMessageInfo_default_instance_;
    new (ptr) ::rpc_msg::ClientMessageInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::ClientMessageInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessageInfo_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientMessageInfo_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RPC_REQUEST_ECHO_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_MSG_RPC_REQUEST_ECHO_default_instance_;
    new (ptr) ::rpc_msg::MSG_RPC_REQUEST_ECHO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::MSG_RPC_REQUEST_ECHO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RPC_REQUEST_ECHO_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RPC_REQUEST_ECHO_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RPC_RESPONSE_ECHO_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_MSG_RPC_RESPONSE_ECHO_default_instance_;
    new (ptr) ::rpc_msg::MSG_RPC_RESPONSE_ECHO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::MSG_RPC_RESPONSE_ECHO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RPC_RESPONSE_ECHO_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RPC_RESPONSE_ECHO_rpc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_PRC_DeMultiplexer_Forward_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_PRC_DeMultiplexer_Forward_default_instance_;
    new (ptr) ::rpc_msg::PRC_DeMultiplexer_Forward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::PRC_DeMultiplexer_Forward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PRC_DeMultiplexer_Forward_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PRC_DeMultiplexer_Forward_rpc_5fmsg_2eproto}, {
      &scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RPC_Multiplexer_Forward_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_RPC_Multiplexer_Forward_default_instance_;
    new (ptr) ::rpc_msg::RPC_Multiplexer_Forward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::RPC_Multiplexer_Forward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RPC_Multiplexer_Forward_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RPC_Multiplexer_Forward_rpc_5fmsg_2eproto}, {
      &scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base,
      &scc_info_ClientMessageInfo_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RPC_REQUEST_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_RPC_REQUEST_default_instance_;
    new (ptr) ::rpc_msg::RPC_REQUEST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::RPC_REQUEST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RPC_REQUEST_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RPC_REQUEST_rpc_5fmsg_2eproto}, {
      &scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base,
      &scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RPC_RESPONSE_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_RPC_RESPONSE_default_instance_;
    new (ptr) ::rpc_msg::RPC_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::RPC_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RPC_RESPONSE_rpc_5fmsg_2eproto}, {
      &scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base,
      &scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base,
      &scc_info_STATUS_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RoleIdentifier_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_RoleIdentifier_default_instance_;
    new (ptr) ::rpc_msg::RoleIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::RoleIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoleIdentifier_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoleIdentifier_rpc_5fmsg_2eproto}, {
      &scc_info_CHANNEL_rpc_5fmsg_2eproto.base,
      &scc_info_ClientMessageInfo_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_SERVER_IDENTIFIER_default_instance_;
    new (ptr) ::rpc_msg::SERVER_IDENTIFIER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::SERVER_IDENTIFIER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto}, {
      &scc_info_CHANNEL_rpc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_STATUS_rpc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc_msg::_STATUS_default_instance_;
    new (ptr) ::rpc_msg::STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc_msg::STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STATUS_rpc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STATUS_rpc_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_5fmsg_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, realm_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, type_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CHANNEL, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, seq_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CONTROLLER, server_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, opcodes_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::ClientMessageInfo, seq_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, user_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, gw_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RoleIdentifier, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, stub_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, seq_id_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::CLIENT_IDENTIFIER, required_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::SERVER_IDENTIFIER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::SERVER_IDENTIFIER, stub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, client_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, server_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, server_stream_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, opcodes_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_REQUEST, args_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, code_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::STATUS, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, client_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, server_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, status_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, has_more_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, offset_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_RESPONSE, result_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, role_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, info_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::RPC_Multiplexer_Forward, body_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, role_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, opcodes_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::PRC_DeMultiplexer_Forward, body_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::MSG_RPC_REQUEST_ECHO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::MSG_RPC_REQUEST_ECHO, value1_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::MSG_RPC_REQUEST_ECHO, value2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::MSG_RPC_RESPONSE_ECHO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpc_msg::MSG_RPC_RESPONSE_ECHO, value1_),
  PROTOBUF_FIELD_OFFSET(::rpc_msg::MSG_RPC_RESPONSE_ECHO, value2_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rpc_msg::CHANNEL)},
  { 8, -1, sizeof(::rpc_msg::CONTROLLER)},
  { 16, -1, sizeof(::rpc_msg::ClientMessageInfo)},
  { 23, -1, sizeof(::rpc_msg::RoleIdentifier)},
  { 31, -1, sizeof(::rpc_msg::CLIENT_IDENTIFIER)},
  { 39, -1, sizeof(::rpc_msg::SERVER_IDENTIFIER)},
  { 45, -1, sizeof(::rpc_msg::RPC_REQUEST)},
  { 55, -1, sizeof(::rpc_msg::STATUS)},
  { 62, -1, sizeof(::rpc_msg::RPC_RESPONSE)},
  { 73, -1, sizeof(::rpc_msg::RPC_Multiplexer_Forward)},
  { 81, -1, sizeof(::rpc_msg::PRC_DeMultiplexer_Forward)},
  { 89, -1, sizeof(::rpc_msg::MSG_RPC_REQUEST_ECHO)},
  { 96, -1, sizeof(::rpc_msg::MSG_RPC_RESPONSE_ECHO)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_CHANNEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_CONTROLLER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_ClientMessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_RoleIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_CLIENT_IDENTIFIER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_SERVER_IDENTIFIER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_RPC_REQUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_RPC_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_RPC_Multiplexer_Forward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_PRC_DeMultiplexer_Forward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_MSG_RPC_REQUEST_ECHO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc_msg::_MSG_RPC_RESPONSE_ECHO_default_instance_),
};

const char descriptor_table_protodef_rpc_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rrpc_msg.proto\022\007rpc_msg\"2\n\007CHANNEL\022\r\n\005r"
  "ealm\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\"G\n\n"
  "CONTROLLER\022\016\n\006seq_id\030\001 \001(\004\022\022\n\ntimeout_ms"
  "\030\002 \001(\004\022\025\n\rserver_stream\030\003 \001(\010\"5\n\021ClientM"
  "essageInfo\022\017\n\007opcodes\030\001 \001(\r\022\017\n\007seq_num\030\002"
  " \001(\r\"l\n\016RoleIdentifier\022\017\n\007user_id\030\001 \001(\004\022"
  "\037\n\005gw_id\030\002 \001(\0132\020.rpc_msg.CHANNEL\022(\n\004info"
  "\030\003 \001(\0132\032.rpc_msg.ClientMessageInfo\"[\n\021CL"
  "IENT_IDENTIFIER\022\036\n\004stub\030\001 \001(\0132\020.rpc_msg."
  "CHANNEL\022\016\n\006seq_id\030\002 \001(\004\022\026\n\016required_repl"
  "y\030\003 \001(\010\"3\n\021SERVER_IDENTIFIER\022\036\n\004stub\030\001 \001"
  "(\0132\020.rpc_msg.CHANNEL\"\266\001\n\013RPC_REQUEST\022*\n\006"
  "client\030\001 \001(\0132\032.rpc_msg.CLIENT_IDENTIFIER"
  "\022*\n\006server\030\002 \001(\0132\032.rpc_msg.SERVER_IDENTI"
  "FIER\022\025\n\rserver_stream\030\003 \001(\010\022%\n\007opcodes\030\004"
  " \001(\0162\024.rpc_msg.RPC_OPCODES\022\021\n\targs_data\030"
  "\005 \001(\014\"#\n\006STATUS\022\014\n\004code\030\001 \001(\r\022\013\n\003msg\030\002 \001"
  "(\t\"\276\001\n\014RPC_RESPONSE\022*\n\006client\030\001 \001(\0132\032.rp"
  "c_msg.CLIENT_IDENTIFIER\022*\n\006server\030\002 \001(\0132"
  "\032.rpc_msg.SERVER_IDENTIFIER\022\037\n\006status\030\003 "
  "\001(\0132\017.rpc_msg.STATUS\022\020\n\010has_more\030\004 \001(\010\022\016"
  "\n\006offset\030\005 \001(\r\022\023\n\013result_data\030\006 \001(\014\"|\n\027R"
  "PC_Multiplexer_Forward\022%\n\004role\030\001 \001(\0132\027.r"
  "pc_msg.RoleIdentifier\022(\n\004info\030\002 \001(\0132\032.rp"
  "c_msg.ClientMessageInfo\022\020\n\010body_msg\030\003 \001("
  "\014\"e\n\031PRC_DeMultiplexer_Forward\022%\n\004role\030\001"
  " \001(\0132\027.rpc_msg.RoleIdentifier\022\017\n\007opcodes"
  "\030\002 \001(\r\022\020\n\010body_msg\030\003 \001(\014\"6\n\024MSG_RPC_REQU"
  "EST_ECHO\022\016\n\006value1\030\001 \001(\004\022\016\n\006value2\030\002 \001(\t"
  "\"7\n\025MSG_RPC_RESPONSE_ECHO\022\016\n\006value1\030\001 \001("
  "\004\022\016\n\006value2\030\002 \001(\t*\356\001\n\013RPC_OPCODES\022\014\n\010RPC"
  "_None\020\000\022\020\n\014RPC_EchoTest\020\001\022\027\n\022RPC_MysqlDe"
  "scTable\020\221\003\022\023\n\016RPC_MysqlQuery\020\222\003\022\024\n\017RPC_M"
  "ysqlInsert\020\223\003\022\024\n\017RPC_MysqlUpdate\020\224\003\022\024\n\017R"
  "PC_MysqlDelete\020\225\003\022\033\n\026RPC_MysqlQueryByFil"
  "ter\020\226\003\022\030\n\023RPC_MysqlMultiQuery\020\227\003\022\030\n\023OP_R"
  "PC_LoginPending\020\351\007*\343\003\n\010RPC_CODE\022\013\n\007CODE_"
  "Ok\020\000\022\021\n\rCODE_Ok_Async\020\001\022\020\n\014CODE_Timeout\020"
  "d\022\023\n\017CODE_Unregister\020e\022\023\n\017CODE_ParseErro"
  "r\020f\022\030\n\024CODE_ErrorServerPost\020g\022\035\n\031CODE_Ro"
  "uteNotLinkToServer\020h\022\037\n\033CODE_RouteSendTo"
  "ServerError\020i\022\031\n\025CODE_OpcodeUnregister\020j"
  "\022\027\n\023CODE_CreateMsgError\020k\022\030\n\024CODE_LogicT"
  "hreadNull\020l\022\031\n\025CODE_NotReceivedReply\020m\022\020"
  "\n\014CODE_NotSend\020n\022\030\n\024CODE_LoadFromDbError"
  "\020o\022\026\n\022CODE_DirtyFlagZero\020p\022\023\n\017CODE_Query"
  "Error\020q\022\037\n\033CODE_TableNameNotExistError\020r"
  "\022\036\n\032CODE_GenerateQuerySQLError\020s\022\036\n\032CODE"
  "_NotMatchedResultError\020tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_5fmsg_2eproto_sccs[13] = {
  &scc_info_CHANNEL_rpc_5fmsg_2eproto.base,
  &scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base,
  &scc_info_CONTROLLER_rpc_5fmsg_2eproto.base,
  &scc_info_ClientMessageInfo_rpc_5fmsg_2eproto.base,
  &scc_info_MSG_RPC_REQUEST_ECHO_rpc_5fmsg_2eproto.base,
  &scc_info_MSG_RPC_RESPONSE_ECHO_rpc_5fmsg_2eproto.base,
  &scc_info_PRC_DeMultiplexer_Forward_rpc_5fmsg_2eproto.base,
  &scc_info_RPC_Multiplexer_Forward_rpc_5fmsg_2eproto.base,
  &scc_info_RPC_REQUEST_rpc_5fmsg_2eproto.base,
  &scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto.base,
  &scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base,
  &scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base,
  &scc_info_STATUS_rpc_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_5fmsg_2eproto_once;
static bool descriptor_table_rpc_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fmsg_2eproto = {
  &descriptor_table_rpc_5fmsg_2eproto_initialized, descriptor_table_protodef_rpc_5fmsg_2eproto, "rpc_msg.proto", 1952,
  &descriptor_table_rpc_5fmsg_2eproto_once, descriptor_table_rpc_5fmsg_2eproto_sccs, descriptor_table_rpc_5fmsg_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_rpc_5fmsg_2eproto::offsets,
  file_level_metadata_rpc_5fmsg_2eproto, 13, file_level_enum_descriptors_rpc_5fmsg_2eproto, file_level_service_descriptors_rpc_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_5fmsg_2eproto), true);
namespace rpc_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_OPCODES_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmsg_2eproto);
  return file_level_enum_descriptors_rpc_5fmsg_2eproto[0];
}
bool RPC_OPCODES_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 1001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPC_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmsg_2eproto);
  return file_level_enum_descriptors_rpc_5fmsg_2eproto[1];
}
bool RPC_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CHANNEL::InitAsDefaultInstance() {
}
class CHANNEL::_Internal {
 public:
};

CHANNEL::CHANNEL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.CHANNEL)
}
CHANNEL::CHANNEL(const CHANNEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&realm_, &from.realm_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&realm_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CHANNEL)
}

void CHANNEL::SharedCtor() {
  ::memset(&realm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&realm_)) + sizeof(id_));
}

CHANNEL::~CHANNEL() {
  // @@protoc_insertion_point(destructor:rpc_msg.CHANNEL)
  SharedDtor();
}

void CHANNEL::SharedDtor() {
}

void CHANNEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHANNEL& CHANNEL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHANNEL_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CHANNEL::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CHANNEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&realm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&realm_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* CHANNEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 realm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHANNEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CHANNEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 realm = 1;
  if (this->realm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_realm(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CHANNEL)
  return target;
}

size_t CHANNEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CHANNEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 realm = 1;
  if (this->realm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_realm());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHANNEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.CHANNEL)
  GOOGLE_DCHECK_NE(&from, this);
  const CHANNEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHANNEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.CHANNEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.CHANNEL)
    MergeFrom(*source);
  }
}

void CHANNEL::MergeFrom(const CHANNEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CHANNEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.realm() != 0) {
    _internal_set_realm(from._internal_realm());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CHANNEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.CHANNEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHANNEL::CopyFrom(const CHANNEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CHANNEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHANNEL::IsInitialized() const {
  return true;
}

void CHANNEL::InternalSwap(CHANNEL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(realm_, other->realm_);
  swap(type_, other->type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHANNEL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CONTROLLER::InitAsDefaultInstance() {
}
class CONTROLLER::_Internal {
 public:
};

CONTROLLER::CONTROLLER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.CONTROLLER)
}
CONTROLLER::CONTROLLER(const CONTROLLER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seq_id_, &from.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_stream_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(server_stream_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CONTROLLER)
}

void CONTROLLER::SharedCtor() {
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_stream_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(server_stream_));
}

CONTROLLER::~CONTROLLER() {
  // @@protoc_insertion_point(destructor:rpc_msg.CONTROLLER)
  SharedDtor();
}

void CONTROLLER::SharedDtor() {
}

void CONTROLLER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CONTROLLER& CONTROLLER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CONTROLLER_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CONTROLLER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CONTROLLER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_stream_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(server_stream_));
  _internal_metadata_.Clear();
}

const char* CONTROLLER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeout_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool server_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CONTROLLER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CONTROLLER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_id(), target);
  }

  // uint64 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout_ms(), target);
  }

  // bool server_stream = 3;
  if (this->server_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_server_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CONTROLLER)
  return target;
}

size_t CONTROLLER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CONTROLLER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_id());
  }

  // uint64 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeout_ms());
  }

  // bool server_stream = 3;
  if (this->server_stream() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CONTROLLER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.CONTROLLER)
  GOOGLE_DCHECK_NE(&from, this);
  const CONTROLLER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CONTROLLER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.CONTROLLER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.CONTROLLER)
    MergeFrom(*source);
  }
}

void CONTROLLER::MergeFrom(const CONTROLLER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CONTROLLER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from.timeout_ms() != 0) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
  if (from.server_stream() != 0) {
    _internal_set_server_stream(from._internal_server_stream());
  }
}

void CONTROLLER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.CONTROLLER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CONTROLLER::CopyFrom(const CONTROLLER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CONTROLLER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONTROLLER::IsInitialized() const {
  return true;
}

void CONTROLLER::InternalSwap(CONTROLLER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(seq_id_, other->seq_id_);
  swap(timeout_ms_, other->timeout_ms_);
  swap(server_stream_, other->server_stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CONTROLLER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessageInfo::InitAsDefaultInstance() {
}
class ClientMessageInfo::_Internal {
 public:
};

ClientMessageInfo::ClientMessageInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.ClientMessageInfo)
}
ClientMessageInfo::ClientMessageInfo(const ClientMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&opcodes_, &from.opcodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_) -
    reinterpret_cast<char*>(&opcodes_)) + sizeof(seq_num_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.ClientMessageInfo)
}

void ClientMessageInfo::SharedCtor() {
  ::memset(&opcodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_) -
      reinterpret_cast<char*>(&opcodes_)) + sizeof(seq_num_));
}

ClientMessageInfo::~ClientMessageInfo() {
  // @@protoc_insertion_point(destructor:rpc_msg.ClientMessageInfo)
  SharedDtor();
}

void ClientMessageInfo::SharedDtor() {
}

void ClientMessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessageInfo& ClientMessageInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessageInfo_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ClientMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.ClientMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&opcodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_) -
      reinterpret_cast<char*>(&opcodes_)) + sizeof(seq_num_));
  _internal_metadata_.Clear();
}

const char* ClientMessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 opcodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          opcodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.ClientMessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 opcodes = 1;
  if (this->opcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_opcodes(), target);
  }

  // uint32 seq_num = 2;
  if (this->seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seq_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.ClientMessageInfo)
  return target;
}

size_t ClientMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.ClientMessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 opcodes = 1;
  if (this->opcodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opcodes());
  }

  // uint32 seq_num = 2;
  if (this->seq_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.ClientMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.ClientMessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.ClientMessageInfo)
    MergeFrom(*source);
  }
}

void ClientMessageInfo::MergeFrom(const ClientMessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.ClientMessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opcodes() != 0) {
    _internal_set_opcodes(from._internal_opcodes());
  }
  if (from.seq_num() != 0) {
    _internal_set_seq_num(from._internal_seq_num());
  }
}

void ClientMessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.ClientMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessageInfo::CopyFrom(const ClientMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.ClientMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessageInfo::IsInitialized() const {
  return true;
}

void ClientMessageInfo::InternalSwap(ClientMessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(opcodes_, other->opcodes_);
  swap(seq_num_, other->seq_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleIdentifier::InitAsDefaultInstance() {
  ::rpc_msg::_RoleIdentifier_default_instance_._instance.get_mutable()->gw_id_ = const_cast< ::rpc_msg::CHANNEL*>(
      ::rpc_msg::CHANNEL::internal_default_instance());
  ::rpc_msg::_RoleIdentifier_default_instance_._instance.get_mutable()->info_ = const_cast< ::rpc_msg::ClientMessageInfo*>(
      ::rpc_msg::ClientMessageInfo::internal_default_instance());
}
class RoleIdentifier::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& gw_id(const RoleIdentifier* msg);
  static const ::rpc_msg::ClientMessageInfo& info(const RoleIdentifier* msg);
};

const ::rpc_msg::CHANNEL&
RoleIdentifier::_Internal::gw_id(const RoleIdentifier* msg) {
  return *msg->gw_id_;
}
const ::rpc_msg::ClientMessageInfo&
RoleIdentifier::_Internal::info(const RoleIdentifier* msg) {
  return *msg->info_;
}
RoleIdentifier::RoleIdentifier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.RoleIdentifier)
}
RoleIdentifier::RoleIdentifier(const RoleIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_gw_id()) {
    gw_id_ = new ::rpc_msg::CHANNEL(*from.gw_id_);
  } else {
    gw_id_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::rpc_msg::ClientMessageInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RoleIdentifier)
}

void RoleIdentifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base);
  ::memset(&gw_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&gw_id_)) + sizeof(user_id_));
}

RoleIdentifier::~RoleIdentifier() {
  // @@protoc_insertion_point(destructor:rpc_msg.RoleIdentifier)
  SharedDtor();
}

void RoleIdentifier::SharedDtor() {
  if (this != internal_default_instance()) delete gw_id_;
  if (this != internal_default_instance()) delete info_;
}

void RoleIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleIdentifier& RoleIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleIdentifier_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RoleIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RoleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && gw_id_ != nullptr) {
    delete gw_id_;
  }
  gw_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  user_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RoleIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.CHANNEL gw_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gw_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.ClientMessageInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RoleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .rpc_msg.CHANNEL gw_id = 2;
  if (this->has_gw_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gw_id(this), target, stream);
  }

  // .rpc_msg.ClientMessageInfo info = 3;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RoleIdentifier)
  return target;
}

size_t RoleIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RoleIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL gw_id = 2;
  if (this->has_gw_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gw_id_);
  }

  // .rpc_msg.ClientMessageInfo info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.RoleIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.RoleIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.RoleIdentifier)
    MergeFrom(*source);
  }
}

void RoleIdentifier::MergeFrom(const RoleIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RoleIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gw_id()) {
    _internal_mutable_gw_id()->::rpc_msg::CHANNEL::MergeFrom(from._internal_gw_id());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::rpc_msg::ClientMessageInfo::MergeFrom(from._internal_info());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void RoleIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.RoleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleIdentifier::CopyFrom(const RoleIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RoleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleIdentifier::IsInitialized() const {
  return true;
}

void RoleIdentifier::InternalSwap(RoleIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gw_id_, other->gw_id_);
  swap(info_, other->info_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLIENT_IDENTIFIER::InitAsDefaultInstance() {
  ::rpc_msg::_CLIENT_IDENTIFIER_default_instance_._instance.get_mutable()->stub_ = const_cast< ::rpc_msg::CHANNEL*>(
      ::rpc_msg::CHANNEL::internal_default_instance());
}
class CLIENT_IDENTIFIER::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& stub(const CLIENT_IDENTIFIER* msg);
};

const ::rpc_msg::CHANNEL&
CLIENT_IDENTIFIER::_Internal::stub(const CLIENT_IDENTIFIER* msg) {
  return *msg->stub_;
}
CLIENT_IDENTIFIER::CLIENT_IDENTIFIER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.CLIENT_IDENTIFIER)
}
CLIENT_IDENTIFIER::CLIENT_IDENTIFIER(const CLIENT_IDENTIFIER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stub()) {
    stub_ = new ::rpc_msg::CHANNEL(*from.stub_);
  } else {
    stub_ = nullptr;
  }
  ::memcpy(&seq_id_, &from.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_reply_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(required_reply_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.CLIENT_IDENTIFIER)
}

void CLIENT_IDENTIFIER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base);
  ::memset(&stub_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_reply_) -
      reinterpret_cast<char*>(&stub_)) + sizeof(required_reply_));
}

CLIENT_IDENTIFIER::~CLIENT_IDENTIFIER() {
  // @@protoc_insertion_point(destructor:rpc_msg.CLIENT_IDENTIFIER)
  SharedDtor();
}

void CLIENT_IDENTIFIER::SharedDtor() {
  if (this != internal_default_instance()) delete stub_;
}

void CLIENT_IDENTIFIER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLIENT_IDENTIFIER& CLIENT_IDENTIFIER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLIENT_IDENTIFIER_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CLIENT_IDENTIFIER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.CLIENT_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stub_ != nullptr) {
    delete stub_;
  }
  stub_ = nullptr;
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_reply_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(required_reply_));
  _internal_metadata_.Clear();
}

const char* CLIENT_IDENTIFIER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CHANNEL stub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool required_reply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          required_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLIENT_IDENTIFIER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.CLIENT_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stub(this), target, stream);
  }

  // uint64 seq_id = 2;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq_id(), target);
  }

  // bool required_reply = 3;
  if (this->required_reply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_required_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.CLIENT_IDENTIFIER)
  return target;
}

size_t CLIENT_IDENTIFIER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.CLIENT_IDENTIFIER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stub_);
  }

  // uint64 seq_id = 2;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_id());
  }

  // bool required_reply = 3;
  if (this->required_reply() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLIENT_IDENTIFIER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.CLIENT_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  const CLIENT_IDENTIFIER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLIENT_IDENTIFIER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.CLIENT_IDENTIFIER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.CLIENT_IDENTIFIER)
    MergeFrom(*source);
  }
}

void CLIENT_IDENTIFIER::MergeFrom(const CLIENT_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.CLIENT_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stub()) {
    _internal_mutable_stub()->::rpc_msg::CHANNEL::MergeFrom(from._internal_stub());
  }
  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from.required_reply() != 0) {
    _internal_set_required_reply(from._internal_required_reply());
  }
}

void CLIENT_IDENTIFIER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.CLIENT_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLIENT_IDENTIFIER::CopyFrom(const CLIENT_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.CLIENT_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLIENT_IDENTIFIER::IsInitialized() const {
  return true;
}

void CLIENT_IDENTIFIER::InternalSwap(CLIENT_IDENTIFIER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stub_, other->stub_);
  swap(seq_id_, other->seq_id_);
  swap(required_reply_, other->required_reply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLIENT_IDENTIFIER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SERVER_IDENTIFIER::InitAsDefaultInstance() {
  ::rpc_msg::_SERVER_IDENTIFIER_default_instance_._instance.get_mutable()->stub_ = const_cast< ::rpc_msg::CHANNEL*>(
      ::rpc_msg::CHANNEL::internal_default_instance());
}
class SERVER_IDENTIFIER::_Internal {
 public:
  static const ::rpc_msg::CHANNEL& stub(const SERVER_IDENTIFIER* msg);
};

const ::rpc_msg::CHANNEL&
SERVER_IDENTIFIER::_Internal::stub(const SERVER_IDENTIFIER* msg) {
  return *msg->stub_;
}
SERVER_IDENTIFIER::SERVER_IDENTIFIER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.SERVER_IDENTIFIER)
}
SERVER_IDENTIFIER::SERVER_IDENTIFIER(const SERVER_IDENTIFIER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stub()) {
    stub_ = new ::rpc_msg::CHANNEL(*from.stub_);
  } else {
    stub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rpc_msg.SERVER_IDENTIFIER)
}

void SERVER_IDENTIFIER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base);
  stub_ = nullptr;
}

SERVER_IDENTIFIER::~SERVER_IDENTIFIER() {
  // @@protoc_insertion_point(destructor:rpc_msg.SERVER_IDENTIFIER)
  SharedDtor();
}

void SERVER_IDENTIFIER::SharedDtor() {
  if (this != internal_default_instance()) delete stub_;
}

void SERVER_IDENTIFIER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SERVER_IDENTIFIER& SERVER_IDENTIFIER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SERVER_IDENTIFIER_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void SERVER_IDENTIFIER::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.SERVER_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stub_ != nullptr) {
    delete stub_;
  }
  stub_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SERVER_IDENTIFIER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CHANNEL stub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SERVER_IDENTIFIER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.SERVER_IDENTIFIER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stub(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.SERVER_IDENTIFIER)
  return target;
}

size_t SERVER_IDENTIFIER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.SERVER_IDENTIFIER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpc_msg.CHANNEL stub = 1;
  if (this->has_stub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stub_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SERVER_IDENTIFIER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.SERVER_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  const SERVER_IDENTIFIER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SERVER_IDENTIFIER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.SERVER_IDENTIFIER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.SERVER_IDENTIFIER)
    MergeFrom(*source);
  }
}

void SERVER_IDENTIFIER::MergeFrom(const SERVER_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.SERVER_IDENTIFIER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stub()) {
    _internal_mutable_stub()->::rpc_msg::CHANNEL::MergeFrom(from._internal_stub());
  }
}

void SERVER_IDENTIFIER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.SERVER_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SERVER_IDENTIFIER::CopyFrom(const SERVER_IDENTIFIER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.SERVER_IDENTIFIER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SERVER_IDENTIFIER::IsInitialized() const {
  return true;
}

void SERVER_IDENTIFIER::InternalSwap(SERVER_IDENTIFIER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stub_, other->stub_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SERVER_IDENTIFIER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC_REQUEST::InitAsDefaultInstance() {
  ::rpc_msg::_RPC_REQUEST_default_instance_._instance.get_mutable()->client_ = const_cast< ::rpc_msg::CLIENT_IDENTIFIER*>(
      ::rpc_msg::CLIENT_IDENTIFIER::internal_default_instance());
  ::rpc_msg::_RPC_REQUEST_default_instance_._instance.get_mutable()->server_ = const_cast< ::rpc_msg::SERVER_IDENTIFIER*>(
      ::rpc_msg::SERVER_IDENTIFIER::internal_default_instance());
}
class RPC_REQUEST::_Internal {
 public:
  static const ::rpc_msg::CLIENT_IDENTIFIER& client(const RPC_REQUEST* msg);
  static const ::rpc_msg::SERVER_IDENTIFIER& server(const RPC_REQUEST* msg);
};

const ::rpc_msg::CLIENT_IDENTIFIER&
RPC_REQUEST::_Internal::client(const RPC_REQUEST* msg) {
  return *msg->client_;
}
const ::rpc_msg::SERVER_IDENTIFIER&
RPC_REQUEST::_Internal::server(const RPC_REQUEST* msg) {
  return *msg->server_;
}
RPC_REQUEST::RPC_REQUEST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.RPC_REQUEST)
}
RPC_REQUEST::RPC_REQUEST(const RPC_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args_data().empty()) {
    args_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_data_);
  }
  if (from._internal_has_client()) {
    client_ = new ::rpc_msg::CLIENT_IDENTIFIER(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_server()) {
    server_ = new ::rpc_msg::SERVER_IDENTIFIER(*from.server_);
  } else {
    server_ = nullptr;
  }
  ::memcpy(&server_stream_, &from.server_stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&opcodes_) -
    reinterpret_cast<char*>(&server_stream_)) + sizeof(opcodes_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_REQUEST)
}

void RPC_REQUEST::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_REQUEST_rpc_5fmsg_2eproto.base);
  args_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opcodes_) -
      reinterpret_cast<char*>(&client_)) + sizeof(opcodes_));
}

RPC_REQUEST::~RPC_REQUEST() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_REQUEST)
  SharedDtor();
}

void RPC_REQUEST::SharedDtor() {
  args_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete server_;
}

void RPC_REQUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_REQUEST& RPC_REQUEST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_REQUEST_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RPC_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  ::memset(&server_stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opcodes_) -
      reinterpret_cast<char*>(&server_stream_)) + sizeof(opcodes_));
  _internal_metadata_.Clear();
}

const char* RPC_REQUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CLIENT_IDENTIFIER client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.SERVER_IDENTIFIER server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool server_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.RPC_OPCODES opcodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_opcodes(static_cast<::rpc_msg::RPC_OPCODES>(val));
        } else goto handle_unusual;
        continue;
      // bytes args_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_args_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_REQUEST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client(this), target, stream);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server(this), target, stream);
  }

  // bool server_stream = 3;
  if (this->server_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_server_stream(), target);
  }

  // .rpc_msg.RPC_OPCODES opcodes = 4;
  if (this->opcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_opcodes(), target);
  }

  // bytes args_data = 5;
  if (this->args_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_args_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_REQUEST)
  return target;
}

size_t RPC_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_REQUEST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args_data = 5;
  if (this->args_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args_data());
  }

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  // bool server_stream = 3;
  if (this->server_stream() != 0) {
    total_size += 1 + 1;
  }

  // .rpc_msg.RPC_OPCODES opcodes = 4;
  if (this->opcodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opcodes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_REQUEST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.RPC_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_REQUEST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_REQUEST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.RPC_REQUEST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.RPC_REQUEST)
    MergeFrom(*source);
  }
}

void RPC_REQUEST::MergeFrom(const RPC_REQUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.args_data().size() > 0) {

    args_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_data_);
  }
  if (from.has_client()) {
    _internal_mutable_client()->::rpc_msg::CLIENT_IDENTIFIER::MergeFrom(from._internal_client());
  }
  if (from.has_server()) {
    _internal_mutable_server()->::rpc_msg::SERVER_IDENTIFIER::MergeFrom(from._internal_server());
  }
  if (from.server_stream() != 0) {
    _internal_set_server_stream(from._internal_server_stream());
  }
  if (from.opcodes() != 0) {
    _internal_set_opcodes(from._internal_opcodes());
  }
}

void RPC_REQUEST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.RPC_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_REQUEST::CopyFrom(const RPC_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_REQUEST::IsInitialized() const {
  return true;
}

void RPC_REQUEST::InternalSwap(RPC_REQUEST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_data_.Swap(&other->args_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_, other->client_);
  swap(server_, other->server_);
  swap(server_stream_, other->server_stream_);
  swap(opcodes_, other->opcodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_REQUEST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STATUS::InitAsDefaultInstance() {
}
class STATUS::_Internal {
 public:
};

STATUS::STATUS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.STATUS)
}
STATUS::STATUS(const STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.STATUS)
}

void STATUS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STATUS_rpc_5fmsg_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
}

STATUS::~STATUS() {
  // @@protoc_insertion_point(destructor:rpc_msg.STATUS)
  SharedDtor();
}

void STATUS::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STATUS& STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STATUS_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  _internal_metadata_.Clear();
}

const char* STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc_msg.STATUS.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc_msg.STATUS.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.STATUS)
  return target;
}

size_t STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.STATUS)
    MergeFrom(*source);
  }
}

void STATUS::MergeFrom(const STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STATUS::CopyFrom(const STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STATUS::IsInitialized() const {
  return true;
}

void STATUS::InternalSwap(STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC_RESPONSE::InitAsDefaultInstance() {
  ::rpc_msg::_RPC_RESPONSE_default_instance_._instance.get_mutable()->client_ = const_cast< ::rpc_msg::CLIENT_IDENTIFIER*>(
      ::rpc_msg::CLIENT_IDENTIFIER::internal_default_instance());
  ::rpc_msg::_RPC_RESPONSE_default_instance_._instance.get_mutable()->server_ = const_cast< ::rpc_msg::SERVER_IDENTIFIER*>(
      ::rpc_msg::SERVER_IDENTIFIER::internal_default_instance());
  ::rpc_msg::_RPC_RESPONSE_default_instance_._instance.get_mutable()->status_ = const_cast< ::rpc_msg::STATUS*>(
      ::rpc_msg::STATUS::internal_default_instance());
}
class RPC_RESPONSE::_Internal {
 public:
  static const ::rpc_msg::CLIENT_IDENTIFIER& client(const RPC_RESPONSE* msg);
  static const ::rpc_msg::SERVER_IDENTIFIER& server(const RPC_RESPONSE* msg);
  static const ::rpc_msg::STATUS& status(const RPC_RESPONSE* msg);
};

const ::rpc_msg::CLIENT_IDENTIFIER&
RPC_RESPONSE::_Internal::client(const RPC_RESPONSE* msg) {
  return *msg->client_;
}
const ::rpc_msg::SERVER_IDENTIFIER&
RPC_RESPONSE::_Internal::server(const RPC_RESPONSE* msg) {
  return *msg->server_;
}
const ::rpc_msg::STATUS&
RPC_RESPONSE::_Internal::status(const RPC_RESPONSE* msg) {
  return *msg->status_;
}
RPC_RESPONSE::RPC_RESPONSE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.RPC_RESPONSE)
}
RPC_RESPONSE::RPC_RESPONSE(const RPC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_data().empty()) {
    result_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_data_);
  }
  if (from._internal_has_client()) {
    client_ = new ::rpc_msg::CLIENT_IDENTIFIER(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_server()) {
    server_ = new ::rpc_msg::SERVER_IDENTIFIER(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::rpc_msg::STATUS(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&has_more_, &from.has_more_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&has_more_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_RESPONSE)
}

void RPC_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto.base);
  result_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&client_)) + sizeof(offset_));
}

RPC_RESPONSE::~RPC_RESPONSE() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_RESPONSE)
  SharedDtor();
}

void RPC_RESPONSE::SharedDtor() {
  result_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete status_;
}

void RPC_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_RESPONSE& RPC_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_RESPONSE_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RPC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&has_more_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&has_more_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* RPC_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.CLIENT_IDENTIFIER client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.SERVER_IDENTIFIER server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.STATUS status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_more = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes result_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_result_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client(this), target, stream);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server(this), target, stream);
  }

  // .rpc_msg.STATUS status = 3;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // bool has_more = 4;
  if (this->has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_more(), target);
  }

  // uint32 offset = 5;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_offset(), target);
  }

  // bytes result_data = 6;
  if (this->result_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_result_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_RESPONSE)
  return target;
}

size_t RPC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result_data = 6;
  if (this->result_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result_data());
  }

  // .rpc_msg.CLIENT_IDENTIFIER client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .rpc_msg.SERVER_IDENTIFIER server = 2;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  // .rpc_msg.STATUS status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool has_more = 4;
  if (this->has_more() != 0) {
    total_size += 1 + 1;
  }

  // uint32 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.RPC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.RPC_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.RPC_RESPONSE)
    MergeFrom(*source);
  }
}

void RPC_RESPONSE::MergeFrom(const RPC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_data().size() > 0) {

    result_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_data_);
  }
  if (from.has_client()) {
    _internal_mutable_client()->::rpc_msg::CLIENT_IDENTIFIER::MergeFrom(from._internal_client());
  }
  if (from.has_server()) {
    _internal_mutable_server()->::rpc_msg::SERVER_IDENTIFIER::MergeFrom(from._internal_server());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::rpc_msg::STATUS::MergeFrom(from._internal_status());
  }
  if (from.has_more() != 0) {
    _internal_set_has_more(from._internal_has_more());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void RPC_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.RPC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_RESPONSE::CopyFrom(const RPC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_RESPONSE::IsInitialized() const {
  return true;
}

void RPC_RESPONSE::InternalSwap(RPC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_data_.Swap(&other->result_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_, other->client_);
  swap(server_, other->server_);
  swap(status_, other->status_);
  swap(has_more_, other->has_more_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC_Multiplexer_Forward::InitAsDefaultInstance() {
  ::rpc_msg::_RPC_Multiplexer_Forward_default_instance_._instance.get_mutable()->role_ = const_cast< ::rpc_msg::RoleIdentifier*>(
      ::rpc_msg::RoleIdentifier::internal_default_instance());
  ::rpc_msg::_RPC_Multiplexer_Forward_default_instance_._instance.get_mutable()->info_ = const_cast< ::rpc_msg::ClientMessageInfo*>(
      ::rpc_msg::ClientMessageInfo::internal_default_instance());
}
class RPC_Multiplexer_Forward::_Internal {
 public:
  static const ::rpc_msg::RoleIdentifier& role(const RPC_Multiplexer_Forward* msg);
  static const ::rpc_msg::ClientMessageInfo& info(const RPC_Multiplexer_Forward* msg);
};

const ::rpc_msg::RoleIdentifier&
RPC_Multiplexer_Forward::_Internal::role(const RPC_Multiplexer_Forward* msg) {
  return *msg->role_;
}
const ::rpc_msg::ClientMessageInfo&
RPC_Multiplexer_Forward::_Internal::info(const RPC_Multiplexer_Forward* msg) {
  return *msg->info_;
}
RPC_Multiplexer_Forward::RPC_Multiplexer_Forward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.RPC_Multiplexer_Forward)
}
RPC_Multiplexer_Forward::RPC_Multiplexer_Forward(const RPC_Multiplexer_Forward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body_msg().empty()) {
    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from._internal_has_role()) {
    role_ = new ::rpc_msg::RoleIdentifier(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::rpc_msg::ClientMessageInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rpc_msg.RPC_Multiplexer_Forward)
}

void RPC_Multiplexer_Forward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_Multiplexer_Forward_rpc_5fmsg_2eproto.base);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&role_)) + sizeof(info_));
}

RPC_Multiplexer_Forward::~RPC_Multiplexer_Forward() {
  // @@protoc_insertion_point(destructor:rpc_msg.RPC_Multiplexer_Forward)
  SharedDtor();
}

void RPC_Multiplexer_Forward::SharedDtor() {
  body_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete info_;
}

void RPC_Multiplexer_Forward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_Multiplexer_Forward& RPC_Multiplexer_Forward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_Multiplexer_Forward_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RPC_Multiplexer_Forward::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.RPC_Multiplexer_Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RPC_Multiplexer_Forward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.RoleIdentifier role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rpc_msg.ClientMessageInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_Multiplexer_Forward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.RPC_Multiplexer_Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .rpc_msg.ClientMessageInfo info = 2;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.RPC_Multiplexer_Forward)
  return target;
}

size_t RPC_Multiplexer_Forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.RPC_Multiplexer_Forward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_msg());
  }

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .rpc_msg.ClientMessageInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_Multiplexer_Forward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.RPC_Multiplexer_Forward)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_Multiplexer_Forward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_Multiplexer_Forward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.RPC_Multiplexer_Forward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.RPC_Multiplexer_Forward)
    MergeFrom(*source);
  }
}

void RPC_Multiplexer_Forward::MergeFrom(const RPC_Multiplexer_Forward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.RPC_Multiplexer_Forward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body_msg().size() > 0) {

    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from.has_role()) {
    _internal_mutable_role()->::rpc_msg::RoleIdentifier::MergeFrom(from._internal_role());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::rpc_msg::ClientMessageInfo::MergeFrom(from._internal_info());
  }
}

void RPC_Multiplexer_Forward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.RPC_Multiplexer_Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_Multiplexer_Forward::CopyFrom(const RPC_Multiplexer_Forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.RPC_Multiplexer_Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_Multiplexer_Forward::IsInitialized() const {
  return true;
}

void RPC_Multiplexer_Forward::InternalSwap(RPC_Multiplexer_Forward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  body_msg_.Swap(&other->body_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_, other->role_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_Multiplexer_Forward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PRC_DeMultiplexer_Forward::InitAsDefaultInstance() {
  ::rpc_msg::_PRC_DeMultiplexer_Forward_default_instance_._instance.get_mutable()->role_ = const_cast< ::rpc_msg::RoleIdentifier*>(
      ::rpc_msg::RoleIdentifier::internal_default_instance());
}
class PRC_DeMultiplexer_Forward::_Internal {
 public:
  static const ::rpc_msg::RoleIdentifier& role(const PRC_DeMultiplexer_Forward* msg);
};

const ::rpc_msg::RoleIdentifier&
PRC_DeMultiplexer_Forward::_Internal::role(const PRC_DeMultiplexer_Forward* msg) {
  return *msg->role_;
}
PRC_DeMultiplexer_Forward::PRC_DeMultiplexer_Forward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.PRC_DeMultiplexer_Forward)
}
PRC_DeMultiplexer_Forward::PRC_DeMultiplexer_Forward(const PRC_DeMultiplexer_Forward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body_msg().empty()) {
    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from._internal_has_role()) {
    role_ = new ::rpc_msg::RoleIdentifier(*from.role_);
  } else {
    role_ = nullptr;
  }
  opcodes_ = from.opcodes_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.PRC_DeMultiplexer_Forward)
}

void PRC_DeMultiplexer_Forward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PRC_DeMultiplexer_Forward_rpc_5fmsg_2eproto.base);
  body_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opcodes_) -
      reinterpret_cast<char*>(&role_)) + sizeof(opcodes_));
}

PRC_DeMultiplexer_Forward::~PRC_DeMultiplexer_Forward() {
  // @@protoc_insertion_point(destructor:rpc_msg.PRC_DeMultiplexer_Forward)
  SharedDtor();
}

void PRC_DeMultiplexer_Forward::SharedDtor() {
  body_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
}

void PRC_DeMultiplexer_Forward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRC_DeMultiplexer_Forward& PRC_DeMultiplexer_Forward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRC_DeMultiplexer_Forward_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PRC_DeMultiplexer_Forward::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.PRC_DeMultiplexer_Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  opcodes_ = 0u;
  _internal_metadata_.Clear();
}

const char* PRC_DeMultiplexer_Forward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rpc_msg.RoleIdentifier role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 opcodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          opcodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRC_DeMultiplexer_Forward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.PRC_DeMultiplexer_Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // uint32 opcodes = 2;
  if (this->opcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opcodes(), target);
  }

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.PRC_DeMultiplexer_Forward)
  return target;
}

size_t PRC_DeMultiplexer_Forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.PRC_DeMultiplexer_Forward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_msg = 3;
  if (this->body_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_msg());
  }

  // .rpc_msg.RoleIdentifier role = 1;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint32 opcodes = 2;
  if (this->opcodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opcodes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRC_DeMultiplexer_Forward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.PRC_DeMultiplexer_Forward)
  GOOGLE_DCHECK_NE(&from, this);
  const PRC_DeMultiplexer_Forward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRC_DeMultiplexer_Forward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.PRC_DeMultiplexer_Forward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.PRC_DeMultiplexer_Forward)
    MergeFrom(*source);
  }
}

void PRC_DeMultiplexer_Forward::MergeFrom(const PRC_DeMultiplexer_Forward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.PRC_DeMultiplexer_Forward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body_msg().size() > 0) {

    body_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_msg_);
  }
  if (from.has_role()) {
    _internal_mutable_role()->::rpc_msg::RoleIdentifier::MergeFrom(from._internal_role());
  }
  if (from.opcodes() != 0) {
    _internal_set_opcodes(from._internal_opcodes());
  }
}

void PRC_DeMultiplexer_Forward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.PRC_DeMultiplexer_Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRC_DeMultiplexer_Forward::CopyFrom(const PRC_DeMultiplexer_Forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.PRC_DeMultiplexer_Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRC_DeMultiplexer_Forward::IsInitialized() const {
  return true;
}

void PRC_DeMultiplexer_Forward::InternalSwap(PRC_DeMultiplexer_Forward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  body_msg_.Swap(&other->body_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_, other->role_);
  swap(opcodes_, other->opcodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRC_DeMultiplexer_Forward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RPC_REQUEST_ECHO::InitAsDefaultInstance() {
}
class MSG_RPC_REQUEST_ECHO::_Internal {
 public:
};

MSG_RPC_REQUEST_ECHO::MSG_RPC_REQUEST_ECHO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.MSG_RPC_REQUEST_ECHO)
}
MSG_RPC_REQUEST_ECHO::MSG_RPC_REQUEST_ECHO(const MSG_RPC_REQUEST_ECHO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value2().empty()) {
    value2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value2_);
  }
  value1_ = from.value1_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.MSG_RPC_REQUEST_ECHO)
}

void MSG_RPC_REQUEST_ECHO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RPC_REQUEST_ECHO_rpc_5fmsg_2eproto.base);
  value2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value1_ = PROTOBUF_ULONGLONG(0);
}

MSG_RPC_REQUEST_ECHO::~MSG_RPC_REQUEST_ECHO() {
  // @@protoc_insertion_point(destructor:rpc_msg.MSG_RPC_REQUEST_ECHO)
  SharedDtor();
}

void MSG_RPC_REQUEST_ECHO::SharedDtor() {
  value2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RPC_REQUEST_ECHO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RPC_REQUEST_ECHO& MSG_RPC_REQUEST_ECHO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RPC_REQUEST_ECHO_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RPC_REQUEST_ECHO::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.MSG_RPC_REQUEST_ECHO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value1_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MSG_RPC_REQUEST_ECHO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc_msg.MSG_RPC_REQUEST_ECHO.value2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RPC_REQUEST_ECHO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.MSG_RPC_REQUEST_ECHO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value1 = 1;
  if (this->value1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value1(), target);
  }

  // string value2 = 2;
  if (this->value2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value2().data(), static_cast<int>(this->_internal_value2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc_msg.MSG_RPC_REQUEST_ECHO.value2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.MSG_RPC_REQUEST_ECHO)
  return target;
}

size_t MSG_RPC_REQUEST_ECHO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.MSG_RPC_REQUEST_ECHO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value2 = 2;
  if (this->value2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value2());
  }

  // uint64 value1 = 1;
  if (this->value1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RPC_REQUEST_ECHO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.MSG_RPC_REQUEST_ECHO)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RPC_REQUEST_ECHO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RPC_REQUEST_ECHO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.MSG_RPC_REQUEST_ECHO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.MSG_RPC_REQUEST_ECHO)
    MergeFrom(*source);
  }
}

void MSG_RPC_REQUEST_ECHO::MergeFrom(const MSG_RPC_REQUEST_ECHO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.MSG_RPC_REQUEST_ECHO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value2().size() > 0) {

    value2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value2_);
  }
  if (from.value1() != 0) {
    _internal_set_value1(from._internal_value1());
  }
}

void MSG_RPC_REQUEST_ECHO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.MSG_RPC_REQUEST_ECHO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RPC_REQUEST_ECHO::CopyFrom(const MSG_RPC_REQUEST_ECHO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.MSG_RPC_REQUEST_ECHO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RPC_REQUEST_ECHO::IsInitialized() const {
  return true;
}

void MSG_RPC_REQUEST_ECHO::InternalSwap(MSG_RPC_REQUEST_ECHO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value2_.Swap(&other->value2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value1_, other->value1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RPC_REQUEST_ECHO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RPC_RESPONSE_ECHO::InitAsDefaultInstance() {
}
class MSG_RPC_RESPONSE_ECHO::_Internal {
 public:
};

MSG_RPC_RESPONSE_ECHO::MSG_RPC_RESPONSE_ECHO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc_msg.MSG_RPC_RESPONSE_ECHO)
}
MSG_RPC_RESPONSE_ECHO::MSG_RPC_RESPONSE_ECHO(const MSG_RPC_RESPONSE_ECHO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value2().empty()) {
    value2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value2_);
  }
  value1_ = from.value1_;
  // @@protoc_insertion_point(copy_constructor:rpc_msg.MSG_RPC_RESPONSE_ECHO)
}

void MSG_RPC_RESPONSE_ECHO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RPC_RESPONSE_ECHO_rpc_5fmsg_2eproto.base);
  value2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value1_ = PROTOBUF_ULONGLONG(0);
}

MSG_RPC_RESPONSE_ECHO::~MSG_RPC_RESPONSE_ECHO() {
  // @@protoc_insertion_point(destructor:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  SharedDtor();
}

void MSG_RPC_RESPONSE_ECHO::SharedDtor() {
  value2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RPC_RESPONSE_ECHO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RPC_RESPONSE_ECHO& MSG_RPC_RESPONSE_ECHO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RPC_RESPONSE_ECHO_rpc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RPC_RESPONSE_ECHO::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value1_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MSG_RPC_RESPONSE_ECHO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc_msg.MSG_RPC_RESPONSE_ECHO.value2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RPC_RESPONSE_ECHO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value1 = 1;
  if (this->value1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value1(), target);
  }

  // string value2 = 2;
  if (this->value2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value2().data(), static_cast<int>(this->_internal_value2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc_msg.MSG_RPC_RESPONSE_ECHO.value2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  return target;
}

size_t MSG_RPC_RESPONSE_ECHO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value2 = 2;
  if (this->value2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value2());
  }

  // uint64 value1 = 1;
  if (this->value1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RPC_RESPONSE_ECHO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RPC_RESPONSE_ECHO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RPC_RESPONSE_ECHO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_msg.MSG_RPC_RESPONSE_ECHO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_msg.MSG_RPC_RESPONSE_ECHO)
    MergeFrom(*source);
  }
}

void MSG_RPC_RESPONSE_ECHO::MergeFrom(const MSG_RPC_RESPONSE_ECHO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value2().size() > 0) {

    value2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value2_);
  }
  if (from.value1() != 0) {
    _internal_set_value1(from._internal_value1());
  }
}

void MSG_RPC_RESPONSE_ECHO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RPC_RESPONSE_ECHO::CopyFrom(const MSG_RPC_RESPONSE_ECHO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc_msg.MSG_RPC_RESPONSE_ECHO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RPC_RESPONSE_ECHO::IsInitialized() const {
  return true;
}

void MSG_RPC_RESPONSE_ECHO::InternalSwap(MSG_RPC_RESPONSE_ECHO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value2_.Swap(&other->value2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value1_, other->value1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RPC_RESPONSE_ECHO::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc_msg::CHANNEL* Arena::CreateMaybeMessage< ::rpc_msg::CHANNEL >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::CHANNEL >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::CONTROLLER* Arena::CreateMaybeMessage< ::rpc_msg::CONTROLLER >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::CONTROLLER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::ClientMessageInfo* Arena::CreateMaybeMessage< ::rpc_msg::ClientMessageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::ClientMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RoleIdentifier* Arena::CreateMaybeMessage< ::rpc_msg::RoleIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::RoleIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::CLIENT_IDENTIFIER* Arena::CreateMaybeMessage< ::rpc_msg::CLIENT_IDENTIFIER >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::CLIENT_IDENTIFIER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::SERVER_IDENTIFIER* Arena::CreateMaybeMessage< ::rpc_msg::SERVER_IDENTIFIER >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::SERVER_IDENTIFIER >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_REQUEST* Arena::CreateMaybeMessage< ::rpc_msg::RPC_REQUEST >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::RPC_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::STATUS* Arena::CreateMaybeMessage< ::rpc_msg::STATUS >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_RESPONSE* Arena::CreateMaybeMessage< ::rpc_msg::RPC_RESPONSE >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::RPC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::RPC_Multiplexer_Forward* Arena::CreateMaybeMessage< ::rpc_msg::RPC_Multiplexer_Forward >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::RPC_Multiplexer_Forward >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::PRC_DeMultiplexer_Forward* Arena::CreateMaybeMessage< ::rpc_msg::PRC_DeMultiplexer_Forward >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::PRC_DeMultiplexer_Forward >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::MSG_RPC_REQUEST_ECHO* Arena::CreateMaybeMessage< ::rpc_msg::MSG_RPC_REQUEST_ECHO >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::MSG_RPC_REQUEST_ECHO >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc_msg::MSG_RPC_RESPONSE_ECHO* Arena::CreateMaybeMessage< ::rpc_msg::MSG_RPC_RESPONSE_ECHO >(Arena* arena) {
  return Arena::CreateInternal< ::rpc_msg::MSG_RPC_RESPONSE_ECHO >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
