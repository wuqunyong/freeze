// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_discovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_5fdiscovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_5fdiscovery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_5fdiscovery_2eproto;
namespace service_discovery {
class ConnectDialResult;
struct ConnectDialResultDefaultTypeInternal;
extern ConnectDialResultDefaultTypeInternal _ConnectDialResult_default_instance_;
class EndPointInstance;
struct EndPointInstanceDefaultTypeInternal;
extern EndPointInstanceDefaultTypeInternal _EndPointInstance_default_instance_;
class MSG_NOTICE_INSTANCE;
struct MSG_NOTICE_INSTANCEDefaultTypeInternal;
extern MSG_NOTICE_INSTANCEDefaultTypeInternal _MSG_NOTICE_INSTANCE_default_instance_;
class MSG_REQUEST_HEARTBEAT;
struct MSG_REQUEST_HEARTBEATDefaultTypeInternal;
extern MSG_REQUEST_HEARTBEATDefaultTypeInternal _MSG_REQUEST_HEARTBEAT_default_instance_;
class MSG_REQUEST_REGISTER_INSTANCE;
struct MSG_REQUEST_REGISTER_INSTANCEDefaultTypeInternal;
extern MSG_REQUEST_REGISTER_INSTANCEDefaultTypeInternal _MSG_REQUEST_REGISTER_INSTANCE_default_instance_;
class MSG_RESPONSE_HEARTBEAT;
struct MSG_RESPONSE_HEARTBEATDefaultTypeInternal;
extern MSG_RESPONSE_HEARTBEATDefaultTypeInternal _MSG_RESPONSE_HEARTBEAT_default_instance_;
class MSG_RESPONSE_REGISTER_INSTANCE;
struct MSG_RESPONSE_REGISTER_INSTANCEDefaultTypeInternal;
extern MSG_RESPONSE_REGISTER_INSTANCEDefaultTypeInternal _MSG_RESPONSE_REGISTER_INSTANCE_default_instance_;
}  // namespace service_discovery
PROTOBUF_NAMESPACE_OPEN
template<> ::service_discovery::ConnectDialResult* Arena::CreateMaybeMessage<::service_discovery::ConnectDialResult>(Arena*);
template<> ::service_discovery::EndPointInstance* Arena::CreateMaybeMessage<::service_discovery::EndPointInstance>(Arena*);
template<> ::service_discovery::MSG_NOTICE_INSTANCE* Arena::CreateMaybeMessage<::service_discovery::MSG_NOTICE_INSTANCE>(Arena*);
template<> ::service_discovery::MSG_REQUEST_HEARTBEAT* Arena::CreateMaybeMessage<::service_discovery::MSG_REQUEST_HEARTBEAT>(Arena*);
template<> ::service_discovery::MSG_REQUEST_REGISTER_INSTANCE* Arena::CreateMaybeMessage<::service_discovery::MSG_REQUEST_REGISTER_INSTANCE>(Arena*);
template<> ::service_discovery::MSG_RESPONSE_HEARTBEAT* Arena::CreateMaybeMessage<::service_discovery::MSG_RESPONSE_HEARTBEAT>(Arena*);
template<> ::service_discovery::MSG_RESPONSE_REGISTER_INSTANCE* Arena::CreateMaybeMessage<::service_discovery::MSG_RESPONSE_REGISTER_INSTANCE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_discovery {

enum RegistryStatus : int {
  RS_None = 0,
  RS_Learning = 1,
  RS_Forwarding = 2,
  RegistryStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RegistryStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RegistryStatus_IsValid(int value);
constexpr RegistryStatus RegistryStatus_MIN = RS_None;
constexpr RegistryStatus RegistryStatus_MAX = RS_Forwarding;
constexpr int RegistryStatus_ARRAYSIZE = RegistryStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegistryStatus_descriptor();
template<typename T>
inline const std::string& RegistryStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegistryStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegistryStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegistryStatus_descriptor(), enum_t_value);
}
inline bool RegistryStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegistryStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegistryStatus>(
    RegistryStatus_descriptor(), name, value);
}
enum UpdateMode : int {
  UM_None = 0,
  UM_Full = 1,
  UM_Incremental = 2,
  UpdateMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UpdateMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UpdateMode_IsValid(int value);
constexpr UpdateMode UpdateMode_MIN = UM_None;
constexpr UpdateMode UpdateMode_MAX = UM_Incremental;
constexpr int UpdateMode_ARRAYSIZE = UpdateMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateMode_descriptor();
template<typename T>
inline const std::string& UpdateMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateMode_descriptor(), enum_t_value);
}
inline bool UpdateMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateMode>(
    UpdateMode_descriptor(), name, value);
}
// ===================================================================

class EndPointInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.EndPointInstance) */ {
 public:
  inline EndPointInstance() : EndPointInstance(nullptr) {}
  ~EndPointInstance() override;
  explicit PROTOBUF_CONSTEXPR EndPointInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndPointInstance(const EndPointInstance& from);
  EndPointInstance(EndPointInstance&& from) noexcept
    : EndPointInstance() {
    *this = ::std::move(from);
  }

  inline EndPointInstance& operator=(const EndPointInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointInstance& operator=(EndPointInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndPointInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndPointInstance* internal_default_instance() {
    return reinterpret_cast<const EndPointInstance*>(
               &_EndPointInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EndPointInstance& a, EndPointInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndPointInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndPointInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndPointInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndPointInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndPointInstance& from) {
    EndPointInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.EndPointInstance";
  }
  protected:
  explicit EndPointInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdFieldNumber = 4,
    kAuthFieldNumber = 5,
    kIpFieldNumber = 6,
    kRealmFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIdFieldNumber = 3,
    kPortFieldNumber = 7,
    kCodecTypeFieldNumber = 8,
    kMaskFlagFieldNumber = 9,
  };
  // string actor_id = 4;
  void clear_actor_id();
  const std::string& actor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_actor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_actor_id();
  PROTOBUF_NODISCARD std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // string auth = 5;
  void clear_auth();
  const std::string& auth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth();
  PROTOBUF_NODISCARD std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // string ip = 6;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 realm = 1;
  void clear_realm();
  uint32_t realm() const;
  void set_realm(uint32_t value);
  private:
  uint32_t _internal_realm() const;
  void _internal_set_realm(uint32_t value);
  public:

  // .common.EndPointType type = 2;
  void clear_type();
  ::common::EndPointType type() const;
  void set_type(::common::EndPointType value);
  private:
  ::common::EndPointType _internal_type() const;
  void _internal_set_type(::common::EndPointType value);
  public:

  // uint32 id = 3;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 port = 7;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 codec_type = 8;
  void clear_codec_type();
  uint32_t codec_type() const;
  void set_codec_type(uint32_t value);
  private:
  uint32_t _internal_codec_type() const;
  void _internal_set_codec_type(uint32_t value);
  public:

  // uint32 mask_flag = 9;
  void clear_mask_flag();
  uint32_t mask_flag() const;
  void set_mask_flag(uint32_t value);
  private:
  uint32_t _internal_mask_flag() const;
  void _internal_set_mask_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.EndPointInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t realm_;
    int type_;
    uint32_t id_;
    uint32_t port_;
    uint32_t codec_type_;
    uint32_t mask_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class ConnectDialResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.ConnectDialResult) */ {
 public:
  inline ConnectDialResult() : ConnectDialResult(nullptr) {}
  ~ConnectDialResult() override;
  explicit PROTOBUF_CONSTEXPR ConnectDialResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectDialResult(const ConnectDialResult& from);
  ConnectDialResult(ConnectDialResult&& from) noexcept
    : ConnectDialResult() {
    *this = ::std::move(from);
  }

  inline ConnectDialResult& operator=(const ConnectDialResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectDialResult& operator=(ConnectDialResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectDialResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectDialResult* internal_default_instance() {
    return reinterpret_cast<const ConnectDialResult*>(
               &_ConnectDialResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectDialResult& a, ConnectDialResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectDialResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectDialResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectDialResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectDialResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectDialResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectDialResult& from) {
    ConnectDialResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectDialResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.ConnectDialResult";
  }
  protected:
  explicit ConnectDialResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalIpFieldNumber = 3,
    kSerialNumFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string local_ip = 3;
  void clear_local_ip();
  const std::string& local_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_ip();
  PROTOBUF_NODISCARD std::string* release_local_ip();
  void set_allocated_local_ip(std::string* local_ip);
  private:
  const std::string& _internal_local_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_ip(const std::string& value);
  std::string* _internal_mutable_local_ip();
  public:

  // uint64 serial_num = 1;
  void clear_serial_num();
  uint64_t serial_num() const;
  void set_serial_num(uint64_t value);
  private:
  uint64_t _internal_serial_num() const;
  void _internal_set_serial_num(uint64_t value);
  public:

  // uint32 result = 2;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.ConnectDialResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_ip_;
    uint64_t serial_num_;
    uint32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_REGISTER_INSTANCE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_REQUEST_REGISTER_INSTANCE) */ {
 public:
  inline MSG_REQUEST_REGISTER_INSTANCE() : MSG_REQUEST_REGISTER_INSTANCE(nullptr) {}
  ~MSG_REQUEST_REGISTER_INSTANCE() override;
  explicit PROTOBUF_CONSTEXPR MSG_REQUEST_REGISTER_INSTANCE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_REQUEST_REGISTER_INSTANCE(const MSG_REQUEST_REGISTER_INSTANCE& from);
  MSG_REQUEST_REGISTER_INSTANCE(MSG_REQUEST_REGISTER_INSTANCE&& from) noexcept
    : MSG_REQUEST_REGISTER_INSTANCE() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_REGISTER_INSTANCE& operator=(const MSG_REQUEST_REGISTER_INSTANCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_REGISTER_INSTANCE& operator=(MSG_REQUEST_REGISTER_INSTANCE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_REQUEST_REGISTER_INSTANCE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_REQUEST_REGISTER_INSTANCE* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_REGISTER_INSTANCE*>(
               &_MSG_REQUEST_REGISTER_INSTANCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_REQUEST_REGISTER_INSTANCE& a, MSG_REQUEST_REGISTER_INSTANCE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_REGISTER_INSTANCE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_REQUEST_REGISTER_INSTANCE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_REQUEST_REGISTER_INSTANCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_REQUEST_REGISTER_INSTANCE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_REQUEST_REGISTER_INSTANCE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MSG_REQUEST_REGISTER_INSTANCE& from) {
    MSG_REQUEST_REGISTER_INSTANCE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_REQUEST_REGISTER_INSTANCE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_REQUEST_REGISTER_INSTANCE";
  }
  protected:
  explicit MSG_REQUEST_REGISTER_INSTANCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kInstanceFieldNumber = 1,
  };
  // string auth = 2;
  void clear_auth();
  const std::string& auth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth();
  PROTOBUF_NODISCARD std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // .service_discovery.EndPointInstance instance = 1;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::service_discovery::EndPointInstance& instance() const;
  PROTOBUF_NODISCARD ::service_discovery::EndPointInstance* release_instance();
  ::service_discovery::EndPointInstance* mutable_instance();
  void set_allocated_instance(::service_discovery::EndPointInstance* instance);
  private:
  const ::service_discovery::EndPointInstance& _internal_instance() const;
  ::service_discovery::EndPointInstance* _internal_mutable_instance();
  public:
  void unsafe_arena_set_allocated_instance(
      ::service_discovery::EndPointInstance* instance);
  ::service_discovery::EndPointInstance* unsafe_arena_release_instance();

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_REQUEST_REGISTER_INSTANCE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
    ::service_discovery::EndPointInstance* instance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_REGISTER_INSTANCE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE) */ {
 public:
  inline MSG_RESPONSE_REGISTER_INSTANCE() : MSG_RESPONSE_REGISTER_INSTANCE(nullptr) {}
  ~MSG_RESPONSE_REGISTER_INSTANCE() override;
  explicit PROTOBUF_CONSTEXPR MSG_RESPONSE_REGISTER_INSTANCE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_RESPONSE_REGISTER_INSTANCE(const MSG_RESPONSE_REGISTER_INSTANCE& from);
  MSG_RESPONSE_REGISTER_INSTANCE(MSG_RESPONSE_REGISTER_INSTANCE&& from) noexcept
    : MSG_RESPONSE_REGISTER_INSTANCE() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_REGISTER_INSTANCE& operator=(const MSG_RESPONSE_REGISTER_INSTANCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_REGISTER_INSTANCE& operator=(MSG_RESPONSE_REGISTER_INSTANCE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_RESPONSE_REGISTER_INSTANCE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_RESPONSE_REGISTER_INSTANCE* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_REGISTER_INSTANCE*>(
               &_MSG_RESPONSE_REGISTER_INSTANCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_RESPONSE_REGISTER_INSTANCE& a, MSG_RESPONSE_REGISTER_INSTANCE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_REGISTER_INSTANCE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_RESPONSE_REGISTER_INSTANCE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_RESPONSE_REGISTER_INSTANCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_RESPONSE_REGISTER_INSTANCE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_RESPONSE_REGISTER_INSTANCE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MSG_RESPONSE_REGISTER_INSTANCE& from) {
    MSG_RESPONSE_REGISTER_INSTANCE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_REGISTER_INSTANCE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_RESPONSE_REGISTER_INSTANCE";
  }
  protected:
  explicit MSG_RESPONSE_REGISTER_INSTANCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenersConfigFieldNumber = 2,
    kMysqlConfigFieldNumber = 3,
    kNatsConfigFieldNumber = 4,
    kRedisConfigFieldNumber = 5,
    kStatusCodeFieldNumber = 1,
  };
  // string listeners_config = 2;
  void clear_listeners_config();
  const std::string& listeners_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listeners_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listeners_config();
  PROTOBUF_NODISCARD std::string* release_listeners_config();
  void set_allocated_listeners_config(std::string* listeners_config);
  private:
  const std::string& _internal_listeners_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listeners_config(const std::string& value);
  std::string* _internal_mutable_listeners_config();
  public:

  // string mysql_config = 3;
  void clear_mysql_config();
  const std::string& mysql_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mysql_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mysql_config();
  PROTOBUF_NODISCARD std::string* release_mysql_config();
  void set_allocated_mysql_config(std::string* mysql_config);
  private:
  const std::string& _internal_mysql_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mysql_config(const std::string& value);
  std::string* _internal_mutable_mysql_config();
  public:

  // string nats_config = 4;
  void clear_nats_config();
  const std::string& nats_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nats_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nats_config();
  PROTOBUF_NODISCARD std::string* release_nats_config();
  void set_allocated_nats_config(std::string* nats_config);
  private:
  const std::string& _internal_nats_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nats_config(const std::string& value);
  std::string* _internal_mutable_nats_config();
  public:

  // string redis_config = 5;
  void clear_redis_config();
  const std::string& redis_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redis_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redis_config();
  PROTOBUF_NODISCARD std::string* release_redis_config();
  void set_allocated_redis_config(std::string* redis_config);
  private:
  const std::string& _internal_redis_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redis_config(const std::string& value);
  std::string* _internal_mutable_redis_config();
  public:

  // uint32 status_code = 1;
  void clear_status_code();
  uint32_t status_code() const;
  void set_status_code(uint32_t value);
  private:
  uint32_t _internal_status_code() const;
  void _internal_set_status_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listeners_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mysql_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nats_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redis_config_;
    uint32_t status_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_NOTICE_INSTANCE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_NOTICE_INSTANCE) */ {
 public:
  inline MSG_NOTICE_INSTANCE() : MSG_NOTICE_INSTANCE(nullptr) {}
  ~MSG_NOTICE_INSTANCE() override;
  explicit PROTOBUF_CONSTEXPR MSG_NOTICE_INSTANCE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NOTICE_INSTANCE(const MSG_NOTICE_INSTANCE& from);
  MSG_NOTICE_INSTANCE(MSG_NOTICE_INSTANCE&& from) noexcept
    : MSG_NOTICE_INSTANCE() {
    *this = ::std::move(from);
  }

  inline MSG_NOTICE_INSTANCE& operator=(const MSG_NOTICE_INSTANCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NOTICE_INSTANCE& operator=(MSG_NOTICE_INSTANCE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NOTICE_INSTANCE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NOTICE_INSTANCE* internal_default_instance() {
    return reinterpret_cast<const MSG_NOTICE_INSTANCE*>(
               &_MSG_NOTICE_INSTANCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_NOTICE_INSTANCE& a, MSG_NOTICE_INSTANCE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NOTICE_INSTANCE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NOTICE_INSTANCE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NOTICE_INSTANCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NOTICE_INSTANCE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NOTICE_INSTANCE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MSG_NOTICE_INSTANCE& from) {
    MSG_NOTICE_INSTANCE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NOTICE_INSTANCE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_NOTICE_INSTANCE";
  }
  protected:
  explicit MSG_NOTICE_INSTANCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddInstanceFieldNumber = 5,
    kDeleteInstanceFieldNumber = 6,
    kUpdateInstanceFieldNumber = 7,
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kStatusFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // repeated .service_discovery.EndPointInstance add_instance = 5;
  int add_instance_size() const;
  private:
  int _internal_add_instance_size() const;
  public:
  void clear_add_instance();
  ::service_discovery::EndPointInstance* mutable_add_instance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
      mutable_add_instance();
  private:
  const ::service_discovery::EndPointInstance& _internal_add_instance(int index) const;
  ::service_discovery::EndPointInstance* _internal_add_add_instance();
  public:
  const ::service_discovery::EndPointInstance& add_instance(int index) const;
  ::service_discovery::EndPointInstance* add_add_instance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
      add_instance() const;

  // repeated .service_discovery.EndPointInstance delete_instance = 6;
  int delete_instance_size() const;
  private:
  int _internal_delete_instance_size() const;
  public:
  void clear_delete_instance();
  ::service_discovery::EndPointInstance* mutable_delete_instance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
      mutable_delete_instance();
  private:
  const ::service_discovery::EndPointInstance& _internal_delete_instance(int index) const;
  ::service_discovery::EndPointInstance* _internal_add_delete_instance();
  public:
  const ::service_discovery::EndPointInstance& delete_instance(int index) const;
  ::service_discovery::EndPointInstance* add_delete_instance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
      delete_instance() const;

  // repeated .service_discovery.EndPointInstance update_instance = 7;
  int update_instance_size() const;
  private:
  int _internal_update_instance_size() const;
  public:
  void clear_update_instance();
  ::service_discovery::EndPointInstance* mutable_update_instance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
      mutable_update_instance();
  private:
  const ::service_discovery::EndPointInstance& _internal_update_instance(int index) const;
  ::service_discovery::EndPointInstance* _internal_add_update_instance();
  public:
  const ::service_discovery::EndPointInstance& update_instance(int index) const;
  ::service_discovery::EndPointInstance* add_update_instance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
      update_instance() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 version = 2;
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // .service_discovery.RegistryStatus status = 3;
  void clear_status();
  ::service_discovery::RegistryStatus status() const;
  void set_status(::service_discovery::RegistryStatus value);
  private:
  ::service_discovery::RegistryStatus _internal_status() const;
  void _internal_set_status(::service_discovery::RegistryStatus value);
  public:

  // .service_discovery.UpdateMode mode = 4;
  void clear_mode();
  ::service_discovery::UpdateMode mode() const;
  void set_mode(::service_discovery::UpdateMode value);
  private:
  ::service_discovery::UpdateMode _internal_mode() const;
  void _internal_set_mode(::service_discovery::UpdateMode value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_NOTICE_INSTANCE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance > add_instance_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance > delete_instance_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance > update_instance_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    uint64_t version_;
    int status_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_REQUEST_HEARTBEAT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_discovery.MSG_REQUEST_HEARTBEAT) */ {
 public:
  inline MSG_REQUEST_HEARTBEAT() : MSG_REQUEST_HEARTBEAT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MSG_REQUEST_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_REQUEST_HEARTBEAT(const MSG_REQUEST_HEARTBEAT& from);
  MSG_REQUEST_HEARTBEAT(MSG_REQUEST_HEARTBEAT&& from) noexcept
    : MSG_REQUEST_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline MSG_REQUEST_HEARTBEAT& operator=(const MSG_REQUEST_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_REQUEST_HEARTBEAT& operator=(MSG_REQUEST_HEARTBEAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_REQUEST_HEARTBEAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_REQUEST_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const MSG_REQUEST_HEARTBEAT*>(
               &_MSG_REQUEST_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_REQUEST_HEARTBEAT& a, MSG_REQUEST_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_REQUEST_HEARTBEAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_REQUEST_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_REQUEST_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_REQUEST_HEARTBEAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MSG_REQUEST_HEARTBEAT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MSG_REQUEST_HEARTBEAT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_REQUEST_HEARTBEAT";
  }
  protected:
  explicit MSG_REQUEST_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_REQUEST_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class MSG_RESPONSE_HEARTBEAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_discovery.MSG_RESPONSE_HEARTBEAT) */ {
 public:
  inline MSG_RESPONSE_HEARTBEAT() : MSG_RESPONSE_HEARTBEAT(nullptr) {}
  ~MSG_RESPONSE_HEARTBEAT() override;
  explicit PROTOBUF_CONSTEXPR MSG_RESPONSE_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_RESPONSE_HEARTBEAT(const MSG_RESPONSE_HEARTBEAT& from);
  MSG_RESPONSE_HEARTBEAT(MSG_RESPONSE_HEARTBEAT&& from) noexcept
    : MSG_RESPONSE_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline MSG_RESPONSE_HEARTBEAT& operator=(const MSG_RESPONSE_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RESPONSE_HEARTBEAT& operator=(MSG_RESPONSE_HEARTBEAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_RESPONSE_HEARTBEAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_RESPONSE_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const MSG_RESPONSE_HEARTBEAT*>(
               &_MSG_RESPONSE_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_RESPONSE_HEARTBEAT& a, MSG_RESPONSE_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RESPONSE_HEARTBEAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_RESPONSE_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_RESPONSE_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_RESPONSE_HEARTBEAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_RESPONSE_HEARTBEAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MSG_RESPONSE_HEARTBEAT& from) {
    MSG_RESPONSE_HEARTBEAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RESPONSE_HEARTBEAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_discovery.MSG_RESPONSE_HEARTBEAT";
  }
  protected:
  explicit MSG_RESPONSE_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // uint32 status_code = 1;
  void clear_status_code();
  uint32_t status_code() const;
  void set_status_code(uint32_t value);
  private:
  uint32_t _internal_status_code() const;
  void _internal_set_status_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_discovery.MSG_RESPONSE_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t status_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EndPointInstance

// uint32 realm = 1;
inline void EndPointInstance::clear_realm() {
  _impl_.realm_ = 0u;
}
inline uint32_t EndPointInstance::_internal_realm() const {
  return _impl_.realm_;
}
inline uint32_t EndPointInstance::realm() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.realm)
  return _internal_realm();
}
inline void EndPointInstance::_internal_set_realm(uint32_t value) {
  
  _impl_.realm_ = value;
}
inline void EndPointInstance::set_realm(uint32_t value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.realm)
}

// .common.EndPointType type = 2;
inline void EndPointInstance::clear_type() {
  _impl_.type_ = 0;
}
inline ::common::EndPointType EndPointInstance::_internal_type() const {
  return static_cast< ::common::EndPointType >(_impl_.type_);
}
inline ::common::EndPointType EndPointInstance::type() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.type)
  return _internal_type();
}
inline void EndPointInstance::_internal_set_type(::common::EndPointType value) {
  
  _impl_.type_ = value;
}
inline void EndPointInstance::set_type(::common::EndPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.type)
}

// uint32 id = 3;
inline void EndPointInstance::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t EndPointInstance::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t EndPointInstance::id() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.id)
  return _internal_id();
}
inline void EndPointInstance::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void EndPointInstance::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.id)
}

// string actor_id = 4;
inline void EndPointInstance::clear_actor_id() {
  _impl_.actor_id_.ClearToEmpty();
}
inline const std::string& EndPointInstance::actor_id() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.actor_id)
  return _internal_actor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EndPointInstance::set_actor_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.actor_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.actor_id)
}
inline std::string* EndPointInstance::mutable_actor_id() {
  std::string* _s = _internal_mutable_actor_id();
  // @@protoc_insertion_point(field_mutable:service_discovery.EndPointInstance.actor_id)
  return _s;
}
inline const std::string& EndPointInstance::_internal_actor_id() const {
  return _impl_.actor_id_.Get();
}
inline void EndPointInstance::_internal_set_actor_id(const std::string& value) {
  
  _impl_.actor_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EndPointInstance::_internal_mutable_actor_id() {
  
  return _impl_.actor_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EndPointInstance::release_actor_id() {
  // @@protoc_insertion_point(field_release:service_discovery.EndPointInstance.actor_id)
  return _impl_.actor_id_.Release();
}
inline void EndPointInstance::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  _impl_.actor_id_.SetAllocated(actor_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.actor_id_.IsDefault()) {
    _impl_.actor_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.EndPointInstance.actor_id)
}

// string auth = 5;
inline void EndPointInstance::clear_auth() {
  _impl_.auth_.ClearToEmpty();
}
inline const std::string& EndPointInstance::auth() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.auth)
  return _internal_auth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EndPointInstance::set_auth(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.auth)
}
inline std::string* EndPointInstance::mutable_auth() {
  std::string* _s = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:service_discovery.EndPointInstance.auth)
  return _s;
}
inline const std::string& EndPointInstance::_internal_auth() const {
  return _impl_.auth_.Get();
}
inline void EndPointInstance::_internal_set_auth(const std::string& value) {
  
  _impl_.auth_.Set(value, GetArenaForAllocation());
}
inline std::string* EndPointInstance::_internal_mutable_auth() {
  
  return _impl_.auth_.Mutable(GetArenaForAllocation());
}
inline std::string* EndPointInstance::release_auth() {
  // @@protoc_insertion_point(field_release:service_discovery.EndPointInstance.auth)
  return _impl_.auth_.Release();
}
inline void EndPointInstance::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  _impl_.auth_.SetAllocated(auth, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_.IsDefault()) {
    _impl_.auth_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.EndPointInstance.auth)
}

// string ip = 6;
inline void EndPointInstance::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& EndPointInstance::ip() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EndPointInstance::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.ip)
}
inline std::string* EndPointInstance::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:service_discovery.EndPointInstance.ip)
  return _s;
}
inline const std::string& EndPointInstance::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void EndPointInstance::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* EndPointInstance::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* EndPointInstance::release_ip() {
  // @@protoc_insertion_point(field_release:service_discovery.EndPointInstance.ip)
  return _impl_.ip_.Release();
}
inline void EndPointInstance::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.EndPointInstance.ip)
}

// uint32 port = 7;
inline void EndPointInstance::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t EndPointInstance::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t EndPointInstance::port() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.port)
  return _internal_port();
}
inline void EndPointInstance::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void EndPointInstance::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.port)
}

// uint32 codec_type = 8;
inline void EndPointInstance::clear_codec_type() {
  _impl_.codec_type_ = 0u;
}
inline uint32_t EndPointInstance::_internal_codec_type() const {
  return _impl_.codec_type_;
}
inline uint32_t EndPointInstance::codec_type() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.codec_type)
  return _internal_codec_type();
}
inline void EndPointInstance::_internal_set_codec_type(uint32_t value) {
  
  _impl_.codec_type_ = value;
}
inline void EndPointInstance::set_codec_type(uint32_t value) {
  _internal_set_codec_type(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.codec_type)
}

// uint32 mask_flag = 9;
inline void EndPointInstance::clear_mask_flag() {
  _impl_.mask_flag_ = 0u;
}
inline uint32_t EndPointInstance::_internal_mask_flag() const {
  return _impl_.mask_flag_;
}
inline uint32_t EndPointInstance::mask_flag() const {
  // @@protoc_insertion_point(field_get:service_discovery.EndPointInstance.mask_flag)
  return _internal_mask_flag();
}
inline void EndPointInstance::_internal_set_mask_flag(uint32_t value) {
  
  _impl_.mask_flag_ = value;
}
inline void EndPointInstance::set_mask_flag(uint32_t value) {
  _internal_set_mask_flag(value);
  // @@protoc_insertion_point(field_set:service_discovery.EndPointInstance.mask_flag)
}

// -------------------------------------------------------------------

// ConnectDialResult

// uint64 serial_num = 1;
inline void ConnectDialResult::clear_serial_num() {
  _impl_.serial_num_ = uint64_t{0u};
}
inline uint64_t ConnectDialResult::_internal_serial_num() const {
  return _impl_.serial_num_;
}
inline uint64_t ConnectDialResult::serial_num() const {
  // @@protoc_insertion_point(field_get:service_discovery.ConnectDialResult.serial_num)
  return _internal_serial_num();
}
inline void ConnectDialResult::_internal_set_serial_num(uint64_t value) {
  
  _impl_.serial_num_ = value;
}
inline void ConnectDialResult::set_serial_num(uint64_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:service_discovery.ConnectDialResult.serial_num)
}

// uint32 result = 2;
inline void ConnectDialResult::clear_result() {
  _impl_.result_ = 0u;
}
inline uint32_t ConnectDialResult::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t ConnectDialResult::result() const {
  // @@protoc_insertion_point(field_get:service_discovery.ConnectDialResult.result)
  return _internal_result();
}
inline void ConnectDialResult::_internal_set_result(uint32_t value) {
  
  _impl_.result_ = value;
}
inline void ConnectDialResult::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:service_discovery.ConnectDialResult.result)
}

// string local_ip = 3;
inline void ConnectDialResult::clear_local_ip() {
  _impl_.local_ip_.ClearToEmpty();
}
inline const std::string& ConnectDialResult::local_ip() const {
  // @@protoc_insertion_point(field_get:service_discovery.ConnectDialResult.local_ip)
  return _internal_local_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectDialResult::set_local_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.local_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.ConnectDialResult.local_ip)
}
inline std::string* ConnectDialResult::mutable_local_ip() {
  std::string* _s = _internal_mutable_local_ip();
  // @@protoc_insertion_point(field_mutable:service_discovery.ConnectDialResult.local_ip)
  return _s;
}
inline const std::string& ConnectDialResult::_internal_local_ip() const {
  return _impl_.local_ip_.Get();
}
inline void ConnectDialResult::_internal_set_local_ip(const std::string& value) {
  
  _impl_.local_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectDialResult::_internal_mutable_local_ip() {
  
  return _impl_.local_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectDialResult::release_local_ip() {
  // @@protoc_insertion_point(field_release:service_discovery.ConnectDialResult.local_ip)
  return _impl_.local_ip_.Release();
}
inline void ConnectDialResult::set_allocated_local_ip(std::string* local_ip) {
  if (local_ip != nullptr) {
    
  } else {
    
  }
  _impl_.local_ip_.SetAllocated(local_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_ip_.IsDefault()) {
    _impl_.local_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.ConnectDialResult.local_ip)
}

// -------------------------------------------------------------------

// MSG_REQUEST_REGISTER_INSTANCE

// .service_discovery.EndPointInstance instance = 1;
inline bool MSG_REQUEST_REGISTER_INSTANCE::_internal_has_instance() const {
  return this != internal_default_instance() && _impl_.instance_ != nullptr;
}
inline bool MSG_REQUEST_REGISTER_INSTANCE::has_instance() const {
  return _internal_has_instance();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::clear_instance() {
  if (GetArenaForAllocation() == nullptr && _impl_.instance_ != nullptr) {
    delete _impl_.instance_;
  }
  _impl_.instance_ = nullptr;
}
inline const ::service_discovery::EndPointInstance& MSG_REQUEST_REGISTER_INSTANCE::_internal_instance() const {
  const ::service_discovery::EndPointInstance* p = _impl_.instance_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_discovery::EndPointInstance&>(
      ::service_discovery::_EndPointInstance_default_instance_);
}
inline const ::service_discovery::EndPointInstance& MSG_REQUEST_REGISTER_INSTANCE::instance() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
  return _internal_instance();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::unsafe_arena_set_allocated_instance(
    ::service_discovery::EndPointInstance* instance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instance_);
  }
  _impl_.instance_ = instance;
  if (instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
}
inline ::service_discovery::EndPointInstance* MSG_REQUEST_REGISTER_INSTANCE::release_instance() {
  
  ::service_discovery::EndPointInstance* temp = _impl_.instance_;
  _impl_.instance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_discovery::EndPointInstance* MSG_REQUEST_REGISTER_INSTANCE::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
  
  ::service_discovery::EndPointInstance* temp = _impl_.instance_;
  _impl_.instance_ = nullptr;
  return temp;
}
inline ::service_discovery::EndPointInstance* MSG_REQUEST_REGISTER_INSTANCE::_internal_mutable_instance() {
  
  if (_impl_.instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_discovery::EndPointInstance>(GetArenaForAllocation());
    _impl_.instance_ = p;
  }
  return _impl_.instance_;
}
inline ::service_discovery::EndPointInstance* MSG_REQUEST_REGISTER_INSTANCE::mutable_instance() {
  ::service_discovery::EndPointInstance* _msg = _internal_mutable_instance();
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
  return _msg;
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_allocated_instance(::service_discovery::EndPointInstance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.instance_;
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(instance);
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.instance)
}

// string auth = 2;
inline void MSG_REQUEST_REGISTER_INSTANCE::clear_auth() {
  _impl_.auth_.ClearToEmpty();
}
inline const std::string& MSG_REQUEST_REGISTER_INSTANCE::auth() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
  return _internal_auth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_REQUEST_REGISTER_INSTANCE::set_auth(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
}
inline std::string* MSG_REQUEST_REGISTER_INSTANCE::mutable_auth() {
  std::string* _s = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
  return _s;
}
inline const std::string& MSG_REQUEST_REGISTER_INSTANCE::_internal_auth() const {
  return _impl_.auth_.Get();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::_internal_set_auth(const std::string& value) {
  
  _impl_.auth_.Set(value, GetArenaForAllocation());
}
inline std::string* MSG_REQUEST_REGISTER_INSTANCE::_internal_mutable_auth() {
  
  return _impl_.auth_.Mutable(GetArenaForAllocation());
}
inline std::string* MSG_REQUEST_REGISTER_INSTANCE::release_auth() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
  return _impl_.auth_.Release();
}
inline void MSG_REQUEST_REGISTER_INSTANCE::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  _impl_.auth_.SetAllocated(auth, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_.IsDefault()) {
    _impl_.auth_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_REQUEST_REGISTER_INSTANCE.auth)
}

// -------------------------------------------------------------------

// MSG_RESPONSE_REGISTER_INSTANCE

// uint32 status_code = 1;
inline void MSG_RESPONSE_REGISTER_INSTANCE::clear_status_code() {
  _impl_.status_code_ = 0u;
}
inline uint32_t MSG_RESPONSE_REGISTER_INSTANCE::_internal_status_code() const {
  return _impl_.status_code_;
}
inline uint32_t MSG_RESPONSE_REGISTER_INSTANCE::status_code() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.status_code)
  return _internal_status_code();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::_internal_set_status_code(uint32_t value) {
  
  _impl_.status_code_ = value;
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::set_status_code(uint32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.status_code)
}

// string listeners_config = 2;
inline void MSG_RESPONSE_REGISTER_INSTANCE::clear_listeners_config() {
  _impl_.listeners_config_.ClearToEmpty();
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::listeners_config() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.listeners_config)
  return _internal_listeners_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_RESPONSE_REGISTER_INSTANCE::set_listeners_config(ArgT0&& arg0, ArgT... args) {
 
 _impl_.listeners_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.listeners_config)
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::mutable_listeners_config() {
  std::string* _s = _internal_mutable_listeners_config();
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.listeners_config)
  return _s;
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::_internal_listeners_config() const {
  return _impl_.listeners_config_.Get();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::_internal_set_listeners_config(const std::string& value) {
  
  _impl_.listeners_config_.Set(value, GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::_internal_mutable_listeners_config() {
  
  return _impl_.listeners_config_.Mutable(GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::release_listeners_config() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.listeners_config)
  return _impl_.listeners_config_.Release();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::set_allocated_listeners_config(std::string* listeners_config) {
  if (listeners_config != nullptr) {
    
  } else {
    
  }
  _impl_.listeners_config_.SetAllocated(listeners_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listeners_config_.IsDefault()) {
    _impl_.listeners_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.listeners_config)
}

// string mysql_config = 3;
inline void MSG_RESPONSE_REGISTER_INSTANCE::clear_mysql_config() {
  _impl_.mysql_config_.ClearToEmpty();
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::mysql_config() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.mysql_config)
  return _internal_mysql_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_RESPONSE_REGISTER_INSTANCE::set_mysql_config(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mysql_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.mysql_config)
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::mutable_mysql_config() {
  std::string* _s = _internal_mutable_mysql_config();
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.mysql_config)
  return _s;
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::_internal_mysql_config() const {
  return _impl_.mysql_config_.Get();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::_internal_set_mysql_config(const std::string& value) {
  
  _impl_.mysql_config_.Set(value, GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::_internal_mutable_mysql_config() {
  
  return _impl_.mysql_config_.Mutable(GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::release_mysql_config() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.mysql_config)
  return _impl_.mysql_config_.Release();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::set_allocated_mysql_config(std::string* mysql_config) {
  if (mysql_config != nullptr) {
    
  } else {
    
  }
  _impl_.mysql_config_.SetAllocated(mysql_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mysql_config_.IsDefault()) {
    _impl_.mysql_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.mysql_config)
}

// string nats_config = 4;
inline void MSG_RESPONSE_REGISTER_INSTANCE::clear_nats_config() {
  _impl_.nats_config_.ClearToEmpty();
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::nats_config() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.nats_config)
  return _internal_nats_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_RESPONSE_REGISTER_INSTANCE::set_nats_config(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nats_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.nats_config)
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::mutable_nats_config() {
  std::string* _s = _internal_mutable_nats_config();
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.nats_config)
  return _s;
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::_internal_nats_config() const {
  return _impl_.nats_config_.Get();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::_internal_set_nats_config(const std::string& value) {
  
  _impl_.nats_config_.Set(value, GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::_internal_mutable_nats_config() {
  
  return _impl_.nats_config_.Mutable(GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::release_nats_config() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.nats_config)
  return _impl_.nats_config_.Release();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::set_allocated_nats_config(std::string* nats_config) {
  if (nats_config != nullptr) {
    
  } else {
    
  }
  _impl_.nats_config_.SetAllocated(nats_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nats_config_.IsDefault()) {
    _impl_.nats_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.nats_config)
}

// string redis_config = 5;
inline void MSG_RESPONSE_REGISTER_INSTANCE::clear_redis_config() {
  _impl_.redis_config_.ClearToEmpty();
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::redis_config() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.redis_config)
  return _internal_redis_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_RESPONSE_REGISTER_INSTANCE::set_redis_config(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redis_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.redis_config)
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::mutable_redis_config() {
  std::string* _s = _internal_mutable_redis_config();
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.redis_config)
  return _s;
}
inline const std::string& MSG_RESPONSE_REGISTER_INSTANCE::_internal_redis_config() const {
  return _impl_.redis_config_.Get();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::_internal_set_redis_config(const std::string& value) {
  
  _impl_.redis_config_.Set(value, GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::_internal_mutable_redis_config() {
  
  return _impl_.redis_config_.Mutable(GetArenaForAllocation());
}
inline std::string* MSG_RESPONSE_REGISTER_INSTANCE::release_redis_config() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.redis_config)
  return _impl_.redis_config_.Release();
}
inline void MSG_RESPONSE_REGISTER_INSTANCE::set_allocated_redis_config(std::string* redis_config) {
  if (redis_config != nullptr) {
    
  } else {
    
  }
  _impl_.redis_config_.SetAllocated(redis_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redis_config_.IsDefault()) {
    _impl_.redis_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_RESPONSE_REGISTER_INSTANCE.redis_config)
}

// -------------------------------------------------------------------

// MSG_NOTICE_INSTANCE

// string id = 1;
inline void MSG_NOTICE_INSTANCE::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& MSG_NOTICE_INSTANCE::id() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_NOTICE_INSTANCE::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.id)
}
inline std::string* MSG_NOTICE_INSTANCE::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.id)
  return _s;
}
inline const std::string& MSG_NOTICE_INSTANCE::_internal_id() const {
  return _impl_.id_.Get();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* MSG_NOTICE_INSTANCE::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* MSG_NOTICE_INSTANCE::release_id() {
  // @@protoc_insertion_point(field_release:service_discovery.MSG_NOTICE_INSTANCE.id)
  return _impl_.id_.Release();
}
inline void MSG_NOTICE_INSTANCE::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_discovery.MSG_NOTICE_INSTANCE.id)
}

// uint64 version = 2;
inline void MSG_NOTICE_INSTANCE::clear_version() {
  _impl_.version_ = uint64_t{0u};
}
inline uint64_t MSG_NOTICE_INSTANCE::_internal_version() const {
  return _impl_.version_;
}
inline uint64_t MSG_NOTICE_INSTANCE::version() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.version)
  return _internal_version();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_version(uint64_t value) {
  
  _impl_.version_ = value;
}
inline void MSG_NOTICE_INSTANCE::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.version)
}

// .service_discovery.RegistryStatus status = 3;
inline void MSG_NOTICE_INSTANCE::clear_status() {
  _impl_.status_ = 0;
}
inline ::service_discovery::RegistryStatus MSG_NOTICE_INSTANCE::_internal_status() const {
  return static_cast< ::service_discovery::RegistryStatus >(_impl_.status_);
}
inline ::service_discovery::RegistryStatus MSG_NOTICE_INSTANCE::status() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.status)
  return _internal_status();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_status(::service_discovery::RegistryStatus value) {
  
  _impl_.status_ = value;
}
inline void MSG_NOTICE_INSTANCE::set_status(::service_discovery::RegistryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.status)
}

// .service_discovery.UpdateMode mode = 4;
inline void MSG_NOTICE_INSTANCE::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::service_discovery::UpdateMode MSG_NOTICE_INSTANCE::_internal_mode() const {
  return static_cast< ::service_discovery::UpdateMode >(_impl_.mode_);
}
inline ::service_discovery::UpdateMode MSG_NOTICE_INSTANCE::mode() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.mode)
  return _internal_mode();
}
inline void MSG_NOTICE_INSTANCE::_internal_set_mode(::service_discovery::UpdateMode value) {
  
  _impl_.mode_ = value;
}
inline void MSG_NOTICE_INSTANCE::set_mode(::service_discovery::UpdateMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_NOTICE_INSTANCE.mode)
}

// repeated .service_discovery.EndPointInstance add_instance = 5;
inline int MSG_NOTICE_INSTANCE::_internal_add_instance_size() const {
  return _impl_.add_instance_.size();
}
inline int MSG_NOTICE_INSTANCE::add_instance_size() const {
  return _internal_add_instance_size();
}
inline void MSG_NOTICE_INSTANCE::clear_add_instance() {
  _impl_.add_instance_.Clear();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::mutable_add_instance(int index) {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return _impl_.add_instance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
MSG_NOTICE_INSTANCE::mutable_add_instance() {
  // @@protoc_insertion_point(field_mutable_list:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return &_impl_.add_instance_;
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::_internal_add_instance(int index) const {
  return _impl_.add_instance_.Get(index);
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::add_instance(int index) const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return _internal_add_instance(index);
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::_internal_add_add_instance() {
  return _impl_.add_instance_.Add();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::add_add_instance() {
  ::service_discovery::EndPointInstance* _add = _internal_add_add_instance();
  // @@protoc_insertion_point(field_add:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
MSG_NOTICE_INSTANCE::add_instance() const {
  // @@protoc_insertion_point(field_list:service_discovery.MSG_NOTICE_INSTANCE.add_instance)
  return _impl_.add_instance_;
}

// repeated .service_discovery.EndPointInstance delete_instance = 6;
inline int MSG_NOTICE_INSTANCE::_internal_delete_instance_size() const {
  return _impl_.delete_instance_.size();
}
inline int MSG_NOTICE_INSTANCE::delete_instance_size() const {
  return _internal_delete_instance_size();
}
inline void MSG_NOTICE_INSTANCE::clear_delete_instance() {
  _impl_.delete_instance_.Clear();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::mutable_delete_instance(int index) {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return _impl_.delete_instance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
MSG_NOTICE_INSTANCE::mutable_delete_instance() {
  // @@protoc_insertion_point(field_mutable_list:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return &_impl_.delete_instance_;
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::_internal_delete_instance(int index) const {
  return _impl_.delete_instance_.Get(index);
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::delete_instance(int index) const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return _internal_delete_instance(index);
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::_internal_add_delete_instance() {
  return _impl_.delete_instance_.Add();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::add_delete_instance() {
  ::service_discovery::EndPointInstance* _add = _internal_add_delete_instance();
  // @@protoc_insertion_point(field_add:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
MSG_NOTICE_INSTANCE::delete_instance() const {
  // @@protoc_insertion_point(field_list:service_discovery.MSG_NOTICE_INSTANCE.delete_instance)
  return _impl_.delete_instance_;
}

// repeated .service_discovery.EndPointInstance update_instance = 7;
inline int MSG_NOTICE_INSTANCE::_internal_update_instance_size() const {
  return _impl_.update_instance_.size();
}
inline int MSG_NOTICE_INSTANCE::update_instance_size() const {
  return _internal_update_instance_size();
}
inline void MSG_NOTICE_INSTANCE::clear_update_instance() {
  _impl_.update_instance_.Clear();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::mutable_update_instance(int index) {
  // @@protoc_insertion_point(field_mutable:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return _impl_.update_instance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >*
MSG_NOTICE_INSTANCE::mutable_update_instance() {
  // @@protoc_insertion_point(field_mutable_list:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return &_impl_.update_instance_;
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::_internal_update_instance(int index) const {
  return _impl_.update_instance_.Get(index);
}
inline const ::service_discovery::EndPointInstance& MSG_NOTICE_INSTANCE::update_instance(int index) const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return _internal_update_instance(index);
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::_internal_add_update_instance() {
  return _impl_.update_instance_.Add();
}
inline ::service_discovery::EndPointInstance* MSG_NOTICE_INSTANCE::add_update_instance() {
  ::service_discovery::EndPointInstance* _add = _internal_add_update_instance();
  // @@protoc_insertion_point(field_add:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_discovery::EndPointInstance >&
MSG_NOTICE_INSTANCE::update_instance() const {
  // @@protoc_insertion_point(field_list:service_discovery.MSG_NOTICE_INSTANCE.update_instance)
  return _impl_.update_instance_;
}

// -------------------------------------------------------------------

// MSG_REQUEST_HEARTBEAT

// -------------------------------------------------------------------

// MSG_RESPONSE_HEARTBEAT

// uint32 status_code = 1;
inline void MSG_RESPONSE_HEARTBEAT::clear_status_code() {
  _impl_.status_code_ = 0u;
}
inline uint32_t MSG_RESPONSE_HEARTBEAT::_internal_status_code() const {
  return _impl_.status_code_;
}
inline uint32_t MSG_RESPONSE_HEARTBEAT::status_code() const {
  // @@protoc_insertion_point(field_get:service_discovery.MSG_RESPONSE_HEARTBEAT.status_code)
  return _internal_status_code();
}
inline void MSG_RESPONSE_HEARTBEAT::_internal_set_status_code(uint32_t value) {
  
  _impl_.status_code_ = value;
}
inline void MSG_RESPONSE_HEARTBEAT::set_status_code(uint32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:service_discovery.MSG_RESPONSE_HEARTBEAT.status_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_discovery

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_discovery::RegistryStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_discovery::RegistryStatus>() {
  return ::service_discovery::RegistryStatus_descriptor();
}
template <> struct is_proto_enum< ::service_discovery::UpdateMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_discovery::UpdateMode>() {
  return ::service_discovery::UpdateMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto
